/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface FeeCollectorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_CONSUMERS"
      | "acceptSubscriptionOwnerTransfer"
      | "addConsumer"
      | "calculateRequestPriceNative"
      | "cancelSubscription"
      | "createSubscription"
      | "disable"
      | "enable"
      | "estimateRequestPriceNative"
      | "fundSubscriptionWithNative"
      | "getActiveSubscriptionIds"
      | "getSubscription"
      | "ownerCancelSubscription"
      | "pendingRequestExists"
      | "removeConsumer"
      | "requestSubscriptionOwnerTransfer"
      | "s_config"
      | "s_configured"
      | "s_currentSubNonce"
      | "s_disabled"
      | "s_totalNativeBalance"
      | "s_withdrawableDirectFundingFeeNative"
      | "s_withdrawableSubscriptionFeeNative"
      | "setConfig"
      | "withdrawDirectFundingFeesNative"
      | "withdrawSubscriptionFeesNative"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ConfigSet"
      | "Disabled"
      | "Enabled"
      | "L1GasFee"
      | "SubscriptionCanceled"
      | "SubscriptionConsumerAdded"
      | "SubscriptionConsumerRemoved"
      | "SubscriptionCreated"
      | "SubscriptionFundedWithNative"
      | "SubscriptionOwnerTransferRequested"
      | "SubscriptionOwnerTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_CONSUMERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptSubscriptionOwnerTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addConsumer",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRequestPriceNative",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSubscription",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createSubscription",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "disable", values?: undefined): string;
  encodeFunctionData(functionFragment: "enable", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "estimateRequestPriceNative",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundSubscriptionWithNative",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveSubscriptionIds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerCancelSubscription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingRequestExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeConsumer",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestSubscriptionOwnerTransfer",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "s_config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "s_configured",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_currentSubNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_disabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_totalNativeBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_withdrawableDirectFundingFeeNative",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_withdrawableSubscriptionFeeNative",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawDirectFundingFeesNative",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSubscriptionFeesNative",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_CONSUMERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptSubscriptionOwnerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRequestPriceNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "disable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "estimateRequestPriceNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundSubscriptionWithNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveSubscriptionIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerCancelSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingRequestExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeConsumer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestSubscriptionOwnerTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "s_config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "s_configured",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_currentSubNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "s_disabled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "s_totalNativeBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_withdrawableDirectFundingFeeNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_withdrawableSubscriptionFeeNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawDirectFundingFeesNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSubscriptionFeesNative",
    data: BytesLike
  ): Result;
}

export namespace ConfigSetEvent {
  export type InputTuple = [
    maxGasLimit: BigNumberish,
    gasAfterPaymentCalculation: BigNumberish,
    fulfillmentFlatFeeNativePPM: BigNumberish,
    weiPerUnitGas: BigNumberish,
    blsPairingCheckOverhead: BigNumberish,
    nativePremiumPercentage: BigNumberish,
    gasForCallExactCheck: BigNumberish
  ];
  export type OutputTuple = [
    maxGasLimit: bigint,
    gasAfterPaymentCalculation: bigint,
    fulfillmentFlatFeeNativePPM: bigint,
    weiPerUnitGas: bigint,
    blsPairingCheckOverhead: bigint,
    nativePremiumPercentage: bigint,
    gasForCallExactCheck: bigint
  ];
  export interface OutputObject {
    maxGasLimit: bigint;
    gasAfterPaymentCalculation: bigint;
    fulfillmentFlatFeeNativePPM: bigint;
    weiPerUnitGas: bigint;
    blsPairingCheckOverhead: bigint;
    nativePremiumPercentage: bigint;
    gasForCallExactCheck: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisabledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnabledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace L1GasFeeEvent {
  export type InputTuple = [fee: BigNumberish];
  export type OutputTuple = [fee: bigint];
  export interface OutputObject {
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionCanceledEvent {
  export type InputTuple = [
    subId: BigNumberish,
    to: AddressLike,
    amountNative: BigNumberish
  ];
  export type OutputTuple = [subId: bigint, to: string, amountNative: bigint];
  export interface OutputObject {
    subId: bigint;
    to: string;
    amountNative: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionConsumerAddedEvent {
  export type InputTuple = [subId: BigNumberish, consumer: AddressLike];
  export type OutputTuple = [subId: bigint, consumer: string];
  export interface OutputObject {
    subId: bigint;
    consumer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionConsumerRemovedEvent {
  export type InputTuple = [subId: BigNumberish, consumer: AddressLike];
  export type OutputTuple = [subId: bigint, consumer: string];
  export interface OutputObject {
    subId: bigint;
    consumer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionCreatedEvent {
  export type InputTuple = [subId: BigNumberish, owner: AddressLike];
  export type OutputTuple = [subId: bigint, owner: string];
  export interface OutputObject {
    subId: bigint;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionFundedWithNativeEvent {
  export type InputTuple = [
    subId: BigNumberish,
    oldNativeBalance: BigNumberish,
    newNativeBalance: BigNumberish
  ];
  export type OutputTuple = [
    subId: bigint,
    oldNativeBalance: bigint,
    newNativeBalance: bigint
  ];
  export interface OutputObject {
    subId: bigint;
    oldNativeBalance: bigint;
    newNativeBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionOwnerTransferRequestedEvent {
  export type InputTuple = [
    subId: BigNumberish,
    from: AddressLike,
    to: AddressLike
  ];
  export type OutputTuple = [subId: bigint, from: string, to: string];
  export interface OutputObject {
    subId: bigint;
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionOwnerTransferredEvent {
  export type InputTuple = [
    subId: BigNumberish,
    from: AddressLike,
    to: AddressLike
  ];
  export type OutputTuple = [subId: bigint, from: string, to: string];
  export interface OutputObject {
    subId: bigint;
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FeeCollector extends BaseContract {
  connect(runner?: ContractRunner | null): FeeCollector;
  waitForDeployment(): Promise<this>;

  interface: FeeCollectorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_CONSUMERS: TypedContractMethod<[], [bigint], "view">;

  acceptSubscriptionOwnerTransfer: TypedContractMethod<
    [subId: BigNumberish],
    [void],
    "nonpayable"
  >;

  addConsumer: TypedContractMethod<
    [subId: BigNumberish, consumer: AddressLike],
    [void],
    "nonpayable"
  >;

  calculateRequestPriceNative: TypedContractMethod<
    [_callbackGasLimit: BigNumberish],
    [bigint],
    "view"
  >;

  cancelSubscription: TypedContractMethod<
    [subId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  createSubscription: TypedContractMethod<[], [bigint], "nonpayable">;

  disable: TypedContractMethod<[], [void], "nonpayable">;

  enable: TypedContractMethod<[], [void], "nonpayable">;

  estimateRequestPriceNative: TypedContractMethod<
    [_callbackGasLimit: BigNumberish, _requestGasPriceWei: BigNumberish],
    [bigint],
    "view"
  >;

  fundSubscriptionWithNative: TypedContractMethod<
    [subId: BigNumberish],
    [void],
    "payable"
  >;

  getActiveSubscriptionIds: TypedContractMethod<
    [startIndex: BigNumberish, maxCount: BigNumberish],
    [bigint[]],
    "view"
  >;

  getSubscription: TypedContractMethod<
    [subId: BigNumberish],
    [
      [bigint, bigint, string, string[]] & {
        nativeBalance: bigint;
        reqCount: bigint;
        subOwner: string;
        consumers: string[];
      }
    ],
    "view"
  >;

  ownerCancelSubscription: TypedContractMethod<
    [subId: BigNumberish],
    [void],
    "nonpayable"
  >;

  pendingRequestExists: TypedContractMethod<
    [subId: BigNumberish],
    [boolean],
    "view"
  >;

  removeConsumer: TypedContractMethod<
    [subId: BigNumberish, consumer: AddressLike],
    [void],
    "nonpayable"
  >;

  requestSubscriptionOwnerTransfer: TypedContractMethod<
    [subId: BigNumberish, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  s_config: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        maxGasLimit: bigint;
        gasAfterPaymentCalculation: bigint;
        fulfillmentFlatFeeNativePPM: bigint;
        weiPerUnitGas: bigint;
        blsPairingCheckOverhead: bigint;
        nativePremiumPercentage: bigint;
        gasForCallExactCheck: bigint;
      }
    ],
    "view"
  >;

  s_configured: TypedContractMethod<[], [boolean], "view">;

  s_currentSubNonce: TypedContractMethod<[], [bigint], "view">;

  s_disabled: TypedContractMethod<[], [boolean], "view">;

  s_totalNativeBalance: TypedContractMethod<[], [bigint], "view">;

  s_withdrawableDirectFundingFeeNative: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  s_withdrawableSubscriptionFeeNative: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  setConfig: TypedContractMethod<
    [
      maxGasLimit: BigNumberish,
      gasAfterPaymentCalculation: BigNumberish,
      fulfillmentFlatFeeNativePPM: BigNumberish,
      weiPerUnitGas: BigNumberish,
      blsPairingCheckOverhead: BigNumberish,
      nativePremiumPercentage: BigNumberish,
      gasForCallExactCheck: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  withdrawDirectFundingFeesNative: TypedContractMethod<
    [recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawSubscriptionFeesNative: TypedContractMethod<
    [recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_CONSUMERS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptSubscriptionOwnerTransfer"
  ): TypedContractMethod<[subId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addConsumer"
  ): TypedContractMethod<
    [subId: BigNumberish, consumer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateRequestPriceNative"
  ): TypedContractMethod<[_callbackGasLimit: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelSubscription"
  ): TypedContractMethod<
    [subId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createSubscription"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "disable"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enable"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "estimateRequestPriceNative"
  ): TypedContractMethod<
    [_callbackGasLimit: BigNumberish, _requestGasPriceWei: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "fundSubscriptionWithNative"
  ): TypedContractMethod<[subId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "getActiveSubscriptionIds"
  ): TypedContractMethod<
    [startIndex: BigNumberish, maxCount: BigNumberish],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSubscription"
  ): TypedContractMethod<
    [subId: BigNumberish],
    [
      [bigint, bigint, string, string[]] & {
        nativeBalance: bigint;
        reqCount: bigint;
        subOwner: string;
        consumers: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "ownerCancelSubscription"
  ): TypedContractMethod<[subId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pendingRequestExists"
  ): TypedContractMethod<[subId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeConsumer"
  ): TypedContractMethod<
    [subId: BigNumberish, consumer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestSubscriptionOwnerTransfer"
  ): TypedContractMethod<
    [subId: BigNumberish, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "s_config"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        maxGasLimit: bigint;
        gasAfterPaymentCalculation: bigint;
        fulfillmentFlatFeeNativePPM: bigint;
        weiPerUnitGas: bigint;
        blsPairingCheckOverhead: bigint;
        nativePremiumPercentage: bigint;
        gasForCallExactCheck: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "s_configured"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "s_currentSubNonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "s_disabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "s_totalNativeBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "s_withdrawableDirectFundingFeeNative"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "s_withdrawableSubscriptionFeeNative"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setConfig"
  ): TypedContractMethod<
    [
      maxGasLimit: BigNumberish,
      gasAfterPaymentCalculation: BigNumberish,
      fulfillmentFlatFeeNativePPM: BigNumberish,
      weiPerUnitGas: BigNumberish,
      blsPairingCheckOverhead: BigNumberish,
      nativePremiumPercentage: BigNumberish,
      gasForCallExactCheck: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawDirectFundingFeesNative"
  ): TypedContractMethod<[recipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawSubscriptionFeesNative"
  ): TypedContractMethod<[recipient: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ConfigSet"
  ): TypedContractEvent<
    ConfigSetEvent.InputTuple,
    ConfigSetEvent.OutputTuple,
    ConfigSetEvent.OutputObject
  >;
  getEvent(
    key: "Disabled"
  ): TypedContractEvent<
    DisabledEvent.InputTuple,
    DisabledEvent.OutputTuple,
    DisabledEvent.OutputObject
  >;
  getEvent(
    key: "Enabled"
  ): TypedContractEvent<
    EnabledEvent.InputTuple,
    EnabledEvent.OutputTuple,
    EnabledEvent.OutputObject
  >;
  getEvent(
    key: "L1GasFee"
  ): TypedContractEvent<
    L1GasFeeEvent.InputTuple,
    L1GasFeeEvent.OutputTuple,
    L1GasFeeEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionCanceled"
  ): TypedContractEvent<
    SubscriptionCanceledEvent.InputTuple,
    SubscriptionCanceledEvent.OutputTuple,
    SubscriptionCanceledEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionConsumerAdded"
  ): TypedContractEvent<
    SubscriptionConsumerAddedEvent.InputTuple,
    SubscriptionConsumerAddedEvent.OutputTuple,
    SubscriptionConsumerAddedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionConsumerRemoved"
  ): TypedContractEvent<
    SubscriptionConsumerRemovedEvent.InputTuple,
    SubscriptionConsumerRemovedEvent.OutputTuple,
    SubscriptionConsumerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionCreated"
  ): TypedContractEvent<
    SubscriptionCreatedEvent.InputTuple,
    SubscriptionCreatedEvent.OutputTuple,
    SubscriptionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionFundedWithNative"
  ): TypedContractEvent<
    SubscriptionFundedWithNativeEvent.InputTuple,
    SubscriptionFundedWithNativeEvent.OutputTuple,
    SubscriptionFundedWithNativeEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionOwnerTransferRequested"
  ): TypedContractEvent<
    SubscriptionOwnerTransferRequestedEvent.InputTuple,
    SubscriptionOwnerTransferRequestedEvent.OutputTuple,
    SubscriptionOwnerTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionOwnerTransferred"
  ): TypedContractEvent<
    SubscriptionOwnerTransferredEvent.InputTuple,
    SubscriptionOwnerTransferredEvent.OutputTuple,
    SubscriptionOwnerTransferredEvent.OutputObject
  >;

  filters: {
    "ConfigSet(uint32,uint32,uint32,uint32,uint32,uint8,uint32)": TypedContractEvent<
      ConfigSetEvent.InputTuple,
      ConfigSetEvent.OutputTuple,
      ConfigSetEvent.OutputObject
    >;
    ConfigSet: TypedContractEvent<
      ConfigSetEvent.InputTuple,
      ConfigSetEvent.OutputTuple,
      ConfigSetEvent.OutputObject
    >;

    "Disabled()": TypedContractEvent<
      DisabledEvent.InputTuple,
      DisabledEvent.OutputTuple,
      DisabledEvent.OutputObject
    >;
    Disabled: TypedContractEvent<
      DisabledEvent.InputTuple,
      DisabledEvent.OutputTuple,
      DisabledEvent.OutputObject
    >;

    "Enabled()": TypedContractEvent<
      EnabledEvent.InputTuple,
      EnabledEvent.OutputTuple,
      EnabledEvent.OutputObject
    >;
    Enabled: TypedContractEvent<
      EnabledEvent.InputTuple,
      EnabledEvent.OutputTuple,
      EnabledEvent.OutputObject
    >;

    "L1GasFee(uint256)": TypedContractEvent<
      L1GasFeeEvent.InputTuple,
      L1GasFeeEvent.OutputTuple,
      L1GasFeeEvent.OutputObject
    >;
    L1GasFee: TypedContractEvent<
      L1GasFeeEvent.InputTuple,
      L1GasFeeEvent.OutputTuple,
      L1GasFeeEvent.OutputObject
    >;

    "SubscriptionCanceled(uint256,address,uint256)": TypedContractEvent<
      SubscriptionCanceledEvent.InputTuple,
      SubscriptionCanceledEvent.OutputTuple,
      SubscriptionCanceledEvent.OutputObject
    >;
    SubscriptionCanceled: TypedContractEvent<
      SubscriptionCanceledEvent.InputTuple,
      SubscriptionCanceledEvent.OutputTuple,
      SubscriptionCanceledEvent.OutputObject
    >;

    "SubscriptionConsumerAdded(uint256,address)": TypedContractEvent<
      SubscriptionConsumerAddedEvent.InputTuple,
      SubscriptionConsumerAddedEvent.OutputTuple,
      SubscriptionConsumerAddedEvent.OutputObject
    >;
    SubscriptionConsumerAdded: TypedContractEvent<
      SubscriptionConsumerAddedEvent.InputTuple,
      SubscriptionConsumerAddedEvent.OutputTuple,
      SubscriptionConsumerAddedEvent.OutputObject
    >;

    "SubscriptionConsumerRemoved(uint256,address)": TypedContractEvent<
      SubscriptionConsumerRemovedEvent.InputTuple,
      SubscriptionConsumerRemovedEvent.OutputTuple,
      SubscriptionConsumerRemovedEvent.OutputObject
    >;
    SubscriptionConsumerRemoved: TypedContractEvent<
      SubscriptionConsumerRemovedEvent.InputTuple,
      SubscriptionConsumerRemovedEvent.OutputTuple,
      SubscriptionConsumerRemovedEvent.OutputObject
    >;

    "SubscriptionCreated(uint256,address)": TypedContractEvent<
      SubscriptionCreatedEvent.InputTuple,
      SubscriptionCreatedEvent.OutputTuple,
      SubscriptionCreatedEvent.OutputObject
    >;
    SubscriptionCreated: TypedContractEvent<
      SubscriptionCreatedEvent.InputTuple,
      SubscriptionCreatedEvent.OutputTuple,
      SubscriptionCreatedEvent.OutputObject
    >;

    "SubscriptionFundedWithNative(uint256,uint256,uint256)": TypedContractEvent<
      SubscriptionFundedWithNativeEvent.InputTuple,
      SubscriptionFundedWithNativeEvent.OutputTuple,
      SubscriptionFundedWithNativeEvent.OutputObject
    >;
    SubscriptionFundedWithNative: TypedContractEvent<
      SubscriptionFundedWithNativeEvent.InputTuple,
      SubscriptionFundedWithNativeEvent.OutputTuple,
      SubscriptionFundedWithNativeEvent.OutputObject
    >;

    "SubscriptionOwnerTransferRequested(uint256,address,address)": TypedContractEvent<
      SubscriptionOwnerTransferRequestedEvent.InputTuple,
      SubscriptionOwnerTransferRequestedEvent.OutputTuple,
      SubscriptionOwnerTransferRequestedEvent.OutputObject
    >;
    SubscriptionOwnerTransferRequested: TypedContractEvent<
      SubscriptionOwnerTransferRequestedEvent.InputTuple,
      SubscriptionOwnerTransferRequestedEvent.OutputTuple,
      SubscriptionOwnerTransferRequestedEvent.OutputObject
    >;

    "SubscriptionOwnerTransferred(uint256,address,address)": TypedContractEvent<
      SubscriptionOwnerTransferredEvent.InputTuple,
      SubscriptionOwnerTransferredEvent.OutputTuple,
      SubscriptionOwnerTransferredEvent.OutputObject
    >;
    SubscriptionOwnerTransferred: TypedContractEvent<
      SubscriptionOwnerTransferredEvent.InputTuple,
      SubscriptionOwnerTransferredEvent.OutputTuple,
      SubscriptionOwnerTransferredEvent.OutputObject
    >;
  };
}
