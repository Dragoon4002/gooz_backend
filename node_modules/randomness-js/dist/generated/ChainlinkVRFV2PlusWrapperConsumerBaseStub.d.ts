import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "./common";
export interface ChainlinkVRFV2PlusWrapperConsumerBaseStubInterface extends Interface {
    getFunction(nameOrSignature: "getBalance" | "i_vrfV2PlusWrapper" | "rawFulfillRandomWords"): FunctionFragment;
    encodeFunctionData(functionFragment: "getBalance", values?: undefined): string;
    encodeFunctionData(functionFragment: "i_vrfV2PlusWrapper", values?: undefined): string;
    encodeFunctionData(functionFragment: "rawFulfillRandomWords", values: [BigNumberish, BigNumberish[]]): string;
    decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "i_vrfV2PlusWrapper", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rawFulfillRandomWords", data: BytesLike): Result;
}
export interface ChainlinkVRFV2PlusWrapperConsumerBaseStub extends BaseContract {
    connect(runner?: ContractRunner | null): ChainlinkVRFV2PlusWrapperConsumerBaseStub;
    waitForDeployment(): Promise<this>;
    interface: ChainlinkVRFV2PlusWrapperConsumerBaseStubInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    getBalance: TypedContractMethod<[], [bigint], "view">;
    i_vrfV2PlusWrapper: TypedContractMethod<[], [string], "view">;
    rawFulfillRandomWords: TypedContractMethod<[
        _requestId: BigNumberish,
        _randomWords: BigNumberish[]
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "getBalance"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "i_vrfV2PlusWrapper"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "rawFulfillRandomWords"): TypedContractMethod<[
        _requestId: BigNumberish,
        _randomWords: BigNumberish[]
    ], [
        void
    ], "nonpayable">;
    filters: {};
}
