import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common";
export declare namespace TypesLib {
    type RandomnessRequestStruct = {
        subId: BigNumberish;
        directFundingFeePaid: BigNumberish;
        callbackGasLimit: BigNumberish;
        requestId: BigNumberish;
        message: BytesLike;
        condition: BytesLike;
        signature: BytesLike;
        nonce: BigNumberish;
        callback: AddressLike;
    };
    type RandomnessRequestStructOutput = [
        subId: bigint,
        directFundingFeePaid: bigint,
        callbackGasLimit: bigint,
        requestId: bigint,
        message: string,
        condition: string,
        signature: string,
        nonce: bigint,
        callback: string
    ] & {
        subId: bigint;
        directFundingFeePaid: bigint;
        callbackGasLimit: bigint;
        requestId: bigint;
        message: string;
        condition: string;
        signature: string;
        nonce: bigint;
        callback: string;
    };
    type RandomnessRequestCreationParamsStruct = {
        nonce: BigNumberish;
        callback: AddressLike;
    };
    type RandomnessRequestCreationParamsStructOutput = [
        nonce: bigint,
        callback: string
    ] & {
        nonce: bigint;
        callback: string;
    };
}
export interface RandomnessSenderInterface extends Interface {
    getFunction(nameOrSignature: "ADMIN_ROLE" | "DEFAULT_ADMIN_ROLE" | "MAX_CONSUMERS" | "SCHEME_ID" | "UPGRADE_INTERFACE_VERSION" | "acceptSubscriptionOwnerTransfer" | "addConsumer" | "calculateRequestPriceNative" | "cancelSubscription" | "createSubscription" | "disable" | "enable" | "estimateRequestPriceNative" | "fundSubscriptionWithNative" | "getActiveSubscriptionIds" | "getAllRequests" | "getConfig" | "getRequest" | "getRoleAdmin" | "getRoleMember" | "getRoleMemberCount" | "getRoleMembers" | "getSubscription" | "grantRole" | "hasRole" | "initialize" | "isInFlight" | "messageFrom" | "nonce" | "ownerCancelSubscription" | "pendingRequestExists" | "proxiableUUID" | "receiveSignature" | "removeConsumer" | "renounceRole" | "requestRandomness" | "requestRandomnessWithSubscription" | "requestSubscriptionOwnerTransfer" | "revokeRole" | "s_config" | "s_configured" | "s_currentSubNonce" | "s_disabled" | "s_totalNativeBalance" | "s_withdrawableDirectFundingFeeNative" | "s_withdrawableSubscriptionFeeNative" | "setConfig" | "setSignatureSender" | "signatureSender" | "supportsInterface" | "upgradeToAndCall" | "version" | "withdrawDirectFundingFeesNative" | "withdrawSubscriptionFeesNative"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "ConfigSet" | "Disabled" | "Enabled" | "Initialized" | "L1GasFee" | "RandomnessCallbackFailed" | "RandomnessCallbackSuccess" | "RandomnessRequested" | "RoleAdminChanged" | "RoleGranted" | "RoleRevoked" | "SignatureSenderUpdated" | "SubscriptionCanceled" | "SubscriptionConsumerAdded" | "SubscriptionConsumerRemoved" | "SubscriptionCreated" | "SubscriptionFundedWithNative" | "SubscriptionOwnerTransferRequested" | "SubscriptionOwnerTransferred" | "Upgraded"): EventFragment;
    encodeFunctionData(functionFragment: "ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
    encodeFunctionData(functionFragment: "MAX_CONSUMERS", values?: undefined): string;
    encodeFunctionData(functionFragment: "SCHEME_ID", values?: undefined): string;
    encodeFunctionData(functionFragment: "UPGRADE_INTERFACE_VERSION", values?: undefined): string;
    encodeFunctionData(functionFragment: "acceptSubscriptionOwnerTransfer", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "addConsumer", values: [BigNumberish, AddressLike]): string;
    encodeFunctionData(functionFragment: "calculateRequestPriceNative", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "cancelSubscription", values: [BigNumberish, AddressLike]): string;
    encodeFunctionData(functionFragment: "createSubscription", values?: undefined): string;
    encodeFunctionData(functionFragment: "disable", values?: undefined): string;
    encodeFunctionData(functionFragment: "enable", values?: undefined): string;
    encodeFunctionData(functionFragment: "estimateRequestPriceNative", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "fundSubscriptionWithNative", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getActiveSubscriptionIds", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getAllRequests", values?: undefined): string;
    encodeFunctionData(functionFragment: "getConfig", values?: undefined): string;
    encodeFunctionData(functionFragment: "getRequest", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getRoleMember", values: [BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getRoleMemberCount", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getRoleMembers", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getSubscription", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "initialize", values: [AddressLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "isInFlight", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "messageFrom", values: [TypesLib.RandomnessRequestCreationParamsStruct]): string;
    encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
    encodeFunctionData(functionFragment: "ownerCancelSubscription", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "pendingRequestExists", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "proxiableUUID", values?: undefined): string;
    encodeFunctionData(functionFragment: "receiveSignature", values: [BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "removeConsumer", values: [BigNumberish, AddressLike]): string;
    encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "requestRandomness", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "requestRandomnessWithSubscription", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "requestSubscriptionOwnerTransfer", values: [BigNumberish, AddressLike]): string;
    encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, AddressLike]): string;
    encodeFunctionData(functionFragment: "s_config", values?: undefined): string;
    encodeFunctionData(functionFragment: "s_configured", values?: undefined): string;
    encodeFunctionData(functionFragment: "s_currentSubNonce", values?: undefined): string;
    encodeFunctionData(functionFragment: "s_disabled", values?: undefined): string;
    encodeFunctionData(functionFragment: "s_totalNativeBalance", values?: undefined): string;
    encodeFunctionData(functionFragment: "s_withdrawableDirectFundingFeeNative", values?: undefined): string;
    encodeFunctionData(functionFragment: "s_withdrawableSubscriptionFeeNative", values?: undefined): string;
    encodeFunctionData(functionFragment: "setConfig", values: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
    ]): string;
    encodeFunctionData(functionFragment: "setSignatureSender", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "signatureSender", values?: undefined): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "upgradeToAndCall", values: [AddressLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "version", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdrawDirectFundingFeesNative", values: [AddressLike]): string;
    encodeFunctionData(functionFragment: "withdrawSubscriptionFeesNative", values: [AddressLike]): string;
    decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "MAX_CONSUMERS", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "SCHEME_ID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "UPGRADE_INTERFACE_VERSION", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "acceptSubscriptionOwnerTransfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "addConsumer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "calculateRequestPriceNative", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "cancelSubscription", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "createSubscription", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "disable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "enable", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "estimateRequestPriceNative", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "fundSubscriptionWithNative", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getActiveSubscriptionIds", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAllRequests", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRequest", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleMember", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleMemberCount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleMembers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getSubscription", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isInFlight", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "messageFrom", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ownerCancelSubscription", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pendingRequestExists", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "proxiableUUID", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "receiveSignature", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "removeConsumer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requestRandomness", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requestRandomnessWithSubscription", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "requestSubscriptionOwnerTransfer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "s_config", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "s_configured", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "s_currentSubNonce", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "s_disabled", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "s_totalNativeBalance", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "s_withdrawableDirectFundingFeeNative", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "s_withdrawableSubscriptionFeeNative", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setSignatureSender", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "signatureSender", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "upgradeToAndCall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawDirectFundingFeesNative", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdrawSubscriptionFeesNative", data: BytesLike): Result;
}
export declare namespace ConfigSetEvent {
    type InputTuple = [
        maxGasLimit: BigNumberish,
        gasAfterPaymentCalculation: BigNumberish,
        fulfillmentFlatFeeNativePPM: BigNumberish,
        weiPerUnitGas: BigNumberish,
        blsPairingCheckOverhead: BigNumberish,
        nativePremiumPercentage: BigNumberish,
        gasForCallExactCheck: BigNumberish
    ];
    type OutputTuple = [
        maxGasLimit: bigint,
        gasAfterPaymentCalculation: bigint,
        fulfillmentFlatFeeNativePPM: bigint,
        weiPerUnitGas: bigint,
        blsPairingCheckOverhead: bigint,
        nativePremiumPercentage: bigint,
        gasForCallExactCheck: bigint
    ];
    interface OutputObject {
        maxGasLimit: bigint;
        gasAfterPaymentCalculation: bigint;
        fulfillmentFlatFeeNativePPM: bigint;
        weiPerUnitGas: bigint;
        blsPairingCheckOverhead: bigint;
        nativePremiumPercentage: bigint;
        gasForCallExactCheck: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace DisabledEvent {
    type InputTuple = [];
    type OutputTuple = [];
    interface OutputObject {
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace EnabledEvent {
    type InputTuple = [];
    type OutputTuple = [];
    interface OutputObject {
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace InitializedEvent {
    type InputTuple = [version: BigNumberish];
    type OutputTuple = [version: bigint];
    interface OutputObject {
        version: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace L1GasFeeEvent {
    type InputTuple = [fee: BigNumberish];
    type OutputTuple = [fee: bigint];
    interface OutputObject {
        fee: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RandomnessCallbackFailedEvent {
    type InputTuple = [requestID: BigNumberish];
    type OutputTuple = [requestID: bigint];
    interface OutputObject {
        requestID: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RandomnessCallbackSuccessEvent {
    type InputTuple = [
        requestID: BigNumberish,
        randomness: BytesLike,
        signature: BytesLike
    ];
    type OutputTuple = [
        requestID: bigint,
        randomness: string,
        signature: string
    ];
    interface OutputObject {
        requestID: bigint;
        randomness: string;
        signature: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RandomnessRequestedEvent {
    type InputTuple = [
        requestID: BigNumberish,
        nonce: BigNumberish,
        requester: AddressLike,
        requestedAt: BigNumberish
    ];
    type OutputTuple = [
        requestID: bigint,
        nonce: bigint,
        requester: string,
        requestedAt: bigint
    ];
    interface OutputObject {
        requestID: bigint;
        nonce: bigint;
        requester: string;
        requestedAt: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RoleAdminChangedEvent {
    type InputTuple = [
        role: BytesLike,
        previousAdminRole: BytesLike,
        newAdminRole: BytesLike
    ];
    type OutputTuple = [
        role: string,
        previousAdminRole: string,
        newAdminRole: string
    ];
    interface OutputObject {
        role: string;
        previousAdminRole: string;
        newAdminRole: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RoleGrantedEvent {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace RoleRevokedEvent {
    type InputTuple = [
        role: BytesLike,
        account: AddressLike,
        sender: AddressLike
    ];
    type OutputTuple = [role: string, account: string, sender: string];
    interface OutputObject {
        role: string;
        account: string;
        sender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace SignatureSenderUpdatedEvent {
    type InputTuple = [signatureSender: AddressLike];
    type OutputTuple = [signatureSender: string];
    interface OutputObject {
        signatureSender: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace SubscriptionCanceledEvent {
    type InputTuple = [
        subId: BigNumberish,
        to: AddressLike,
        amountNative: BigNumberish
    ];
    type OutputTuple = [subId: bigint, to: string, amountNative: bigint];
    interface OutputObject {
        subId: bigint;
        to: string;
        amountNative: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace SubscriptionConsumerAddedEvent {
    type InputTuple = [subId: BigNumberish, consumer: AddressLike];
    type OutputTuple = [subId: bigint, consumer: string];
    interface OutputObject {
        subId: bigint;
        consumer: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace SubscriptionConsumerRemovedEvent {
    type InputTuple = [subId: BigNumberish, consumer: AddressLike];
    type OutputTuple = [subId: bigint, consumer: string];
    interface OutputObject {
        subId: bigint;
        consumer: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace SubscriptionCreatedEvent {
    type InputTuple = [subId: BigNumberish, owner: AddressLike];
    type OutputTuple = [subId: bigint, owner: string];
    interface OutputObject {
        subId: bigint;
        owner: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace SubscriptionFundedWithNativeEvent {
    type InputTuple = [
        subId: BigNumberish,
        oldNativeBalance: BigNumberish,
        newNativeBalance: BigNumberish
    ];
    type OutputTuple = [
        subId: bigint,
        oldNativeBalance: bigint,
        newNativeBalance: bigint
    ];
    interface OutputObject {
        subId: bigint;
        oldNativeBalance: bigint;
        newNativeBalance: bigint;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace SubscriptionOwnerTransferRequestedEvent {
    type InputTuple = [
        subId: BigNumberish,
        from: AddressLike,
        to: AddressLike
    ];
    type OutputTuple = [subId: bigint, from: string, to: string];
    interface OutputObject {
        subId: bigint;
        from: string;
        to: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace SubscriptionOwnerTransferredEvent {
    type InputTuple = [
        subId: BigNumberish,
        from: AddressLike,
        to: AddressLike
    ];
    type OutputTuple = [subId: bigint, from: string, to: string];
    interface OutputObject {
        subId: bigint;
        from: string;
        to: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export declare namespace UpgradedEvent {
    type InputTuple = [implementation: AddressLike];
    type OutputTuple = [implementation: string];
    interface OutputObject {
        implementation: string;
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface RandomnessSender extends BaseContract {
    connect(runner?: ContractRunner | null): RandomnessSender;
    waitForDeployment(): Promise<this>;
    interface: RandomnessSenderInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    ADMIN_ROLE: TypedContractMethod<[], [string], "view">;
    DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;
    MAX_CONSUMERS: TypedContractMethod<[], [bigint], "view">;
    SCHEME_ID: TypedContractMethod<[], [string], "view">;
    UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;
    acceptSubscriptionOwnerTransfer: TypedContractMethod<[
        subId: BigNumberish
    ], [
        void
    ], "nonpayable">;
    addConsumer: TypedContractMethod<[
        subId: BigNumberish,
        consumer: AddressLike
    ], [
        void
    ], "nonpayable">;
    calculateRequestPriceNative: TypedContractMethod<[
        _callbackGasLimit: BigNumberish
    ], [
        bigint
    ], "view">;
    cancelSubscription: TypedContractMethod<[
        subId: BigNumberish,
        to: AddressLike
    ], [
        void
    ], "nonpayable">;
    createSubscription: TypedContractMethod<[], [bigint], "nonpayable">;
    disable: TypedContractMethod<[], [void], "nonpayable">;
    enable: TypedContractMethod<[], [void], "nonpayable">;
    estimateRequestPriceNative: TypedContractMethod<[
        _callbackGasLimit: BigNumberish,
        _requestGasPriceWei: BigNumberish
    ], [
        bigint
    ], "view">;
    fundSubscriptionWithNative: TypedContractMethod<[
        subId: BigNumberish
    ], [
        void
    ], "payable">;
    getActiveSubscriptionIds: TypedContractMethod<[
        startIndex: BigNumberish,
        maxCount: BigNumberish
    ], [
        bigint[]
    ], "view">;
    getAllRequests: TypedContractMethod<[
    ], [
        TypesLib.RandomnessRequestStructOutput[]
    ], "view">;
    getConfig: TypedContractMethod<[
    ], [
        [
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint
        ] & {
            maxGasLimit: bigint;
            gasAfterPaymentCalculation: bigint;
            fulfillmentFlatFeeNativePPM: bigint;
            weiPerUnitGas: bigint;
            blsPairingCheckOverhead: bigint;
            nativePremiumPercentage: bigint;
            gasForCallExactCheck: bigint;
        }
    ], "view">;
    getRequest: TypedContractMethod<[
        requestId: BigNumberish
    ], [
        TypesLib.RandomnessRequestStructOutput
    ], "view">;
    getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;
    getRoleMember: TypedContractMethod<[
        role: BytesLike,
        index: BigNumberish
    ], [
        string
    ], "view">;
    getRoleMemberCount: TypedContractMethod<[role: BytesLike], [bigint], "view">;
    getRoleMembers: TypedContractMethod<[role: BytesLike], [string[]], "view">;
    getSubscription: TypedContractMethod<[
        subId: BigNumberish
    ], [
        [
            bigint,
            bigint,
            string,
            string[]
        ] & {
            nativeBalance: bigint;
            reqCount: bigint;
            subOwner: string;
            consumers: string[];
        }
    ], "view">;
    grantRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    hasRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    initialize: TypedContractMethod<[
        _signatureSender: AddressLike,
        owner: AddressLike
    ], [
        void
    ], "nonpayable">;
    isInFlight: TypedContractMethod<[requestID: BigNumberish], [boolean], "view">;
    messageFrom: TypedContractMethod<[
        r: TypesLib.RandomnessRequestCreationParamsStruct
    ], [
        string
    ], "view">;
    nonce: TypedContractMethod<[], [bigint], "view">;
    ownerCancelSubscription: TypedContractMethod<[
        subId: BigNumberish
    ], [
        void
    ], "nonpayable">;
    pendingRequestExists: TypedContractMethod<[
        subId: BigNumberish
    ], [
        boolean
    ], "view">;
    proxiableUUID: TypedContractMethod<[], [string], "view">;
    receiveSignature: TypedContractMethod<[
        requestID: BigNumberish,
        signature: BytesLike
    ], [
        void
    ], "nonpayable">;
    removeConsumer: TypedContractMethod<[
        subId: BigNumberish,
        consumer: AddressLike
    ], [
        void
    ], "nonpayable">;
    renounceRole: TypedContractMethod<[
        role: BytesLike,
        callerConfirmation: AddressLike
    ], [
        void
    ], "nonpayable">;
    requestRandomness: TypedContractMethod<[
        callbackGasLimit: BigNumberish
    ], [
        bigint
    ], "payable">;
    requestRandomnessWithSubscription: TypedContractMethod<[
        callbackGasLimit: BigNumberish,
        subId: BigNumberish
    ], [
        bigint
    ], "payable">;
    requestSubscriptionOwnerTransfer: TypedContractMethod<[
        subId: BigNumberish,
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    revokeRole: TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    s_config: TypedContractMethod<[
    ], [
        [
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint
        ] & {
            maxGasLimit: bigint;
            gasAfterPaymentCalculation: bigint;
            fulfillmentFlatFeeNativePPM: bigint;
            weiPerUnitGas: bigint;
            blsPairingCheckOverhead: bigint;
            nativePremiumPercentage: bigint;
            gasForCallExactCheck: bigint;
        }
    ], "view">;
    s_configured: TypedContractMethod<[], [boolean], "view">;
    s_currentSubNonce: TypedContractMethod<[], [bigint], "view">;
    s_disabled: TypedContractMethod<[], [boolean], "view">;
    s_totalNativeBalance: TypedContractMethod<[], [bigint], "view">;
    s_withdrawableDirectFundingFeeNative: TypedContractMethod<[
    ], [
        bigint
    ], "view">;
    s_withdrawableSubscriptionFeeNative: TypedContractMethod<[
    ], [
        bigint
    ], "view">;
    setConfig: TypedContractMethod<[
        maxGasLimit: BigNumberish,
        gasAfterPaymentCalculation: BigNumberish,
        fulfillmentFlatFeeNativePPM: BigNumberish,
        weiPerUnitGas: BigNumberish,
        blsPairingCheckOverhead: BigNumberish,
        nativePremiumPercentage: BigNumberish,
        gasForCallExactCheck: BigNumberish
    ], [
        void
    ], "nonpayable">;
    setSignatureSender: TypedContractMethod<[
        newSignatureSender: AddressLike
    ], [
        void
    ], "nonpayable">;
    signatureSender: TypedContractMethod<[], [string], "view">;
    supportsInterface: TypedContractMethod<[
        interfaceId: BytesLike
    ], [
        boolean
    ], "view">;
    upgradeToAndCall: TypedContractMethod<[
        newImplementation: AddressLike,
        data: BytesLike
    ], [
        void
    ], "payable">;
    version: TypedContractMethod<[], [string], "view">;
    withdrawDirectFundingFeesNative: TypedContractMethod<[
        recipient: AddressLike
    ], [
        void
    ], "nonpayable">;
    withdrawSubscriptionFeesNative: TypedContractMethod<[
        recipient: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "ADMIN_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "DEFAULT_ADMIN_ROLE"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "MAX_CONSUMERS"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "SCHEME_ID"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "UPGRADE_INTERFACE_VERSION"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "acceptSubscriptionOwnerTransfer"): TypedContractMethod<[subId: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "addConsumer"): TypedContractMethod<[
        subId: BigNumberish,
        consumer: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "calculateRequestPriceNative"): TypedContractMethod<[_callbackGasLimit: BigNumberish], [bigint], "view">;
    getFunction(nameOrSignature: "cancelSubscription"): TypedContractMethod<[
        subId: BigNumberish,
        to: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "createSubscription"): TypedContractMethod<[], [bigint], "nonpayable">;
    getFunction(nameOrSignature: "disable"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "enable"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "estimateRequestPriceNative"): TypedContractMethod<[
        _callbackGasLimit: BigNumberish,
        _requestGasPriceWei: BigNumberish
    ], [
        bigint
    ], "view">;
    getFunction(nameOrSignature: "fundSubscriptionWithNative"): TypedContractMethod<[subId: BigNumberish], [void], "payable">;
    getFunction(nameOrSignature: "getActiveSubscriptionIds"): TypedContractMethod<[
        startIndex: BigNumberish,
        maxCount: BigNumberish
    ], [
        bigint[]
    ], "view">;
    getFunction(nameOrSignature: "getAllRequests"): TypedContractMethod<[
    ], [
        TypesLib.RandomnessRequestStructOutput[]
    ], "view">;
    getFunction(nameOrSignature: "getConfig"): TypedContractMethod<[
    ], [
        [
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint
        ] & {
            maxGasLimit: bigint;
            gasAfterPaymentCalculation: bigint;
            fulfillmentFlatFeeNativePPM: bigint;
            weiPerUnitGas: bigint;
            blsPairingCheckOverhead: bigint;
            nativePremiumPercentage: bigint;
            gasForCallExactCheck: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "getRequest"): TypedContractMethod<[
        requestId: BigNumberish
    ], [
        TypesLib.RandomnessRequestStructOutput
    ], "view">;
    getFunction(nameOrSignature: "getRoleAdmin"): TypedContractMethod<[role: BytesLike], [string], "view">;
    getFunction(nameOrSignature: "getRoleMember"): TypedContractMethod<[
        role: BytesLike,
        index: BigNumberish
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "getRoleMemberCount"): TypedContractMethod<[role: BytesLike], [bigint], "view">;
    getFunction(nameOrSignature: "getRoleMembers"): TypedContractMethod<[role: BytesLike], [string[]], "view">;
    getFunction(nameOrSignature: "getSubscription"): TypedContractMethod<[
        subId: BigNumberish
    ], [
        [
            bigint,
            bigint,
            string,
            string[]
        ] & {
            nativeBalance: bigint;
            reqCount: bigint;
            subOwner: string;
            consumers: string[];
        }
    ], "view">;
    getFunction(nameOrSignature: "grantRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "hasRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        boolean
    ], "view">;
    getFunction(nameOrSignature: "initialize"): TypedContractMethod<[
        _signatureSender: AddressLike,
        owner: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "isInFlight"): TypedContractMethod<[requestID: BigNumberish], [boolean], "view">;
    getFunction(nameOrSignature: "messageFrom"): TypedContractMethod<[
        r: TypesLib.RandomnessRequestCreationParamsStruct
    ], [
        string
    ], "view">;
    getFunction(nameOrSignature: "nonce"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "ownerCancelSubscription"): TypedContractMethod<[subId: BigNumberish], [void], "nonpayable">;
    getFunction(nameOrSignature: "pendingRequestExists"): TypedContractMethod<[subId: BigNumberish], [boolean], "view">;
    getFunction(nameOrSignature: "proxiableUUID"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "receiveSignature"): TypedContractMethod<[
        requestID: BigNumberish,
        signature: BytesLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "removeConsumer"): TypedContractMethod<[
        subId: BigNumberish,
        consumer: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "renounceRole"): TypedContractMethod<[
        role: BytesLike,
        callerConfirmation: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "requestRandomness"): TypedContractMethod<[callbackGasLimit: BigNumberish], [bigint], "payable">;
    getFunction(nameOrSignature: "requestRandomnessWithSubscription"): TypedContractMethod<[
        callbackGasLimit: BigNumberish,
        subId: BigNumberish
    ], [
        bigint
    ], "payable">;
    getFunction(nameOrSignature: "requestSubscriptionOwnerTransfer"): TypedContractMethod<[
        subId: BigNumberish,
        newOwner: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "revokeRole"): TypedContractMethod<[
        role: BytesLike,
        account: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "s_config"): TypedContractMethod<[
    ], [
        [
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint,
            bigint
        ] & {
            maxGasLimit: bigint;
            gasAfterPaymentCalculation: bigint;
            fulfillmentFlatFeeNativePPM: bigint;
            weiPerUnitGas: bigint;
            blsPairingCheckOverhead: bigint;
            nativePremiumPercentage: bigint;
            gasForCallExactCheck: bigint;
        }
    ], "view">;
    getFunction(nameOrSignature: "s_configured"): TypedContractMethod<[], [boolean], "view">;
    getFunction(nameOrSignature: "s_currentSubNonce"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "s_disabled"): TypedContractMethod<[], [boolean], "view">;
    getFunction(nameOrSignature: "s_totalNativeBalance"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "s_withdrawableDirectFundingFeeNative"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "s_withdrawableSubscriptionFeeNative"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "setConfig"): TypedContractMethod<[
        maxGasLimit: BigNumberish,
        gasAfterPaymentCalculation: BigNumberish,
        fulfillmentFlatFeeNativePPM: BigNumberish,
        weiPerUnitGas: BigNumberish,
        blsPairingCheckOverhead: BigNumberish,
        nativePremiumPercentage: BigNumberish,
        gasForCallExactCheck: BigNumberish
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "setSignatureSender"): TypedContractMethod<[
        newSignatureSender: AddressLike
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "signatureSender"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "supportsInterface"): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
    getFunction(nameOrSignature: "upgradeToAndCall"): TypedContractMethod<[
        newImplementation: AddressLike,
        data: BytesLike
    ], [
        void
    ], "payable">;
    getFunction(nameOrSignature: "version"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "withdrawDirectFundingFeesNative"): TypedContractMethod<[recipient: AddressLike], [void], "nonpayable">;
    getFunction(nameOrSignature: "withdrawSubscriptionFeesNative"): TypedContractMethod<[recipient: AddressLike], [void], "nonpayable">;
    getEvent(key: "ConfigSet"): TypedContractEvent<ConfigSetEvent.InputTuple, ConfigSetEvent.OutputTuple, ConfigSetEvent.OutputObject>;
    getEvent(key: "Disabled"): TypedContractEvent<DisabledEvent.InputTuple, DisabledEvent.OutputTuple, DisabledEvent.OutputObject>;
    getEvent(key: "Enabled"): TypedContractEvent<EnabledEvent.InputTuple, EnabledEvent.OutputTuple, EnabledEvent.OutputObject>;
    getEvent(key: "Initialized"): TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
    getEvent(key: "L1GasFee"): TypedContractEvent<L1GasFeeEvent.InputTuple, L1GasFeeEvent.OutputTuple, L1GasFeeEvent.OutputObject>;
    getEvent(key: "RandomnessCallbackFailed"): TypedContractEvent<RandomnessCallbackFailedEvent.InputTuple, RandomnessCallbackFailedEvent.OutputTuple, RandomnessCallbackFailedEvent.OutputObject>;
    getEvent(key: "RandomnessCallbackSuccess"): TypedContractEvent<RandomnessCallbackSuccessEvent.InputTuple, RandomnessCallbackSuccessEvent.OutputTuple, RandomnessCallbackSuccessEvent.OutputObject>;
    getEvent(key: "RandomnessRequested"): TypedContractEvent<RandomnessRequestedEvent.InputTuple, RandomnessRequestedEvent.OutputTuple, RandomnessRequestedEvent.OutputObject>;
    getEvent(key: "RoleAdminChanged"): TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
    getEvent(key: "RoleGranted"): TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
    getEvent(key: "RoleRevoked"): TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
    getEvent(key: "SignatureSenderUpdated"): TypedContractEvent<SignatureSenderUpdatedEvent.InputTuple, SignatureSenderUpdatedEvent.OutputTuple, SignatureSenderUpdatedEvent.OutputObject>;
    getEvent(key: "SubscriptionCanceled"): TypedContractEvent<SubscriptionCanceledEvent.InputTuple, SubscriptionCanceledEvent.OutputTuple, SubscriptionCanceledEvent.OutputObject>;
    getEvent(key: "SubscriptionConsumerAdded"): TypedContractEvent<SubscriptionConsumerAddedEvent.InputTuple, SubscriptionConsumerAddedEvent.OutputTuple, SubscriptionConsumerAddedEvent.OutputObject>;
    getEvent(key: "SubscriptionConsumerRemoved"): TypedContractEvent<SubscriptionConsumerRemovedEvent.InputTuple, SubscriptionConsumerRemovedEvent.OutputTuple, SubscriptionConsumerRemovedEvent.OutputObject>;
    getEvent(key: "SubscriptionCreated"): TypedContractEvent<SubscriptionCreatedEvent.InputTuple, SubscriptionCreatedEvent.OutputTuple, SubscriptionCreatedEvent.OutputObject>;
    getEvent(key: "SubscriptionFundedWithNative"): TypedContractEvent<SubscriptionFundedWithNativeEvent.InputTuple, SubscriptionFundedWithNativeEvent.OutputTuple, SubscriptionFundedWithNativeEvent.OutputObject>;
    getEvent(key: "SubscriptionOwnerTransferRequested"): TypedContractEvent<SubscriptionOwnerTransferRequestedEvent.InputTuple, SubscriptionOwnerTransferRequestedEvent.OutputTuple, SubscriptionOwnerTransferRequestedEvent.OutputObject>;
    getEvent(key: "SubscriptionOwnerTransferred"): TypedContractEvent<SubscriptionOwnerTransferredEvent.InputTuple, SubscriptionOwnerTransferredEvent.OutputTuple, SubscriptionOwnerTransferredEvent.OutputObject>;
    getEvent(key: "Upgraded"): TypedContractEvent<UpgradedEvent.InputTuple, UpgradedEvent.OutputTuple, UpgradedEvent.OutputObject>;
    filters: {
        "ConfigSet(uint32,uint32,uint32,uint32,uint32,uint8,uint32)": TypedContractEvent<ConfigSetEvent.InputTuple, ConfigSetEvent.OutputTuple, ConfigSetEvent.OutputObject>;
        ConfigSet: TypedContractEvent<ConfigSetEvent.InputTuple, ConfigSetEvent.OutputTuple, ConfigSetEvent.OutputObject>;
        "Disabled()": TypedContractEvent<DisabledEvent.InputTuple, DisabledEvent.OutputTuple, DisabledEvent.OutputObject>;
        Disabled: TypedContractEvent<DisabledEvent.InputTuple, DisabledEvent.OutputTuple, DisabledEvent.OutputObject>;
        "Enabled()": TypedContractEvent<EnabledEvent.InputTuple, EnabledEvent.OutputTuple, EnabledEvent.OutputObject>;
        Enabled: TypedContractEvent<EnabledEvent.InputTuple, EnabledEvent.OutputTuple, EnabledEvent.OutputObject>;
        "Initialized(uint64)": TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
        Initialized: TypedContractEvent<InitializedEvent.InputTuple, InitializedEvent.OutputTuple, InitializedEvent.OutputObject>;
        "L1GasFee(uint256)": TypedContractEvent<L1GasFeeEvent.InputTuple, L1GasFeeEvent.OutputTuple, L1GasFeeEvent.OutputObject>;
        L1GasFee: TypedContractEvent<L1GasFeeEvent.InputTuple, L1GasFeeEvent.OutputTuple, L1GasFeeEvent.OutputObject>;
        "RandomnessCallbackFailed(uint256)": TypedContractEvent<RandomnessCallbackFailedEvent.InputTuple, RandomnessCallbackFailedEvent.OutputTuple, RandomnessCallbackFailedEvent.OutputObject>;
        RandomnessCallbackFailed: TypedContractEvent<RandomnessCallbackFailedEvent.InputTuple, RandomnessCallbackFailedEvent.OutputTuple, RandomnessCallbackFailedEvent.OutputObject>;
        "RandomnessCallbackSuccess(uint256,bytes32,bytes)": TypedContractEvent<RandomnessCallbackSuccessEvent.InputTuple, RandomnessCallbackSuccessEvent.OutputTuple, RandomnessCallbackSuccessEvent.OutputObject>;
        RandomnessCallbackSuccess: TypedContractEvent<RandomnessCallbackSuccessEvent.InputTuple, RandomnessCallbackSuccessEvent.OutputTuple, RandomnessCallbackSuccessEvent.OutputObject>;
        "RandomnessRequested(uint256,uint256,address,uint256)": TypedContractEvent<RandomnessRequestedEvent.InputTuple, RandomnessRequestedEvent.OutputTuple, RandomnessRequestedEvent.OutputObject>;
        RandomnessRequested: TypedContractEvent<RandomnessRequestedEvent.InputTuple, RandomnessRequestedEvent.OutputTuple, RandomnessRequestedEvent.OutputObject>;
        "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
        RoleAdminChanged: TypedContractEvent<RoleAdminChangedEvent.InputTuple, RoleAdminChangedEvent.OutputTuple, RoleAdminChangedEvent.OutputObject>;
        "RoleGranted(bytes32,address,address)": TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
        RoleGranted: TypedContractEvent<RoleGrantedEvent.InputTuple, RoleGrantedEvent.OutputTuple, RoleGrantedEvent.OutputObject>;
        "RoleRevoked(bytes32,address,address)": TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
        RoleRevoked: TypedContractEvent<RoleRevokedEvent.InputTuple, RoleRevokedEvent.OutputTuple, RoleRevokedEvent.OutputObject>;
        "SignatureSenderUpdated(address)": TypedContractEvent<SignatureSenderUpdatedEvent.InputTuple, SignatureSenderUpdatedEvent.OutputTuple, SignatureSenderUpdatedEvent.OutputObject>;
        SignatureSenderUpdated: TypedContractEvent<SignatureSenderUpdatedEvent.InputTuple, SignatureSenderUpdatedEvent.OutputTuple, SignatureSenderUpdatedEvent.OutputObject>;
        "SubscriptionCanceled(uint256,address,uint256)": TypedContractEvent<SubscriptionCanceledEvent.InputTuple, SubscriptionCanceledEvent.OutputTuple, SubscriptionCanceledEvent.OutputObject>;
        SubscriptionCanceled: TypedContractEvent<SubscriptionCanceledEvent.InputTuple, SubscriptionCanceledEvent.OutputTuple, SubscriptionCanceledEvent.OutputObject>;
        "SubscriptionConsumerAdded(uint256,address)": TypedContractEvent<SubscriptionConsumerAddedEvent.InputTuple, SubscriptionConsumerAddedEvent.OutputTuple, SubscriptionConsumerAddedEvent.OutputObject>;
        SubscriptionConsumerAdded: TypedContractEvent<SubscriptionConsumerAddedEvent.InputTuple, SubscriptionConsumerAddedEvent.OutputTuple, SubscriptionConsumerAddedEvent.OutputObject>;
        "SubscriptionConsumerRemoved(uint256,address)": TypedContractEvent<SubscriptionConsumerRemovedEvent.InputTuple, SubscriptionConsumerRemovedEvent.OutputTuple, SubscriptionConsumerRemovedEvent.OutputObject>;
        SubscriptionConsumerRemoved: TypedContractEvent<SubscriptionConsumerRemovedEvent.InputTuple, SubscriptionConsumerRemovedEvent.OutputTuple, SubscriptionConsumerRemovedEvent.OutputObject>;
        "SubscriptionCreated(uint256,address)": TypedContractEvent<SubscriptionCreatedEvent.InputTuple, SubscriptionCreatedEvent.OutputTuple, SubscriptionCreatedEvent.OutputObject>;
        SubscriptionCreated: TypedContractEvent<SubscriptionCreatedEvent.InputTuple, SubscriptionCreatedEvent.OutputTuple, SubscriptionCreatedEvent.OutputObject>;
        "SubscriptionFundedWithNative(uint256,uint256,uint256)": TypedContractEvent<SubscriptionFundedWithNativeEvent.InputTuple, SubscriptionFundedWithNativeEvent.OutputTuple, SubscriptionFundedWithNativeEvent.OutputObject>;
        SubscriptionFundedWithNative: TypedContractEvent<SubscriptionFundedWithNativeEvent.InputTuple, SubscriptionFundedWithNativeEvent.OutputTuple, SubscriptionFundedWithNativeEvent.OutputObject>;
        "SubscriptionOwnerTransferRequested(uint256,address,address)": TypedContractEvent<SubscriptionOwnerTransferRequestedEvent.InputTuple, SubscriptionOwnerTransferRequestedEvent.OutputTuple, SubscriptionOwnerTransferRequestedEvent.OutputObject>;
        SubscriptionOwnerTransferRequested: TypedContractEvent<SubscriptionOwnerTransferRequestedEvent.InputTuple, SubscriptionOwnerTransferRequestedEvent.OutputTuple, SubscriptionOwnerTransferRequestedEvent.OutputObject>;
        "SubscriptionOwnerTransferred(uint256,address,address)": TypedContractEvent<SubscriptionOwnerTransferredEvent.InputTuple, SubscriptionOwnerTransferredEvent.OutputTuple, SubscriptionOwnerTransferredEvent.OutputObject>;
        SubscriptionOwnerTransferred: TypedContractEvent<SubscriptionOwnerTransferredEvent.InputTuple, SubscriptionOwnerTransferredEvent.OutputTuple, SubscriptionOwnerTransferredEvent.OutputObject>;
        "Upgraded(address)": TypedContractEvent<UpgradedEvent.InputTuple, UpgradedEvent.OutputTuple, UpgradedEvent.OutputObject>;
        Upgraded: TypedContractEvent<UpgradedEvent.InputTuple, UpgradedEvent.OutputTuple, UpgradedEvent.OutputObject>;
    };
}
