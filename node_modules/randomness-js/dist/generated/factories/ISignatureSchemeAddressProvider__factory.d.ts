import { type ContractRunner } from "ethers";
import type { ISignatureSchemeAddressProvider, ISignatureSchemeAddressProviderInterface } from "../ISignatureSchemeAddressProvider";
export declare class ISignatureSchemeAddressProvider__factory {
    static readonly abi: readonly [{
        readonly type: "function";
        readonly name: "getSignatureSchemeAddress";
        readonly inputs: readonly [{
            readonly name: "schemeID";
            readonly type: "string";
            readonly internalType: "string";
        }];
        readonly outputs: readonly [{
            readonly name: "";
            readonly type: "address";
            readonly internalType: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly name: "isSupportedScheme";
        readonly inputs: readonly [{
            readonly name: "schemeID";
            readonly type: "string";
            readonly internalType: "string";
        }];
        readonly outputs: readonly [{
            readonly name: "";
            readonly type: "bool";
            readonly internalType: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly name: "updateSignatureScheme";
        readonly inputs: readonly [{
            readonly name: "schemeID";
            readonly type: "string";
            readonly internalType: "string";
        }, {
            readonly name: "schemeAddress";
            readonly type: "address";
            readonly internalType: "address";
        }];
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }];
    static createInterface(): ISignatureSchemeAddressProviderInterface;
    static connect(address: string, runner?: ContractRunner | null): ISignatureSchemeAddressProvider;
}
