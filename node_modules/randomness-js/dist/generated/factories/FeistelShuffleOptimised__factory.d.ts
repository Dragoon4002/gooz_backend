import { ContractFactory, ContractTransactionResponse } from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { FeistelShuffleOptimised, FeistelShuffleOptimisedInterface } from "../FeistelShuffleOptimised";
type FeistelShuffleOptimisedConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class FeistelShuffleOptimised__factory extends ContractFactory {
    constructor(...args: FeistelShuffleOptimisedConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<FeistelShuffleOptimised & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): FeistelShuffleOptimised__factory;
    static readonly bytecode = "0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea26469706673582212200d3d32878ec21758735a96467087a3e297b57211a5046cadc38f0d50afd567af64736f6c634300081c0033";
    static readonly abi: readonly [{
        readonly type: "error";
        readonly name: "InvalidInputs";
        readonly inputs: readonly [];
    }];
    static createInterface(): FeistelShuffleOptimisedInterface;
    static connect(address: string, runner?: ContractRunner | null): FeistelShuffleOptimised;
}
export {};
