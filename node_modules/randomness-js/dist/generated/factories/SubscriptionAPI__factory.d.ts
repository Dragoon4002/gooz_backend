import { type ContractRunner } from "ethers";
import type { SubscriptionAPI, SubscriptionAPIInterface } from "../SubscriptionAPI";
export declare class SubscriptionAPI__factory {
    static readonly abi: readonly [{
        readonly type: "function";
        readonly name: "MAX_CONSUMERS";
        readonly inputs: readonly [];
        readonly outputs: readonly [{
            readonly name: "";
            readonly type: "uint16";
            readonly internalType: "uint16";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly name: "acceptSubscriptionOwnerTransfer";
        readonly inputs: readonly [{
            readonly name: "subId";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }];
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly name: "addConsumer";
        readonly inputs: readonly [{
            readonly name: "subId";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "consumer";
            readonly type: "address";
            readonly internalType: "address";
        }];
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly name: "cancelSubscription";
        readonly inputs: readonly [{
            readonly name: "subId";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "to";
            readonly type: "address";
            readonly internalType: "address";
        }];
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly name: "createSubscription";
        readonly inputs: readonly [];
        readonly outputs: readonly [{
            readonly name: "subId";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly name: "fundSubscriptionWithNative";
        readonly inputs: readonly [{
            readonly name: "subId";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }];
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly name: "getActiveSubscriptionIds";
        readonly inputs: readonly [{
            readonly name: "startIndex";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "maxCount";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }];
        readonly outputs: readonly [{
            readonly name: "ids";
            readonly type: "uint256[]";
            readonly internalType: "uint256[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly name: "getSubscription";
        readonly inputs: readonly [{
            readonly name: "subId";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }];
        readonly outputs: readonly [{
            readonly name: "nativeBalance";
            readonly type: "uint96";
            readonly internalType: "uint96";
        }, {
            readonly name: "reqCount";
            readonly type: "uint64";
            readonly internalType: "uint64";
        }, {
            readonly name: "subOwner";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "consumers";
            readonly type: "address[]";
            readonly internalType: "address[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly name: "pendingRequestExists";
        readonly inputs: readonly [{
            readonly name: "subId";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }];
        readonly outputs: readonly [{
            readonly name: "";
            readonly type: "bool";
            readonly internalType: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly name: "removeConsumer";
        readonly inputs: readonly [{
            readonly name: "subId";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "consumer";
            readonly type: "address";
            readonly internalType: "address";
        }];
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly name: "requestSubscriptionOwnerTransfer";
        readonly inputs: readonly [{
            readonly name: "subId";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "newOwner";
            readonly type: "address";
            readonly internalType: "address";
        }];
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly name: "s_config";
        readonly inputs: readonly [];
        readonly outputs: readonly [{
            readonly name: "maxGasLimit";
            readonly type: "uint32";
            readonly internalType: "uint32";
        }, {
            readonly name: "gasAfterPaymentCalculation";
            readonly type: "uint32";
            readonly internalType: "uint32";
        }, {
            readonly name: "fulfillmentFlatFeeNativePPM";
            readonly type: "uint32";
            readonly internalType: "uint32";
        }, {
            readonly name: "weiPerUnitGas";
            readonly type: "uint32";
            readonly internalType: "uint32";
        }, {
            readonly name: "blsPairingCheckOverhead";
            readonly type: "uint32";
            readonly internalType: "uint32";
        }, {
            readonly name: "nativePremiumPercentage";
            readonly type: "uint8";
            readonly internalType: "uint8";
        }, {
            readonly name: "gasForCallExactCheck";
            readonly type: "uint32";
            readonly internalType: "uint32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly name: "s_currentSubNonce";
        readonly inputs: readonly [];
        readonly outputs: readonly [{
            readonly name: "";
            readonly type: "uint64";
            readonly internalType: "uint64";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly name: "s_totalNativeBalance";
        readonly inputs: readonly [];
        readonly outputs: readonly [{
            readonly name: "";
            readonly type: "uint96";
            readonly internalType: "uint96";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly name: "s_withdrawableDirectFundingFeeNative";
        readonly inputs: readonly [];
        readonly outputs: readonly [{
            readonly name: "";
            readonly type: "uint96";
            readonly internalType: "uint96";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly name: "s_withdrawableSubscriptionFeeNative";
        readonly inputs: readonly [];
        readonly outputs: readonly [{
            readonly name: "";
            readonly type: "uint96";
            readonly internalType: "uint96";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "event";
        readonly name: "SubscriptionCanceled";
        readonly inputs: readonly [{
            readonly name: "subId";
            readonly type: "uint256";
            readonly indexed: true;
            readonly internalType: "uint256";
        }, {
            readonly name: "to";
            readonly type: "address";
            readonly indexed: false;
            readonly internalType: "address";
        }, {
            readonly name: "amountNative";
            readonly type: "uint256";
            readonly indexed: false;
            readonly internalType: "uint256";
        }];
        readonly anonymous: false;
    }, {
        readonly type: "event";
        readonly name: "SubscriptionConsumerAdded";
        readonly inputs: readonly [{
            readonly name: "subId";
            readonly type: "uint256";
            readonly indexed: true;
            readonly internalType: "uint256";
        }, {
            readonly name: "consumer";
            readonly type: "address";
            readonly indexed: false;
            readonly internalType: "address";
        }];
        readonly anonymous: false;
    }, {
        readonly type: "event";
        readonly name: "SubscriptionConsumerRemoved";
        readonly inputs: readonly [{
            readonly name: "subId";
            readonly type: "uint256";
            readonly indexed: true;
            readonly internalType: "uint256";
        }, {
            readonly name: "consumer";
            readonly type: "address";
            readonly indexed: false;
            readonly internalType: "address";
        }];
        readonly anonymous: false;
    }, {
        readonly type: "event";
        readonly name: "SubscriptionCreated";
        readonly inputs: readonly [{
            readonly name: "subId";
            readonly type: "uint256";
            readonly indexed: true;
            readonly internalType: "uint256";
        }, {
            readonly name: "owner";
            readonly type: "address";
            readonly indexed: false;
            readonly internalType: "address";
        }];
        readonly anonymous: false;
    }, {
        readonly type: "event";
        readonly name: "SubscriptionFundedWithNative";
        readonly inputs: readonly [{
            readonly name: "subId";
            readonly type: "uint256";
            readonly indexed: true;
            readonly internalType: "uint256";
        }, {
            readonly name: "oldNativeBalance";
            readonly type: "uint256";
            readonly indexed: false;
            readonly internalType: "uint256";
        }, {
            readonly name: "newNativeBalance";
            readonly type: "uint256";
            readonly indexed: false;
            readonly internalType: "uint256";
        }];
        readonly anonymous: false;
    }, {
        readonly type: "event";
        readonly name: "SubscriptionOwnerTransferRequested";
        readonly inputs: readonly [{
            readonly name: "subId";
            readonly type: "uint256";
            readonly indexed: true;
            readonly internalType: "uint256";
        }, {
            readonly name: "from";
            readonly type: "address";
            readonly indexed: false;
            readonly internalType: "address";
        }, {
            readonly name: "to";
            readonly type: "address";
            readonly indexed: false;
            readonly internalType: "address";
        }];
        readonly anonymous: false;
    }, {
        readonly type: "event";
        readonly name: "SubscriptionOwnerTransferred";
        readonly inputs: readonly [{
            readonly name: "subId";
            readonly type: "uint256";
            readonly indexed: true;
            readonly internalType: "uint256";
        }, {
            readonly name: "from";
            readonly type: "address";
            readonly indexed: false;
            readonly internalType: "address";
        }, {
            readonly name: "to";
            readonly type: "address";
            readonly indexed: false;
            readonly internalType: "address";
        }];
        readonly anonymous: false;
    }, {
        readonly type: "error";
        readonly name: "BalanceInvariantViolated";
        readonly inputs: readonly [{
            readonly name: "internalBalance";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "externalBalance";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }];
    }, {
        readonly type: "error";
        readonly name: "FailedToSendNative";
        readonly inputs: readonly [];
    }, {
        readonly type: "error";
        readonly name: "IndexOutOfRange";
        readonly inputs: readonly [];
    }, {
        readonly type: "error";
        readonly name: "InsufficientBalance";
        readonly inputs: readonly [];
    }, {
        readonly type: "error";
        readonly name: "InvalidCalldata";
        readonly inputs: readonly [];
    }, {
        readonly type: "error";
        readonly name: "InvalidConsumer";
        readonly inputs: readonly [{
            readonly name: "subId";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "consumer";
            readonly type: "address";
            readonly internalType: "address";
        }];
    }, {
        readonly type: "error";
        readonly name: "InvalidSubscription";
        readonly inputs: readonly [];
    }, {
        readonly type: "error";
        readonly name: "MustBeRequestedOwner";
        readonly inputs: readonly [{
            readonly name: "proposedOwner";
            readonly type: "address";
            readonly internalType: "address";
        }];
    }, {
        readonly type: "error";
        readonly name: "MustBeSubOwner";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly type: "address";
            readonly internalType: "address";
        }];
    }, {
        readonly type: "error";
        readonly name: "PendingRequestExists";
        readonly inputs: readonly [];
    }, {
        readonly type: "error";
        readonly name: "ReentrancyGuardReentrantCall";
        readonly inputs: readonly [];
    }, {
        readonly type: "error";
        readonly name: "TooManyConsumers";
        readonly inputs: readonly [];
    }];
    static createInterface(): SubscriptionAPIInterface;
    static connect(address: string, runner?: ContractRunner | null): SubscriptionAPI;
}
