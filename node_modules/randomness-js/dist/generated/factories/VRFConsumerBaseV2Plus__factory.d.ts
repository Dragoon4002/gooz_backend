import { type ContractRunner } from "ethers";
import type { VRFConsumerBaseV2Plus, VRFConsumerBaseV2PlusInterface } from "../VRFConsumerBaseV2Plus";
export declare class VRFConsumerBaseV2Plus__factory {
    static readonly abi: readonly [{
        readonly type: "function";
        readonly name: "acceptOwnership";
        readonly inputs: readonly [];
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly name: "owner";
        readonly inputs: readonly [];
        readonly outputs: readonly [{
            readonly name: "";
            readonly type: "address";
            readonly internalType: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly name: "rawFulfillRandomWords";
        readonly inputs: readonly [{
            readonly name: "requestId";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "randomWords";
            readonly type: "uint256[]";
            readonly internalType: "uint256[]";
        }];
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly name: "s_vrfCoordinator";
        readonly inputs: readonly [];
        readonly outputs: readonly [{
            readonly name: "";
            readonly type: "address";
            readonly internalType: "contract IVRFCoordinatorV2Plus";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly name: "setCoordinator";
        readonly inputs: readonly [{
            readonly name: "_vrfCoordinator";
            readonly type: "address";
            readonly internalType: "address";
        }];
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly name: "transferOwnership";
        readonly inputs: readonly [{
            readonly name: "to";
            readonly type: "address";
            readonly internalType: "address";
        }];
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "event";
        readonly name: "CoordinatorSet";
        readonly inputs: readonly [{
            readonly name: "vrfCoordinator";
            readonly type: "address";
            readonly indexed: false;
            readonly internalType: "address";
        }];
        readonly anonymous: false;
    }, {
        readonly type: "event";
        readonly name: "OwnershipTransferRequested";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly type: "address";
            readonly indexed: true;
            readonly internalType: "address";
        }, {
            readonly name: "to";
            readonly type: "address";
            readonly indexed: true;
            readonly internalType: "address";
        }];
        readonly anonymous: false;
    }, {
        readonly type: "event";
        readonly name: "OwnershipTransferred";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly type: "address";
            readonly indexed: true;
            readonly internalType: "address";
        }, {
            readonly name: "to";
            readonly type: "address";
            readonly indexed: true;
            readonly internalType: "address";
        }];
        readonly anonymous: false;
    }, {
        readonly type: "error";
        readonly name: "OnlyCoordinatorCanFulfill";
        readonly inputs: readonly [{
            readonly name: "have";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "want";
            readonly type: "address";
            readonly internalType: "address";
        }];
    }, {
        readonly type: "error";
        readonly name: "OnlyOwnerOrCoordinator";
        readonly inputs: readonly [{
            readonly name: "have";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "owner";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "coordinator";
            readonly type: "address";
            readonly internalType: "address";
        }];
    }, {
        readonly type: "error";
        readonly name: "ZeroAddress";
        readonly inputs: readonly [];
    }];
    static createInterface(): VRFConsumerBaseV2PlusInterface;
    static connect(address: string, runner?: ContractRunner | null): VRFConsumerBaseV2Plus;
}
