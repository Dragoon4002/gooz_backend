var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __commonJS = (cb, mod2) => function __require() {
  return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target,
  mod2
));
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);
var __privateWrapper = (obj, member, setter, getter) => ({
  set _(value) {
    __privateSet(obj, member, value, setter);
  },
  get _() {
    return __privateGet(obj, member, getter);
  }
});

// node_modules/@noble/hashes/crypto.js
var require_crypto = __commonJS({
  "node_modules/@noble/hashes/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.crypto = void 0;
    exports.crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
  }
});

// node_modules/@noble/hashes/utils.js
var require_utils = __commonJS({
  "node_modules/@noble/hashes/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.randomBytes = exports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;
    var crypto_1 = require_crypto();
    var u8a3 = (a) => a instanceof Uint8Array;
    var u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
    exports.u8 = u8;
    var u322 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
    exports.u32 = u322;
    var createView2 = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
    exports.createView = createView2;
    var rotr2 = (word, shift) => word << 32 - shift | word >>> shift;
    exports.rotr = rotr2;
    exports.isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
    if (!exports.isLE)
      throw new Error("Non little-endian hardware is not supported");
    var hexes2 = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
    function bytesToHex2(bytes2) {
      if (!u8a3(bytes2))
        throw new Error("Uint8Array expected");
      let hex = "";
      for (let i = 0; i < bytes2.length; i++) {
        hex += hexes2[bytes2[i]];
      }
      return hex;
    }
    exports.bytesToHex = bytesToHex2;
    function hexToBytes2(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      const len = hex.length;
      if (len % 2)
        throw new Error("padded hex string expected, got unpadded hex of length " + len);
      const array = new Uint8Array(len / 2);
      for (let i = 0; i < array.length; i++) {
        const j = i * 2;
        const hexByte = hex.slice(j, j + 2);
        const byte = Number.parseInt(hexByte, 16);
        if (Number.isNaN(byte) || byte < 0)
          throw new Error("Invalid byte sequence");
        array[i] = byte;
      }
      return array;
    }
    exports.hexToBytes = hexToBytes2;
    var nextTick2 = async () => {
    };
    exports.nextTick = nextTick2;
    async function asyncLoop2(iters, tick, cb) {
      let ts = Date.now();
      for (let i = 0; i < iters; i++) {
        cb(i);
        const diff = Date.now() - ts;
        if (diff >= 0 && diff < tick)
          continue;
        await (0, exports.nextTick)();
        ts += diff;
      }
    }
    exports.asyncLoop = asyncLoop2;
    function utf8ToBytes3(str) {
      if (typeof str !== "string")
        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
      return new Uint8Array(new TextEncoder().encode(str));
    }
    exports.utf8ToBytes = utf8ToBytes3;
    function toBytes2(data) {
      if (typeof data === "string")
        data = utf8ToBytes3(data);
      if (!u8a3(data))
        throw new Error(`expected Uint8Array, got ${typeof data}`);
      return data;
    }
    exports.toBytes = toBytes2;
    function concatBytes3(...arrays) {
      const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
      let pad = 0;
      arrays.forEach((a) => {
        if (!u8a3(a))
          throw new Error("Uint8Array expected");
        r.set(a, pad);
        pad += a.length;
      });
      return r;
    }
    exports.concatBytes = concatBytes3;
    var Hash2 = class {
      // Safe version that clones internal state
      clone() {
        return this._cloneInto();
      }
    };
    exports.Hash = Hash2;
    var toStr2 = {}.toString;
    function checkOpts2(defaults, opts) {
      if (opts !== void 0 && toStr2.call(opts) !== "[object Object]")
        throw new Error("Options should be object or undefined");
      const merged = Object.assign(defaults, opts);
      return merged;
    }
    exports.checkOpts = checkOpts2;
    function wrapConstructor2(hashCons) {
      const hashC = (msg) => hashCons().update(toBytes2(msg)).digest();
      const tmp = hashCons();
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = () => hashCons();
      return hashC;
    }
    exports.wrapConstructor = wrapConstructor2;
    function wrapConstructorWithOpts(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    exports.wrapConstructorWithOpts = wrapConstructorWithOpts;
    function wrapXOFConstructorWithOpts2(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    exports.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts2;
    function randomBytes4(bytesLength = 32) {
      if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === "function") {
        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
      }
      throw new Error("crypto.getRandomValues must be defined");
    }
    exports.randomBytes = randomBytes4;
  }
});

// node_modules/@noble/curves/abstract/utils.js
var require_utils2 = __commonJS({
  "node_modules/@noble/curves/abstract/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.notImplemented = exports.bitMask = void 0;
    exports.isBytes = isBytes;
    exports.abytes = abytes;
    exports.abool = abool;
    exports.bytesToHex = bytesToHex2;
    exports.numberToHexUnpadded = numberToHexUnpadded2;
    exports.hexToNumber = hexToNumber2;
    exports.hexToBytes = hexToBytes2;
    exports.bytesToNumberBE = bytesToNumberBE2;
    exports.bytesToNumberLE = bytesToNumberLE2;
    exports.numberToBytesBE = numberToBytesBE2;
    exports.numberToBytesLE = numberToBytesLE2;
    exports.numberToVarBytesBE = numberToVarBytesBE2;
    exports.ensureBytes = ensureBytes2;
    exports.concatBytes = concatBytes3;
    exports.equalBytes = equalBytes3;
    exports.utf8ToBytes = utf8ToBytes3;
    exports.inRange = inRange;
    exports.aInRange = aInRange;
    exports.bitLen = bitLen2;
    exports.bitGet = bitGet2;
    exports.bitSet = bitSet2;
    exports.createHmacDrbg = createHmacDrbg2;
    exports.validateObject = validateObject2;
    exports.memoized = memoized;
    var _0n7 = /* @__PURE__ */ BigInt(0);
    var _1n7 = /* @__PURE__ */ BigInt(1);
    var _2n6 = /* @__PURE__ */ BigInt(2);
    function isBytes(a) {
      return a instanceof Uint8Array || ArrayBuffer.isView(a) && a.constructor.name === "Uint8Array";
    }
    function abytes(item) {
      if (!isBytes(item))
        throw new Error("Uint8Array expected");
    }
    function abool(title, value) {
      if (typeof value !== "boolean")
        throw new Error(title + " boolean expected, got " + value);
    }
    var hexes2 = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
    function bytesToHex2(bytes2) {
      abytes(bytes2);
      let hex = "";
      for (let i = 0; i < bytes2.length; i++) {
        hex += hexes2[bytes2[i]];
      }
      return hex;
    }
    function numberToHexUnpadded2(num) {
      const hex = num.toString(16);
      return hex.length & 1 ? "0" + hex : hex;
    }
    function hexToNumber2(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      return hex === "" ? _0n7 : BigInt("0x" + hex);
    }
    var asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
    function asciiToBase16(ch) {
      if (ch >= asciis._0 && ch <= asciis._9)
        return ch - asciis._0;
      if (ch >= asciis.A && ch <= asciis.F)
        return ch - (asciis.A - 10);
      if (ch >= asciis.a && ch <= asciis.f)
        return ch - (asciis.a - 10);
      return;
    }
    function hexToBytes2(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      const hl = hex.length;
      const al = hl / 2;
      if (hl % 2)
        throw new Error("hex string expected, got unpadded hex of length " + hl);
      const array = new Uint8Array(al);
      for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
        const n1 = asciiToBase16(hex.charCodeAt(hi));
        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
        if (n1 === void 0 || n2 === void 0) {
          const char = hex[hi] + hex[hi + 1];
          throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
        }
        array[ai] = n1 * 16 + n2;
      }
      return array;
    }
    function bytesToNumberBE2(bytes2) {
      return hexToNumber2(bytesToHex2(bytes2));
    }
    function bytesToNumberLE2(bytes2) {
      abytes(bytes2);
      return hexToNumber2(bytesToHex2(Uint8Array.from(bytes2).reverse()));
    }
    function numberToBytesBE2(n2, len) {
      return hexToBytes2(n2.toString(16).padStart(len * 2, "0"));
    }
    function numberToBytesLE2(n2, len) {
      return numberToBytesBE2(n2, len).reverse();
    }
    function numberToVarBytesBE2(n2) {
      return hexToBytes2(numberToHexUnpadded2(n2));
    }
    function ensureBytes2(title, hex, expectedLength) {
      let res;
      if (typeof hex === "string") {
        try {
          res = hexToBytes2(hex);
        } catch (e) {
          throw new Error(title + " must be hex string or Uint8Array, cause: " + e);
        }
      } else if (isBytes(hex)) {
        res = Uint8Array.from(hex);
      } else {
        throw new Error(title + " must be hex string or Uint8Array");
      }
      const len = res.length;
      if (typeof expectedLength === "number" && len !== expectedLength)
        throw new Error(title + " of length " + expectedLength + " expected, got " + len);
      return res;
    }
    function concatBytes3(...arrays) {
      let sum = 0;
      for (let i = 0; i < arrays.length; i++) {
        const a = arrays[i];
        abytes(a);
        sum += a.length;
      }
      const res = new Uint8Array(sum);
      for (let i = 0, pad = 0; i < arrays.length; i++) {
        const a = arrays[i];
        res.set(a, pad);
        pad += a.length;
      }
      return res;
    }
    function equalBytes3(a, b2) {
      if (a.length !== b2.length)
        return false;
      let diff = 0;
      for (let i = 0; i < a.length; i++)
        diff |= a[i] ^ b2[i];
      return diff === 0;
    }
    function utf8ToBytes3(str) {
      if (typeof str !== "string")
        throw new Error("string expected");
      return new Uint8Array(new TextEncoder().encode(str));
    }
    var isPosBig = (n2) => typeof n2 === "bigint" && _0n7 <= n2;
    function inRange(n2, min, max) {
      return isPosBig(n2) && isPosBig(min) && isPosBig(max) && min <= n2 && n2 < max;
    }
    function aInRange(title, n2, min, max) {
      if (!inRange(n2, min, max))
        throw new Error("expected valid " + title + ": " + min + " <= n < " + max + ", got " + n2);
    }
    function bitLen2(n2) {
      let len;
      for (len = 0; n2 > _0n7; n2 >>= _1n7, len += 1)
        ;
      return len;
    }
    function bitGet2(n2, pos) {
      return n2 >> BigInt(pos) & _1n7;
    }
    function bitSet2(n2, pos, value) {
      return n2 | (value ? _1n7 : _0n7) << BigInt(pos);
    }
    var bitMask2 = (n2) => (_2n6 << BigInt(n2 - 1)) - _1n7;
    exports.bitMask = bitMask2;
    var u8n2 = (data) => new Uint8Array(data);
    var u8fr2 = (arr) => Uint8Array.from(arr);
    function createHmacDrbg2(hashLen, qByteLen, hmacFn) {
      if (typeof hashLen !== "number" || hashLen < 2)
        throw new Error("hashLen must be a number");
      if (typeof qByteLen !== "number" || qByteLen < 2)
        throw new Error("qByteLen must be a number");
      if (typeof hmacFn !== "function")
        throw new Error("hmacFn must be a function");
      let v = u8n2(hashLen);
      let k = u8n2(hashLen);
      let i = 0;
      const reset = () => {
        v.fill(1);
        k.fill(0);
        i = 0;
      };
      const h = (...b2) => hmacFn(k, v, ...b2);
      const reseed = (seed = u8n2()) => {
        k = h(u8fr2([0]), seed);
        v = h();
        if (seed.length === 0)
          return;
        k = h(u8fr2([1]), seed);
        v = h();
      };
      const gen2 = () => {
        if (i++ >= 1e3)
          throw new Error("drbg: tried 1000 values");
        let len = 0;
        const out = [];
        while (len < qByteLen) {
          v = h();
          const sl = v.slice();
          out.push(sl);
          len += v.length;
        }
        return concatBytes3(...out);
      };
      const genUntil = (seed, pred) => {
        reset();
        reseed(seed);
        let res = void 0;
        while (!(res = pred(gen2())))
          reseed();
        reset();
        return res;
      };
      return genUntil;
    }
    var validatorFns2 = {
      bigint: (val) => typeof val === "bigint",
      function: (val) => typeof val === "function",
      boolean: (val) => typeof val === "boolean",
      string: (val) => typeof val === "string",
      stringOrUint8Array: (val) => typeof val === "string" || isBytes(val),
      isSafeInteger: (val) => Number.isSafeInteger(val),
      array: (val) => Array.isArray(val),
      field: (val, object2) => object2.Fp.isValid(val),
      hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
    };
    function validateObject2(object2, validators, optValidators = {}) {
      const checkField = (fieldName, type, isOptional) => {
        const checkVal = validatorFns2[type];
        if (typeof checkVal !== "function")
          throw new Error("invalid validator function");
        const val = object2[fieldName];
        if (isOptional && val === void 0)
          return;
        if (!checkVal(val, object2)) {
          throw new Error("param " + String(fieldName) + " is invalid. Expected " + type + ", got " + val);
        }
      };
      for (const [fieldName, type] of Object.entries(validators))
        checkField(fieldName, type, false);
      for (const [fieldName, type] of Object.entries(optValidators))
        checkField(fieldName, type, true);
      return object2;
    }
    var notImplemented = () => {
      throw new Error("not implemented");
    };
    exports.notImplemented = notImplemented;
    function memoized(fn) {
      const map = /* @__PURE__ */ new WeakMap();
      return (arg, ...args) => {
        const val = map.get(arg);
        if (val !== void 0)
          return val;
        const computed = fn(arg, ...args);
        map.set(arg, computed);
        return computed;
      };
    }
  }
});

// node_modules/@noble/curves/abstract/modular.js
var require_modular = __commonJS({
  "node_modules/@noble/curves/abstract/modular.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isNegativeLE = void 0;
    exports.mod = mod2;
    exports.pow = pow3;
    exports.pow2 = pow22;
    exports.invert = invert2;
    exports.tonelliShanks = tonelliShanks2;
    exports.FpSqrt = FpSqrt2;
    exports.validateField = validateField2;
    exports.FpPow = FpPow2;
    exports.FpInvertBatch = FpInvertBatch2;
    exports.FpDiv = FpDiv;
    exports.FpLegendre = FpLegendre;
    exports.FpIsSquare = FpIsSquare;
    exports.nLength = nLength2;
    exports.Field = Field2;
    exports.FpSqrtOdd = FpSqrtOdd;
    exports.FpSqrtEven = FpSqrtEven;
    exports.hashToPrivateScalar = hashToPrivateScalar;
    exports.getFieldBytesLength = getFieldBytesLength2;
    exports.getMinHashLength = getMinHashLength2;
    exports.mapHashToField = mapHashToField2;
    var utils_js_1 = require_utils2();
    var _0n7 = BigInt(0);
    var _1n7 = BigInt(1);
    var _2n6 = /* @__PURE__ */ BigInt(2);
    var _3n3 = /* @__PURE__ */ BigInt(3);
    var _4n3 = /* @__PURE__ */ BigInt(4);
    var _5n2 = /* @__PURE__ */ BigInt(5);
    var _8n2 = /* @__PURE__ */ BigInt(8);
    var _9n2 = /* @__PURE__ */ BigInt(9);
    var _16n2 = /* @__PURE__ */ BigInt(16);
    function mod2(a, b2) {
      const result = a % b2;
      return result >= _0n7 ? result : b2 + result;
    }
    function pow3(num, power, modulo) {
      if (power < _0n7)
        throw new Error("invalid exponent, negatives unsupported");
      if (modulo <= _0n7)
        throw new Error("invalid modulus");
      if (modulo === _1n7)
        return _0n7;
      let res = _1n7;
      while (power > _0n7) {
        if (power & _1n7)
          res = res * num % modulo;
        num = num * num % modulo;
        power >>= _1n7;
      }
      return res;
    }
    function pow22(x, power, modulo) {
      let res = x;
      while (power-- > _0n7) {
        res *= res;
        res %= modulo;
      }
      return res;
    }
    function invert2(number2, modulo) {
      if (number2 === _0n7)
        throw new Error("invert: expected non-zero number");
      if (modulo <= _0n7)
        throw new Error("invert: expected positive modulus, got " + modulo);
      let a = mod2(number2, modulo);
      let b2 = modulo;
      let x = _0n7, y = _1n7, u = _1n7, v = _0n7;
      while (a !== _0n7) {
        const q = b2 / a;
        const r = b2 % a;
        const m = x - u * q;
        const n2 = y - v * q;
        b2 = a, a = r, x = u, y = v, u = m, v = n2;
      }
      const gcd = b2;
      if (gcd !== _1n7)
        throw new Error("invert: does not exist");
      return mod2(x, modulo);
    }
    function tonelliShanks2(P) {
      const legendreC = (P - _1n7) / _2n6;
      let Q, S2, Z;
      for (Q = P - _1n7, S2 = 0; Q % _2n6 === _0n7; Q /= _2n6, S2++)
        ;
      for (Z = _2n6; Z < P && pow3(Z, legendreC, P) !== P - _1n7; Z++) {
        if (Z > 1e3)
          throw new Error("Cannot find square root: likely non-prime P");
      }
      if (S2 === 1) {
        const p1div4 = (P + _1n7) / _4n3;
        return function tonelliFast(Fp2, n2) {
          const root = Fp2.pow(n2, p1div4);
          if (!Fp2.eql(Fp2.sqr(root), n2))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      const Q1div2 = (Q + _1n7) / _2n6;
      return function tonelliSlow(Fp2, n2) {
        if (Fp2.pow(n2, legendreC) === Fp2.neg(Fp2.ONE))
          throw new Error("Cannot find square root");
        let r = S2;
        let g = Fp2.pow(Fp2.mul(Fp2.ONE, Z), Q);
        let x = Fp2.pow(n2, Q1div2);
        let b2 = Fp2.pow(n2, Q);
        while (!Fp2.eql(b2, Fp2.ONE)) {
          if (Fp2.eql(b2, Fp2.ZERO))
            return Fp2.ZERO;
          let m = 1;
          for (let t2 = Fp2.sqr(b2); m < r; m++) {
            if (Fp2.eql(t2, Fp2.ONE))
              break;
            t2 = Fp2.sqr(t2);
          }
          const ge = Fp2.pow(g, _1n7 << BigInt(r - m - 1));
          g = Fp2.sqr(ge);
          x = Fp2.mul(x, ge);
          b2 = Fp2.mul(b2, g);
          r = m;
        }
        return x;
      };
    }
    function FpSqrt2(P) {
      if (P % _4n3 === _3n3) {
        const p1div4 = (P + _1n7) / _4n3;
        return function sqrt3mod4(Fp2, n2) {
          const root = Fp2.pow(n2, p1div4);
          if (!Fp2.eql(Fp2.sqr(root), n2))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      if (P % _8n2 === _5n2) {
        const c1 = (P - _5n2) / _8n2;
        return function sqrt5mod8(Fp2, n2) {
          const n22 = Fp2.mul(n2, _2n6);
          const v = Fp2.pow(n22, c1);
          const nv = Fp2.mul(n2, v);
          const i = Fp2.mul(Fp2.mul(nv, _2n6), v);
          const root = Fp2.mul(nv, Fp2.sub(i, Fp2.ONE));
          if (!Fp2.eql(Fp2.sqr(root), n2))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      if (P % _16n2 === _9n2) {
      }
      return tonelliShanks2(P);
    }
    var isNegativeLE = (num, modulo) => (mod2(num, modulo) & _1n7) === _1n7;
    exports.isNegativeLE = isNegativeLE;
    var FIELD_FIELDS2 = [
      "create",
      "isValid",
      "is0",
      "neg",
      "inv",
      "sqrt",
      "sqr",
      "eql",
      "add",
      "sub",
      "mul",
      "pow",
      "div",
      "addN",
      "subN",
      "mulN",
      "sqrN"
    ];
    function validateField2(field) {
      const initial = {
        ORDER: "bigint",
        MASK: "bigint",
        BYTES: "isSafeInteger",
        BITS: "isSafeInteger"
      };
      const opts = FIELD_FIELDS2.reduce((map, val) => {
        map[val] = "function";
        return map;
      }, initial);
      return (0, utils_js_1.validateObject)(field, opts);
    }
    function FpPow2(f2, num, power) {
      if (power < _0n7)
        throw new Error("invalid exponent, negatives unsupported");
      if (power === _0n7)
        return f2.ONE;
      if (power === _1n7)
        return num;
      let p = f2.ONE;
      let d = num;
      while (power > _0n7) {
        if (power & _1n7)
          p = f2.mul(p, d);
        d = f2.sqr(d);
        power >>= _1n7;
      }
      return p;
    }
    function FpInvertBatch2(f2, nums) {
      const tmp = new Array(nums.length);
      const lastMultiplied = nums.reduce((acc, num, i) => {
        if (f2.is0(num))
          return acc;
        tmp[i] = acc;
        return f2.mul(acc, num);
      }, f2.ONE);
      const inverted = f2.inv(lastMultiplied);
      nums.reduceRight((acc, num, i) => {
        if (f2.is0(num))
          return acc;
        tmp[i] = f2.mul(acc, tmp[i]);
        return f2.mul(acc, num);
      }, inverted);
      return tmp;
    }
    function FpDiv(f2, lhs, rhs) {
      return f2.mul(lhs, typeof rhs === "bigint" ? invert2(rhs, f2.ORDER) : f2.inv(rhs));
    }
    function FpLegendre(order) {
      const legendreConst = (order - _1n7) / _2n6;
      return (f2, x) => f2.pow(x, legendreConst);
    }
    function FpIsSquare(f2) {
      const legendre = FpLegendre(f2.ORDER);
      return (x) => {
        const p = legendre(f2, x);
        return f2.eql(p, f2.ZERO) || f2.eql(p, f2.ONE);
      };
    }
    function nLength2(n2, nBitLength) {
      const _nBitLength = nBitLength !== void 0 ? nBitLength : n2.toString(2).length;
      const nByteLength = Math.ceil(_nBitLength / 8);
      return { nBitLength: _nBitLength, nByteLength };
    }
    function Field2(ORDER, bitLen2, isLE2 = false, redef = {}) {
      if (ORDER <= _0n7)
        throw new Error("invalid field: expected ORDER > 0, got " + ORDER);
      const { nBitLength: BITS, nByteLength: BYTES } = nLength2(ORDER, bitLen2);
      if (BYTES > 2048)
        throw new Error("invalid field: expected ORDER of <= 2048 bytes");
      let sqrtP;
      const f2 = Object.freeze({
        ORDER,
        isLE: isLE2,
        BITS,
        BYTES,
        MASK: (0, utils_js_1.bitMask)(BITS),
        ZERO: _0n7,
        ONE: _1n7,
        create: (num) => mod2(num, ORDER),
        isValid: (num) => {
          if (typeof num !== "bigint")
            throw new Error("invalid field element: expected bigint, got " + typeof num);
          return _0n7 <= num && num < ORDER;
        },
        is0: (num) => num === _0n7,
        isOdd: (num) => (num & _1n7) === _1n7,
        neg: (num) => mod2(-num, ORDER),
        eql: (lhs, rhs) => lhs === rhs,
        sqr: (num) => mod2(num * num, ORDER),
        add: (lhs, rhs) => mod2(lhs + rhs, ORDER),
        sub: (lhs, rhs) => mod2(lhs - rhs, ORDER),
        mul: (lhs, rhs) => mod2(lhs * rhs, ORDER),
        pow: (num, power) => FpPow2(f2, num, power),
        div: (lhs, rhs) => mod2(lhs * invert2(rhs, ORDER), ORDER),
        // Same as above, but doesn't normalize
        sqrN: (num) => num * num,
        addN: (lhs, rhs) => lhs + rhs,
        subN: (lhs, rhs) => lhs - rhs,
        mulN: (lhs, rhs) => lhs * rhs,
        inv: (num) => invert2(num, ORDER),
        sqrt: redef.sqrt || ((n2) => {
          if (!sqrtP)
            sqrtP = FpSqrt2(ORDER);
          return sqrtP(f2, n2);
        }),
        invertBatch: (lst) => FpInvertBatch2(f2, lst),
        // TODO: do we really need constant cmov?
        // We don't have const-time bigints anyway, so probably will be not very useful
        cmov: (a, b2, c) => c ? b2 : a,
        toBytes: (num) => isLE2 ? (0, utils_js_1.numberToBytesLE)(num, BYTES) : (0, utils_js_1.numberToBytesBE)(num, BYTES),
        fromBytes: (bytes2) => {
          if (bytes2.length !== BYTES)
            throw new Error("Field.fromBytes: expected " + BYTES + " bytes, got " + bytes2.length);
          return isLE2 ? (0, utils_js_1.bytesToNumberLE)(bytes2) : (0, utils_js_1.bytesToNumberBE)(bytes2);
        }
      });
      return Object.freeze(f2);
    }
    function FpSqrtOdd(Fp2, elm) {
      if (!Fp2.isOdd)
        throw new Error("Field doesn't have isOdd");
      const root = Fp2.sqrt(elm);
      return Fp2.isOdd(root) ? root : Fp2.neg(root);
    }
    function FpSqrtEven(Fp2, elm) {
      if (!Fp2.isOdd)
        throw new Error("Field doesn't have isOdd");
      const root = Fp2.sqrt(elm);
      return Fp2.isOdd(root) ? Fp2.neg(root) : root;
    }
    function hashToPrivateScalar(hash2, groupOrder, isLE2 = false) {
      hash2 = (0, utils_js_1.ensureBytes)("privateHash", hash2);
      const hashLen = hash2.length;
      const minLen = nLength2(groupOrder).nByteLength + 8;
      if (minLen < 24 || hashLen < minLen || hashLen > 1024)
        throw new Error("hashToPrivateScalar: expected " + minLen + "-1024 bytes of input, got " + hashLen);
      const num = isLE2 ? (0, utils_js_1.bytesToNumberLE)(hash2) : (0, utils_js_1.bytesToNumberBE)(hash2);
      return mod2(num, groupOrder - _1n7) + _1n7;
    }
    function getFieldBytesLength2(fieldOrder) {
      if (typeof fieldOrder !== "bigint")
        throw new Error("field order must be bigint");
      const bitLength = fieldOrder.toString(2).length;
      return Math.ceil(bitLength / 8);
    }
    function getMinHashLength2(fieldOrder) {
      const length = getFieldBytesLength2(fieldOrder);
      return length + Math.ceil(length / 2);
    }
    function mapHashToField2(key, fieldOrder, isLE2 = false) {
      const len = key.length;
      const fieldLen = getFieldBytesLength2(fieldOrder);
      const minLen = getMinHashLength2(fieldOrder);
      if (len < 16 || len < minLen || len > 1024)
        throw new Error("expected " + minLen + "-1024 bytes of input, got " + len);
      const num = isLE2 ? (0, utils_js_1.bytesToNumberLE)(key) : (0, utils_js_1.bytesToNumberBE)(key);
      const reduced = mod2(num, fieldOrder - _1n7) + _1n7;
      return isLE2 ? (0, utils_js_1.numberToBytesLE)(reduced, fieldLen) : (0, utils_js_1.numberToBytesBE)(reduced, fieldLen);
    }
  }
});

// node_modules/@noble/curves/abstract/hash-to-curve.js
var require_hash_to_curve = __commonJS({
  "node_modules/@noble/curves/abstract/hash-to-curve.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.expand_message_xmd = expand_message_xmd;
    exports.expand_message_xof = expand_message_xof;
    exports.hash_to_field = hash_to_field;
    exports.isogenyMap = isogenyMap;
    exports.createHasher = createHasher;
    var modular_js_1 = require_modular();
    var utils_js_1 = require_utils2();
    var os2ip = utils_js_1.bytesToNumberBE;
    function i2osp(value, length) {
      anum(value);
      anum(length);
      if (value < 0 || value >= 1 << 8 * length)
        throw new Error("invalid I2OSP input: " + value);
      const res = Array.from({ length }).fill(0);
      for (let i = length - 1; i >= 0; i--) {
        res[i] = value & 255;
        value >>>= 8;
      }
      return new Uint8Array(res);
    }
    function strxor(a, b2) {
      const arr = new Uint8Array(a.length);
      for (let i = 0; i < a.length; i++) {
        arr[i] = a[i] ^ b2[i];
      }
      return arr;
    }
    function anum(item) {
      if (!Number.isSafeInteger(item))
        throw new Error("number expected");
    }
    function expand_message_xmd(msg, DST, lenInBytes, H) {
      (0, utils_js_1.abytes)(msg);
      (0, utils_js_1.abytes)(DST);
      anum(lenInBytes);
      if (DST.length > 255)
        DST = H((0, utils_js_1.concatBytes)((0, utils_js_1.utf8ToBytes)("H2C-OVERSIZE-DST-"), DST));
      const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;
      const ell = Math.ceil(lenInBytes / b_in_bytes);
      if (lenInBytes > 65535 || ell > 255)
        throw new Error("expand_message_xmd: invalid lenInBytes");
      const DST_prime = (0, utils_js_1.concatBytes)(DST, i2osp(DST.length, 1));
      const Z_pad = i2osp(0, r_in_bytes);
      const l_i_b_str = i2osp(lenInBytes, 2);
      const b2 = new Array(ell);
      const b_0 = H((0, utils_js_1.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
      b2[0] = H((0, utils_js_1.concatBytes)(b_0, i2osp(1, 1), DST_prime));
      for (let i = 1; i <= ell; i++) {
        const args = [strxor(b_0, b2[i - 1]), i2osp(i + 1, 1), DST_prime];
        b2[i] = H((0, utils_js_1.concatBytes)(...args));
      }
      const pseudo_random_bytes = (0, utils_js_1.concatBytes)(...b2);
      return pseudo_random_bytes.slice(0, lenInBytes);
    }
    function expand_message_xof(msg, DST, lenInBytes, k, H) {
      (0, utils_js_1.abytes)(msg);
      (0, utils_js_1.abytes)(DST);
      anum(lenInBytes);
      if (DST.length > 255) {
        const dkLen = Math.ceil(2 * k / 8);
        DST = H.create({ dkLen }).update((0, utils_js_1.utf8ToBytes)("H2C-OVERSIZE-DST-")).update(DST).digest();
      }
      if (lenInBytes > 65535 || DST.length > 255)
        throw new Error("expand_message_xof: invalid lenInBytes");
      return H.create({ dkLen: lenInBytes }).update(msg).update(i2osp(lenInBytes, 2)).update(DST).update(i2osp(DST.length, 1)).digest();
    }
    function hash_to_field(msg, count, options) {
      (0, utils_js_1.validateObject)(options, {
        DST: "stringOrUint8Array",
        p: "bigint",
        m: "isSafeInteger",
        k: "isSafeInteger",
        hash: "hash"
      });
      const { p, k, m, hash: hash2, expand, DST: _DST } = options;
      (0, utils_js_1.abytes)(msg);
      anum(count);
      const DST = typeof _DST === "string" ? (0, utils_js_1.utf8ToBytes)(_DST) : _DST;
      const log2p = p.toString(2).length;
      const L = Math.ceil((log2p + k) / 8);
      const len_in_bytes = count * m * L;
      let prb;
      if (expand === "xmd") {
        prb = expand_message_xmd(msg, DST, len_in_bytes, hash2);
      } else if (expand === "xof") {
        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash2);
      } else if (expand === "_internal_pass") {
        prb = msg;
      } else {
        throw new Error('expand must be "xmd" or "xof"');
      }
      const u = new Array(count);
      for (let i = 0; i < count; i++) {
        const e = new Array(m);
        for (let j = 0; j < m; j++) {
          const elm_offset = L * (j + i * m);
          const tv = prb.subarray(elm_offset, elm_offset + L);
          e[j] = (0, modular_js_1.mod)(os2ip(tv), p);
        }
        u[i] = e;
      }
      return u;
    }
    function isogenyMap(field, map) {
      const COEFF = map.map((i) => Array.from(i).reverse());
      return (x, y) => {
        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));
        x = field.div(xNum, xDen);
        y = field.mul(y, field.div(yNum, yDen));
        return { x, y };
      };
    }
    function createHasher(Point2, mapToCurve, def) {
      if (typeof mapToCurve !== "function")
        throw new Error("mapToCurve() must be defined");
      return {
        // Encodes byte string to elliptic curve.
        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
        hashToCurve(msg, options) {
          const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });
          const u0 = Point2.fromAffine(mapToCurve(u[0]));
          const u1 = Point2.fromAffine(mapToCurve(u[1]));
          const P = u0.add(u1).clearCofactor();
          P.assertValidity();
          return P;
        },
        // Encodes byte string to elliptic curve.
        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
        encodeToCurve(msg, options) {
          const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });
          const P = Point2.fromAffine(mapToCurve(u[0])).clearCofactor();
          P.assertValidity();
          return P;
        },
        // Same as encodeToCurve, but without hash
        mapToCurve(scalars) {
          if (!Array.isArray(scalars))
            throw new Error("mapToCurve: expected array of bigints");
          for (const i of scalars)
            if (typeof i !== "bigint")
              throw new Error("mapToCurve: expected array of bigints");
          const P = Point2.fromAffine(mapToCurve(scalars)).clearCofactor();
          P.assertValidity();
          return P;
        }
      };
    }
  }
});

// node_modules/@noble/curves/abstract/curve.js
var require_curve = __commonJS({
  "node_modules/@noble/curves/abstract/curve.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.wNAF = wNAF2;
    exports.pippenger = pippenger;
    exports.precomputeMSMUnsafe = precomputeMSMUnsafe;
    exports.validateBasic = validateBasic2;
    var modular_js_1 = require_modular();
    var utils_js_1 = require_utils2();
    var _0n7 = BigInt(0);
    var _1n7 = BigInt(1);
    function constTimeNegate(condition, item) {
      const neg = item.negate();
      return condition ? neg : item;
    }
    function validateW(W, bits) {
      if (!Number.isSafeInteger(W) || W <= 0 || W > bits)
        throw new Error("invalid window size, expected [1.." + bits + "], got W=" + W);
    }
    function calcWOpts(W, bits) {
      validateW(W, bits);
      const windows = Math.ceil(bits / W) + 1;
      const windowSize = 2 ** (W - 1);
      return { windows, windowSize };
    }
    function validateMSMPoints(points, c) {
      if (!Array.isArray(points))
        throw new Error("array expected");
      points.forEach((p, i) => {
        if (!(p instanceof c))
          throw new Error("invalid point at index " + i);
      });
    }
    function validateMSMScalars(scalars, field) {
      if (!Array.isArray(scalars))
        throw new Error("array of scalars expected");
      scalars.forEach((s, i) => {
        if (!field.isValid(s))
          throw new Error("invalid scalar at index " + i);
      });
    }
    var pointPrecomputes = /* @__PURE__ */ new WeakMap();
    var pointWindowSizes = /* @__PURE__ */ new WeakMap();
    function getW(P) {
      return pointWindowSizes.get(P) || 1;
    }
    function wNAF2(c, bits) {
      return {
        constTimeNegate,
        hasPrecomputes(elm) {
          return getW(elm) !== 1;
        },
        // non-const time multiplication ladder
        unsafeLadder(elm, n2, p = c.ZERO) {
          let d = elm;
          while (n2 > _0n7) {
            if (n2 & _1n7)
              p = p.add(d);
            d = d.double();
            n2 >>= _1n7;
          }
          return p;
        },
        /**
         * Creates a wNAF precomputation window. Used for caching.
         * Default window size is set by `utils.precompute()` and is equal to 8.
         * Number of precomputed points depends on the curve size:
         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
         * - 𝑊 is the window size
         * - 𝑛 is the bitlength of the curve order.
         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
         * @param elm Point instance
         * @param W window size
         * @returns precomputed point tables flattened to a single array
         */
        precomputeWindow(elm, W) {
          const { windows, windowSize } = calcWOpts(W, bits);
          const points = [];
          let p = elm;
          let base = p;
          for (let window2 = 0; window2 < windows; window2++) {
            base = p;
            points.push(base);
            for (let i = 1; i < windowSize; i++) {
              base = base.add(p);
              points.push(base);
            }
            p = base.double();
          }
          return points;
        },
        /**
         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
         * @param W window size
         * @param precomputes precomputed tables
         * @param n scalar (we don't check here, but should be less than curve order)
         * @returns real and fake (for const-time) points
         */
        wNAF(W, precomputes, n2) {
          const { windows, windowSize } = calcWOpts(W, bits);
          let p = c.ZERO;
          let f2 = c.BASE;
          const mask2 = BigInt(2 ** W - 1);
          const maxNumber = 2 ** W;
          const shiftBy = BigInt(W);
          for (let window2 = 0; window2 < windows; window2++) {
            const offset = window2 * windowSize;
            let wbits = Number(n2 & mask2);
            n2 >>= shiftBy;
            if (wbits > windowSize) {
              wbits -= maxNumber;
              n2 += _1n7;
            }
            const offset1 = offset;
            const offset2 = offset + Math.abs(wbits) - 1;
            const cond1 = window2 % 2 !== 0;
            const cond2 = wbits < 0;
            if (wbits === 0) {
              f2 = f2.add(constTimeNegate(cond1, precomputes[offset1]));
            } else {
              p = p.add(constTimeNegate(cond2, precomputes[offset2]));
            }
          }
          return { p, f: f2 };
        },
        /**
         * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.
         * @param W window size
         * @param precomputes precomputed tables
         * @param n scalar (we don't check here, but should be less than curve order)
         * @param acc accumulator point to add result of multiplication
         * @returns point
         */
        wNAFUnsafe(W, precomputes, n2, acc = c.ZERO) {
          const { windows, windowSize } = calcWOpts(W, bits);
          const mask2 = BigInt(2 ** W - 1);
          const maxNumber = 2 ** W;
          const shiftBy = BigInt(W);
          for (let window2 = 0; window2 < windows; window2++) {
            const offset = window2 * windowSize;
            if (n2 === _0n7)
              break;
            let wbits = Number(n2 & mask2);
            n2 >>= shiftBy;
            if (wbits > windowSize) {
              wbits -= maxNumber;
              n2 += _1n7;
            }
            if (wbits === 0)
              continue;
            let curr = precomputes[offset + Math.abs(wbits) - 1];
            if (wbits < 0)
              curr = curr.negate();
            acc = acc.add(curr);
          }
          return acc;
        },
        getPrecomputes(W, P, transform) {
          let comp = pointPrecomputes.get(P);
          if (!comp) {
            comp = this.precomputeWindow(P, W);
            if (W !== 1)
              pointPrecomputes.set(P, transform(comp));
          }
          return comp;
        },
        wNAFCached(P, n2, transform) {
          const W = getW(P);
          return this.wNAF(W, this.getPrecomputes(W, P, transform), n2);
        },
        wNAFCachedUnsafe(P, n2, transform, prev) {
          const W = getW(P);
          if (W === 1)
            return this.unsafeLadder(P, n2, prev);
          return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n2, prev);
        },
        // We calculate precomputes for elliptic curve point multiplication
        // using windowed method. This specifies window size and
        // stores precomputed values. Usually only base point would be precomputed.
        setWindowSize(P, W) {
          validateW(W, bits);
          pointWindowSizes.set(P, W);
          pointPrecomputes.delete(P);
        }
      };
    }
    function pippenger(c, fieldN, points, scalars) {
      validateMSMPoints(points, c);
      validateMSMScalars(scalars, fieldN);
      if (points.length !== scalars.length)
        throw new Error("arrays of points and scalars must have equal length");
      const zero = c.ZERO;
      const wbits = (0, utils_js_1.bitLen)(BigInt(points.length));
      const windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1;
      const MASK = (1 << windowSize) - 1;
      const buckets = new Array(MASK + 1).fill(zero);
      const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;
      let sum = zero;
      for (let i = lastBits; i >= 0; i -= windowSize) {
        buckets.fill(zero);
        for (let j = 0; j < scalars.length; j++) {
          const scalar = scalars[j];
          const wbits2 = Number(scalar >> BigInt(i) & BigInt(MASK));
          buckets[wbits2] = buckets[wbits2].add(points[j]);
        }
        let resI = zero;
        for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {
          sumI = sumI.add(buckets[j]);
          resI = resI.add(sumI);
        }
        sum = sum.add(resI);
        if (i !== 0)
          for (let j = 0; j < windowSize; j++)
            sum = sum.double();
      }
      return sum;
    }
    function precomputeMSMUnsafe(c, fieldN, points, windowSize) {
      validateW(windowSize, fieldN.BITS);
      validateMSMPoints(points, c);
      const zero = c.ZERO;
      const tableSize = 2 ** windowSize - 1;
      const chunks = Math.ceil(fieldN.BITS / windowSize);
      const MASK = BigInt((1 << windowSize) - 1);
      const tables = points.map((p) => {
        const res = [];
        for (let i = 0, acc = p; i < tableSize; i++) {
          res.push(acc);
          acc = acc.add(p);
        }
        return res;
      });
      return (scalars) => {
        validateMSMScalars(scalars, fieldN);
        if (scalars.length > points.length)
          throw new Error("array of scalars must be smaller than array of points");
        let res = zero;
        for (let i = 0; i < chunks; i++) {
          if (res !== zero)
            for (let j = 0; j < windowSize; j++)
              res = res.double();
          const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);
          for (let j = 0; j < scalars.length; j++) {
            const n2 = scalars[j];
            const curr = Number(n2 >> shiftBy & MASK);
            if (!curr)
              continue;
            res = res.add(tables[j][curr - 1]);
          }
        }
        return res;
      };
    }
    function validateBasic2(curve) {
      (0, modular_js_1.validateField)(curve.Fp);
      (0, utils_js_1.validateObject)(curve, {
        n: "bigint",
        h: "bigint",
        Gx: "field",
        Gy: "field"
      }, {
        nBitLength: "isSafeInteger",
        nByteLength: "isSafeInteger"
      });
      return Object.freeze({
        ...(0, modular_js_1.nLength)(curve.n, curve.nBitLength),
        ...curve,
        ...{ p: curve.Fp.ORDER }
      });
    }
  }
});

// node_modules/@noble/curves/abstract/weierstrass.js
var require_weierstrass = __commonJS({
  "node_modules/@noble/curves/abstract/weierstrass.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DER = exports.DERErr = void 0;
    exports.weierstrassPoints = weierstrassPoints2;
    exports.weierstrass = weierstrass2;
    exports.SWUFpSqrtRatio = SWUFpSqrtRatio;
    exports.mapToCurveSimpleSWU = mapToCurveSimpleSWU;
    var curve_js_1 = require_curve();
    var modular_js_1 = require_modular();
    var ut = require_utils2();
    var utils_js_1 = require_utils2();
    function validateSigVerOpts(opts) {
      if (opts.lowS !== void 0)
        (0, utils_js_1.abool)("lowS", opts.lowS);
      if (opts.prehash !== void 0)
        (0, utils_js_1.abool)("prehash", opts.prehash);
    }
    function validatePointOpts2(curve) {
      const opts = (0, curve_js_1.validateBasic)(curve);
      ut.validateObject(opts, {
        a: "field",
        b: "field"
      }, {
        allowedPrivateKeyLengths: "array",
        wrapPrivateKey: "boolean",
        isTorsionFree: "function",
        clearCofactor: "function",
        allowInfinityPoint: "boolean",
        fromBytes: "function",
        toBytes: "function"
      });
      const { endo, Fp: Fp2, a } = opts;
      if (endo) {
        if (!Fp2.eql(a, Fp2.ZERO)) {
          throw new Error("invalid endomorphism, can only be defined for Koblitz curves that have a=0");
        }
        if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
          throw new Error("invalid endomorphism, expected beta: bigint and splitScalar: function");
        }
      }
      return Object.freeze({ ...opts });
    }
    var { bytesToNumberBE: b2n2, hexToBytes: h2b2 } = ut;
    var DERErr2 = class extends Error {
      constructor(m = "") {
        super(m);
      }
    };
    exports.DERErr = DERErr2;
    exports.DER = {
      // asn.1 DER encoding utils
      Err: DERErr2,
      // Basic building block is TLV (Tag-Length-Value)
      _tlv: {
        encode: (tag, data) => {
          const { Err: E } = exports.DER;
          if (tag < 0 || tag > 256)
            throw new E("tlv.encode: wrong tag");
          if (data.length & 1)
            throw new E("tlv.encode: unpadded data");
          const dataLen = data.length / 2;
          const len = ut.numberToHexUnpadded(dataLen);
          if (len.length / 2 & 128)
            throw new E("tlv.encode: long form length too big");
          const lenLen = dataLen > 127 ? ut.numberToHexUnpadded(len.length / 2 | 128) : "";
          const t = ut.numberToHexUnpadded(tag);
          return t + lenLen + len + data;
        },
        // v - value, l - left bytes (unparsed)
        decode(tag, data) {
          const { Err: E } = exports.DER;
          let pos = 0;
          if (tag < 0 || tag > 256)
            throw new E("tlv.encode: wrong tag");
          if (data.length < 2 || data[pos++] !== tag)
            throw new E("tlv.decode: wrong tlv");
          const first = data[pos++];
          const isLong = !!(first & 128);
          let length = 0;
          if (!isLong)
            length = first;
          else {
            const lenLen = first & 127;
            if (!lenLen)
              throw new E("tlv.decode(long): indefinite length not supported");
            if (lenLen > 4)
              throw new E("tlv.decode(long): byte length is too big");
            const lengthBytes = data.subarray(pos, pos + lenLen);
            if (lengthBytes.length !== lenLen)
              throw new E("tlv.decode: length bytes not complete");
            if (lengthBytes[0] === 0)
              throw new E("tlv.decode(long): zero leftmost byte");
            for (const b2 of lengthBytes)
              length = length << 8 | b2;
            pos += lenLen;
            if (length < 128)
              throw new E("tlv.decode(long): not minimal encoding");
          }
          const v = data.subarray(pos, pos + length);
          if (v.length !== length)
            throw new E("tlv.decode: wrong value length");
          return { v, l: data.subarray(pos + length) };
        }
      },
      // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
      // since we always use positive integers here. It must always be empty:
      // - add zero byte if exists
      // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
      _int: {
        encode(num) {
          const { Err: E } = exports.DER;
          if (num < _0n7)
            throw new E("integer: negative integers are not allowed");
          let hex = ut.numberToHexUnpadded(num);
          if (Number.parseInt(hex[0], 16) & 8)
            hex = "00" + hex;
          if (hex.length & 1)
            throw new E("unexpected DER parsing assertion: unpadded hex");
          return hex;
        },
        decode(data) {
          const { Err: E } = exports.DER;
          if (data[0] & 128)
            throw new E("invalid signature integer: negative");
          if (data[0] === 0 && !(data[1] & 128))
            throw new E("invalid signature integer: unnecessary leading zero");
          return b2n2(data);
        }
      },
      toSig(hex) {
        const { Err: E, _int: int, _tlv: tlv } = exports.DER;
        const data = typeof hex === "string" ? h2b2(hex) : hex;
        ut.abytes(data);
        const { v: seqBytes, l: seqLeftBytes } = tlv.decode(48, data);
        if (seqLeftBytes.length)
          throw new E("invalid signature: left bytes after parsing");
        const { v: rBytes, l: rLeftBytes } = tlv.decode(2, seqBytes);
        const { v: sBytes, l: sLeftBytes } = tlv.decode(2, rLeftBytes);
        if (sLeftBytes.length)
          throw new E("invalid signature: left bytes after parsing");
        return { r: int.decode(rBytes), s: int.decode(sBytes) };
      },
      hexFromSig(sig) {
        const { _tlv: tlv, _int: int } = exports.DER;
        const rs = tlv.encode(2, int.encode(sig.r));
        const ss = tlv.encode(2, int.encode(sig.s));
        const seq = rs + ss;
        return tlv.encode(48, seq);
      }
    };
    var _0n7 = BigInt(0);
    var _1n7 = BigInt(1);
    var _2n6 = BigInt(2);
    var _3n3 = BigInt(3);
    var _4n3 = BigInt(4);
    function weierstrassPoints2(opts) {
      const CURVE = validatePointOpts2(opts);
      const { Fp: Fp2 } = CURVE;
      const Fn = (0, modular_js_1.Field)(CURVE.n, CURVE.nBitLength);
      const toBytes2 = CURVE.toBytes || ((_c, point, _isCompressed) => {
        const a = point.toAffine();
        return ut.concatBytes(Uint8Array.from([4]), Fp2.toBytes(a.x), Fp2.toBytes(a.y));
      });
      const fromBytes = CURVE.fromBytes || ((bytes2) => {
        const tail = bytes2.subarray(1);
        const x = Fp2.fromBytes(tail.subarray(0, Fp2.BYTES));
        const y = Fp2.fromBytes(tail.subarray(Fp2.BYTES, 2 * Fp2.BYTES));
        return { x, y };
      });
      function weierstrassEquation(x) {
        const { a, b: b2 } = CURVE;
        const x2 = Fp2.sqr(x);
        const x3 = Fp2.mul(x2, x);
        return Fp2.add(Fp2.add(x3, Fp2.mul(x, a)), b2);
      }
      if (!Fp2.eql(Fp2.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
        throw new Error("bad generator point: equation left != right");
      function isWithinCurveOrder(num) {
        return ut.inRange(num, _1n7, CURVE.n);
      }
      function normPrivateKeyToScalar(key) {
        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N3 } = CURVE;
        if (lengths && typeof key !== "bigint") {
          if (ut.isBytes(key))
            key = ut.bytesToHex(key);
          if (typeof key !== "string" || !lengths.includes(key.length))
            throw new Error("invalid private key");
          key = key.padStart(nByteLength * 2, "0");
        }
        let num;
        try {
          num = typeof key === "bigint" ? key : ut.bytesToNumberBE((0, utils_js_1.ensureBytes)("private key", key, nByteLength));
        } catch (error) {
          throw new Error("invalid private key, expected hex or " + nByteLength + " bytes, got " + typeof key);
        }
        if (wrapPrivateKey)
          num = (0, modular_js_1.mod)(num, N3);
        ut.aInRange("private key", num, _1n7, N3);
        return num;
      }
      function assertPrjPoint(other) {
        if (!(other instanceof Point2))
          throw new Error("ProjectivePoint expected");
      }
      const toAffineMemo = (0, utils_js_1.memoized)((p, iz) => {
        const { px: x, py: y, pz: z } = p;
        if (Fp2.eql(z, Fp2.ONE))
          return { x, y };
        const is0 = p.is0();
        if (iz == null)
          iz = is0 ? Fp2.ONE : Fp2.inv(z);
        const ax = Fp2.mul(x, iz);
        const ay = Fp2.mul(y, iz);
        const zz = Fp2.mul(z, iz);
        if (is0)
          return { x: Fp2.ZERO, y: Fp2.ZERO };
        if (!Fp2.eql(zz, Fp2.ONE))
          throw new Error("invZ was invalid");
        return { x: ax, y: ay };
      });
      const assertValidMemo = (0, utils_js_1.memoized)((p) => {
        if (p.is0()) {
          if (CURVE.allowInfinityPoint && !Fp2.is0(p.py))
            return;
          throw new Error("bad point: ZERO");
        }
        const { x, y } = p.toAffine();
        if (!Fp2.isValid(x) || !Fp2.isValid(y))
          throw new Error("bad point: x or y not FE");
        const left = Fp2.sqr(y);
        const right = weierstrassEquation(x);
        if (!Fp2.eql(left, right))
          throw new Error("bad point: equation left != right");
        if (!p.isTorsionFree())
          throw new Error("bad point: not in prime-order subgroup");
        return true;
      });
      class Point2 {
        constructor(px, py, pz) {
          this.px = px;
          this.py = py;
          this.pz = pz;
          if (px == null || !Fp2.isValid(px))
            throw new Error("x required");
          if (py == null || !Fp2.isValid(py))
            throw new Error("y required");
          if (pz == null || !Fp2.isValid(pz))
            throw new Error("z required");
          Object.freeze(this);
        }
        // Does not validate if the point is on-curve.
        // Use fromHex instead, or call assertValidity() later.
        static fromAffine(p) {
          const { x, y } = p || {};
          if (!p || !Fp2.isValid(x) || !Fp2.isValid(y))
            throw new Error("invalid affine point");
          if (p instanceof Point2)
            throw new Error("projective point not allowed");
          const is0 = (i) => Fp2.eql(i, Fp2.ZERO);
          if (is0(x) && is0(y))
            return Point2.ZERO;
          return new Point2(x, y, Fp2.ONE);
        }
        get x() {
          return this.toAffine().x;
        }
        get y() {
          return this.toAffine().y;
        }
        /**
         * Takes a bunch of Projective Points but executes only one
         * inversion on all of them. Inversion is very slow operation,
         * so this improves performance massively.
         * Optimization: converts a list of projective points to a list of identical points with Z=1.
         */
        static normalizeZ(points) {
          const toInv = Fp2.invertBatch(points.map((p) => p.pz));
          return points.map((p, i) => p.toAffine(toInv[i])).map(Point2.fromAffine);
        }
        /**
         * Converts hash string or Uint8Array to Point.
         * @param hex short/long ECDSA hex
         */
        static fromHex(hex) {
          const P = Point2.fromAffine(fromBytes((0, utils_js_1.ensureBytes)("pointHex", hex)));
          P.assertValidity();
          return P;
        }
        // Multiplies generator point by privateKey.
        static fromPrivateKey(privateKey) {
          return Point2.BASE.multiply(normPrivateKeyToScalar(privateKey));
        }
        // Multiscalar Multiplication
        static msm(points, scalars) {
          return (0, curve_js_1.pippenger)(Point2, Fn, points, scalars);
        }
        // "Private method", don't use it directly
        _setWindowSize(windowSize) {
          wnaf.setWindowSize(this, windowSize);
        }
        // A point on curve is valid if it conforms to equation.
        assertValidity() {
          assertValidMemo(this);
        }
        hasEvenY() {
          const { y } = this.toAffine();
          if (Fp2.isOdd)
            return !Fp2.isOdd(y);
          throw new Error("Field doesn't support isOdd");
        }
        /**
         * Compare one point to another.
         */
        equals(other) {
          assertPrjPoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          const U12 = Fp2.eql(Fp2.mul(X1, Z2), Fp2.mul(X2, Z1));
          const U22 = Fp2.eql(Fp2.mul(Y1, Z2), Fp2.mul(Y2, Z1));
          return U12 && U22;
        }
        /**
         * Flips point to one corresponding to (x, -y) in Affine coordinates.
         */
        negate() {
          return new Point2(this.px, Fp2.neg(this.py), this.pz);
        }
        // Renes-Costello-Batina exception-free doubling formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 3
        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
        double() {
          const { a, b: b2 } = CURVE;
          const b3 = Fp2.mul(b2, _3n3);
          const { px: X1, py: Y1, pz: Z1 } = this;
          let X3 = Fp2.ZERO, Y3 = Fp2.ZERO, Z3 = Fp2.ZERO;
          let t0 = Fp2.mul(X1, X1);
          let t1 = Fp2.mul(Y1, Y1);
          let t2 = Fp2.mul(Z1, Z1);
          let t3 = Fp2.mul(X1, Y1);
          t3 = Fp2.add(t3, t3);
          Z3 = Fp2.mul(X1, Z1);
          Z3 = Fp2.add(Z3, Z3);
          X3 = Fp2.mul(a, Z3);
          Y3 = Fp2.mul(b3, t2);
          Y3 = Fp2.add(X3, Y3);
          X3 = Fp2.sub(t1, Y3);
          Y3 = Fp2.add(t1, Y3);
          Y3 = Fp2.mul(X3, Y3);
          X3 = Fp2.mul(t3, X3);
          Z3 = Fp2.mul(b3, Z3);
          t2 = Fp2.mul(a, t2);
          t3 = Fp2.sub(t0, t2);
          t3 = Fp2.mul(a, t3);
          t3 = Fp2.add(t3, Z3);
          Z3 = Fp2.add(t0, t0);
          t0 = Fp2.add(Z3, t0);
          t0 = Fp2.add(t0, t2);
          t0 = Fp2.mul(t0, t3);
          Y3 = Fp2.add(Y3, t0);
          t2 = Fp2.mul(Y1, Z1);
          t2 = Fp2.add(t2, t2);
          t0 = Fp2.mul(t2, t3);
          X3 = Fp2.sub(X3, t0);
          Z3 = Fp2.mul(t2, t1);
          Z3 = Fp2.add(Z3, Z3);
          Z3 = Fp2.add(Z3, Z3);
          return new Point2(X3, Y3, Z3);
        }
        // Renes-Costello-Batina exception-free addition formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 1
        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
        add(other) {
          assertPrjPoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          let X3 = Fp2.ZERO, Y3 = Fp2.ZERO, Z3 = Fp2.ZERO;
          const a = CURVE.a;
          const b3 = Fp2.mul(CURVE.b, _3n3);
          let t0 = Fp2.mul(X1, X2);
          let t1 = Fp2.mul(Y1, Y2);
          let t2 = Fp2.mul(Z1, Z2);
          let t3 = Fp2.add(X1, Y1);
          let t4 = Fp2.add(X2, Y2);
          t3 = Fp2.mul(t3, t4);
          t4 = Fp2.add(t0, t1);
          t3 = Fp2.sub(t3, t4);
          t4 = Fp2.add(X1, Z1);
          let t5 = Fp2.add(X2, Z2);
          t4 = Fp2.mul(t4, t5);
          t5 = Fp2.add(t0, t2);
          t4 = Fp2.sub(t4, t5);
          t5 = Fp2.add(Y1, Z1);
          X3 = Fp2.add(Y2, Z2);
          t5 = Fp2.mul(t5, X3);
          X3 = Fp2.add(t1, t2);
          t5 = Fp2.sub(t5, X3);
          Z3 = Fp2.mul(a, t4);
          X3 = Fp2.mul(b3, t2);
          Z3 = Fp2.add(X3, Z3);
          X3 = Fp2.sub(t1, Z3);
          Z3 = Fp2.add(t1, Z3);
          Y3 = Fp2.mul(X3, Z3);
          t1 = Fp2.add(t0, t0);
          t1 = Fp2.add(t1, t0);
          t2 = Fp2.mul(a, t2);
          t4 = Fp2.mul(b3, t4);
          t1 = Fp2.add(t1, t2);
          t2 = Fp2.sub(t0, t2);
          t2 = Fp2.mul(a, t2);
          t4 = Fp2.add(t4, t2);
          t0 = Fp2.mul(t1, t4);
          Y3 = Fp2.add(Y3, t0);
          t0 = Fp2.mul(t5, t4);
          X3 = Fp2.mul(t3, X3);
          X3 = Fp2.sub(X3, t0);
          t0 = Fp2.mul(t3, t1);
          Z3 = Fp2.mul(t5, Z3);
          Z3 = Fp2.add(Z3, t0);
          return new Point2(X3, Y3, Z3);
        }
        subtract(other) {
          return this.add(other.negate());
        }
        is0() {
          return this.equals(Point2.ZERO);
        }
        wNAF(n2) {
          return wnaf.wNAFCached(this, n2, Point2.normalizeZ);
        }
        /**
         * Non-constant-time multiplication. Uses double-and-add algorithm.
         * It's faster, but should only be used when you don't care about
         * an exposed private key e.g. sig verification, which works over *public* keys.
         */
        multiplyUnsafe(sc) {
          const { endo, n: N3 } = CURVE;
          ut.aInRange("scalar", sc, _0n7, N3);
          const I = Point2.ZERO;
          if (sc === _0n7)
            return I;
          if (this.is0() || sc === _1n7)
            return this;
          if (!endo || wnaf.hasPrecomputes(this))
            return wnaf.wNAFCachedUnsafe(this, sc, Point2.normalizeZ);
          let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);
          let k1p = I;
          let k2p = I;
          let d = this;
          while (k1 > _0n7 || k2 > _0n7) {
            if (k1 & _1n7)
              k1p = k1p.add(d);
            if (k2 & _1n7)
              k2p = k2p.add(d);
            d = d.double();
            k1 >>= _1n7;
            k2 >>= _1n7;
          }
          if (k1neg)
            k1p = k1p.negate();
          if (k2neg)
            k2p = k2p.negate();
          k2p = new Point2(Fp2.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
          return k1p.add(k2p);
        }
        /**
         * Constant time multiplication.
         * Uses wNAF method. Windowed method may be 10% faster,
         * but takes 2x longer to generate and consumes 2x memory.
         * Uses precomputes when available.
         * Uses endomorphism for Koblitz curves.
         * @param scalar by which the point would be multiplied
         * @returns New point
         */
        multiply(scalar) {
          const { endo, n: N3 } = CURVE;
          ut.aInRange("scalar", scalar, _1n7, N3);
          let point, fake;
          if (endo) {
            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);
            let { p: k1p, f: f1p } = this.wNAF(k1);
            let { p: k2p, f: f2p } = this.wNAF(k2);
            k1p = wnaf.constTimeNegate(k1neg, k1p);
            k2p = wnaf.constTimeNegate(k2neg, k2p);
            k2p = new Point2(Fp2.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
            point = k1p.add(k2p);
            fake = f1p.add(f2p);
          } else {
            const { p, f: f2 } = this.wNAF(scalar);
            point = p;
            fake = f2;
          }
          return Point2.normalizeZ([point, fake])[0];
        }
        /**
         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
         * Not using Strauss-Shamir trick: precomputation tables are faster.
         * The trick could be useful if both P and Q are not G (not in our case).
         * @returns non-zero affine point
         */
        multiplyAndAddUnsafe(Q, a, b2) {
          const G = Point2.BASE;
          const mul = (P, a2) => a2 === _0n7 || a2 === _1n7 || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);
          const sum = mul(this, a).add(mul(Q, b2));
          return sum.is0() ? void 0 : sum;
        }
        // Converts Projective point to affine (x, y) coordinates.
        // Can accept precomputed Z^-1 - for example, from invertBatch.
        // (x, y, z) ∋ (x=x/z, y=y/z)
        toAffine(iz) {
          return toAffineMemo(this, iz);
        }
        isTorsionFree() {
          const { h: cofactor, isTorsionFree } = CURVE;
          if (cofactor === _1n7)
            return true;
          if (isTorsionFree)
            return isTorsionFree(Point2, this);
          throw new Error("isTorsionFree() has not been declared for the elliptic curve");
        }
        clearCofactor() {
          const { h: cofactor, clearCofactor } = CURVE;
          if (cofactor === _1n7)
            return this;
          if (clearCofactor)
            return clearCofactor(Point2, this);
          return this.multiplyUnsafe(CURVE.h);
        }
        toRawBytes(isCompressed = true) {
          (0, utils_js_1.abool)("isCompressed", isCompressed);
          this.assertValidity();
          return toBytes2(Point2, this, isCompressed);
        }
        toHex(isCompressed = true) {
          (0, utils_js_1.abool)("isCompressed", isCompressed);
          return ut.bytesToHex(this.toRawBytes(isCompressed));
        }
      }
      Point2.BASE = new Point2(CURVE.Gx, CURVE.Gy, Fp2.ONE);
      Point2.ZERO = new Point2(Fp2.ZERO, Fp2.ONE, Fp2.ZERO);
      const _bits = CURVE.nBitLength;
      const wnaf = (0, curve_js_1.wNAF)(Point2, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
      return {
        CURVE,
        ProjectivePoint: Point2,
        normPrivateKeyToScalar,
        weierstrassEquation,
        isWithinCurveOrder
      };
    }
    function validateOpts2(curve) {
      const opts = (0, curve_js_1.validateBasic)(curve);
      ut.validateObject(opts, {
        hash: "hash",
        hmac: "function",
        randomBytes: "function"
      }, {
        bits2int: "function",
        bits2int_modN: "function",
        lowS: "boolean"
      });
      return Object.freeze({ lowS: true, ...opts });
    }
    function weierstrass2(curveDef) {
      const CURVE = validateOpts2(curveDef);
      const { Fp: Fp2, n: CURVE_ORDER } = CURVE;
      const compressedLen = Fp2.BYTES + 1;
      const uncompressedLen = 2 * Fp2.BYTES + 1;
      function modN(a) {
        return (0, modular_js_1.mod)(a, CURVE_ORDER);
      }
      function invN(a) {
        return (0, modular_js_1.invert)(a, CURVE_ORDER);
      }
      const { ProjectivePoint: Point2, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints2({
        ...CURVE,
        toBytes(_c, point, isCompressed) {
          const a = point.toAffine();
          const x = Fp2.toBytes(a.x);
          const cat = ut.concatBytes;
          (0, utils_js_1.abool)("isCompressed", isCompressed);
          if (isCompressed) {
            return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);
          } else {
            return cat(Uint8Array.from([4]), x, Fp2.toBytes(a.y));
          }
        },
        fromBytes(bytes2) {
          const len = bytes2.length;
          const head = bytes2[0];
          const tail = bytes2.subarray(1);
          if (len === compressedLen && (head === 2 || head === 3)) {
            const x = ut.bytesToNumberBE(tail);
            if (!ut.inRange(x, _1n7, Fp2.ORDER))
              throw new Error("Point is not on curve");
            const y2 = weierstrassEquation(x);
            let y;
            try {
              y = Fp2.sqrt(y2);
            } catch (sqrtError) {
              const suffix = sqrtError instanceof Error ? ": " + sqrtError.message : "";
              throw new Error("Point is not on curve" + suffix);
            }
            const isYOdd = (y & _1n7) === _1n7;
            const isHeadOdd = (head & 1) === 1;
            if (isHeadOdd !== isYOdd)
              y = Fp2.neg(y);
            return { x, y };
          } else if (len === uncompressedLen && head === 4) {
            const x = Fp2.fromBytes(tail.subarray(0, Fp2.BYTES));
            const y = Fp2.fromBytes(tail.subarray(Fp2.BYTES, 2 * Fp2.BYTES));
            return { x, y };
          } else {
            const cl = compressedLen;
            const ul = uncompressedLen;
            throw new Error("invalid Point, expected length of " + cl + ", or uncompressed " + ul + ", got " + len);
          }
        }
      });
      const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));
      function isBiggerThanHalfOrder(number2) {
        const HALF = CURVE_ORDER >> _1n7;
        return number2 > HALF;
      }
      function normalizeS(s) {
        return isBiggerThanHalfOrder(s) ? modN(-s) : s;
      }
      const slcNum = (b2, from, to) => ut.bytesToNumberBE(b2.slice(from, to));
      class Signature2 {
        constructor(r, s, recovery) {
          this.r = r;
          this.s = s;
          this.recovery = recovery;
          this.assertValidity();
        }
        // pair (bytes of r, bytes of s)
        static fromCompact(hex) {
          const l = CURVE.nByteLength;
          hex = (0, utils_js_1.ensureBytes)("compactSignature", hex, l * 2);
          return new Signature2(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
        }
        // DER encoded ECDSA signature
        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
        static fromDER(hex) {
          const { r, s } = exports.DER.toSig((0, utils_js_1.ensureBytes)("DER", hex));
          return new Signature2(r, s);
        }
        assertValidity() {
          ut.aInRange("r", this.r, _1n7, CURVE_ORDER);
          ut.aInRange("s", this.s, _1n7, CURVE_ORDER);
        }
        addRecoveryBit(recovery) {
          return new Signature2(this.r, this.s, recovery);
        }
        recoverPublicKey(msgHash) {
          const { r, s, recovery: rec } = this;
          const h = bits2int_modN((0, utils_js_1.ensureBytes)("msgHash", msgHash));
          if (rec == null || ![0, 1, 2, 3].includes(rec))
            throw new Error("recovery id invalid");
          const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
          if (radj >= Fp2.ORDER)
            throw new Error("recovery id 2 or 3 invalid");
          const prefix = (rec & 1) === 0 ? "02" : "03";
          const R = Point2.fromHex(prefix + numToNByteStr(radj));
          const ir = invN(radj);
          const u1 = modN(-h * ir);
          const u2 = modN(s * ir);
          const Q = Point2.BASE.multiplyAndAddUnsafe(R, u1, u2);
          if (!Q)
            throw new Error("point at infinify");
          Q.assertValidity();
          return Q;
        }
        // Signatures should be low-s, to prevent malleability.
        hasHighS() {
          return isBiggerThanHalfOrder(this.s);
        }
        normalizeS() {
          return this.hasHighS() ? new Signature2(this.r, modN(-this.s), this.recovery) : this;
        }
        // DER-encoded
        toDERRawBytes() {
          return ut.hexToBytes(this.toDERHex());
        }
        toDERHex() {
          return exports.DER.hexFromSig({ r: this.r, s: this.s });
        }
        // padded bytes of r, then padded bytes of s
        toCompactRawBytes() {
          return ut.hexToBytes(this.toCompactHex());
        }
        toCompactHex() {
          return numToNByteStr(this.r) + numToNByteStr(this.s);
        }
      }
      const utils = {
        isValidPrivateKey(privateKey) {
          try {
            normPrivateKeyToScalar(privateKey);
            return true;
          } catch (error) {
            return false;
          }
        },
        normPrivateKeyToScalar,
        /**
         * Produces cryptographically secure private key from random of size
         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
         */
        randomPrivateKey: () => {
          const length = (0, modular_js_1.getMinHashLength)(CURVE.n);
          return (0, modular_js_1.mapHashToField)(CURVE.randomBytes(length), CURVE.n);
        },
        /**
         * Creates precompute table for an arbitrary EC point. Makes point "cached".
         * Allows to massively speed-up `point.multiply(scalar)`.
         * @returns cached point
         * @example
         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
         * fast.multiply(privKey); // much faster ECDH now
         */
        precompute(windowSize = 8, point = Point2.BASE) {
          point._setWindowSize(windowSize);
          point.multiply(BigInt(3));
          return point;
        }
      };
      function getPublicKey(privateKey, isCompressed = true) {
        return Point2.fromPrivateKey(privateKey).toRawBytes(isCompressed);
      }
      function isProbPub(item) {
        const arr = ut.isBytes(item);
        const str = typeof item === "string";
        const len = (arr || str) && item.length;
        if (arr)
          return len === compressedLen || len === uncompressedLen;
        if (str)
          return len === 2 * compressedLen || len === 2 * uncompressedLen;
        if (item instanceof Point2)
          return true;
        return false;
      }
      function getSharedSecret(privateA, publicB, isCompressed = true) {
        if (isProbPub(privateA))
          throw new Error("first arg must be private key");
        if (!isProbPub(publicB))
          throw new Error("second arg must be public key");
        const b2 = Point2.fromHex(publicB);
        return b2.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
      }
      const bits2int = CURVE.bits2int || function(bytes2) {
        if (bytes2.length > 8192)
          throw new Error("input is too large");
        const num = ut.bytesToNumberBE(bytes2);
        const delta = bytes2.length * 8 - CURVE.nBitLength;
        return delta > 0 ? num >> BigInt(delta) : num;
      };
      const bits2int_modN = CURVE.bits2int_modN || function(bytes2) {
        return modN(bits2int(bytes2));
      };
      const ORDER_MASK = ut.bitMask(CURVE.nBitLength);
      function int2octets(num) {
        ut.aInRange("num < 2^" + CURVE.nBitLength, num, _0n7, ORDER_MASK);
        return ut.numberToBytesBE(num, CURVE.nByteLength);
      }
      function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
        if (["recovered", "canonical"].some((k) => k in opts))
          throw new Error("sign() legacy options not supported");
        const { hash: hash2, randomBytes: randomBytes4 } = CURVE;
        let { lowS, prehash, extraEntropy: ent } = opts;
        if (lowS == null)
          lowS = true;
        msgHash = (0, utils_js_1.ensureBytes)("msgHash", msgHash);
        validateSigVerOpts(opts);
        if (prehash)
          msgHash = (0, utils_js_1.ensureBytes)("prehashed msgHash", hash2(msgHash));
        const h1int = bits2int_modN(msgHash);
        const d = normPrivateKeyToScalar(privateKey);
        const seedArgs = [int2octets(d), int2octets(h1int)];
        if (ent != null && ent !== false) {
          const e = ent === true ? randomBytes4(Fp2.BYTES) : ent;
          seedArgs.push((0, utils_js_1.ensureBytes)("extraEntropy", e));
        }
        const seed = ut.concatBytes(...seedArgs);
        const m = h1int;
        function k2sig(kBytes) {
          const k = bits2int(kBytes);
          if (!isWithinCurveOrder(k))
            return;
          const ik = invN(k);
          const q = Point2.BASE.multiply(k).toAffine();
          const r = modN(q.x);
          if (r === _0n7)
            return;
          const s = modN(ik * modN(m + r * d));
          if (s === _0n7)
            return;
          let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n7);
          let normS = s;
          if (lowS && isBiggerThanHalfOrder(s)) {
            normS = normalizeS(s);
            recovery ^= 1;
          }
          return new Signature2(r, normS, recovery);
        }
        return { seed, k2sig };
      }
      const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
      const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
      function sign(msgHash, privKey, opts = defaultSigOpts) {
        const { seed, k2sig } = prepSig(msgHash, privKey, opts);
        const C = CURVE;
        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
        return drbg(seed, k2sig);
      }
      Point2.BASE._setWindowSize(8);
      function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
        const sg = signature;
        msgHash = (0, utils_js_1.ensureBytes)("msgHash", msgHash);
        publicKey = (0, utils_js_1.ensureBytes)("publicKey", publicKey);
        const { lowS, prehash, format } = opts;
        validateSigVerOpts(opts);
        if ("strict" in opts)
          throw new Error("options.strict was renamed to lowS");
        if (format !== void 0 && format !== "compact" && format !== "der")
          throw new Error("format must be compact or der");
        const isHex = typeof sg === "string" || ut.isBytes(sg);
        const isObj = !isHex && !format && typeof sg === "object" && sg !== null && typeof sg.r === "bigint" && typeof sg.s === "bigint";
        if (!isHex && !isObj)
          throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");
        let _sig2 = void 0;
        let P;
        try {
          if (isObj)
            _sig2 = new Signature2(sg.r, sg.s);
          if (isHex) {
            try {
              if (format !== "compact")
                _sig2 = Signature2.fromDER(sg);
            } catch (derError) {
              if (!(derError instanceof exports.DER.Err))
                throw derError;
            }
            if (!_sig2 && format !== "der")
              _sig2 = Signature2.fromCompact(sg);
          }
          P = Point2.fromHex(publicKey);
        } catch (error) {
          return false;
        }
        if (!_sig2)
          return false;
        if (lowS && _sig2.hasHighS())
          return false;
        if (prehash)
          msgHash = CURVE.hash(msgHash);
        const { r, s } = _sig2;
        const h = bits2int_modN(msgHash);
        const is = invN(s);
        const u1 = modN(h * is);
        const u2 = modN(r * is);
        const R = Point2.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine();
        if (!R)
          return false;
        const v = modN(R.x);
        return v === r;
      }
      return {
        CURVE,
        getPublicKey,
        getSharedSecret,
        sign,
        verify,
        ProjectivePoint: Point2,
        Signature: Signature2,
        utils
      };
    }
    function SWUFpSqrtRatio(Fp2, Z) {
      const q = Fp2.ORDER;
      let l = _0n7;
      for (let o = q - _1n7; o % _2n6 === _0n7; o /= _2n6)
        l += _1n7;
      const c1 = l;
      const _2n_pow_c1_1 = _2n6 << c1 - _1n7 - _1n7;
      const _2n_pow_c1 = _2n_pow_c1_1 * _2n6;
      const c2 = (q - _1n7) / _2n_pow_c1;
      const c3 = (c2 - _1n7) / _2n6;
      const c4 = _2n_pow_c1 - _1n7;
      const c5 = _2n_pow_c1_1;
      const c6 = Fp2.pow(Z, c2);
      const c7 = Fp2.pow(Z, (c2 + _1n7) / _2n6);
      let sqrtRatio = (u, v) => {
        let tv1 = c6;
        let tv2 = Fp2.pow(v, c4);
        let tv3 = Fp2.sqr(tv2);
        tv3 = Fp2.mul(tv3, v);
        let tv5 = Fp2.mul(u, tv3);
        tv5 = Fp2.pow(tv5, c3);
        tv5 = Fp2.mul(tv5, tv2);
        tv2 = Fp2.mul(tv5, v);
        tv3 = Fp2.mul(tv5, u);
        let tv4 = Fp2.mul(tv3, tv2);
        tv5 = Fp2.pow(tv4, c5);
        let isQR = Fp2.eql(tv5, Fp2.ONE);
        tv2 = Fp2.mul(tv3, c7);
        tv5 = Fp2.mul(tv4, tv1);
        tv3 = Fp2.cmov(tv2, tv3, isQR);
        tv4 = Fp2.cmov(tv5, tv4, isQR);
        for (let i = c1; i > _1n7; i--) {
          let tv52 = i - _2n6;
          tv52 = _2n6 << tv52 - _1n7;
          let tvv5 = Fp2.pow(tv4, tv52);
          const e1 = Fp2.eql(tvv5, Fp2.ONE);
          tv2 = Fp2.mul(tv3, tv1);
          tv1 = Fp2.mul(tv1, tv1);
          tvv5 = Fp2.mul(tv4, tv1);
          tv3 = Fp2.cmov(tv2, tv3, e1);
          tv4 = Fp2.cmov(tvv5, tv4, e1);
        }
        return { isValid: isQR, value: tv3 };
      };
      if (Fp2.ORDER % _4n3 === _3n3) {
        const c12 = (Fp2.ORDER - _3n3) / _4n3;
        const c22 = Fp2.sqrt(Fp2.neg(Z));
        sqrtRatio = (u, v) => {
          let tv1 = Fp2.sqr(v);
          const tv2 = Fp2.mul(u, v);
          tv1 = Fp2.mul(tv1, tv2);
          let y1 = Fp2.pow(tv1, c12);
          y1 = Fp2.mul(y1, tv2);
          const y2 = Fp2.mul(y1, c22);
          const tv3 = Fp2.mul(Fp2.sqr(y1), v);
          const isQR = Fp2.eql(tv3, u);
          let y = Fp2.cmov(y2, y1, isQR);
          return { isValid: isQR, value: y };
        };
      }
      return sqrtRatio;
    }
    function mapToCurveSimpleSWU(Fp2, opts) {
      (0, modular_js_1.validateField)(Fp2);
      if (!Fp2.isValid(opts.A) || !Fp2.isValid(opts.B) || !Fp2.isValid(opts.Z))
        throw new Error("mapToCurveSimpleSWU: invalid opts");
      const sqrtRatio = SWUFpSqrtRatio(Fp2, opts.Z);
      if (!Fp2.isOdd)
        throw new Error("Fp.isOdd is not implemented!");
      return (u) => {
        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
        tv1 = Fp2.sqr(u);
        tv1 = Fp2.mul(tv1, opts.Z);
        tv2 = Fp2.sqr(tv1);
        tv2 = Fp2.add(tv2, tv1);
        tv3 = Fp2.add(tv2, Fp2.ONE);
        tv3 = Fp2.mul(tv3, opts.B);
        tv4 = Fp2.cmov(opts.Z, Fp2.neg(tv2), !Fp2.eql(tv2, Fp2.ZERO));
        tv4 = Fp2.mul(tv4, opts.A);
        tv2 = Fp2.sqr(tv3);
        tv6 = Fp2.sqr(tv4);
        tv5 = Fp2.mul(tv6, opts.A);
        tv2 = Fp2.add(tv2, tv5);
        tv2 = Fp2.mul(tv2, tv3);
        tv6 = Fp2.mul(tv6, tv4);
        tv5 = Fp2.mul(tv6, opts.B);
        tv2 = Fp2.add(tv2, tv5);
        x = Fp2.mul(tv1, tv3);
        const { isValid, value } = sqrtRatio(tv2, tv6);
        y = Fp2.mul(tv1, u);
        y = Fp2.mul(y, value);
        x = Fp2.cmov(x, tv3, isValid);
        y = Fp2.cmov(y, value, isValid);
        const e1 = Fp2.isOdd(u) === Fp2.isOdd(y);
        y = Fp2.cmov(Fp2.neg(y), y, e1);
        x = Fp2.div(x, tv4);
        return { x, y };
      };
    }
  }
});

// node_modules/@noble/curves/abstract/bls.js
var require_bls = __commonJS({
  "node_modules/@noble/curves/abstract/bls.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bls = bls;
    var modular_js_1 = require_modular();
    var utils_js_1 = require_utils2();
    var hash_to_curve_js_1 = require_hash_to_curve();
    var weierstrass_js_1 = require_weierstrass();
    var _0n7 = BigInt(0);
    var _1n7 = BigInt(1);
    var _2n6 = BigInt(2);
    var _3n3 = BigInt(3);
    function NAfDecomposition(a) {
      const res = [];
      for (; a > _1n7; a >>= _1n7) {
        if ((a & _1n7) === _0n7)
          res.unshift(0);
        else if ((a & _3n3) === _3n3) {
          res.unshift(-1);
          a += _1n7;
        } else
          res.unshift(1);
      }
      return res;
    }
    function bls(CURVE) {
      const { Fp: Fp2, Fr, Fp2: Fp22, Fp6, Fp12 } = CURVE.fields;
      const BLS_X_IS_NEGATIVE = CURVE.params.xNegative;
      const TWIST = CURVE.params.twistType;
      const G1_ = (0, weierstrass_js_1.weierstrassPoints)({ n: Fr.ORDER, ...CURVE.G1 });
      const G1 = Object.assign(G1_, (0, hash_to_curve_js_1.createHasher)(G1_.ProjectivePoint, CURVE.G1.mapToCurve, {
        ...CURVE.htfDefaults,
        ...CURVE.G1.htfDefaults
      }));
      const G2_ = (0, weierstrass_js_1.weierstrassPoints)({ n: Fr.ORDER, ...CURVE.G2 });
      const G2 = Object.assign(G2_, (0, hash_to_curve_js_1.createHasher)(G2_.ProjectivePoint, CURVE.G2.mapToCurve, {
        ...CURVE.htfDefaults,
        ...CURVE.G2.htfDefaults
      }));
      let lineFunction;
      if (TWIST === "multiplicative") {
        lineFunction = (c0, c1, c2, f2, Px, Py) => Fp12.mul014(f2, c0, Fp22.mul(c1, Px), Fp22.mul(c2, Py));
      } else if (TWIST === "divisive") {
        lineFunction = (c0, c1, c2, f2, Px, Py) => Fp12.mul034(f2, Fp22.mul(c2, Py), Fp22.mul(c1, Px), c0);
      } else
        throw new Error("bls: unknown twist type");
      const Fp2div2 = Fp22.div(Fp22.ONE, Fp22.mul(Fp22.ONE, _2n6));
      function pointDouble(ell, Rx, Ry, Rz) {
        const t0 = Fp22.sqr(Ry);
        const t1 = Fp22.sqr(Rz);
        const t2 = Fp22.mulByB(Fp22.mul(t1, _3n3));
        const t3 = Fp22.mul(t2, _3n3);
        const t4 = Fp22.sub(Fp22.sub(Fp22.sqr(Fp22.add(Ry, Rz)), t1), t0);
        const c0 = Fp22.sub(t2, t0);
        const c1 = Fp22.mul(Fp22.sqr(Rx), _3n3);
        const c2 = Fp22.neg(t4);
        ell.push([c0, c1, c2]);
        Rx = Fp22.mul(Fp22.mul(Fp22.mul(Fp22.sub(t0, t3), Rx), Ry), Fp2div2);
        Ry = Fp22.sub(Fp22.sqr(Fp22.mul(Fp22.add(t0, t3), Fp2div2)), Fp22.mul(Fp22.sqr(t2), _3n3));
        Rz = Fp22.mul(t0, t4);
        return { Rx, Ry, Rz };
      }
      function pointAdd(ell, Rx, Ry, Rz, Qx, Qy) {
        const t0 = Fp22.sub(Ry, Fp22.mul(Qy, Rz));
        const t1 = Fp22.sub(Rx, Fp22.mul(Qx, Rz));
        const c0 = Fp22.sub(Fp22.mul(t0, Qx), Fp22.mul(t1, Qy));
        const c1 = Fp22.neg(t0);
        const c2 = t1;
        ell.push([c0, c1, c2]);
        const t2 = Fp22.sqr(t1);
        const t3 = Fp22.mul(t2, t1);
        const t4 = Fp22.mul(t2, Rx);
        const t5 = Fp22.add(Fp22.sub(t3, Fp22.mul(t4, _2n6)), Fp22.mul(Fp22.sqr(t0), Rz));
        Rx = Fp22.mul(t1, t5);
        Ry = Fp22.sub(Fp22.mul(Fp22.sub(t4, t5), t0), Fp22.mul(t3, Ry));
        Rz = Fp22.mul(Rz, t3);
        return { Rx, Ry, Rz };
      }
      const ATE_NAF = NAfDecomposition(CURVE.params.ateLoopSize);
      const calcPairingPrecomputes = (0, utils_js_1.memoized)((point) => {
        const p = point;
        const { x, y } = p.toAffine();
        const Qx = x, Qy = y, negQy = Fp22.neg(y);
        let Rx = Qx, Ry = Qy, Rz = Fp22.ONE;
        const ell = [];
        for (const bit of ATE_NAF) {
          const cur = [];
          ({ Rx, Ry, Rz } = pointDouble(cur, Rx, Ry, Rz));
          if (bit)
            ({ Rx, Ry, Rz } = pointAdd(cur, Rx, Ry, Rz, Qx, bit === -1 ? negQy : Qy));
          ell.push(cur);
        }
        if (CURVE.postPrecompute) {
          const last = ell[ell.length - 1];
          CURVE.postPrecompute(Rx, Ry, Rz, Qx, Qy, pointAdd.bind(null, last));
        }
        return ell;
      });
      function millerLoopBatch(pairs, withFinalExponent = false) {
        let f12 = Fp12.ONE;
        if (pairs.length) {
          const ellLen = pairs[0][0].length;
          for (let i = 0; i < ellLen; i++) {
            f12 = Fp12.sqr(f12);
            for (const [ell, Px, Py] of pairs) {
              for (const [c0, c1, c2] of ell[i])
                f12 = lineFunction(c0, c1, c2, f12, Px, Py);
            }
          }
        }
        if (BLS_X_IS_NEGATIVE)
          f12 = Fp12.conjugate(f12);
        return withFinalExponent ? Fp12.finalExponentiate(f12) : f12;
      }
      function pairingBatch(pairs, withFinalExponent = true) {
        const res = [];
        G1.ProjectivePoint.normalizeZ(pairs.map(({ g1 }) => g1));
        G2.ProjectivePoint.normalizeZ(pairs.map(({ g2 }) => g2));
        for (const { g1, g2 } of pairs) {
          if (g1.equals(G1.ProjectivePoint.ZERO) || g2.equals(G2.ProjectivePoint.ZERO))
            throw new Error("pairing is not available for ZERO point");
          g1.assertValidity();
          g2.assertValidity();
          const Qa = g1.toAffine();
          res.push([calcPairingPrecomputes(g2), Qa.x, Qa.y]);
        }
        return millerLoopBatch(res, withFinalExponent);
      }
      function pairing(Q, P, withFinalExponent = true) {
        return pairingBatch([{ g1: Q, g2: P }], withFinalExponent);
      }
      const utils = {
        randomPrivateKey: () => {
          const length = (0, modular_js_1.getMinHashLength)(Fr.ORDER);
          return (0, modular_js_1.mapHashToField)(CURVE.randomBytes(length), Fr.ORDER);
        },
        calcPairingPrecomputes
      };
      const { ShortSignature } = CURVE.G1;
      const { Signature: Signature2 } = CURVE.G2;
      function normP1(point) {
        return point instanceof G1.ProjectivePoint ? point : G1.ProjectivePoint.fromHex(point);
      }
      function normP1Hash(point, htfOpts) {
        return point instanceof G1.ProjectivePoint ? point : G1.hashToCurve((0, utils_js_1.ensureBytes)("point", point), htfOpts);
      }
      function normP2(point) {
        return point instanceof G2.ProjectivePoint ? point : Signature2.fromHex(point);
      }
      function normP2Hash(point, htfOpts) {
        return point instanceof G2.ProjectivePoint ? point : G2.hashToCurve((0, utils_js_1.ensureBytes)("point", point), htfOpts);
      }
      function getPublicKey(privateKey) {
        return G1.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(true);
      }
      function getPublicKeyForShortSignatures(privateKey) {
        return G2.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(true);
      }
      function sign(message, privateKey, htfOpts) {
        const msgPoint = normP2Hash(message, htfOpts);
        msgPoint.assertValidity();
        const sigPoint = msgPoint.multiply(G1.normPrivateKeyToScalar(privateKey));
        if (message instanceof G2.ProjectivePoint)
          return sigPoint;
        return Signature2.toRawBytes(sigPoint);
      }
      function signShortSignature(message, privateKey, htfOpts) {
        const msgPoint = normP1Hash(message, htfOpts);
        msgPoint.assertValidity();
        const sigPoint = msgPoint.multiply(G1.normPrivateKeyToScalar(privateKey));
        if (message instanceof G1.ProjectivePoint)
          return sigPoint;
        return ShortSignature.toRawBytes(sigPoint);
      }
      function verify(signature, message, publicKey, htfOpts) {
        const P = normP1(publicKey);
        const Hm = normP2Hash(message, htfOpts);
        const G = G1.ProjectivePoint.BASE;
        const S2 = normP2(signature);
        const exp = pairingBatch([
          { g1: P.negate(), g2: Hm },
          // ePHM = pairing(P.negate(), Hm, false);
          { g1: G, g2: S2 }
          // eGS = pairing(G, S, false);
        ]);
        return Fp12.eql(exp, Fp12.ONE);
      }
      function verifyShortSignature(signature, message, publicKey, htfOpts) {
        const P = normP2(publicKey);
        const Hm = normP1Hash(message, htfOpts);
        const G = G2.ProjectivePoint.BASE;
        const S2 = normP1(signature);
        const exp = pairingBatch([
          { g1: Hm, g2: P },
          // eHmP = pairing(Hm, P, false);
          { g1: S2, g2: G.negate() }
          // eSG = pairing(S, G.negate(), false);
        ]);
        return Fp12.eql(exp, Fp12.ONE);
      }
      function aNonEmpty(arr) {
        if (!Array.isArray(arr) || arr.length === 0)
          throw new Error("expected non-empty array");
      }
      function aggregatePublicKeys(publicKeys) {
        aNonEmpty(publicKeys);
        const agg = publicKeys.map(normP1).reduce((sum, p) => sum.add(p), G1.ProjectivePoint.ZERO);
        const aggAffine = agg;
        if (publicKeys[0] instanceof G1.ProjectivePoint) {
          aggAffine.assertValidity();
          return aggAffine;
        }
        return aggAffine.toRawBytes(true);
      }
      function aggregateSignatures(signatures) {
        aNonEmpty(signatures);
        const agg = signatures.map(normP2).reduce((sum, s) => sum.add(s), G2.ProjectivePoint.ZERO);
        const aggAffine = agg;
        if (signatures[0] instanceof G2.ProjectivePoint) {
          aggAffine.assertValidity();
          return aggAffine;
        }
        return Signature2.toRawBytes(aggAffine);
      }
      function aggregateShortSignatures(signatures) {
        aNonEmpty(signatures);
        const agg = signatures.map(normP1).reduce((sum, s) => sum.add(s), G1.ProjectivePoint.ZERO);
        const aggAffine = agg;
        if (signatures[0] instanceof G1.ProjectivePoint) {
          aggAffine.assertValidity();
          return aggAffine;
        }
        return ShortSignature.toRawBytes(aggAffine);
      }
      function verifyBatch(signature, messages, publicKeys, htfOpts) {
        aNonEmpty(messages);
        if (publicKeys.length !== messages.length)
          throw new Error("amount of public keys and messages should be equal");
        const sig = normP2(signature);
        const nMessages = messages.map((i) => normP2Hash(i, htfOpts));
        const nPublicKeys = publicKeys.map(normP1);
        const messagePubKeyMap = /* @__PURE__ */ new Map();
        for (let i = 0; i < nPublicKeys.length; i++) {
          const pub = nPublicKeys[i];
          const msg = nMessages[i];
          let keys = messagePubKeyMap.get(msg);
          if (keys === void 0) {
            keys = [];
            messagePubKeyMap.set(msg, keys);
          }
          keys.push(pub);
        }
        const paired = [];
        try {
          for (const [msg, keys] of messagePubKeyMap) {
            const groupPublicKey = keys.reduce((acc, msg2) => acc.add(msg2));
            paired.push({ g1: groupPublicKey, g2: msg });
          }
          paired.push({ g1: G1.ProjectivePoint.BASE.negate(), g2: sig });
          return Fp12.eql(pairingBatch(paired), Fp12.ONE);
        } catch {
          return false;
        }
      }
      G1.ProjectivePoint.BASE._setWindowSize(4);
      return {
        getPublicKey,
        getPublicKeyForShortSignatures,
        sign,
        signShortSignature,
        verify,
        verifyBatch,
        verifyShortSignature,
        aggregatePublicKeys,
        aggregateSignatures,
        aggregateShortSignatures,
        millerLoopBatch,
        pairing,
        pairingBatch,
        G1,
        G2,
        Signature: Signature2,
        ShortSignature,
        fields: {
          Fr,
          Fp: Fp2,
          Fp2: Fp22,
          Fp6,
          Fp12
        },
        params: {
          ateLoopSize: CURVE.params.ateLoopSize,
          r: CURVE.params.r,
          G1b: CURVE.G1.b,
          G2b: CURVE.G2.b
        },
        utils
      };
    }
  }
});

// node_modules/@noble/curves/abstract/tower.js
var require_tower = __commonJS({
  "node_modules/@noble/curves/abstract/tower.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.psiFrobenius = psiFrobenius;
    exports.tower12 = tower12;
    var mod2 = require_modular();
    var utils_js_1 = require_utils2();
    var _0n7 = BigInt(0);
    var _1n7 = BigInt(1);
    var _2n6 = BigInt(2);
    var _3n3 = BigInt(3);
    function calcFrobeniusCoefficients(Fp2, nonResidue, modulus, degree, num = 1, divisor) {
      const _divisor = BigInt(divisor === void 0 ? degree : divisor);
      const towerModulus = modulus ** BigInt(degree);
      const res = [];
      for (let i = 0; i < num; i++) {
        const a = BigInt(i + 1);
        const powers = [];
        for (let j = 0, qPower = _1n7; j < degree; j++) {
          const power = (a * qPower - a) / _divisor % towerModulus;
          powers.push(Fp2.pow(nonResidue, power));
          qPower *= modulus;
        }
        res.push(powers);
      }
      return res;
    }
    function psiFrobenius(Fp2, Fp22, base) {
      const PSI_X = Fp22.pow(base, (Fp2.ORDER - _1n7) / _3n3);
      const PSI_Y = Fp22.pow(base, (Fp2.ORDER - _1n7) / _2n6);
      function psi(x, y) {
        const x2 = Fp22.mul(Fp22.frobeniusMap(x, 1), PSI_X);
        const y2 = Fp22.mul(Fp22.frobeniusMap(y, 1), PSI_Y);
        return [x2, y2];
      }
      const PSI2_X = Fp22.pow(base, (Fp2.ORDER ** _2n6 - _1n7) / _3n3);
      const PSI2_Y = Fp22.pow(base, (Fp2.ORDER ** _2n6 - _1n7) / _2n6);
      if (!Fp22.eql(PSI2_Y, Fp22.neg(Fp22.ONE)))
        throw new Error("psiFrobenius: PSI2_Y!==-1");
      function psi2(x, y) {
        return [Fp22.mul(x, PSI2_X), Fp22.neg(y)];
      }
      const mapAffine = (fn) => (c, P) => {
        const affine = P.toAffine();
        const p = fn(affine.x, affine.y);
        return c.fromAffine({ x: p[0], y: p[1] });
      };
      const G2psi = mapAffine(psi);
      const G2psi2 = mapAffine(psi2);
      return { psi, psi2, G2psi, G2psi2, PSI_X, PSI_Y, PSI2_X, PSI2_Y };
    }
    function tower12(opts) {
      const { ORDER } = opts;
      const Fp2 = mod2.Field(ORDER);
      const FpNONRESIDUE = Fp2.create(opts.NONRESIDUE || BigInt(-1));
      const FpLegendre = mod2.FpLegendre(ORDER);
      const Fpdiv2 = Fp2.div(Fp2.ONE, _2n6);
      const FP2_FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(Fp2, FpNONRESIDUE, Fp2.ORDER, 2)[0];
      const Fp2Add = ({ c0, c1 }, { c0: r0, c1: r1 }) => ({
        c0: Fp2.add(c0, r0),
        c1: Fp2.add(c1, r1)
      });
      const Fp2Subtract = ({ c0, c1 }, { c0: r0, c1: r1 }) => ({
        c0: Fp2.sub(c0, r0),
        c1: Fp2.sub(c1, r1)
      });
      const Fp2Multiply = ({ c0, c1 }, rhs) => {
        if (typeof rhs === "bigint")
          return { c0: Fp2.mul(c0, rhs), c1: Fp2.mul(c1, rhs) };
        const { c0: r0, c1: r1 } = rhs;
        let t1 = Fp2.mul(c0, r0);
        let t2 = Fp2.mul(c1, r1);
        const o0 = Fp2.sub(t1, t2);
        const o1 = Fp2.sub(Fp2.mul(Fp2.add(c0, c1), Fp2.add(r0, r1)), Fp2.add(t1, t2));
        return { c0: o0, c1: o1 };
      };
      const Fp2Square = ({ c0, c1 }) => {
        const a = Fp2.add(c0, c1);
        const b2 = Fp2.sub(c0, c1);
        const c = Fp2.add(c0, c0);
        return { c0: Fp2.mul(a, b2), c1: Fp2.mul(c, c1) };
      };
      const Fp2fromBigTuple = (tuple) => {
        if (tuple.length !== 2)
          throw new Error("invalid tuple");
        const fps = tuple.map((n2) => Fp2.create(n2));
        return { c0: fps[0], c1: fps[1] };
      };
      const FP2_ORDER = ORDER * ORDER;
      const Fp2Nonresidue = Fp2fromBigTuple(opts.FP2_NONRESIDUE);
      const Fp22 = {
        ORDER: FP2_ORDER,
        isLE: Fp2.isLE,
        NONRESIDUE: Fp2Nonresidue,
        BITS: (0, utils_js_1.bitLen)(FP2_ORDER),
        BYTES: Math.ceil((0, utils_js_1.bitLen)(FP2_ORDER) / 8),
        MASK: (0, utils_js_1.bitMask)((0, utils_js_1.bitLen)(FP2_ORDER)),
        ZERO: { c0: Fp2.ZERO, c1: Fp2.ZERO },
        ONE: { c0: Fp2.ONE, c1: Fp2.ZERO },
        create: (num) => num,
        isValid: ({ c0, c1 }) => typeof c0 === "bigint" && typeof c1 === "bigint",
        is0: ({ c0, c1 }) => Fp2.is0(c0) && Fp2.is0(c1),
        eql: ({ c0, c1 }, { c0: r0, c1: r1 }) => Fp2.eql(c0, r0) && Fp2.eql(c1, r1),
        neg: ({ c0, c1 }) => ({ c0: Fp2.neg(c0), c1: Fp2.neg(c1) }),
        pow: (num, power) => mod2.FpPow(Fp22, num, power),
        invertBatch: (nums) => mod2.FpInvertBatch(Fp22, nums),
        // Normalized
        add: Fp2Add,
        sub: Fp2Subtract,
        mul: Fp2Multiply,
        sqr: Fp2Square,
        // NonNormalized stuff
        addN: Fp2Add,
        subN: Fp2Subtract,
        mulN: Fp2Multiply,
        sqrN: Fp2Square,
        // Why inversion for bigint inside Fp instead of Fp2? it is even used in that context?
        div: (lhs, rhs) => Fp22.mul(lhs, typeof rhs === "bigint" ? Fp2.inv(Fp2.create(rhs)) : Fp22.inv(rhs)),
        inv: ({ c0: a, c1: b2 }) => {
          const factor = Fp2.inv(Fp2.create(a * a + b2 * b2));
          return { c0: Fp2.mul(factor, Fp2.create(a)), c1: Fp2.mul(factor, Fp2.create(-b2)) };
        },
        sqrt: (num) => {
          if (opts.Fp2sqrt)
            return opts.Fp2sqrt(num);
          const { c0, c1 } = num;
          if (Fp2.is0(c1)) {
            if (Fp2.eql(FpLegendre(Fp2, c0), Fp2.ONE))
              return Fp22.create({ c0: Fp2.sqrt(c0), c1: Fp2.ZERO });
            else
              return Fp22.create({ c0: Fp2.ZERO, c1: Fp2.sqrt(Fp2.div(c0, FpNONRESIDUE)) });
          }
          const a = Fp2.sqrt(Fp2.sub(Fp2.sqr(c0), Fp2.mul(Fp2.sqr(c1), FpNONRESIDUE)));
          let d = Fp2.mul(Fp2.add(a, c0), Fpdiv2);
          const legendre = FpLegendre(Fp2, d);
          if (!Fp2.is0(legendre) && !Fp2.eql(legendre, Fp2.ONE))
            d = Fp2.sub(d, a);
          const a0 = Fp2.sqrt(d);
          const candidateSqrt = Fp22.create({ c0: a0, c1: Fp2.div(Fp2.mul(c1, Fpdiv2), a0) });
          if (!Fp22.eql(Fp22.sqr(candidateSqrt), num))
            throw new Error("Cannot find square root");
          const x1 = candidateSqrt;
          const x2 = Fp22.neg(x1);
          const { re: re1, im: im1 } = Fp22.reim(x1);
          const { re: re2, im: im2 } = Fp22.reim(x2);
          if (im1 > im2 || im1 === im2 && re1 > re2)
            return x1;
          return x2;
        },
        // Same as sgn0_m_eq_2 in RFC 9380
        isOdd: (x) => {
          const { re: x0, im: x1 } = Fp22.reim(x);
          const sign_0 = x0 % _2n6;
          const zero_0 = x0 === _0n7;
          const sign_1 = x1 % _2n6;
          return BigInt(sign_0 || zero_0 && sign_1) == _1n7;
        },
        // Bytes util
        fromBytes(b2) {
          if (b2.length !== Fp22.BYTES)
            throw new Error("fromBytes invalid length=" + b2.length);
          return { c0: Fp2.fromBytes(b2.subarray(0, Fp2.BYTES)), c1: Fp2.fromBytes(b2.subarray(Fp2.BYTES)) };
        },
        toBytes: ({ c0, c1 }) => (0, utils_js_1.concatBytes)(Fp2.toBytes(c0), Fp2.toBytes(c1)),
        cmov: ({ c0, c1 }, { c0: r0, c1: r1 }, c) => ({
          c0: Fp2.cmov(c0, r0, c),
          c1: Fp2.cmov(c1, r1, c)
        }),
        reim: ({ c0, c1 }) => ({ re: c0, im: c1 }),
        // multiply by u + 1
        mulByNonresidue: ({ c0, c1 }) => Fp22.mul({ c0, c1 }, Fp2Nonresidue),
        mulByB: opts.Fp2mulByB,
        fromBigTuple: Fp2fromBigTuple,
        frobeniusMap: ({ c0, c1 }, power) => ({
          c0,
          c1: Fp2.mul(c1, FP2_FROBENIUS_COEFFICIENTS[power % 2])
        })
      };
      const Fp6Add = ({ c0, c1, c2 }, { c0: r0, c1: r1, c2: r2 }) => ({
        c0: Fp22.add(c0, r0),
        c1: Fp22.add(c1, r1),
        c2: Fp22.add(c2, r2)
      });
      const Fp6Subtract = ({ c0, c1, c2 }, { c0: r0, c1: r1, c2: r2 }) => ({
        c0: Fp22.sub(c0, r0),
        c1: Fp22.sub(c1, r1),
        c2: Fp22.sub(c2, r2)
      });
      const Fp6Multiply = ({ c0, c1, c2 }, rhs) => {
        if (typeof rhs === "bigint") {
          return {
            c0: Fp22.mul(c0, rhs),
            c1: Fp22.mul(c1, rhs),
            c2: Fp22.mul(c2, rhs)
          };
        }
        const { c0: r0, c1: r1, c2: r2 } = rhs;
        const t0 = Fp22.mul(c0, r0);
        const t1 = Fp22.mul(c1, r1);
        const t2 = Fp22.mul(c2, r2);
        return {
          // t0 + (c1 + c2) * (r1 * r2) - (T1 + T2) * (u + 1)
          c0: Fp22.add(t0, Fp22.mulByNonresidue(Fp22.sub(Fp22.mul(Fp22.add(c1, c2), Fp22.add(r1, r2)), Fp22.add(t1, t2)))),
          // (c0 + c1) * (r0 + r1) - (T0 + T1) + T2 * (u + 1)
          c1: Fp22.add(Fp22.sub(Fp22.mul(Fp22.add(c0, c1), Fp22.add(r0, r1)), Fp22.add(t0, t1)), Fp22.mulByNonresidue(t2)),
          // T1 + (c0 + c2) * (r0 + r2) - T0 + T2
          c2: Fp22.sub(Fp22.add(t1, Fp22.mul(Fp22.add(c0, c2), Fp22.add(r0, r2))), Fp22.add(t0, t2))
        };
      };
      const Fp6Square = ({ c0, c1, c2 }) => {
        let t0 = Fp22.sqr(c0);
        let t1 = Fp22.mul(Fp22.mul(c0, c1), _2n6);
        let t3 = Fp22.mul(Fp22.mul(c1, c2), _2n6);
        let t4 = Fp22.sqr(c2);
        return {
          c0: Fp22.add(Fp22.mulByNonresidue(t3), t0),
          // T3 * (u + 1) + T0
          c1: Fp22.add(Fp22.mulByNonresidue(t4), t1),
          // T4 * (u + 1) + T1
          // T1 + (c0 - c1 + c2)² + T3 - T0 - T4
          c2: Fp22.sub(Fp22.sub(Fp22.add(Fp22.add(t1, Fp22.sqr(Fp22.add(Fp22.sub(c0, c1), c2))), t3), t0), t4)
        };
      };
      const [FP6_FROBENIUS_COEFFICIENTS_1, FP6_FROBENIUS_COEFFICIENTS_2] = calcFrobeniusCoefficients(Fp22, Fp2Nonresidue, Fp2.ORDER, 6, 2, 3);
      const Fp6 = {
        ORDER: Fp22.ORDER,
        // TODO: unused, but need to verify
        isLE: Fp22.isLE,
        BITS: 3 * Fp22.BITS,
        BYTES: 3 * Fp22.BYTES,
        MASK: (0, utils_js_1.bitMask)(3 * Fp22.BITS),
        ZERO: { c0: Fp22.ZERO, c1: Fp22.ZERO, c2: Fp22.ZERO },
        ONE: { c0: Fp22.ONE, c1: Fp22.ZERO, c2: Fp22.ZERO },
        create: (num) => num,
        isValid: ({ c0, c1, c2 }) => Fp22.isValid(c0) && Fp22.isValid(c1) && Fp22.isValid(c2),
        is0: ({ c0, c1, c2 }) => Fp22.is0(c0) && Fp22.is0(c1) && Fp22.is0(c2),
        neg: ({ c0, c1, c2 }) => ({ c0: Fp22.neg(c0), c1: Fp22.neg(c1), c2: Fp22.neg(c2) }),
        eql: ({ c0, c1, c2 }, { c0: r0, c1: r1, c2: r2 }) => Fp22.eql(c0, r0) && Fp22.eql(c1, r1) && Fp22.eql(c2, r2),
        sqrt: utils_js_1.notImplemented,
        // Do we need division by bigint at all? Should be done via order:
        div: (lhs, rhs) => Fp6.mul(lhs, typeof rhs === "bigint" ? Fp2.inv(Fp2.create(rhs)) : Fp6.inv(rhs)),
        pow: (num, power) => mod2.FpPow(Fp6, num, power),
        invertBatch: (nums) => mod2.FpInvertBatch(Fp6, nums),
        // Normalized
        add: Fp6Add,
        sub: Fp6Subtract,
        mul: Fp6Multiply,
        sqr: Fp6Square,
        // NonNormalized stuff
        addN: Fp6Add,
        subN: Fp6Subtract,
        mulN: Fp6Multiply,
        sqrN: Fp6Square,
        inv: ({ c0, c1, c2 }) => {
          let t0 = Fp22.sub(Fp22.sqr(c0), Fp22.mulByNonresidue(Fp22.mul(c2, c1)));
          let t1 = Fp22.sub(Fp22.mulByNonresidue(Fp22.sqr(c2)), Fp22.mul(c0, c1));
          let t2 = Fp22.sub(Fp22.sqr(c1), Fp22.mul(c0, c2));
          let t4 = Fp22.inv(Fp22.add(Fp22.mulByNonresidue(Fp22.add(Fp22.mul(c2, t1), Fp22.mul(c1, t2))), Fp22.mul(c0, t0)));
          return { c0: Fp22.mul(t4, t0), c1: Fp22.mul(t4, t1), c2: Fp22.mul(t4, t2) };
        },
        // Bytes utils
        fromBytes: (b2) => {
          if (b2.length !== Fp6.BYTES)
            throw new Error("fromBytes invalid length=" + b2.length);
          return {
            c0: Fp22.fromBytes(b2.subarray(0, Fp22.BYTES)),
            c1: Fp22.fromBytes(b2.subarray(Fp22.BYTES, 2 * Fp22.BYTES)),
            c2: Fp22.fromBytes(b2.subarray(2 * Fp22.BYTES))
          };
        },
        toBytes: ({ c0, c1, c2 }) => (0, utils_js_1.concatBytes)(Fp22.toBytes(c0), Fp22.toBytes(c1), Fp22.toBytes(c2)),
        cmov: ({ c0, c1, c2 }, { c0: r0, c1: r1, c2: r2 }, c) => ({
          c0: Fp22.cmov(c0, r0, c),
          c1: Fp22.cmov(c1, r1, c),
          c2: Fp22.cmov(c2, r2, c)
        }),
        fromBigSix: (t) => {
          if (!Array.isArray(t) || t.length !== 6)
            throw new Error("invalid Fp6 usage");
          return {
            c0: Fp22.fromBigTuple(t.slice(0, 2)),
            c1: Fp22.fromBigTuple(t.slice(2, 4)),
            c2: Fp22.fromBigTuple(t.slice(4, 6))
          };
        },
        frobeniusMap: ({ c0, c1, c2 }, power) => ({
          c0: Fp22.frobeniusMap(c0, power),
          c1: Fp22.mul(Fp22.frobeniusMap(c1, power), FP6_FROBENIUS_COEFFICIENTS_1[power % 6]),
          c2: Fp22.mul(Fp22.frobeniusMap(c2, power), FP6_FROBENIUS_COEFFICIENTS_2[power % 6])
        }),
        mulByFp2: ({ c0, c1, c2 }, rhs) => ({
          c0: Fp22.mul(c0, rhs),
          c1: Fp22.mul(c1, rhs),
          c2: Fp22.mul(c2, rhs)
        }),
        mulByNonresidue: ({ c0, c1, c2 }) => ({ c0: Fp22.mulByNonresidue(c2), c1: c0, c2: c1 }),
        // Sparse multiplication
        mul1: ({ c0, c1, c2 }, b1) => ({
          c0: Fp22.mulByNonresidue(Fp22.mul(c2, b1)),
          c1: Fp22.mul(c0, b1),
          c2: Fp22.mul(c1, b1)
        }),
        // Sparse multiplication
        mul01({ c0, c1, c2 }, b0, b1) {
          let t0 = Fp22.mul(c0, b0);
          let t1 = Fp22.mul(c1, b1);
          return {
            // ((c1 + c2) * b1 - T1) * (u + 1) + T0
            c0: Fp22.add(Fp22.mulByNonresidue(Fp22.sub(Fp22.mul(Fp22.add(c1, c2), b1), t1)), t0),
            // (b0 + b1) * (c0 + c1) - T0 - T1
            c1: Fp22.sub(Fp22.sub(Fp22.mul(Fp22.add(b0, b1), Fp22.add(c0, c1)), t0), t1),
            // (c0 + c2) * b0 - T0 + T1
            c2: Fp22.add(Fp22.sub(Fp22.mul(Fp22.add(c0, c2), b0), t0), t1)
          };
        }
      };
      const FP12_FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(Fp22, Fp2Nonresidue, Fp2.ORDER, 12, 1, 6)[0];
      const Fp12Add = ({ c0, c1 }, { c0: r0, c1: r1 }) => ({
        c0: Fp6.add(c0, r0),
        c1: Fp6.add(c1, r1)
      });
      const Fp12Subtract = ({ c0, c1 }, { c0: r0, c1: r1 }) => ({
        c0: Fp6.sub(c0, r0),
        c1: Fp6.sub(c1, r1)
      });
      const Fp12Multiply = ({ c0, c1 }, rhs) => {
        if (typeof rhs === "bigint")
          return { c0: Fp6.mul(c0, rhs), c1: Fp6.mul(c1, rhs) };
        let { c0: r0, c1: r1 } = rhs;
        let t1 = Fp6.mul(c0, r0);
        let t2 = Fp6.mul(c1, r1);
        return {
          c0: Fp6.add(t1, Fp6.mulByNonresidue(t2)),
          // T1 + T2 * v
          // (c0 + c1) * (r0 + r1) - (T1 + T2)
          c1: Fp6.sub(Fp6.mul(Fp6.add(c0, c1), Fp6.add(r0, r1)), Fp6.add(t1, t2))
        };
      };
      const Fp12Square = ({ c0, c1 }) => {
        let ab = Fp6.mul(c0, c1);
        return {
          // (c1 * v + c0) * (c0 + c1) - AB - AB * v
          c0: Fp6.sub(Fp6.sub(Fp6.mul(Fp6.add(Fp6.mulByNonresidue(c1), c0), Fp6.add(c0, c1)), ab), Fp6.mulByNonresidue(ab)),
          c1: Fp6.add(ab, ab)
        };
      };
      function Fp4Square(a, b2) {
        const a2 = Fp22.sqr(a);
        const b22 = Fp22.sqr(b2);
        return {
          first: Fp22.add(Fp22.mulByNonresidue(b22), a2),
          // b² * Nonresidue + a²
          second: Fp22.sub(Fp22.sub(Fp22.sqr(Fp22.add(a, b2)), a2), b22)
          // (a + b)² - a² - b²
        };
      }
      const Fp12 = {
        ORDER: Fp22.ORDER,
        // TODO: unused, but need to verify
        isLE: Fp6.isLE,
        BITS: 2 * Fp22.BITS,
        BYTES: 2 * Fp22.BYTES,
        MASK: (0, utils_js_1.bitMask)(2 * Fp22.BITS),
        ZERO: { c0: Fp6.ZERO, c1: Fp6.ZERO },
        ONE: { c0: Fp6.ONE, c1: Fp6.ZERO },
        create: (num) => num,
        isValid: ({ c0, c1 }) => Fp6.isValid(c0) && Fp6.isValid(c1),
        is0: ({ c0, c1 }) => Fp6.is0(c0) && Fp6.is0(c1),
        neg: ({ c0, c1 }) => ({ c0: Fp6.neg(c0), c1: Fp6.neg(c1) }),
        eql: ({ c0, c1 }, { c0: r0, c1: r1 }) => Fp6.eql(c0, r0) && Fp6.eql(c1, r1),
        sqrt: utils_js_1.notImplemented,
        inv: ({ c0, c1 }) => {
          let t = Fp6.inv(Fp6.sub(Fp6.sqr(c0), Fp6.mulByNonresidue(Fp6.sqr(c1))));
          return { c0: Fp6.mul(c0, t), c1: Fp6.neg(Fp6.mul(c1, t)) };
        },
        div: (lhs, rhs) => Fp12.mul(lhs, typeof rhs === "bigint" ? Fp2.inv(Fp2.create(rhs)) : Fp12.inv(rhs)),
        pow: (num, power) => mod2.FpPow(Fp12, num, power),
        invertBatch: (nums) => mod2.FpInvertBatch(Fp12, nums),
        // Normalized
        add: Fp12Add,
        sub: Fp12Subtract,
        mul: Fp12Multiply,
        sqr: Fp12Square,
        // NonNormalized stuff
        addN: Fp12Add,
        subN: Fp12Subtract,
        mulN: Fp12Multiply,
        sqrN: Fp12Square,
        // Bytes utils
        fromBytes: (b2) => {
          if (b2.length !== Fp12.BYTES)
            throw new Error("fromBytes invalid length=" + b2.length);
          return {
            c0: Fp6.fromBytes(b2.subarray(0, Fp6.BYTES)),
            c1: Fp6.fromBytes(b2.subarray(Fp6.BYTES))
          };
        },
        toBytes: ({ c0, c1 }) => (0, utils_js_1.concatBytes)(Fp6.toBytes(c0), Fp6.toBytes(c1)),
        cmov: ({ c0, c1 }, { c0: r0, c1: r1 }, c) => ({
          c0: Fp6.cmov(c0, r0, c),
          c1: Fp6.cmov(c1, r1, c)
        }),
        // Utils
        // toString() {
        //   return '' + 'Fp12(' + this.c0 + this.c1 + '* w');
        // },
        // fromTuple(c: [Fp6, Fp6]) {
        //   return new Fp12(...c);
        // }
        fromBigTwelve: (t) => ({
          c0: Fp6.fromBigSix(t.slice(0, 6)),
          c1: Fp6.fromBigSix(t.slice(6, 12))
        }),
        // Raises to q**i -th power
        frobeniusMap(lhs, power) {
          const { c0, c1, c2 } = Fp6.frobeniusMap(lhs.c1, power);
          const coeff = FP12_FROBENIUS_COEFFICIENTS[power % 12];
          return {
            c0: Fp6.frobeniusMap(lhs.c0, power),
            c1: Fp6.create({
              c0: Fp22.mul(c0, coeff),
              c1: Fp22.mul(c1, coeff),
              c2: Fp22.mul(c2, coeff)
            })
          };
        },
        mulByFp2: ({ c0, c1 }, rhs) => ({
          c0: Fp6.mulByFp2(c0, rhs),
          c1: Fp6.mulByFp2(c1, rhs)
        }),
        conjugate: ({ c0, c1 }) => ({ c0, c1: Fp6.neg(c1) }),
        // Sparse multiplication
        mul014: ({ c0, c1 }, o0, o1, o4) => {
          let t0 = Fp6.mul01(c0, o0, o1);
          let t1 = Fp6.mul1(c1, o4);
          return {
            c0: Fp6.add(Fp6.mulByNonresidue(t1), t0),
            // T1 * v + T0
            // (c1 + c0) * [o0, o1+o4] - T0 - T1
            c1: Fp6.sub(Fp6.sub(Fp6.mul01(Fp6.add(c1, c0), o0, Fp22.add(o1, o4)), t0), t1)
          };
        },
        mul034: ({ c0, c1 }, o0, o3, o4) => {
          const a = Fp6.create({
            c0: Fp22.mul(c0.c0, o0),
            c1: Fp22.mul(c0.c1, o0),
            c2: Fp22.mul(c0.c2, o0)
          });
          const b2 = Fp6.mul01(c1, o3, o4);
          const e = Fp6.mul01(Fp6.add(c0, c1), Fp22.add(o0, o3), o4);
          return {
            c0: Fp6.add(Fp6.mulByNonresidue(b2), a),
            c1: Fp6.sub(e, Fp6.add(a, b2))
          };
        },
        // A cyclotomic group is a subgroup of Fp^n defined by
        //   GΦₙ(p) = {α ∈ Fpⁿ : α^Φₙ(p) = 1}
        // The result of any pairing is in a cyclotomic subgroup
        // https://eprint.iacr.org/2009/565.pdf
        _cyclotomicSquare: opts.Fp12cyclotomicSquare,
        _cyclotomicExp: opts.Fp12cyclotomicExp,
        // https://eprint.iacr.org/2010/354.pdf
        // https://eprint.iacr.org/2009/565.pdf
        finalExponentiate: opts.Fp12finalExponentiate
      };
      return { Fp: Fp2, Fp2: Fp22, Fp6, Fp4Square, Fp12 };
    }
  }
});

// node_modules/@noble/hashes/_assert.js
var require_assert = __commonJS({
  "node_modules/@noble/hashes/_assert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;
    function number2(n2) {
      if (!Number.isSafeInteger(n2) || n2 < 0)
        throw new Error(`Wrong positive integer: ${n2}`);
    }
    exports.number = number2;
    function bool(b2) {
      if (typeof b2 !== "boolean")
        throw new Error(`Expected boolean, not ${b2}`);
    }
    exports.bool = bool;
    function bytes2(b2, ...lengths) {
      if (!(b2 instanceof Uint8Array))
        throw new Error("Expected Uint8Array");
      if (lengths.length > 0 && !lengths.includes(b2.length))
        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b2.length}`);
    }
    exports.bytes = bytes2;
    function hash2(hash3) {
      if (typeof hash3 !== "function" || typeof hash3.create !== "function")
        throw new Error("Hash should be wrapped by utils.wrapConstructor");
      number2(hash3.outputLen);
      number2(hash3.blockLen);
    }
    exports.hash = hash2;
    function exists2(instance, checkFinished = true) {
      if (instance.destroyed)
        throw new Error("Hash instance has been destroyed");
      if (checkFinished && instance.finished)
        throw new Error("Hash#digest() has already been called");
    }
    exports.exists = exists2;
    function output2(out, instance) {
      bytes2(out);
      const min = instance.outputLen;
      if (out.length < min) {
        throw new Error(`digestInto() expects output buffer of length at least ${min}`);
      }
    }
    exports.output = output2;
    var assert2 = { number: number2, bool, bytes: bytes2, hash: hash2, exists: exists2, output: output2 };
    exports.default = assert2;
  }
});

// node_modules/@noble/hashes/_u64.js
var require_u64 = __commonJS({
  "node_modules/@noble/hashes/_u64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.add5L = exports.add5H = exports.add4H = exports.add4L = exports.add3H = exports.add3L = exports.add = exports.rotlBL = exports.rotlBH = exports.rotlSL = exports.rotlSH = exports.rotr32L = exports.rotr32H = exports.rotrBL = exports.rotrBH = exports.rotrSL = exports.rotrSH = exports.shrSL = exports.shrSH = exports.toBig = exports.split = exports.fromBig = void 0;
    var U32_MASK642 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
    var _32n2 = /* @__PURE__ */ BigInt(32);
    function fromBig2(n2, le = false) {
      if (le)
        return { h: Number(n2 & U32_MASK642), l: Number(n2 >> _32n2 & U32_MASK642) };
      return { h: Number(n2 >> _32n2 & U32_MASK642) | 0, l: Number(n2 & U32_MASK642) | 0 };
    }
    exports.fromBig = fromBig2;
    function split3(lst, le = false) {
      let Ah = new Uint32Array(lst.length);
      let Al = new Uint32Array(lst.length);
      for (let i = 0; i < lst.length; i++) {
        const { h, l } = fromBig2(lst[i], le);
        [Ah[i], Al[i]] = [h, l];
      }
      return [Ah, Al];
    }
    exports.split = split3;
    var toBig2 = (h, l) => BigInt(h >>> 0) << _32n2 | BigInt(l >>> 0);
    exports.toBig = toBig2;
    var shrSH2 = (h, _l, s) => h >>> s;
    exports.shrSH = shrSH2;
    var shrSL2 = (h, l, s) => h << 32 - s | l >>> s;
    exports.shrSL = shrSL2;
    var rotrSH2 = (h, l, s) => h >>> s | l << 32 - s;
    exports.rotrSH = rotrSH2;
    var rotrSL2 = (h, l, s) => h << 32 - s | l >>> s;
    exports.rotrSL = rotrSL2;
    var rotrBH2 = (h, l, s) => h << 64 - s | l >>> s - 32;
    exports.rotrBH = rotrBH2;
    var rotrBL2 = (h, l, s) => h >>> s - 32 | l << 64 - s;
    exports.rotrBL = rotrBL2;
    var rotr32H2 = (_h, l) => l;
    exports.rotr32H = rotr32H2;
    var rotr32L2 = (h, _l) => h;
    exports.rotr32L = rotr32L2;
    var rotlSH2 = (h, l, s) => h << s | l >>> 32 - s;
    exports.rotlSH = rotlSH2;
    var rotlSL2 = (h, l, s) => l << s | h >>> 32 - s;
    exports.rotlSL = rotlSL2;
    var rotlBH2 = (h, l, s) => l << s - 32 | h >>> 64 - s;
    exports.rotlBH = rotlBH2;
    var rotlBL2 = (h, l, s) => h << s - 32 | l >>> 64 - s;
    exports.rotlBL = rotlBL2;
    function add2(Ah, Al, Bh, Bl) {
      const l = (Al >>> 0) + (Bl >>> 0);
      return { h: Ah + Bh + (l / 2 ** 32 | 0) | 0, l: l | 0 };
    }
    exports.add = add2;
    var add3L2 = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
    exports.add3L = add3L2;
    var add3H2 = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
    exports.add3H = add3H2;
    var add4L2 = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
    exports.add4L = add4L2;
    var add4H2 = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
    exports.add4H = add4H2;
    var add5L2 = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
    exports.add5L = add5L2;
    var add5H2 = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
    exports.add5H = add5H2;
    var u642 = {
      fromBig: fromBig2,
      split: split3,
      toBig: toBig2,
      shrSH: shrSH2,
      shrSL: shrSL2,
      rotrSH: rotrSH2,
      rotrSL: rotrSL2,
      rotrBH: rotrBH2,
      rotrBL: rotrBL2,
      rotr32H: rotr32H2,
      rotr32L: rotr32L2,
      rotlSH: rotlSH2,
      rotlSL: rotlSL2,
      rotlBH: rotlBH2,
      rotlBL: rotlBL2,
      add: add2,
      add3L: add3L2,
      add3H: add3H2,
      add4L: add4L2,
      add4H: add4H2,
      add5H: add5H2,
      add5L: add5L2
    };
    exports.default = u642;
  }
});

// node_modules/@noble/hashes/sha3.js
var require_sha3 = __commonJS({
  "node_modules/@noble/hashes/sha3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;
    var _assert_js_1 = require_assert();
    var _u64_js_1 = require_u64();
    var utils_js_1 = require_utils();
    var [SHA3_PI2, SHA3_ROTL2, _SHA3_IOTA2] = [[], [], []];
    var _0n7 = /* @__PURE__ */ BigInt(0);
    var _1n7 = /* @__PURE__ */ BigInt(1);
    var _2n6 = /* @__PURE__ */ BigInt(2);
    var _7n2 = /* @__PURE__ */ BigInt(7);
    var _256n2 = /* @__PURE__ */ BigInt(256);
    var _0x71n2 = /* @__PURE__ */ BigInt(113);
    for (let round = 0, R = _1n7, x = 1, y = 0; round < 24; round++) {
      [x, y] = [y, (2 * x + 3 * y) % 5];
      SHA3_PI2.push(2 * (5 * y + x));
      SHA3_ROTL2.push((round + 1) * (round + 2) / 2 % 64);
      let t = _0n7;
      for (let j = 0; j < 7; j++) {
        R = (R << _1n7 ^ (R >> _7n2) * _0x71n2) % _256n2;
        if (R & _2n6)
          t ^= _1n7 << (_1n7 << /* @__PURE__ */ BigInt(j)) - _1n7;
      }
      _SHA3_IOTA2.push(t);
    }
    var [SHA3_IOTA_H2, SHA3_IOTA_L2] = /* @__PURE__ */ (0, _u64_js_1.split)(_SHA3_IOTA2, true);
    var rotlH2 = (h, l, s) => s > 32 ? (0, _u64_js_1.rotlBH)(h, l, s) : (0, _u64_js_1.rotlSH)(h, l, s);
    var rotlL2 = (h, l, s) => s > 32 ? (0, _u64_js_1.rotlBL)(h, l, s) : (0, _u64_js_1.rotlSL)(h, l, s);
    function keccakP2(s, rounds = 24) {
      const B = new Uint32Array(5 * 2);
      for (let round = 24 - rounds; round < 24; round++) {
        for (let x = 0; x < 10; x++)
          B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
        for (let x = 0; x < 10; x += 2) {
          const idx1 = (x + 8) % 10;
          const idx0 = (x + 2) % 10;
          const B0 = B[idx0];
          const B1 = B[idx0 + 1];
          const Th = rotlH2(B0, B1, 1) ^ B[idx1];
          const Tl = rotlL2(B0, B1, 1) ^ B[idx1 + 1];
          for (let y = 0; y < 50; y += 10) {
            s[x + y] ^= Th;
            s[x + y + 1] ^= Tl;
          }
        }
        let curH = s[2];
        let curL = s[3];
        for (let t = 0; t < 24; t++) {
          const shift = SHA3_ROTL2[t];
          const Th = rotlH2(curH, curL, shift);
          const Tl = rotlL2(curH, curL, shift);
          const PI = SHA3_PI2[t];
          curH = s[PI];
          curL = s[PI + 1];
          s[PI] = Th;
          s[PI + 1] = Tl;
        }
        for (let y = 0; y < 50; y += 10) {
          for (let x = 0; x < 10; x++)
            B[x] = s[y + x];
          for (let x = 0; x < 10; x++)
            s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
        }
        s[0] ^= SHA3_IOTA_H2[round];
        s[1] ^= SHA3_IOTA_L2[round];
      }
      B.fill(0);
    }
    exports.keccakP = keccakP2;
    var Keccak2 = class _Keccak extends utils_js_1.Hash {
      // NOTE: we accept arguments in bytes instead of bits here.
      constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
        super();
        this.blockLen = blockLen;
        this.suffix = suffix;
        this.outputLen = outputLen;
        this.enableXOF = enableXOF;
        this.rounds = rounds;
        this.pos = 0;
        this.posOut = 0;
        this.finished = false;
        this.destroyed = false;
        (0, _assert_js_1.number)(outputLen);
        if (0 >= this.blockLen || this.blockLen >= 200)
          throw new Error("Sha3 supports only keccak-f1600 function");
        this.state = new Uint8Array(200);
        this.state32 = (0, utils_js_1.u32)(this.state);
      }
      keccak() {
        keccakP2(this.state32, this.rounds);
        this.posOut = 0;
        this.pos = 0;
      }
      update(data) {
        (0, _assert_js_1.exists)(this);
        const { blockLen, state } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take = Math.min(blockLen - this.pos, len - pos);
          for (let i = 0; i < take; i++)
            state[this.pos++] ^= data[pos++];
          if (this.pos === blockLen)
            this.keccak();
        }
        return this;
      }
      finish() {
        if (this.finished)
          return;
        this.finished = true;
        const { state, suffix, pos, blockLen } = this;
        state[pos] ^= suffix;
        if ((suffix & 128) !== 0 && pos === blockLen - 1)
          this.keccak();
        state[blockLen - 1] ^= 128;
        this.keccak();
      }
      writeInto(out) {
        (0, _assert_js_1.exists)(this, false);
        (0, _assert_js_1.bytes)(out);
        this.finish();
        const bufferOut = this.state;
        const { blockLen } = this;
        for (let pos = 0, len = out.length; pos < len; ) {
          if (this.posOut >= blockLen)
            this.keccak();
          const take = Math.min(blockLen - this.posOut, len - pos);
          out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
          this.posOut += take;
          pos += take;
        }
        return out;
      }
      xofInto(out) {
        if (!this.enableXOF)
          throw new Error("XOF is not possible for this instance");
        return this.writeInto(out);
      }
      xof(bytes2) {
        (0, _assert_js_1.number)(bytes2);
        return this.xofInto(new Uint8Array(bytes2));
      }
      digestInto(out) {
        (0, _assert_js_1.output)(out, this);
        if (this.finished)
          throw new Error("digest() was already called");
        this.writeInto(out);
        this.destroy();
        return out;
      }
      digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
      }
      destroy() {
        this.destroyed = true;
        this.state.fill(0);
      }
      _cloneInto(to) {
        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
        to || (to = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds;
        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
      }
    };
    exports.Keccak = Keccak2;
    var gen2 = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak2(blockLen, suffix, outputLen));
    exports.sha3_224 = gen2(6, 144, 224 / 8);
    exports.sha3_256 = gen2(6, 136, 256 / 8);
    exports.sha3_384 = gen2(6, 104, 384 / 8);
    exports.sha3_512 = gen2(6, 72, 512 / 8);
    exports.keccak_224 = gen2(1, 144, 224 / 8);
    exports.keccak_256 = gen2(1, 136, 256 / 8);
    exports.keccak_384 = gen2(1, 104, 384 / 8);
    exports.keccak_512 = gen2(1, 72, 512 / 8);
    var genShake2 = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak2(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
    exports.shake128 = genShake2(31, 168, 128 / 8);
    exports.shake256 = genShake2(31, 136, 256 / 8);
  }
});

// node_modules/@kevincharm/noble-bn254-drand/dist/src/bn254.js
var require_bn254 = __commonJS({
  "node_modules/@kevincharm/noble-bn254-drand/dist/src/bn254.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod3) {
      if (mod3 && mod3.__esModule) return mod3;
      var result = {};
      if (mod3 != null) {
        for (var k in mod3) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod3, k)) __createBinding(result, mod3, k);
      }
      __setModuleDefault(result, mod3);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bn254 = void 0;
    exports.mapToCurveSVDW = mapToCurveSVDW;
    var utils_1 = require_utils();
    var bls_1 = require_bls();
    var modular_1 = require_modular();
    var utils_2 = require_utils2();
    var tower_1 = require_tower();
    var mod2 = __importStar(require_modular());
    var sha3_1 = require_sha3();
    var utils_3 = require_utils2();
    var _1n7 = BigInt(1);
    var _2n6 = BigInt(2);
    var _3n3 = BigInt(3);
    var _6n = BigInt(6);
    var BN_X = BigInt("4965661367192848881");
    var BN_X_LEN = (0, utils_2.bitLen)(BN_X);
    var SIX_X_SQUARED = _6n * BN_X ** _2n6;
    var Fr = (0, modular_1.Field)(BigInt("21888242871839275222246405745257275088548364400416034343698204186575808495617"));
    var Fp2B = {
      c0: BigInt("19485874751759354771024239261021720505790618469301721065564631296452457478373"),
      c1: BigInt("266929791119991161246907387137283842545076965332900288569378510910307636690")
    };
    var { Fp: Fp2, Fp2: Fp22, Fp6, Fp4Square, Fp12 } = (0, tower_1.tower12)({
      ORDER: BigInt("21888242871839275222246405745257275088696311157297823662689037894645226208583"),
      FP2_NONRESIDUE: [BigInt(9), _1n7],
      Fp2mulByB: (num) => Fp22.mul(num, Fp2B),
      // The result of any pairing is in a cyclotomic subgroup
      // https://eprint.iacr.org/2009/565.pdf
      Fp12cyclotomicSquare: ({ c0, c1 }) => {
        const { c0: c0c0, c1: c0c1, c2: c0c2 } = c0;
        const { c0: c1c0, c1: c1c1, c2: c1c2 } = c1;
        const { first: t3, second: t4 } = Fp4Square(c0c0, c1c1);
        const { first: t5, second: t6 } = Fp4Square(c1c0, c0c2);
        const { first: t7, second: t8 } = Fp4Square(c0c1, c1c2);
        let t9 = Fp22.mulByNonresidue(t8);
        return {
          c0: Fp6.create({
            c0: Fp22.add(Fp22.mul(Fp22.sub(t3, c0c0), _2n6), t3),
            // 2 * (T3 - c0c0)  + T3
            c1: Fp22.add(Fp22.mul(Fp22.sub(t5, c0c1), _2n6), t5),
            // 2 * (T5 - c0c1)  + T5
            c2: Fp22.add(Fp22.mul(Fp22.sub(t7, c0c2), _2n6), t7)
          }),
          // 2 * (T7 - c0c2)  + T7
          c1: Fp6.create({
            c0: Fp22.add(Fp22.mul(Fp22.add(t9, c1c0), _2n6), t9),
            // 2 * (T9 + c1c0) + T9
            c1: Fp22.add(Fp22.mul(Fp22.add(t4, c1c1), _2n6), t4),
            // 2 * (T4 + c1c1) + T4
            c2: Fp22.add(Fp22.mul(Fp22.add(t6, c1c2), _2n6), t6)
          })
        };
      },
      Fp12cyclotomicExp(num, n2) {
        let z = Fp12.ONE;
        for (let i = BN_X_LEN - 1; i >= 0; i--) {
          z = Fp12._cyclotomicSquare(z);
          if ((0, utils_2.bitGet)(n2, i))
            z = Fp12.mul(z, num);
        }
        return z;
      },
      // https://eprint.iacr.org/2010/354.pdf
      // https://eprint.iacr.org/2009/565.pdf
      Fp12finalExponentiate: (num) => {
        const powMinusX = (num2) => Fp12.conjugate(Fp12._cyclotomicExp(num2, BN_X));
        const r0 = Fp12.mul(Fp12.conjugate(num), Fp12.inv(num));
        const r = Fp12.mul(Fp12.frobeniusMap(r0, 2), r0);
        const y1 = Fp12._cyclotomicSquare(powMinusX(r));
        const y2 = Fp12.mul(Fp12._cyclotomicSquare(y1), y1);
        const y4 = powMinusX(y2);
        const y6 = powMinusX(Fp12._cyclotomicSquare(y4));
        const y8 = Fp12.mul(Fp12.mul(Fp12.conjugate(y6), y4), Fp12.conjugate(y2));
        const y9 = Fp12.mul(y8, y1);
        return Fp12.mul(Fp12.frobeniusMap(Fp12.mul(Fp12.conjugate(r), y9), 3), Fp12.mul(Fp12.frobeniusMap(y8, 2), Fp12.mul(Fp12.frobeniusMap(y9, 1), Fp12.mul(Fp12.mul(y8, y4), r))));
      }
    });
    var { G2psi, psi } = (0, tower_1.psiFrobenius)(Fp2, Fp22, Fp22.NONRESIDUE);
    function SVDWFpIsSquare(Fp3) {
      return (u) => {
        const x = Fp3.pow(u, (Fp3.ORDER - 1n) / 2n);
        let legendre;
        if (Fp3.eql(x, Fp3.neg(Fp3.ONE))) {
          legendre = -1n;
        } else if (Fp3.eql(x, Fp3.ZERO)) {
          legendre = 0n;
        } else if (Fp3.eql(x, Fp3.ONE)) {
          legendre = 1n;
        } else {
          throw new Error("Legendre failed");
        }
        return legendre === 1n;
      };
    }
    function mapToCurveSVDW(Fp3, opts) {
      mod2.validateField(Fp3);
      if (!Fp3.isValid(opts.A) || !Fp3.isValid(opts.B) || !Fp3.isValid(opts.Z))
        throw new Error("mapToCurveSimpleSVDW: invalid opts");
      const isSquare = SVDWFpIsSquare(Fp3);
      if (!Fp3.isOdd)
        throw new Error("Fp.isOdd is not implemented!");
      const g = (x) => Fp3.add(Fp3.add(Fp3.mul(Fp3.mul(x, x), x), Fp3.mul(opts.A, x)), opts.B);
      const two = Fp3.add(Fp3.ONE, Fp3.ONE);
      const three = Fp3.add(two, Fp3.ONE);
      const four = Fp3.add(three, Fp3.ONE);
      const c1 = g(opts.Z);
      const c2 = Fp3.mul(Fp3.neg(opts.Z), Fp3.inv(Fp3.add(Fp3.ONE, Fp3.ONE)));
      const c3 = Fp3.sqrt(Fp3.mul(Fp3.neg(c1), Fp3.add(Fp3.mul(three, Fp3.mul(opts.Z, opts.Z)), Fp3.mul(four, opts.A))));
      const c4 = Fp3.mul(Fp3.mul(four, Fp3.neg(c1)), Fp3.inv(Fp3.add(Fp3.mul(three, Fp3.mul(opts.Z, opts.Z)), Fp3.mul(four, opts.A))));
      return (u) => {
        let tv1, tv2, tv3, tv4, x1, gx1, e1, x2, gx2, e2, x3, x, gx, y, e3;
        tv1 = Fp3.mul(u, u);
        tv1 = Fp3.mul(tv1, c1);
        tv2 = Fp3.add(Fp3.ONE, tv1);
        tv1 = Fp3.sub(Fp3.ONE, tv1);
        tv3 = Fp3.mul(tv1, tv2);
        tv3 = Fp3.inv(tv3);
        tv4 = Fp3.mul(u, tv1);
        tv4 = Fp3.mul(tv4, tv3);
        tv4 = Fp3.mul(tv4, c3);
        x1 = Fp3.sub(c2, tv4);
        gx1 = Fp3.mul(x1, x1);
        gx1 = Fp3.add(gx1, opts.A);
        gx1 = Fp3.mul(gx1, x1);
        gx1 = Fp3.add(gx1, opts.B);
        e1 = isSquare(gx1);
        x2 = Fp3.add(c2, tv4);
        gx2 = Fp3.mul(x2, x2);
        gx2 = Fp3.add(gx2, opts.A);
        gx2 = Fp3.mul(gx2, x2);
        gx2 = Fp3.add(gx2, opts.B);
        e2 = isSquare(gx2) && !e1;
        x3 = Fp3.mul(tv2, tv2);
        x3 = Fp3.mul(x3, tv3);
        x3 = Fp3.mul(x3, x3);
        x3 = Fp3.mul(x3, c4);
        x3 = Fp3.add(x3, opts.Z);
        x = Fp3.cmov(x3, x1, !!e1);
        x = Fp3.cmov(x, x2, !!e2);
        gx = Fp3.mul(x, x);
        gx = Fp3.add(gx, opts.A);
        gx = Fp3.mul(gx, x);
        gx = Fp3.add(gx, opts.B);
        y = Fp3.sqrt(gx);
        e3 = Fp3.isOdd(u) === Fp3.isOdd(y);
        y = Fp3.cmov(Fp3.neg(y), y, e3);
        return { x, y };
      };
    }
    var G1_SVDW = mapToCurveSVDW(Fp2, {
      A: Fp2.ZERO,
      B: _3n3,
      Z: Fp2.ONE
    });
    var mapToCurveG1 = (scalars) => G1_SVDW(scalars[0]);
    var drandHtf = Object.freeze({
      // DST: a domain separation tag
      // defined in section 2.2.5
      // Use utils.getDSTLabel(), utils.setDSTLabel(value)
      DST: "BLS_SIG_BN254G1_XMD:KECCAK-256_SVDW_RO_NUL_",
      encodeDST: "BLS_SIG_BN254G1_XMD:KECCAK-256_SVDW_RO_NUL_",
      // p: the characteristic of F
      //    where F is a finite field of characteristic p and order q = p^m
      p: Fp2.ORDER,
      // m: the extension degree of F, m >= 1
      //     where F is a finite field of characteristic p and order q = p^m
      m: 1,
      // k: the target security level for the suite in bits
      // defined in section 5.1
      k: 128,
      // option to use a message that has already been processed by
      // expand_message_xmd
      expand: "xmd",
      // NB: We use keccak_256 to hash-to-curve for bn254 drand, as it is the
      // cheapest hash function in the EVM.
      hash: sha3_1.keccak_256
    });
    exports.bn254 = (0, bls_1.bls)({
      // Fields
      fields: { Fp: Fp2, Fp2: Fp22, Fp6, Fp12, Fr },
      G1: {
        Fp: Fp2,
        h: BigInt(1),
        Gx: BigInt(1),
        Gy: BigInt(2),
        a: Fp2.ZERO,
        b: _3n3,
        htfDefaults: { ...drandHtf, m: 1 },
        wrapPrivateKey: true,
        allowInfinityPoint: true,
        mapToCurve: mapToCurveG1,
        fromBytes: (bytes2) => {
          const p = [bytes2.slice(0, 32), bytes2.slice(32, 64)].map((buf) => (0, utils_3.bytesToNumberBE)(buf));
          const point = { x: Fp2.create(p[0]), y: Fp2.create(p[1]) };
          exports.bn254.G1.ProjectivePoint.fromAffine(point).assertValidity();
          return point;
        },
        toBytes: (c, point, _isCompressed) => {
          const isZero = point.equals(c.ZERO);
          const { x, y } = point.toAffine();
          const { BYTES: len } = Fp2;
          if (isZero) {
            return new Uint8Array(len);
          }
          return (0, utils_2.concatBytes)((0, utils_3.numberToBytesBE)(x, len), (0, utils_3.numberToBytesBE)(y, len));
        },
        ShortSignature: {
          fromHex(hex) {
            return exports.bn254.G1.ProjectivePoint.fromHex(hex);
          },
          toRawBytes(point) {
            return point.toRawBytes();
          },
          toHex(point) {
            return point.toHex();
          }
        }
      },
      G2: {
        Fp: Fp22,
        // cofactor: (36 * X^4) + (36 * X^3) + (30 * X^2) + 6*X + 1
        h: BigInt("21888242871839275222246405745257275088844257914179612981679871602714643921549"),
        Gx: Fp22.fromBigTuple([
          BigInt("10857046999023057135944570762232829481370756359578518086990519993285655852781"),
          BigInt("11559732032986387107991004021392285783925812861821192530917403151452391805634")
        ]),
        Gy: Fp22.fromBigTuple([
          BigInt("8495653923123431417604973247489272438418190587263600148770280649306958101930"),
          BigInt("4082367875863433681332203403145435568316851327593401208105741076214120093531")
        ]),
        a: Fp22.ZERO,
        b: Fp2B,
        hEff: BigInt("21888242871839275222246405745257275088844257914179612981679871602714643921549"),
        htfDefaults: { ...drandHtf, m: 2 },
        wrapPrivateKey: true,
        allowInfinityPoint: true,
        isTorsionFree: (c, P) => P.multiplyUnsafe(SIX_X_SQUARED).equals(G2psi(c, P)),
        // [p]P = [6X^2]P
        mapToCurve: utils_2.notImplemented,
        fromBytes: (bytes2) => {
          const p = [
            bytes2.slice(32, 64),
            bytes2.slice(0, 32),
            bytes2.slice(96, 128),
            bytes2.slice(64, 96)
          ].map((buf) => (0, utils_3.bytesToNumberBE)(buf));
          const x = Fp22.create({ c0: p[0], c1: p[1] });
          const y = Fp22.create({ c0: p[2], c1: p[3] });
          exports.bn254.G2.ProjectivePoint.fromAffine({ x, y }).assertValidity();
          return { x, y };
        },
        toBytes: (c, point, _isCompressed) => {
          const { BYTES: len } = Fp2;
          const isZero = point.equals(c.ZERO);
          const { x, y } = point.toAffine();
          const marshalSize = 4 * len;
          if (isZero) {
            return new Uint8Array(marshalSize);
          }
          const { re: x0, im: x1 } = Fp22.reim(x);
          const { re: y0, im: y1 } = Fp22.reim(y);
          return (0, utils_2.concatBytes)((0, utils_3.numberToBytesBE)(x1, len), (0, utils_3.numberToBytesBE)(x0, len), (0, utils_3.numberToBytesBE)(y1, len), (0, utils_3.numberToBytesBE)(y0, len));
        },
        Signature: {
          fromHex(hex) {
            return exports.bn254.G2.ProjectivePoint.fromHex(hex);
          },
          toRawBytes(point) {
            return point.toRawBytes();
          },
          toHex(point) {
            return point.toHex();
          }
        }
      },
      params: {
        ateLoopSize: BN_X * _6n + _2n6,
        r: Fr.ORDER,
        xNegative: false,
        twistType: "divisive"
      },
      htfDefaults: drandHtf,
      hash: sha3_1.keccak_256,
      randomBytes: utils_1.randomBytes,
      postPrecompute: (Rx, Ry, Rz, Qx, Qy, pointAdd) => {
        const q = psi(Qx, Qy);
        ({ Rx, Ry, Rz } = pointAdd(Rx, Ry, Rz, q[0], q[1]));
        const q2 = psi(q[0], q[1]);
        pointAdd(Rx, Ry, Rz, q2[0], Fp22.neg(q2[1]));
      }
    });
  }
});

// node_modules/@kevincharm/noble-bn254-drand/dist/src/index.js
var require_src = __commonJS({
  "node_modules/@kevincharm/noble-bn254-drand/dist/src/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_bn254(), exports);
  }
});

// node_modules/ethers/lib.esm/ethers.js
var ethers_exports = {};
__export(ethers_exports, {
  AbiCoder: () => AbiCoder,
  AbstractProvider: () => AbstractProvider,
  AbstractSigner: () => AbstractSigner,
  AlchemyProvider: () => AlchemyProvider,
  AnkrProvider: () => AnkrProvider,
  BaseContract: () => BaseContract,
  BaseWallet: () => BaseWallet,
  Block: () => Block,
  BrowserProvider: () => BrowserProvider,
  ChainstackProvider: () => ChainstackProvider,
  CloudflareProvider: () => CloudflareProvider,
  ConstructorFragment: () => ConstructorFragment,
  Contract: () => Contract,
  ContractEventPayload: () => ContractEventPayload,
  ContractFactory: () => ContractFactory,
  ContractTransactionReceipt: () => ContractTransactionReceipt,
  ContractTransactionResponse: () => ContractTransactionResponse,
  ContractUnknownEventPayload: () => ContractUnknownEventPayload,
  EnsPlugin: () => EnsPlugin,
  EnsResolver: () => EnsResolver,
  ErrorDescription: () => ErrorDescription,
  ErrorFragment: () => ErrorFragment,
  EtherSymbol: () => EtherSymbol,
  EtherscanPlugin: () => EtherscanPlugin,
  EtherscanProvider: () => EtherscanProvider,
  EventFragment: () => EventFragment,
  EventLog: () => EventLog,
  EventPayload: () => EventPayload,
  FallbackFragment: () => FallbackFragment,
  FallbackProvider: () => FallbackProvider,
  FeeData: () => FeeData,
  FeeDataNetworkPlugin: () => FeeDataNetworkPlugin,
  FetchCancelSignal: () => FetchCancelSignal,
  FetchRequest: () => FetchRequest,
  FetchResponse: () => FetchResponse,
  FetchUrlFeeDataNetworkPlugin: () => FetchUrlFeeDataNetworkPlugin,
  FixedNumber: () => FixedNumber,
  Fragment: () => Fragment,
  FunctionFragment: () => FunctionFragment,
  GasCostPlugin: () => GasCostPlugin,
  HDNodeVoidWallet: () => HDNodeVoidWallet,
  HDNodeWallet: () => HDNodeWallet,
  Indexed: () => Indexed,
  InfuraProvider: () => InfuraProvider,
  InfuraWebSocketProvider: () => InfuraWebSocketProvider,
  Interface: () => Interface,
  IpcSocketProvider: () => IpcSocketProvider,
  JsonRpcApiProvider: () => JsonRpcApiProvider,
  JsonRpcProvider: () => JsonRpcProvider,
  JsonRpcSigner: () => JsonRpcSigner,
  LangEn: () => LangEn,
  Log: () => Log,
  LogDescription: () => LogDescription,
  MaxInt256: () => MaxInt256,
  MaxUint256: () => MaxUint256,
  MessagePrefix: () => MessagePrefix,
  MinInt256: () => MinInt256,
  Mnemonic: () => Mnemonic,
  MulticoinProviderPlugin: () => MulticoinProviderPlugin,
  N: () => N,
  NamedFragment: () => NamedFragment,
  Network: () => Network,
  NetworkPlugin: () => NetworkPlugin,
  NonceManager: () => NonceManager,
  ParamType: () => ParamType,
  PocketProvider: () => PocketProvider,
  QuickNodeProvider: () => QuickNodeProvider,
  Result: () => Result,
  Signature: () => Signature,
  SigningKey: () => SigningKey,
  SocketBlockSubscriber: () => SocketBlockSubscriber,
  SocketEventSubscriber: () => SocketEventSubscriber,
  SocketPendingSubscriber: () => SocketPendingSubscriber,
  SocketProvider: () => SocketProvider,
  SocketSubscriber: () => SocketSubscriber,
  StructFragment: () => StructFragment,
  Transaction: () => Transaction,
  TransactionDescription: () => TransactionDescription,
  TransactionReceipt: () => TransactionReceipt,
  TransactionResponse: () => TransactionResponse,
  Typed: () => Typed,
  TypedDataEncoder: () => TypedDataEncoder,
  UndecodedEventLog: () => UndecodedEventLog,
  UnmanagedSubscriber: () => UnmanagedSubscriber,
  Utf8ErrorFuncs: () => Utf8ErrorFuncs,
  VoidSigner: () => VoidSigner,
  Wallet: () => Wallet,
  WebSocketProvider: () => WebSocketProvider,
  WeiPerEther: () => WeiPerEther,
  Wordlist: () => Wordlist,
  WordlistOwl: () => WordlistOwl,
  WordlistOwlA: () => WordlistOwlA,
  ZeroAddress: () => ZeroAddress,
  ZeroHash: () => ZeroHash,
  accessListify: () => accessListify,
  assert: () => assert,
  assertArgument: () => assertArgument,
  assertArgumentCount: () => assertArgumentCount,
  assertNormalize: () => assertNormalize,
  assertPrivate: () => assertPrivate,
  checkResultErrors: () => checkResultErrors,
  computeAddress: () => computeAddress,
  computeHmac: () => computeHmac,
  concat: () => concat,
  copyRequest: () => copyRequest,
  dataLength: () => dataLength,
  dataSlice: () => dataSlice,
  decodeBase58: () => decodeBase58,
  decodeBase64: () => decodeBase64,
  decodeBytes32String: () => decodeBytes32String,
  decodeRlp: () => decodeRlp,
  decryptCrowdsaleJson: () => decryptCrowdsaleJson,
  decryptKeystoreJson: () => decryptKeystoreJson,
  decryptKeystoreJsonSync: () => decryptKeystoreJsonSync,
  defaultPath: () => defaultPath2,
  defineProperties: () => defineProperties,
  dnsEncode: () => dnsEncode,
  encodeBase58: () => encodeBase58,
  encodeBase64: () => encodeBase64,
  encodeBytes32String: () => encodeBytes32String,
  encodeRlp: () => encodeRlp,
  encryptKeystoreJson: () => encryptKeystoreJson,
  encryptKeystoreJsonSync: () => encryptKeystoreJsonSync,
  ensNormalize: () => ensNormalize,
  formatEther: () => formatEther,
  formatUnits: () => formatUnits,
  fromTwos: () => fromTwos,
  getAccountPath: () => getAccountPath,
  getAddress: () => getAddress,
  getBigInt: () => getBigInt,
  getBytes: () => getBytes,
  getBytesCopy: () => getBytesCopy,
  getCreate2Address: () => getCreate2Address,
  getCreateAddress: () => getCreateAddress,
  getDefaultProvider: () => getDefaultProvider,
  getIcapAddress: () => getIcapAddress,
  getIndexedAccountPath: () => getIndexedAccountPath,
  getNumber: () => getNumber,
  getUint: () => getUint,
  hashMessage: () => hashMessage,
  hexlify: () => hexlify,
  id: () => id,
  isAddress: () => isAddress,
  isAddressable: () => isAddressable,
  isBytesLike: () => isBytesLike,
  isCallException: () => isCallException,
  isCrowdsaleJson: () => isCrowdsaleJson,
  isError: () => isError,
  isHexString: () => isHexString,
  isKeystoreJson: () => isKeystoreJson,
  isValidName: () => isValidName,
  keccak256: () => keccak256,
  lock: () => lock,
  makeError: () => makeError,
  mask: () => mask,
  namehash: () => namehash,
  parseEther: () => parseEther,
  parseUnits: () => parseUnits,
  pbkdf2: () => pbkdf22,
  randomBytes: () => randomBytes3,
  recoverAddress: () => recoverAddress,
  resolveAddress: () => resolveAddress,
  resolveProperties: () => resolveProperties,
  ripemd160: () => ripemd1602,
  scrypt: () => scrypt2,
  scryptSync: () => scryptSync,
  sha256: () => sha2562,
  sha512: () => sha5122,
  showThrottleMessage: () => showThrottleMessage,
  solidityPacked: () => solidityPacked,
  solidityPackedKeccak256: () => solidityPackedKeccak256,
  solidityPackedSha256: () => solidityPackedSha256,
  stripZerosLeft: () => stripZerosLeft,
  toBeArray: () => toBeArray,
  toBeHex: () => toBeHex,
  toBigInt: () => toBigInt,
  toNumber: () => toNumber,
  toQuantity: () => toQuantity,
  toTwos: () => toTwos,
  toUtf8Bytes: () => toUtf8Bytes,
  toUtf8CodePoints: () => toUtf8CodePoints,
  toUtf8String: () => toUtf8String,
  uuidV4: () => uuidV4,
  verifyMessage: () => verifyMessage,
  verifyTypedData: () => verifyTypedData,
  version: () => version,
  wordlists: () => wordlists,
  zeroPadBytes: () => zeroPadBytes,
  zeroPadValue: () => zeroPadValue
});

// node_modules/ethers/lib.esm/_version.js
var version = "6.13.4";

// node_modules/ethers/lib.esm/utils/properties.js
function checkType(value, type, name) {
  const types = type.split("|").map((t) => t.trim());
  for (let i = 0; i < types.length; i++) {
    switch (type) {
      case "any":
        return;
      case "bigint":
      case "boolean":
      case "number":
      case "string":
        if (typeof value === type) {
          return;
        }
    }
  }
  const error = new Error(`invalid value for type ${type}`);
  error.code = "INVALID_ARGUMENT";
  error.argument = `value.${name}`;
  error.value = value;
  throw error;
}
async function resolveProperties(value) {
  const keys = Object.keys(value);
  const results = await Promise.all(keys.map((k) => Promise.resolve(value[k])));
  return results.reduce((accum, v, index) => {
    accum[keys[index]] = v;
    return accum;
  }, {});
}
function defineProperties(target, values, types) {
  for (let key in values) {
    let value = values[key];
    const type = types ? types[key] : null;
    if (type) {
      checkType(value, type, key);
    }
    Object.defineProperty(target, key, { enumerable: true, value, writable: false });
  }
}

// node_modules/ethers/lib.esm/utils/errors.js
function stringify(value) {
  if (value == null) {
    return "null";
  }
  if (Array.isArray(value)) {
    return "[ " + value.map(stringify).join(", ") + " ]";
  }
  if (value instanceof Uint8Array) {
    const HEX = "0123456789abcdef";
    let result = "0x";
    for (let i = 0; i < value.length; i++) {
      result += HEX[value[i] >> 4];
      result += HEX[value[i] & 15];
    }
    return result;
  }
  if (typeof value === "object" && typeof value.toJSON === "function") {
    return stringify(value.toJSON());
  }
  switch (typeof value) {
    case "boolean":
    case "symbol":
      return value.toString();
    case "bigint":
      return BigInt(value).toString();
    case "number":
      return value.toString();
    case "string":
      return JSON.stringify(value);
    case "object": {
      const keys = Object.keys(value);
      keys.sort();
      return "{ " + keys.map((k) => `${stringify(k)}: ${stringify(value[k])}`).join(", ") + " }";
    }
  }
  return `[ COULD NOT SERIALIZE ]`;
}
function isError(error, code) {
  return error && error.code === code;
}
function isCallException(error) {
  return isError(error, "CALL_EXCEPTION");
}
function makeError(message, code, info) {
  let shortMessage = message;
  {
    const details = [];
    if (info) {
      if ("message" in info || "code" in info || "name" in info) {
        throw new Error(`value will overwrite populated values: ${stringify(info)}`);
      }
      for (const key in info) {
        if (key === "shortMessage") {
          continue;
        }
        const value = info[key];
        details.push(key + "=" + stringify(value));
      }
    }
    details.push(`code=${code}`);
    details.push(`version=${version}`);
    if (details.length) {
      message += " (" + details.join(", ") + ")";
    }
  }
  let error;
  switch (code) {
    case "INVALID_ARGUMENT":
      error = new TypeError(message);
      break;
    case "NUMERIC_FAULT":
    case "BUFFER_OVERRUN":
      error = new RangeError(message);
      break;
    default:
      error = new Error(message);
  }
  defineProperties(error, { code });
  if (info) {
    Object.assign(error, info);
  }
  if (error.shortMessage == null) {
    defineProperties(error, { shortMessage });
  }
  return error;
}
function assert(check, message, code, info) {
  if (!check) {
    throw makeError(message, code, info);
  }
}
function assertArgument(check, message, name, value) {
  assert(check, message, "INVALID_ARGUMENT", { argument: name, value });
}
function assertArgumentCount(count, expectedCount, message) {
  if (message == null) {
    message = "";
  }
  if (message) {
    message = ": " + message;
  }
  assert(count >= expectedCount, "missing arguemnt" + message, "MISSING_ARGUMENT", {
    count,
    expectedCount
  });
  assert(count <= expectedCount, "too many arguments" + message, "UNEXPECTED_ARGUMENT", {
    count,
    expectedCount
  });
}
var _normalizeForms = ["NFD", "NFC", "NFKD", "NFKC"].reduce((accum, form) => {
  try {
    if ("test".normalize(form) !== "test") {
      throw new Error("bad");
    }
    ;
    if (form === "NFD") {
      const check = String.fromCharCode(233).normalize("NFD");
      const expected = String.fromCharCode(101, 769);
      if (check !== expected) {
        throw new Error("broken");
      }
    }
    accum.push(form);
  } catch (error) {
  }
  return accum;
}, []);
function assertNormalize(form) {
  assert(_normalizeForms.indexOf(form) >= 0, "platform missing String.prototype.normalize", "UNSUPPORTED_OPERATION", {
    operation: "String.prototype.normalize",
    info: { form }
  });
}
function assertPrivate(givenGuard, guard, className) {
  if (className == null) {
    className = "";
  }
  if (givenGuard !== guard) {
    let method = className, operation = "new";
    if (className) {
      method += ".";
      operation += " " + className;
    }
    assert(false, `private constructor; use ${method}from* methods`, "UNSUPPORTED_OPERATION", {
      operation
    });
  }
}

// node_modules/ethers/lib.esm/utils/data.js
function _getBytes(value, name, copy4) {
  if (value instanceof Uint8Array) {
    if (copy4) {
      return new Uint8Array(value);
    }
    return value;
  }
  if (typeof value === "string" && value.match(/^0x(?:[0-9a-f][0-9a-f])*$/i)) {
    const result = new Uint8Array((value.length - 2) / 2);
    let offset = 2;
    for (let i = 0; i < result.length; i++) {
      result[i] = parseInt(value.substring(offset, offset + 2), 16);
      offset += 2;
    }
    return result;
  }
  assertArgument(false, "invalid BytesLike value", name || "value", value);
}
function getBytes(value, name) {
  return _getBytes(value, name, false);
}
function getBytesCopy(value, name) {
  return _getBytes(value, name, true);
}
function isHexString(value, length) {
  if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }
  if (typeof length === "number" && value.length !== 2 + 2 * length) {
    return false;
  }
  if (length === true && value.length % 2 !== 0) {
    return false;
  }
  return true;
}
function isBytesLike(value) {
  return isHexString(value, true) || value instanceof Uint8Array;
}
var HexCharacters = "0123456789abcdef";
function hexlify(data) {
  const bytes2 = getBytes(data);
  let result = "0x";
  for (let i = 0; i < bytes2.length; i++) {
    const v = bytes2[i];
    result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];
  }
  return result;
}
function concat(datas) {
  return "0x" + datas.map((d) => hexlify(d).substring(2)).join("");
}
function dataLength(data) {
  if (isHexString(data, true)) {
    return (data.length - 2) / 2;
  }
  return getBytes(data).length;
}
function dataSlice(data, start, end) {
  const bytes2 = getBytes(data);
  if (end != null && end > bytes2.length) {
    assert(false, "cannot slice beyond data bounds", "BUFFER_OVERRUN", {
      buffer: bytes2,
      length: bytes2.length,
      offset: end
    });
  }
  return hexlify(bytes2.slice(start == null ? 0 : start, end == null ? bytes2.length : end));
}
function stripZerosLeft(data) {
  let bytes2 = hexlify(data).substring(2);
  while (bytes2.startsWith("00")) {
    bytes2 = bytes2.substring(2);
  }
  return "0x" + bytes2;
}
function zeroPad(data, length, left) {
  const bytes2 = getBytes(data);
  assert(length >= bytes2.length, "padding exceeds data length", "BUFFER_OVERRUN", {
    buffer: new Uint8Array(bytes2),
    length,
    offset: length + 1
  });
  const result = new Uint8Array(length);
  result.fill(0);
  if (left) {
    result.set(bytes2, length - bytes2.length);
  } else {
    result.set(bytes2, 0);
  }
  return hexlify(result);
}
function zeroPadValue(data, length) {
  return zeroPad(data, length, true);
}
function zeroPadBytes(data, length) {
  return zeroPad(data, length, false);
}

// node_modules/ethers/lib.esm/utils/maths.js
var BN_0 = BigInt(0);
var BN_1 = BigInt(1);
var maxValue = 9007199254740991;
function fromTwos(_value2, _width) {
  const value = getUint(_value2, "value");
  const width = BigInt(getNumber(_width, "width"));
  assert(value >> width === BN_0, "overflow", "NUMERIC_FAULT", {
    operation: "fromTwos",
    fault: "overflow",
    value: _value2
  });
  if (value >> width - BN_1) {
    const mask2 = (BN_1 << width) - BN_1;
    return -((~value & mask2) + BN_1);
  }
  return value;
}
function toTwos(_value2, _width) {
  let value = getBigInt(_value2, "value");
  const width = BigInt(getNumber(_width, "width"));
  const limit = BN_1 << width - BN_1;
  if (value < BN_0) {
    value = -value;
    assert(value <= limit, "too low", "NUMERIC_FAULT", {
      operation: "toTwos",
      fault: "overflow",
      value: _value2
    });
    const mask2 = (BN_1 << width) - BN_1;
    return (~value & mask2) + BN_1;
  } else {
    assert(value < limit, "too high", "NUMERIC_FAULT", {
      operation: "toTwos",
      fault: "overflow",
      value: _value2
    });
  }
  return value;
}
function mask(_value2, _bits) {
  const value = getUint(_value2, "value");
  const bits = BigInt(getNumber(_bits, "bits"));
  return value & (BN_1 << bits) - BN_1;
}
function getBigInt(value, name) {
  switch (typeof value) {
    case "bigint":
      return value;
    case "number":
      assertArgument(Number.isInteger(value), "underflow", name || "value", value);
      assertArgument(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
      return BigInt(value);
    case "string":
      try {
        if (value === "") {
          throw new Error("empty string");
        }
        if (value[0] === "-" && value[1] !== "-") {
          return -BigInt(value.substring(1));
        }
        return BigInt(value);
      } catch (e) {
        assertArgument(false, `invalid BigNumberish string: ${e.message}`, name || "value", value);
      }
  }
  assertArgument(false, "invalid BigNumberish value", name || "value", value);
}
function getUint(value, name) {
  const result = getBigInt(value, name);
  assert(result >= BN_0, "unsigned value cannot be negative", "NUMERIC_FAULT", {
    fault: "overflow",
    operation: "getUint",
    value
  });
  return result;
}
var Nibbles = "0123456789abcdef";
function toBigInt(value) {
  if (value instanceof Uint8Array) {
    let result = "0x0";
    for (const v of value) {
      result += Nibbles[v >> 4];
      result += Nibbles[v & 15];
    }
    return BigInt(result);
  }
  return getBigInt(value);
}
function getNumber(value, name) {
  switch (typeof value) {
    case "bigint":
      assertArgument(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
      return Number(value);
    case "number":
      assertArgument(Number.isInteger(value), "underflow", name || "value", value);
      assertArgument(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
      return value;
    case "string":
      try {
        if (value === "") {
          throw new Error("empty string");
        }
        return getNumber(BigInt(value), name);
      } catch (e) {
        assertArgument(false, `invalid numeric string: ${e.message}`, name || "value", value);
      }
  }
  assertArgument(false, "invalid numeric value", name || "value", value);
}
function toNumber(value) {
  return getNumber(toBigInt(value));
}
function toBeHex(_value2, _width) {
  const value = getUint(_value2, "value");
  let result = value.toString(16);
  if (_width == null) {
    if (result.length % 2) {
      result = "0" + result;
    }
  } else {
    const width = getNumber(_width, "width");
    assert(width * 2 >= result.length, `value exceeds width (${width} bytes)`, "NUMERIC_FAULT", {
      operation: "toBeHex",
      fault: "overflow",
      value: _value2
    });
    while (result.length < width * 2) {
      result = "0" + result;
    }
  }
  return "0x" + result;
}
function toBeArray(_value2) {
  const value = getUint(_value2, "value");
  if (value === BN_0) {
    return new Uint8Array([]);
  }
  let hex = value.toString(16);
  if (hex.length % 2) {
    hex = "0" + hex;
  }
  const result = new Uint8Array(hex.length / 2);
  for (let i = 0; i < result.length; i++) {
    const offset = i * 2;
    result[i] = parseInt(hex.substring(offset, offset + 2), 16);
  }
  return result;
}
function toQuantity(value) {
  let result = hexlify(isBytesLike(value) ? value : toBeArray(value)).substring(2);
  while (result.startsWith("0")) {
    result = result.substring(1);
  }
  if (result === "") {
    result = "0";
  }
  return "0x" + result;
}

// node_modules/ethers/lib.esm/utils/base58.js
var Alphabet = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
var Lookup = null;
function getAlpha(letter) {
  if (Lookup == null) {
    Lookup = {};
    for (let i = 0; i < Alphabet.length; i++) {
      Lookup[Alphabet[i]] = BigInt(i);
    }
  }
  const result = Lookup[letter];
  assertArgument(result != null, `invalid base58 value`, "letter", letter);
  return result;
}
var BN_02 = BigInt(0);
var BN_58 = BigInt(58);
function encodeBase58(_value2) {
  const bytes2 = getBytes(_value2);
  let value = toBigInt(bytes2);
  let result = "";
  while (value) {
    result = Alphabet[Number(value % BN_58)] + result;
    value /= BN_58;
  }
  for (let i = 0; i < bytes2.length; i++) {
    if (bytes2[i]) {
      break;
    }
    result = Alphabet[0] + result;
  }
  return result;
}
function decodeBase58(value) {
  let result = BN_02;
  for (let i = 0; i < value.length; i++) {
    result *= BN_58;
    result += getAlpha(value[i]);
  }
  return result;
}

// node_modules/ethers/lib.esm/utils/base64-browser.js
function decodeBase64(textData) {
  textData = atob(textData);
  const data = new Uint8Array(textData.length);
  for (let i = 0; i < textData.length; i++) {
    data[i] = textData.charCodeAt(i);
  }
  return getBytes(data);
}
function encodeBase64(_data5) {
  const data = getBytes(_data5);
  let textData = "";
  for (let i = 0; i < data.length; i++) {
    textData += String.fromCharCode(data[i]);
  }
  return btoa(textData);
}

// node_modules/ethers/lib.esm/utils/events.js
var _listener;
var EventPayload = class {
  /**
   *  Create a new **EventPayload** for %%emitter%% with
   *  the %%listener%% and for %%filter%%.
   */
  constructor(emitter, listener, filter) {
    /**
     *  The event filter.
     */
    __publicField(this, "filter");
    /**
     *  The **EventEmitterable**.
     */
    __publicField(this, "emitter");
    __privateAdd(this, _listener);
    __privateSet(this, _listener, listener);
    defineProperties(this, { emitter, filter });
  }
  /**
   *  Unregister the triggered listener for future events.
   */
  async removeListener() {
    if (__privateGet(this, _listener) == null) {
      return;
    }
    await this.emitter.off(this.filter, __privateGet(this, _listener));
  }
};
_listener = new WeakMap();

// node_modules/ethers/lib.esm/utils/utf8.js
function errorFunc(reason, offset, bytes2, output2, badCodepoint) {
  assertArgument(false, `invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes2);
}
function ignoreFunc(reason, offset, bytes2, output2, badCodepoint) {
  if (reason === "BAD_PREFIX" || reason === "UNEXPECTED_CONTINUE") {
    let i = 0;
    for (let o = offset + 1; o < bytes2.length; o++) {
      if (bytes2[o] >> 6 !== 2) {
        break;
      }
      i++;
    }
    return i;
  }
  if (reason === "OVERRUN") {
    return bytes2.length - offset - 1;
  }
  return 0;
}
function replaceFunc(reason, offset, bytes2, output2, badCodepoint) {
  if (reason === "OVERLONG") {
    assertArgument(typeof badCodepoint === "number", "invalid bad code point for replacement", "badCodepoint", badCodepoint);
    output2.push(badCodepoint);
    return 0;
  }
  output2.push(65533);
  return ignoreFunc(reason, offset, bytes2, output2, badCodepoint);
}
var Utf8ErrorFuncs = Object.freeze({
  error: errorFunc,
  ignore: ignoreFunc,
  replace: replaceFunc
});
function getUtf8CodePoints(_bytes, onError) {
  if (onError == null) {
    onError = Utf8ErrorFuncs.error;
  }
  const bytes2 = getBytes(_bytes, "bytes");
  const result = [];
  let i = 0;
  while (i < bytes2.length) {
    const c = bytes2[i++];
    if (c >> 7 === 0) {
      result.push(c);
      continue;
    }
    let extraLength = null;
    let overlongMask = null;
    if ((c & 224) === 192) {
      extraLength = 1;
      overlongMask = 127;
    } else if ((c & 240) === 224) {
      extraLength = 2;
      overlongMask = 2047;
    } else if ((c & 248) === 240) {
      extraLength = 3;
      overlongMask = 65535;
    } else {
      if ((c & 192) === 128) {
        i += onError("UNEXPECTED_CONTINUE", i - 1, bytes2, result);
      } else {
        i += onError("BAD_PREFIX", i - 1, bytes2, result);
      }
      continue;
    }
    if (i - 1 + extraLength >= bytes2.length) {
      i += onError("OVERRUN", i - 1, bytes2, result);
      continue;
    }
    let res = c & (1 << 8 - extraLength - 1) - 1;
    for (let j = 0; j < extraLength; j++) {
      let nextChar = bytes2[i];
      if ((nextChar & 192) != 128) {
        i += onError("MISSING_CONTINUE", i, bytes2, result);
        res = null;
        break;
      }
      ;
      res = res << 6 | nextChar & 63;
      i++;
    }
    if (res === null) {
      continue;
    }
    if (res > 1114111) {
      i += onError("OUT_OF_RANGE", i - 1 - extraLength, bytes2, result, res);
      continue;
    }
    if (res >= 55296 && res <= 57343) {
      i += onError("UTF16_SURROGATE", i - 1 - extraLength, bytes2, result, res);
      continue;
    }
    if (res <= overlongMask) {
      i += onError("OVERLONG", i - 1 - extraLength, bytes2, result, res);
      continue;
    }
    result.push(res);
  }
  return result;
}
function toUtf8Bytes(str, form) {
  assertArgument(typeof str === "string", "invalid string value", "str", str);
  if (form != null) {
    assertNormalize(form);
    str = str.normalize(form);
  }
  let result = [];
  for (let i = 0; i < str.length; i++) {
    const c = str.charCodeAt(i);
    if (c < 128) {
      result.push(c);
    } else if (c < 2048) {
      result.push(c >> 6 | 192);
      result.push(c & 63 | 128);
    } else if ((c & 64512) == 55296) {
      i++;
      const c2 = str.charCodeAt(i);
      assertArgument(i < str.length && (c2 & 64512) === 56320, "invalid surrogate pair", "str", str);
      const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);
      result.push(pair >> 18 | 240);
      result.push(pair >> 12 & 63 | 128);
      result.push(pair >> 6 & 63 | 128);
      result.push(pair & 63 | 128);
    } else {
      result.push(c >> 12 | 224);
      result.push(c >> 6 & 63 | 128);
      result.push(c & 63 | 128);
    }
  }
  return new Uint8Array(result);
}
function _toUtf8String(codePoints) {
  return codePoints.map((codePoint) => {
    if (codePoint <= 65535) {
      return String.fromCharCode(codePoint);
    }
    codePoint -= 65536;
    return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
  }).join("");
}
function toUtf8String(bytes2, onError) {
  return _toUtf8String(getUtf8CodePoints(bytes2, onError));
}
function toUtf8CodePoints(str, form) {
  return getUtf8CodePoints(toUtf8Bytes(str, form));
}

// node_modules/ethers/lib.esm/utils/geturl-browser.js
function createGetUrl(options) {
  async function getUrl(req, _signal2) {
    assert(_signal2 == null || !_signal2.cancelled, "request cancelled before sending", "CANCELLED");
    const protocol = req.url.split(":")[0].toLowerCase();
    assert(protocol === "http" || protocol === "https", `unsupported protocol ${protocol}`, "UNSUPPORTED_OPERATION", {
      info: { protocol },
      operation: "request"
    });
    assert(protocol === "https" || !req.credentials || req.allowInsecureAuthentication, "insecure authorized connections unsupported", "UNSUPPORTED_OPERATION", {
      operation: "request"
    });
    let error = null;
    const controller = new AbortController();
    const timer = setTimeout(() => {
      error = makeError("request timeout", "TIMEOUT");
      controller.abort();
    }, req.timeout);
    if (_signal2) {
      _signal2.addListener(() => {
        error = makeError("request cancelled", "CANCELLED");
        controller.abort();
      });
    }
    const init2 = {
      method: req.method,
      headers: new Headers(Array.from(req)),
      body: req.body || void 0,
      signal: controller.signal
    };
    let resp;
    try {
      resp = await fetch(req.url, init2);
    } catch (_error2) {
      clearTimeout(timer);
      if (error) {
        throw error;
      }
      throw _error2;
    }
    clearTimeout(timer);
    const headers = {};
    resp.headers.forEach((value, key) => {
      headers[key.toLowerCase()] = value;
    });
    const respBody = await resp.arrayBuffer();
    const body = respBody == null ? null : new Uint8Array(respBody);
    return {
      statusCode: resp.status,
      statusMessage: resp.statusText,
      headers,
      body
    };
  }
  return getUrl;
}
var defaultGetUrl = createGetUrl({});

// node_modules/ethers/lib.esm/utils/fetch.js
var MAX_ATTEMPTS = 12;
var SLOT_INTERVAL = 250;
var defaultGetUrlFunc = createGetUrl();
var reData = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i");
var reIpfs = new RegExp("^ipfs://(ipfs/)?(.*)$", "i");
var locked = false;
async function dataGatewayFunc(url, signal) {
  try {
    const match = url.match(reData);
    if (!match) {
      throw new Error("invalid data");
    }
    return new FetchResponse(200, "OK", {
      "content-type": match[1] || "text/plain"
    }, match[2] ? decodeBase64(match[3]) : unpercent(match[3]));
  } catch (error) {
    return new FetchResponse(599, "BAD REQUEST (invalid data: URI)", {}, null, new FetchRequest(url));
  }
}
function getIpfsGatewayFunc(baseUrl) {
  async function gatewayIpfs(url, signal) {
    try {
      const match = url.match(reIpfs);
      if (!match) {
        throw new Error("invalid link");
      }
      return new FetchRequest(`${baseUrl}${match[2]}`);
    } catch (error) {
      return new FetchResponse(599, "BAD REQUEST (invalid IPFS URI)", {}, null, new FetchRequest(url));
    }
  }
  return gatewayIpfs;
}
var Gateways = {
  "data": dataGatewayFunc,
  "ipfs": getIpfsGatewayFunc("https://gateway.ipfs.io/ipfs/")
};
var fetchSignals = /* @__PURE__ */ new WeakMap();
var _listeners, _cancelled;
var FetchCancelSignal = class {
  constructor(request) {
    __privateAdd(this, _listeners);
    __privateAdd(this, _cancelled);
    __privateSet(this, _listeners, []);
    __privateSet(this, _cancelled, false);
    fetchSignals.set(request, () => {
      if (__privateGet(this, _cancelled)) {
        return;
      }
      __privateSet(this, _cancelled, true);
      for (const listener of __privateGet(this, _listeners)) {
        setTimeout(() => {
          listener();
        }, 0);
      }
      __privateSet(this, _listeners, []);
    });
  }
  addListener(listener) {
    assert(!__privateGet(this, _cancelled), "singal already cancelled", "UNSUPPORTED_OPERATION", {
      operation: "fetchCancelSignal.addCancelListener"
    });
    __privateGet(this, _listeners).push(listener);
  }
  get cancelled() {
    return __privateGet(this, _cancelled);
  }
  checkSignal() {
    assert(!this.cancelled, "cancelled", "CANCELLED", {});
  }
};
_listeners = new WeakMap();
_cancelled = new WeakMap();
function checkSignal(signal) {
  if (signal == null) {
    throw new Error("missing signal; should not happen");
  }
  signal.checkSignal();
  return signal;
}
var _allowInsecure, _gzip, _headers, _method, _timeout, _url, _body, _bodyType, _creds, _preflight, _process, _retry, _signal, _throttle, _getUrlFunc, _FetchRequest_instances, send_fn;
var _FetchRequest = class _FetchRequest {
  /**
   *  Create a new FetchRequest instance with default values.
   *
   *  Once created, each property may be set before issuing a
   *  ``.send()`` to make the request.
   */
  constructor(url) {
    __privateAdd(this, _FetchRequest_instances);
    __privateAdd(this, _allowInsecure);
    __privateAdd(this, _gzip);
    __privateAdd(this, _headers);
    __privateAdd(this, _method);
    __privateAdd(this, _timeout);
    __privateAdd(this, _url);
    __privateAdd(this, _body);
    __privateAdd(this, _bodyType);
    __privateAdd(this, _creds);
    // Hooks
    __privateAdd(this, _preflight);
    __privateAdd(this, _process);
    __privateAdd(this, _retry);
    __privateAdd(this, _signal);
    __privateAdd(this, _throttle);
    __privateAdd(this, _getUrlFunc);
    __privateSet(this, _url, String(url));
    __privateSet(this, _allowInsecure, false);
    __privateSet(this, _gzip, true);
    __privateSet(this, _headers, {});
    __privateSet(this, _method, "");
    __privateSet(this, _timeout, 3e5);
    __privateSet(this, _throttle, {
      slotInterval: SLOT_INTERVAL,
      maxAttempts: MAX_ATTEMPTS
    });
    __privateSet(this, _getUrlFunc, null);
  }
  /**
   *  The fetch URL to request.
   */
  get url() {
    return __privateGet(this, _url);
  }
  set url(url) {
    __privateSet(this, _url, String(url));
  }
  /**
   *  The fetch body, if any, to send as the request body. //(default: null)//
   *
   *  When setting a body, the intrinsic ``Content-Type`` is automatically
   *  set and will be used if **not overridden** by setting a custom
   *  header.
   *
   *  If %%body%% is null, the body is cleared (along with the
   *  intrinsic ``Content-Type``).
   *
   *  If %%body%% is a string, the intrinsic ``Content-Type`` is set to
   *  ``text/plain``.
   *
   *  If %%body%% is a Uint8Array, the intrinsic ``Content-Type`` is set to
   *  ``application/octet-stream``.
   *
   *  If %%body%% is any other object, the intrinsic ``Content-Type`` is
   *  set to ``application/json``.
   */
  get body() {
    if (__privateGet(this, _body) == null) {
      return null;
    }
    return new Uint8Array(__privateGet(this, _body));
  }
  set body(body) {
    if (body == null) {
      __privateSet(this, _body, void 0);
      __privateSet(this, _bodyType, void 0);
    } else if (typeof body === "string") {
      __privateSet(this, _body, toUtf8Bytes(body));
      __privateSet(this, _bodyType, "text/plain");
    } else if (body instanceof Uint8Array) {
      __privateSet(this, _body, body);
      __privateSet(this, _bodyType, "application/octet-stream");
    } else if (typeof body === "object") {
      __privateSet(this, _body, toUtf8Bytes(JSON.stringify(body)));
      __privateSet(this, _bodyType, "application/json");
    } else {
      throw new Error("invalid body");
    }
  }
  /**
   *  Returns true if the request has a body.
   */
  hasBody() {
    return __privateGet(this, _body) != null;
  }
  /**
   *  The HTTP method to use when requesting the URI. If no method
   *  has been explicitly set, then ``GET`` is used if the body is
   *  null and ``POST`` otherwise.
   */
  get method() {
    if (__privateGet(this, _method)) {
      return __privateGet(this, _method);
    }
    if (this.hasBody()) {
      return "POST";
    }
    return "GET";
  }
  set method(method) {
    if (method == null) {
      method = "";
    }
    __privateSet(this, _method, String(method).toUpperCase());
  }
  /**
   *  The headers that will be used when requesting the URI. All
   *  keys are lower-case.
   *
   *  This object is a copy, so any changes will **NOT** be reflected
   *  in the ``FetchRequest``.
   *
   *  To set a header entry, use the ``setHeader`` method.
   */
  get headers() {
    const headers = Object.assign({}, __privateGet(this, _headers));
    if (__privateGet(this, _creds)) {
      headers["authorization"] = `Basic ${encodeBase64(toUtf8Bytes(__privateGet(this, _creds)))}`;
    }
    ;
    if (this.allowGzip) {
      headers["accept-encoding"] = "gzip";
    }
    if (headers["content-type"] == null && __privateGet(this, _bodyType)) {
      headers["content-type"] = __privateGet(this, _bodyType);
    }
    if (this.body) {
      headers["content-length"] = String(this.body.length);
    }
    return headers;
  }
  /**
   *  Get the header for %%key%%, ignoring case.
   */
  getHeader(key) {
    return this.headers[key.toLowerCase()];
  }
  /**
   *  Set the header for %%key%% to %%value%%. All values are coerced
   *  to a string.
   */
  setHeader(key, value) {
    __privateGet(this, _headers)[String(key).toLowerCase()] = String(value);
  }
  /**
   *  Clear all headers, resetting all intrinsic headers.
   */
  clearHeaders() {
    __privateSet(this, _headers, {});
  }
  [Symbol.iterator]() {
    const headers = this.headers;
    const keys = Object.keys(headers);
    let index = 0;
    return {
      next: () => {
        if (index < keys.length) {
          const key = keys[index++];
          return {
            value: [key, headers[key]],
            done: false
          };
        }
        return { value: void 0, done: true };
      }
    };
  }
  /**
   *  The value that will be sent for the ``Authorization`` header.
   *
   *  To set the credentials, use the ``setCredentials`` method.
   */
  get credentials() {
    return __privateGet(this, _creds) || null;
  }
  /**
   *  Sets an ``Authorization`` for %%username%% with %%password%%.
   */
  setCredentials(username, password) {
    assertArgument(!username.match(/:/), "invalid basic authentication username", "username", "[REDACTED]");
    __privateSet(this, _creds, `${username}:${password}`);
  }
  /**
   *  Enable and request gzip-encoded responses. The response will
   *  automatically be decompressed. //(default: true)//
   */
  get allowGzip() {
    return __privateGet(this, _gzip);
  }
  set allowGzip(value) {
    __privateSet(this, _gzip, !!value);
  }
  /**
   *  Allow ``Authentication`` credentials to be sent over insecure
   *  channels. //(default: false)//
   */
  get allowInsecureAuthentication() {
    return !!__privateGet(this, _allowInsecure);
  }
  set allowInsecureAuthentication(value) {
    __privateSet(this, _allowInsecure, !!value);
  }
  /**
   *  The timeout (in milliseconds) to wait for a complete response.
   *  //(default: 5 minutes)//
   */
  get timeout() {
    return __privateGet(this, _timeout);
  }
  set timeout(timeout) {
    assertArgument(timeout >= 0, "timeout must be non-zero", "timeout", timeout);
    __privateSet(this, _timeout, timeout);
  }
  /**
   *  This function is called prior to each request, for example
   *  during a redirection or retry in case of server throttling.
   *
   *  This offers an opportunity to populate headers or update
   *  content before sending a request.
   */
  get preflightFunc() {
    return __privateGet(this, _preflight) || null;
  }
  set preflightFunc(preflight) {
    __privateSet(this, _preflight, preflight);
  }
  /**
   *  This function is called after each response, offering an
   *  opportunity to provide client-level throttling or updating
   *  response data.
   *
   *  Any error thrown in this causes the ``send()`` to throw.
   *
   *  To schedule a retry attempt (assuming the maximum retry limit
   *  has not been reached), use [[response.throwThrottleError]].
   */
  get processFunc() {
    return __privateGet(this, _process) || null;
  }
  set processFunc(process) {
    __privateSet(this, _process, process);
  }
  /**
   *  This function is called on each retry attempt.
   */
  get retryFunc() {
    return __privateGet(this, _retry) || null;
  }
  set retryFunc(retry) {
    __privateSet(this, _retry, retry);
  }
  /**
   *  This function is called to fetch content from HTTP and
   *  HTTPS URLs and is platform specific (e.g. nodejs vs
   *  browsers).
   *
   *  This is by default the currently registered global getUrl
   *  function, which can be changed using [[registerGetUrl]].
   *  If this has been set, setting is to ``null`` will cause
   *  this FetchRequest (and any future clones) to revert back to
   *  using the currently registered global getUrl function.
   *
   *  Setting this is generally not necessary, but may be useful
   *  for developers that wish to intercept requests or to
   *  configurege a proxy or other agent.
   */
  get getUrlFunc() {
    return __privateGet(this, _getUrlFunc) || defaultGetUrlFunc;
  }
  set getUrlFunc(value) {
    __privateSet(this, _getUrlFunc, value);
  }
  toString() {
    return `<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${__privateGet(this, _body) ? hexlify(__privateGet(this, _body)) : "null"}>`;
  }
  /**
   *  Update the throttle parameters used to determine maximum
   *  attempts and exponential-backoff properties.
   */
  setThrottleParams(params) {
    if (params.slotInterval != null) {
      __privateGet(this, _throttle).slotInterval = params.slotInterval;
    }
    if (params.maxAttempts != null) {
      __privateGet(this, _throttle).maxAttempts = params.maxAttempts;
    }
  }
  /**
   *  Resolves to the response by sending the request.
   */
  send() {
    assert(__privateGet(this, _signal) == null, "request already sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.send" });
    __privateSet(this, _signal, new FetchCancelSignal(this));
    return __privateMethod(this, _FetchRequest_instances, send_fn).call(this, 0, getTime() + this.timeout, 0, this, new FetchResponse(0, "", {}, null, this));
  }
  /**
   *  Cancels the inflight response, causing a ``CANCELLED``
   *  error to be rejected from the [[send]].
   */
  cancel() {
    assert(__privateGet(this, _signal) != null, "request has not been sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.cancel" });
    const signal = fetchSignals.get(this);
    if (!signal) {
      throw new Error("missing signal; should not happen");
    }
    signal();
  }
  /**
   *  Returns a new [[FetchRequest]] that represents the redirection
   *  to %%location%%.
   */
  redirect(location) {
    const current = this.url.split(":")[0].toLowerCase();
    const target = location.split(":")[0].toLowerCase();
    assert(this.method === "GET" && (current !== "https" || target !== "http") && location.match(/^https?:/), `unsupported redirect`, "UNSUPPORTED_OPERATION", {
      operation: `redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(location)})`
    });
    const req = new _FetchRequest(location);
    req.method = "GET";
    req.allowGzip = this.allowGzip;
    req.timeout = this.timeout;
    __privateSet(req, _headers, Object.assign({}, __privateGet(this, _headers)));
    if (__privateGet(this, _body)) {
      __privateSet(req, _body, new Uint8Array(__privateGet(this, _body)));
    }
    __privateSet(req, _bodyType, __privateGet(this, _bodyType));
    return req;
  }
  /**
   *  Create a new copy of this request.
   */
  clone() {
    const clone = new _FetchRequest(this.url);
    __privateSet(clone, _method, __privateGet(this, _method));
    if (__privateGet(this, _body)) {
      __privateSet(clone, _body, __privateGet(this, _body));
    }
    __privateSet(clone, _bodyType, __privateGet(this, _bodyType));
    __privateSet(clone, _headers, Object.assign({}, __privateGet(this, _headers)));
    __privateSet(clone, _creds, __privateGet(this, _creds));
    if (this.allowGzip) {
      clone.allowGzip = true;
    }
    clone.timeout = this.timeout;
    if (this.allowInsecureAuthentication) {
      clone.allowInsecureAuthentication = true;
    }
    __privateSet(clone, _preflight, __privateGet(this, _preflight));
    __privateSet(clone, _process, __privateGet(this, _process));
    __privateSet(clone, _retry, __privateGet(this, _retry));
    __privateSet(clone, _throttle, Object.assign({}, __privateGet(this, _throttle)));
    __privateSet(clone, _getUrlFunc, __privateGet(this, _getUrlFunc));
    return clone;
  }
  /**
   *  Locks all static configuration for gateways and FetchGetUrlFunc
   *  registration.
   */
  static lockConfig() {
    locked = true;
  }
  /**
   *  Get the current Gateway function for %%scheme%%.
   */
  static getGateway(scheme) {
    return Gateways[scheme.toLowerCase()] || null;
  }
  /**
   *  Use the %%func%% when fetching URIs using %%scheme%%.
   *
   *  This method affects all requests globally.
   *
   *  If [[lockConfig]] has been called, no change is made and this
   *  throws.
   */
  static registerGateway(scheme, func) {
    scheme = scheme.toLowerCase();
    if (scheme === "http" || scheme === "https") {
      throw new Error(`cannot intercept ${scheme}; use registerGetUrl`);
    }
    if (locked) {
      throw new Error("gateways locked");
    }
    Gateways[scheme] = func;
  }
  /**
   *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.
   *
   *  This method affects all requests globally.
   *
   *  If [[lockConfig]] has been called, no change is made and this
   *  throws.
   */
  static registerGetUrl(getUrl) {
    if (locked) {
      throw new Error("gateways locked");
    }
    defaultGetUrlFunc = getUrl;
  }
  /**
   *  Creates a getUrl function that fetches content from HTTP and
   *  HTTPS URLs.
   *
   *  The available %%options%% are dependent on the platform
   *  implementation of the default getUrl function.
   *
   *  This is not generally something that is needed, but is useful
   *  when trying to customize simple behaviour when fetching HTTP
   *  content.
   */
  static createGetUrlFunc(options) {
    return createGetUrl(options);
  }
  /**
   *  Creates a function that can "fetch" data URIs.
   *
   *  Note that this is automatically done internally to support
   *  data URIs, so it is not necessary to register it.
   *
   *  This is not generally something that is needed, but may
   *  be useful in a wrapper to perfom custom data URI functionality.
   */
  static createDataGateway() {
    return dataGatewayFunc;
  }
  /**
   *  Creates a function that will fetch IPFS (unvalidated) from
   *  a custom gateway baseUrl.
   *
   *  The default IPFS gateway used internally is
   *  ``"https:/\/gateway.ipfs.io/ipfs/"``.
   */
  static createIpfsGatewayFunc(baseUrl) {
    return getIpfsGatewayFunc(baseUrl);
  }
};
_allowInsecure = new WeakMap();
_gzip = new WeakMap();
_headers = new WeakMap();
_method = new WeakMap();
_timeout = new WeakMap();
_url = new WeakMap();
_body = new WeakMap();
_bodyType = new WeakMap();
_creds = new WeakMap();
_preflight = new WeakMap();
_process = new WeakMap();
_retry = new WeakMap();
_signal = new WeakMap();
_throttle = new WeakMap();
_getUrlFunc = new WeakMap();
_FetchRequest_instances = new WeakSet();
send_fn = async function(attempt, expires, delay, _request3, _response) {
  var _a2, _b, _c;
  if (attempt >= __privateGet(this, _throttle).maxAttempts) {
    return _response.makeServerError("exceeded maximum retry limit");
  }
  assert(getTime() <= expires, "timeout", "TIMEOUT", {
    operation: "request.send",
    reason: "timeout",
    request: _request3
  });
  if (delay > 0) {
    await wait(delay);
  }
  let req = this.clone();
  const scheme = (req.url.split(":")[0] || "").toLowerCase();
  if (scheme in Gateways) {
    const result = await Gateways[scheme](req.url, checkSignal(__privateGet(_request3, _signal)));
    if (result instanceof FetchResponse) {
      let response2 = result;
      if (this.processFunc) {
        checkSignal(__privateGet(_request3, _signal));
        try {
          response2 = await this.processFunc(req, response2);
        } catch (error) {
          if (error.throttle == null || typeof error.stall !== "number") {
            response2.makeServerError("error in post-processing function", error).assertOk();
          }
        }
      }
      return response2;
    }
    req = result;
  }
  if (this.preflightFunc) {
    req = await this.preflightFunc(req);
  }
  const resp = await this.getUrlFunc(req, checkSignal(__privateGet(_request3, _signal)));
  let response = new FetchResponse(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request3);
  if (response.statusCode === 301 || response.statusCode === 302) {
    try {
      const location = response.headers.location || "";
      return __privateMethod(_a2 = req.redirect(location), _FetchRequest_instances, send_fn).call(_a2, attempt + 1, expires, 0, _request3, response);
    } catch (error) {
    }
    return response;
  } else if (response.statusCode === 429) {
    if (this.retryFunc == null || await this.retryFunc(req, response, attempt)) {
      const retryAfter = response.headers["retry-after"];
      let delay2 = __privateGet(this, _throttle).slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));
      if (typeof retryAfter === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
        delay2 = parseInt(retryAfter);
      }
      return __privateMethod(_b = req.clone(), _FetchRequest_instances, send_fn).call(_b, attempt + 1, expires, delay2, _request3, response);
    }
  }
  if (this.processFunc) {
    checkSignal(__privateGet(_request3, _signal));
    try {
      response = await this.processFunc(req, response);
    } catch (error) {
      if (error.throttle == null || typeof error.stall !== "number") {
        response.makeServerError("error in post-processing function", error).assertOk();
      }
      let delay2 = __privateGet(this, _throttle).slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));
      ;
      if (error.stall >= 0) {
        delay2 = error.stall;
      }
      return __privateMethod(_c = req.clone(), _FetchRequest_instances, send_fn).call(_c, attempt + 1, expires, delay2, _request3, response);
    }
  }
  return response;
};
var FetchRequest = _FetchRequest;
var _statusCode, _statusMessage, _headers2, _body2, _request, _error;
var _FetchResponse = class _FetchResponse {
  constructor(statusCode, statusMessage, headers, body, request) {
    __privateAdd(this, _statusCode);
    __privateAdd(this, _statusMessage);
    __privateAdd(this, _headers2);
    __privateAdd(this, _body2);
    __privateAdd(this, _request);
    __privateAdd(this, _error);
    __privateSet(this, _statusCode, statusCode);
    __privateSet(this, _statusMessage, statusMessage);
    __privateSet(this, _headers2, Object.keys(headers).reduce((accum, k) => {
      accum[k.toLowerCase()] = String(headers[k]);
      return accum;
    }, {}));
    __privateSet(this, _body2, body == null ? null : new Uint8Array(body));
    __privateSet(this, _request, request || null);
    __privateSet(this, _error, { message: "" });
  }
  toString() {
    return `<FetchResponse status=${this.statusCode} body=${__privateGet(this, _body2) ? hexlify(__privateGet(this, _body2)) : "null"}>`;
  }
  /**
   *  The response status code.
   */
  get statusCode() {
    return __privateGet(this, _statusCode);
  }
  /**
   *  The response status message.
   */
  get statusMessage() {
    return __privateGet(this, _statusMessage);
  }
  /**
   *  The response headers. All keys are lower-case.
   */
  get headers() {
    return Object.assign({}, __privateGet(this, _headers2));
  }
  /**
   *  The response body, or ``null`` if there was no body.
   */
  get body() {
    return __privateGet(this, _body2) == null ? null : new Uint8Array(__privateGet(this, _body2));
  }
  /**
   *  The response body as a UTF-8 encoded string, or the empty
   *  string (i.e. ``""``) if there was no body.
   *
   *  An error is thrown if the body is invalid UTF-8 data.
   */
  get bodyText() {
    try {
      return __privateGet(this, _body2) == null ? "" : toUtf8String(__privateGet(this, _body2));
    } catch (error) {
      assert(false, "response body is not valid UTF-8 data", "UNSUPPORTED_OPERATION", {
        operation: "bodyText",
        info: { response: this }
      });
    }
  }
  /**
   *  The response body, decoded as JSON.
   *
   *  An error is thrown if the body is invalid JSON-encoded data
   *  or if there was no body.
   */
  get bodyJson() {
    try {
      return JSON.parse(this.bodyText);
    } catch (error) {
      assert(false, "response body is not valid JSON", "UNSUPPORTED_OPERATION", {
        operation: "bodyJson",
        info: { response: this }
      });
    }
  }
  [Symbol.iterator]() {
    const headers = this.headers;
    const keys = Object.keys(headers);
    let index = 0;
    return {
      next: () => {
        if (index < keys.length) {
          const key = keys[index++];
          return {
            value: [key, headers[key]],
            done: false
          };
        }
        return { value: void 0, done: true };
      }
    };
  }
  /**
   *  Return a Response with matching headers and body, but with
   *  an error status code (i.e. 599) and %%message%% with an
   *  optional %%error%%.
   */
  makeServerError(message, error) {
    let statusMessage;
    if (!message) {
      message = `${this.statusCode} ${this.statusMessage}`;
      statusMessage = `CLIENT ESCALATED SERVER ERROR (${message})`;
    } else {
      statusMessage = `CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${message})`;
    }
    const response = new _FetchResponse(599, statusMessage, this.headers, this.body, __privateGet(this, _request) || void 0);
    __privateSet(response, _error, { message, error });
    return response;
  }
  /**
   *  If called within a [request.processFunc](FetchRequest-processFunc)
   *  call, causes the request to retry as if throttled for %%stall%%
   *  milliseconds.
   */
  throwThrottleError(message, stall5) {
    if (stall5 == null) {
      stall5 = -1;
    } else {
      assertArgument(Number.isInteger(stall5) && stall5 >= 0, "invalid stall timeout", "stall", stall5);
    }
    const error = new Error(message || "throttling requests");
    defineProperties(error, { stall: stall5, throttle: true });
    throw error;
  }
  /**
   *  Get the header value for %%key%%, ignoring case.
   */
  getHeader(key) {
    return this.headers[key.toLowerCase()];
  }
  /**
   *  Returns true if the response has a body.
   */
  hasBody() {
    return __privateGet(this, _body2) != null;
  }
  /**
   *  The request made for this response.
   */
  get request() {
    return __privateGet(this, _request);
  }
  /**
   *  Returns true if this response was a success statusCode.
   */
  ok() {
    return __privateGet(this, _error).message === "" && this.statusCode >= 200 && this.statusCode < 300;
  }
  /**
   *  Throws a ``SERVER_ERROR`` if this response is not ok.
   */
  assertOk() {
    if (this.ok()) {
      return;
    }
    let { message, error } = __privateGet(this, _error);
    if (message === "") {
      message = `server response ${this.statusCode} ${this.statusMessage}`;
    }
    let requestUrl = null;
    if (this.request) {
      requestUrl = this.request.url;
    }
    let responseBody = null;
    try {
      if (__privateGet(this, _body2)) {
        responseBody = toUtf8String(__privateGet(this, _body2));
      }
    } catch (e) {
    }
    assert(false, message, "SERVER_ERROR", {
      request: this.request || "unknown request",
      response: this,
      error,
      info: {
        requestUrl,
        responseBody,
        responseStatus: `${this.statusCode} ${this.statusMessage}`
      }
    });
  }
};
_statusCode = new WeakMap();
_statusMessage = new WeakMap();
_headers2 = new WeakMap();
_body2 = new WeakMap();
_request = new WeakMap();
_error = new WeakMap();
var FetchResponse = _FetchResponse;
function getTime() {
  return (/* @__PURE__ */ new Date()).getTime();
}
function unpercent(value) {
  return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {
    return String.fromCharCode(parseInt(code, 16));
  }));
}
function wait(delay) {
  return new Promise((resolve) => setTimeout(resolve, delay));
}

// node_modules/ethers/lib.esm/utils/fixednumber.js
var BN_N1 = BigInt(-1);
var BN_03 = BigInt(0);
var BN_12 = BigInt(1);
var BN_5 = BigInt(5);
var _guard = {};
var Zeros = "0000";
while (Zeros.length < 80) {
  Zeros += Zeros;
}
function getTens(decimals) {
  let result = Zeros;
  while (result.length < decimals) {
    result += result;
  }
  return BigInt("1" + result.substring(0, decimals));
}
function checkValue(val, format, safeOp) {
  const width = BigInt(format.width);
  if (format.signed) {
    const limit = BN_12 << width - BN_12;
    assert(safeOp == null || val >= -limit && val < limit, "overflow", "NUMERIC_FAULT", {
      operation: safeOp,
      fault: "overflow",
      value: val
    });
    if (val > BN_03) {
      val = fromTwos(mask(val, width), width);
    } else {
      val = -fromTwos(mask(-val, width), width);
    }
  } else {
    const limit = BN_12 << width;
    assert(safeOp == null || val >= 0 && val < limit, "overflow", "NUMERIC_FAULT", {
      operation: safeOp,
      fault: "overflow",
      value: val
    });
    val = (val % limit + limit) % limit & limit - BN_12;
  }
  return val;
}
function getFormat(value) {
  if (typeof value === "number") {
    value = `fixed128x${value}`;
  }
  let signed2 = true;
  let width = 128;
  let decimals = 18;
  if (typeof value === "string") {
    if (value === "fixed") {
    } else if (value === "ufixed") {
      signed2 = false;
    } else {
      const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
      assertArgument(match, "invalid fixed format", "format", value);
      signed2 = match[1] !== "u";
      width = parseInt(match[2]);
      decimals = parseInt(match[3]);
    }
  } else if (value) {
    const v = value;
    const check = (key, type, defaultValue) => {
      if (v[key] == null) {
        return defaultValue;
      }
      assertArgument(typeof v[key] === type, "invalid fixed format (" + key + " not " + type + ")", "format." + key, v[key]);
      return v[key];
    };
    signed2 = check("signed", "boolean", signed2);
    width = check("width", "number", width);
    decimals = check("decimals", "number", decimals);
  }
  assertArgument(width % 8 === 0, "invalid FixedNumber width (not byte aligned)", "format.width", width);
  assertArgument(decimals <= 80, "invalid FixedNumber decimals (too large)", "format.decimals", decimals);
  const name = (signed2 ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
  return { signed: signed2, width, decimals, name };
}
function toString(val, decimals) {
  let negative = "";
  if (val < BN_03) {
    negative = "-";
    val *= BN_N1;
  }
  let str = val.toString();
  if (decimals === 0) {
    return negative + str;
  }
  while (str.length <= decimals) {
    str = Zeros + str;
  }
  const index = str.length - decimals;
  str = str.substring(0, index) + "." + str.substring(index);
  while (str[0] === "0" && str[1] !== ".") {
    str = str.substring(1);
  }
  while (str[str.length - 1] === "0" && str[str.length - 2] !== ".") {
    str = str.substring(0, str.length - 1);
  }
  return negative + str;
}
var _format, _val, _tens, _FixedNumber_instances, checkFormat_fn, checkValue_fn, add_fn, sub_fn, mul_fn, div_fn;
var _FixedNumber = class _FixedNumber {
  // Use this when changing this file to get some typing info,
  // but then switch to any to mask the internal type
  //constructor(guard: any, value: bigint, format: _FixedFormat) {
  /**
   *  @private
   */
  constructor(guard, value, format) {
    __privateAdd(this, _FixedNumber_instances);
    /**
     *  The specific fixed-point arithmetic field for this value.
     */
    __publicField(this, "format");
    __privateAdd(this, _format);
    // The actual value (accounting for decimals)
    __privateAdd(this, _val);
    // A base-10 value to multiple values by to maintain the magnitude
    __privateAdd(this, _tens);
    /**
     *  This is a property so console.log shows a human-meaningful value.
     *
     *  @private
     */
    __publicField(this, "_value");
    assertPrivate(guard, _guard, "FixedNumber");
    __privateSet(this, _val, value);
    __privateSet(this, _format, format);
    const _value2 = toString(value, format.decimals);
    defineProperties(this, { format: format.name, _value: _value2 });
    __privateSet(this, _tens, getTens(format.decimals));
  }
  /**
   *  If true, negative values are permitted, otherwise only
   *  positive values and zero are allowed.
   */
  get signed() {
    return __privateGet(this, _format).signed;
  }
  /**
   *  The number of bits available to store the value.
   */
  get width() {
    return __privateGet(this, _format).width;
  }
  /**
   *  The number of decimal places in the fixed-point arithment field.
   */
  get decimals() {
    return __privateGet(this, _format).decimals;
  }
  /**
   *  The value as an integer, based on the smallest unit the
   *  [[decimals]] allow.
   */
  get value() {
    return __privateGet(this, _val);
  }
  /**
   *  Returns a new [[FixedNumber]] with the result of %%this%% added
   *  to %%other%%, ignoring overflow.
   */
  addUnsafe(other) {
    return __privateMethod(this, _FixedNumber_instances, add_fn).call(this, other);
  }
  /**
   *  Returns a new [[FixedNumber]] with the result of %%this%% added
   *  to %%other%%. A [[NumericFaultError]] is thrown if overflow
   *  occurs.
   */
  add(other) {
    return __privateMethod(this, _FixedNumber_instances, add_fn).call(this, other, "add");
  }
  /**
   *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted
   *  from %%this%%, ignoring overflow.
   */
  subUnsafe(other) {
    return __privateMethod(this, _FixedNumber_instances, sub_fn).call(this, other);
  }
  /**
   *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted
   *  from %%this%%. A [[NumericFaultError]] is thrown if overflow
   *  occurs.
   */
  sub(other) {
    return __privateMethod(this, _FixedNumber_instances, sub_fn).call(this, other, "sub");
  }
  /**
   *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
   *  by %%other%%, ignoring overflow and underflow (precision loss).
   */
  mulUnsafe(other) {
    return __privateMethod(this, _FixedNumber_instances, mul_fn).call(this, other);
  }
  /**
   *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
   *  by %%other%%. A [[NumericFaultError]] is thrown if overflow
   *  occurs.
   */
  mul(other) {
    return __privateMethod(this, _FixedNumber_instances, mul_fn).call(this, other, "mul");
  }
  /**
   *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
   *  by %%other%%. A [[NumericFaultError]] is thrown if overflow
   *  occurs or if underflow (precision loss) occurs.
   */
  mulSignal(other) {
    __privateMethod(this, _FixedNumber_instances, checkFormat_fn).call(this, other);
    const value = __privateGet(this, _val) * __privateGet(other, _val);
    assert(value % __privateGet(this, _tens) === BN_03, "precision lost during signalling mul", "NUMERIC_FAULT", {
      operation: "mulSignal",
      fault: "underflow",
      value: this
    });
    return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, value / __privateGet(this, _tens), "mulSignal");
  }
  /**
   *  Returns a new [[FixedNumber]] with the result of %%this%% divided
   *  by %%other%%, ignoring underflow (precision loss). A
   *  [[NumericFaultError]] is thrown if overflow occurs.
   */
  divUnsafe(other) {
    return __privateMethod(this, _FixedNumber_instances, div_fn).call(this, other);
  }
  /**
   *  Returns a new [[FixedNumber]] with the result of %%this%% divided
   *  by %%other%%, ignoring underflow (precision loss). A
   *  [[NumericFaultError]] is thrown if overflow occurs.
   */
  div(other) {
    return __privateMethod(this, _FixedNumber_instances, div_fn).call(this, other, "div");
  }
  /**
   *  Returns a new [[FixedNumber]] with the result of %%this%% divided
   *  by %%other%%. A [[NumericFaultError]] is thrown if underflow
   *  (precision loss) occurs.
   */
  divSignal(other) {
    assert(__privateGet(other, _val) !== BN_03, "division by zero", "NUMERIC_FAULT", {
      operation: "div",
      fault: "divide-by-zero",
      value: this
    });
    __privateMethod(this, _FixedNumber_instances, checkFormat_fn).call(this, other);
    const value = __privateGet(this, _val) * __privateGet(this, _tens);
    assert(value % __privateGet(other, _val) === BN_03, "precision lost during signalling div", "NUMERIC_FAULT", {
      operation: "divSignal",
      fault: "underflow",
      value: this
    });
    return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, value / __privateGet(other, _val), "divSignal");
  }
  /**
   *  Returns a comparison result between %%this%% and %%other%%.
   *
   *  This is suitable for use in sorting, where ``-1`` implies %%this%%
   *  is smaller, ``1`` implies %%this%% is larger and ``0`` implies
   *  both are equal.
   */
  cmp(other) {
    let a = this.value, b2 = other.value;
    const delta = this.decimals - other.decimals;
    if (delta > 0) {
      b2 *= getTens(delta);
    } else if (delta < 0) {
      a *= getTens(-delta);
    }
    if (a < b2) {
      return -1;
    }
    if (a > b2) {
      return 1;
    }
    return 0;
  }
  /**
   *  Returns true if %%other%% is equal to %%this%%.
   */
  eq(other) {
    return this.cmp(other) === 0;
  }
  /**
   *  Returns true if %%other%% is less than to %%this%%.
   */
  lt(other) {
    return this.cmp(other) < 0;
  }
  /**
   *  Returns true if %%other%% is less than or equal to %%this%%.
   */
  lte(other) {
    return this.cmp(other) <= 0;
  }
  /**
   *  Returns true if %%other%% is greater than to %%this%%.
   */
  gt(other) {
    return this.cmp(other) > 0;
  }
  /**
   *  Returns true if %%other%% is greater than or equal to %%this%%.
   */
  gte(other) {
    return this.cmp(other) >= 0;
  }
  /**
   *  Returns a new [[FixedNumber]] which is the largest **integer**
   *  that is less than or equal to %%this%%.
   *
   *  The decimal component of the result will always be ``0``.
   */
  floor() {
    let val = __privateGet(this, _val);
    if (__privateGet(this, _val) < BN_03) {
      val -= __privateGet(this, _tens) - BN_12;
    }
    val = __privateGet(this, _val) / __privateGet(this, _tens) * __privateGet(this, _tens);
    return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, val, "floor");
  }
  /**
   *  Returns a new [[FixedNumber]] which is the smallest **integer**
   *  that is greater than or equal to %%this%%.
   *
   *  The decimal component of the result will always be ``0``.
   */
  ceiling() {
    let val = __privateGet(this, _val);
    if (__privateGet(this, _val) > BN_03) {
      val += __privateGet(this, _tens) - BN_12;
    }
    val = __privateGet(this, _val) / __privateGet(this, _tens) * __privateGet(this, _tens);
    return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, val, "ceiling");
  }
  /**
   *  Returns a new [[FixedNumber]] with the decimal component
   *  rounded up on ties at %%decimals%% places.
   */
  round(decimals) {
    if (decimals == null) {
      decimals = 0;
    }
    if (decimals >= this.decimals) {
      return this;
    }
    const delta = this.decimals - decimals;
    const bump = BN_5 * getTens(delta - 1);
    let value = this.value + bump;
    const tens = getTens(delta);
    value = value / tens * tens;
    checkValue(value, __privateGet(this, _format), "round");
    return new _FixedNumber(_guard, value, __privateGet(this, _format));
  }
  /**
   *  Returns true if %%this%% is equal to ``0``.
   */
  isZero() {
    return __privateGet(this, _val) === BN_03;
  }
  /**
   *  Returns true if %%this%% is less than ``0``.
   */
  isNegative() {
    return __privateGet(this, _val) < BN_03;
  }
  /**
   *  Returns the string representation of %%this%%.
   */
  toString() {
    return this._value;
  }
  /**
   *  Returns a float approximation.
   *
   *  Due to IEEE 754 precission (or lack thereof), this function
   *  can only return an approximation and most values will contain
   *  rounding errors.
   */
  toUnsafeFloat() {
    return parseFloat(this.toString());
  }
  /**
   *  Return a new [[FixedNumber]] with the same value but has had
   *  its field set to %%format%%.
   *
   *  This will throw if the value cannot fit into %%format%%.
   */
  toFormat(format) {
    return _FixedNumber.fromString(this.toString(), format);
  }
  /**
   *  Creates a new [[FixedNumber]] for %%value%% divided by
   *  %%decimal%% places with %%format%%.
   *
   *  This will throw a [[NumericFaultError]] if %%value%% (once adjusted
   *  for %%decimals%%) cannot fit in %%format%%, either due to overflow
   *  or underflow (precision loss).
   */
  static fromValue(_value2, _decimals, _format2) {
    const decimals = _decimals == null ? 0 : getNumber(_decimals);
    const format = getFormat(_format2);
    let value = getBigInt(_value2, "value");
    const delta = decimals - format.decimals;
    if (delta > 0) {
      const tens = getTens(delta);
      assert(value % tens === BN_03, "value loses precision for format", "NUMERIC_FAULT", {
        operation: "fromValue",
        fault: "underflow",
        value: _value2
      });
      value /= tens;
    } else if (delta < 0) {
      value *= getTens(-delta);
    }
    checkValue(value, format, "fromValue");
    return new _FixedNumber(_guard, value, format);
  }
  /**
   *  Creates a new [[FixedNumber]] for %%value%% with %%format%%.
   *
   *  This will throw a [[NumericFaultError]] if %%value%% cannot fit
   *  in %%format%%, either due to overflow or underflow (precision loss).
   */
  static fromString(_value2, _format2) {
    const match = _value2.match(/^(-?)([0-9]*)\.?([0-9]*)$/);
    assertArgument(match && match[2].length + match[3].length > 0, "invalid FixedNumber string value", "value", _value2);
    const format = getFormat(_format2);
    let whole = match[2] || "0", decimal = match[3] || "";
    while (decimal.length < format.decimals) {
      decimal += Zeros;
    }
    assert(decimal.substring(format.decimals).match(/^0*$/), "too many decimals for format", "NUMERIC_FAULT", {
      operation: "fromString",
      fault: "underflow",
      value: _value2
    });
    decimal = decimal.substring(0, format.decimals);
    const value = BigInt(match[1] + whole + decimal);
    checkValue(value, format, "fromString");
    return new _FixedNumber(_guard, value, format);
  }
  /**
   *  Creates a new [[FixedNumber]] with the big-endian representation
   *  %%value%% with %%format%%.
   *
   *  This will throw a [[NumericFaultError]] if %%value%% cannot fit
   *  in %%format%% due to overflow.
   */
  static fromBytes(_value2, _format2) {
    let value = toBigInt(getBytes(_value2, "value"));
    const format = getFormat(_format2);
    if (format.signed) {
      value = fromTwos(value, format.width);
    }
    checkValue(value, format, "fromBytes");
    return new _FixedNumber(_guard, value, format);
  }
};
_format = new WeakMap();
_val = new WeakMap();
_tens = new WeakMap();
_FixedNumber_instances = new WeakSet();
checkFormat_fn = function(other) {
  assertArgument(this.format === other.format, "incompatible format; use fixedNumber.toFormat", "other", other);
};
checkValue_fn = function(val, safeOp) {
  val = checkValue(val, __privateGet(this, _format), safeOp);
  return new _FixedNumber(_guard, val, __privateGet(this, _format));
};
add_fn = function(o, safeOp) {
  __privateMethod(this, _FixedNumber_instances, checkFormat_fn).call(this, o);
  return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, __privateGet(this, _val) + __privateGet(o, _val), safeOp);
};
sub_fn = function(o, safeOp) {
  __privateMethod(this, _FixedNumber_instances, checkFormat_fn).call(this, o);
  return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, __privateGet(this, _val) - __privateGet(o, _val), safeOp);
};
mul_fn = function(o, safeOp) {
  __privateMethod(this, _FixedNumber_instances, checkFormat_fn).call(this, o);
  return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, __privateGet(this, _val) * __privateGet(o, _val) / __privateGet(this, _tens), safeOp);
};
div_fn = function(o, safeOp) {
  assert(__privateGet(o, _val) !== BN_03, "division by zero", "NUMERIC_FAULT", {
    operation: "div",
    fault: "divide-by-zero",
    value: this
  });
  __privateMethod(this, _FixedNumber_instances, checkFormat_fn).call(this, o);
  return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, __privateGet(this, _val) * __privateGet(this, _tens) / __privateGet(o, _val), safeOp);
};
var FixedNumber = _FixedNumber;

// node_modules/ethers/lib.esm/utils/rlp-decode.js
function hexlifyByte(value) {
  let result = value.toString(16);
  while (result.length < 2) {
    result = "0" + result;
  }
  return "0x" + result;
}
function unarrayifyInteger(data, offset, length) {
  let result = 0;
  for (let i = 0; i < length; i++) {
    result = result * 256 + data[offset + i];
  }
  return result;
}
function _decodeChildren(data, offset, childOffset, length) {
  const result = [];
  while (childOffset < offset + 1 + length) {
    const decoded = _decode(data, childOffset);
    result.push(decoded.result);
    childOffset += decoded.consumed;
    assert(childOffset <= offset + 1 + length, "child data too short", "BUFFER_OVERRUN", {
      buffer: data,
      length,
      offset
    });
  }
  return { consumed: 1 + length, result };
}
function _decode(data, offset) {
  assert(data.length !== 0, "data too short", "BUFFER_OVERRUN", {
    buffer: data,
    length: 0,
    offset: 1
  });
  const checkOffset = (offset2) => {
    assert(offset2 <= data.length, "data short segment too short", "BUFFER_OVERRUN", {
      buffer: data,
      length: data.length,
      offset: offset2
    });
  };
  if (data[offset] >= 248) {
    const lengthLength = data[offset] - 247;
    checkOffset(offset + 1 + lengthLength);
    const length = unarrayifyInteger(data, offset + 1, lengthLength);
    checkOffset(offset + 1 + lengthLength + length);
    return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
  } else if (data[offset] >= 192) {
    const length = data[offset] - 192;
    checkOffset(offset + 1 + length);
    return _decodeChildren(data, offset, offset + 1, length);
  } else if (data[offset] >= 184) {
    const lengthLength = data[offset] - 183;
    checkOffset(offset + 1 + lengthLength);
    const length = unarrayifyInteger(data, offset + 1, lengthLength);
    checkOffset(offset + 1 + lengthLength + length);
    const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
    return { consumed: 1 + lengthLength + length, result };
  } else if (data[offset] >= 128) {
    const length = data[offset] - 128;
    checkOffset(offset + 1 + length);
    const result = hexlify(data.slice(offset + 1, offset + 1 + length));
    return { consumed: 1 + length, result };
  }
  return { consumed: 1, result: hexlifyByte(data[offset]) };
}
function decodeRlp(_data5) {
  const data = getBytes(_data5, "data");
  const decoded = _decode(data, 0);
  assertArgument(decoded.consumed === data.length, "unexpected junk after rlp payload", "data", _data5);
  return decoded.result;
}

// node_modules/ethers/lib.esm/utils/rlp-encode.js
function arrayifyInteger(value) {
  const result = [];
  while (value) {
    result.unshift(value & 255);
    value >>= 8;
  }
  return result;
}
function _encode(object2) {
  if (Array.isArray(object2)) {
    let payload = [];
    object2.forEach(function(child) {
      payload = payload.concat(_encode(child));
    });
    if (payload.length <= 55) {
      payload.unshift(192 + payload.length);
      return payload;
    }
    const length2 = arrayifyInteger(payload.length);
    length2.unshift(247 + length2.length);
    return length2.concat(payload);
  }
  const data = Array.prototype.slice.call(getBytes(object2, "object"));
  if (data.length === 1 && data[0] <= 127) {
    return data;
  } else if (data.length <= 55) {
    data.unshift(128 + data.length);
    return data;
  }
  const length = arrayifyInteger(data.length);
  length.unshift(183 + length.length);
  return length.concat(data);
}
var nibbles = "0123456789abcdef";
function encodeRlp(object2) {
  let result = "0x";
  for (const v of _encode(object2)) {
    result += nibbles[v >> 4];
    result += nibbles[v & 15];
  }
  return result;
}

// node_modules/ethers/lib.esm/utils/units.js
var names = [
  "wei",
  "kwei",
  "mwei",
  "gwei",
  "szabo",
  "finney",
  "ether"
];
function formatUnits(value, unit) {
  let decimals = 18;
  if (typeof unit === "string") {
    const index = names.indexOf(unit);
    assertArgument(index >= 0, "invalid unit", "unit", unit);
    decimals = 3 * index;
  } else if (unit != null) {
    decimals = getNumber(unit, "unit");
  }
  return FixedNumber.fromValue(value, decimals, { decimals, width: 512 }).toString();
}
function parseUnits(value, unit) {
  assertArgument(typeof value === "string", "value must be a string", "value", value);
  let decimals = 18;
  if (typeof unit === "string") {
    const index = names.indexOf(unit);
    assertArgument(index >= 0, "invalid unit", "unit", unit);
    decimals = 3 * index;
  } else if (unit != null) {
    decimals = getNumber(unit, "unit");
  }
  return FixedNumber.fromString(value, { decimals, width: 512 }).value;
}
function formatEther(wei) {
  return formatUnits(wei, 18);
}
function parseEther(ether) {
  return parseUnits(ether, 18);
}

// node_modules/ethers/lib.esm/utils/uuid.js
function uuidV4(randomBytes4) {
  const bytes2 = getBytes(randomBytes4, "randomBytes");
  bytes2[6] = bytes2[6] & 15 | 64;
  bytes2[8] = bytes2[8] & 63 | 128;
  const value = hexlify(bytes2);
  return [
    value.substring(2, 10),
    value.substring(10, 14),
    value.substring(14, 18),
    value.substring(18, 22),
    value.substring(22, 34)
  ].join("-");
}

// node_modules/ethers/lib.esm/abi/coders/abstract-coder.js
var WordSize = 32;
var Padding = new Uint8Array(WordSize);
var passProperties = ["then"];
var _guard2 = {};
var resultNames = /* @__PURE__ */ new WeakMap();
function getNames(result) {
  return resultNames.get(result);
}
function setNames(result, names2) {
  resultNames.set(result, names2);
}
function throwError(name, error) {
  const wrapped = new Error(`deferred error during ABI decoding triggered accessing ${name}`);
  wrapped.error = error;
  throw wrapped;
}
function toObject(names2, items, deep) {
  if (names2.indexOf(null) >= 0) {
    return items.map((item, index) => {
      if (item instanceof Result) {
        return toObject(getNames(item), item, deep);
      }
      return item;
    });
  }
  return names2.reduce((accum, name, index) => {
    let item = items.getValue(name);
    if (!(name in accum)) {
      if (deep && item instanceof Result) {
        item = toObject(getNames(item), item, deep);
      }
      accum[name] = item;
    }
    return accum;
  }, {});
}
var _names;
var _Result = class _Result extends Array {
  /**
   *  @private
   */
  constructor(...args) {
    const guard = args[0];
    let items = args[1];
    let names2 = (args[2] || []).slice();
    let wrap = true;
    if (guard !== _guard2) {
      items = args;
      names2 = [];
      wrap = false;
    }
    super(items.length);
    // No longer used; but cannot be removed as it will remove the
    // #private field from the .d.ts which may break backwards
    // compatibility
    __privateAdd(this, _names);
    items.forEach((item, index) => {
      this[index] = item;
    });
    const nameCounts = names2.reduce((accum, name) => {
      if (typeof name === "string") {
        accum.set(name, (accum.get(name) || 0) + 1);
      }
      return accum;
    }, /* @__PURE__ */ new Map());
    setNames(this, Object.freeze(items.map((item, index) => {
      const name = names2[index];
      if (name != null && nameCounts.get(name) === 1) {
        return name;
      }
      return null;
    })));
    __privateSet(this, _names, []);
    if (__privateGet(this, _names) == null) {
      void __privateGet(this, _names);
    }
    if (!wrap) {
      return;
    }
    Object.freeze(this);
    const proxy = new Proxy(this, {
      get: (target, prop, receiver) => {
        if (typeof prop === "string") {
          if (prop.match(/^[0-9]+$/)) {
            const index = getNumber(prop, "%index");
            if (index < 0 || index >= this.length) {
              throw new RangeError("out of result range");
            }
            const item = target[index];
            if (item instanceof Error) {
              throwError(`index ${index}`, item);
            }
            return item;
          }
          if (passProperties.indexOf(prop) >= 0) {
            return Reflect.get(target, prop, receiver);
          }
          const value = target[prop];
          if (value instanceof Function) {
            return function(...args2) {
              return value.apply(this === receiver ? target : this, args2);
            };
          } else if (!(prop in target)) {
            return target.getValue.apply(this === receiver ? target : this, [prop]);
          }
        }
        return Reflect.get(target, prop, receiver);
      }
    });
    setNames(proxy, getNames(this));
    return proxy;
  }
  /**
   *  Returns the Result as a normal Array. If %%deep%%, any children
   *  which are Result objects are also converted to a normal Array.
   *
   *  This will throw if there are any outstanding deferred
   *  errors.
   */
  toArray(deep) {
    const result = [];
    this.forEach((item, index) => {
      if (item instanceof Error) {
        throwError(`index ${index}`, item);
      }
      if (deep && item instanceof _Result) {
        item = item.toArray(deep);
      }
      result.push(item);
    });
    return result;
  }
  /**
   *  Returns the Result as an Object with each name-value pair. If
   *  %%deep%%, any children which are Result objects are also
   *  converted to an Object.
   *
   *  This will throw if any value is unnamed, or if there are
   *  any outstanding deferred errors.
   */
  toObject(deep) {
    const names2 = getNames(this);
    return names2.reduce((accum, name, index) => {
      assert(name != null, `value at index ${index} unnamed`, "UNSUPPORTED_OPERATION", {
        operation: "toObject()"
      });
      return toObject(names2, this, deep);
    }, {});
  }
  /**
   *  @_ignore
   */
  slice(start, end) {
    if (start == null) {
      start = 0;
    }
    if (start < 0) {
      start += this.length;
      if (start < 0) {
        start = 0;
      }
    }
    if (end == null) {
      end = this.length;
    }
    if (end < 0) {
      end += this.length;
      if (end < 0) {
        end = 0;
      }
    }
    if (end > this.length) {
      end = this.length;
    }
    const _names2 = getNames(this);
    const result = [], names2 = [];
    for (let i = start; i < end; i++) {
      result.push(this[i]);
      names2.push(_names2[i]);
    }
    return new _Result(_guard2, result, names2);
  }
  /**
   *  @_ignore
   */
  filter(callback, thisArg) {
    const _names2 = getNames(this);
    const result = [], names2 = [];
    for (let i = 0; i < this.length; i++) {
      const item = this[i];
      if (item instanceof Error) {
        throwError(`index ${i}`, item);
      }
      if (callback.call(thisArg, item, i, this)) {
        result.push(item);
        names2.push(_names2[i]);
      }
    }
    return new _Result(_guard2, result, names2);
  }
  /**
   *  @_ignore
   */
  map(callback, thisArg) {
    const result = [];
    for (let i = 0; i < this.length; i++) {
      const item = this[i];
      if (item instanceof Error) {
        throwError(`index ${i}`, item);
      }
      result.push(callback.call(thisArg, item, i, this));
    }
    return result;
  }
  /**
   *  Returns the value for %%name%%.
   *
   *  Since it is possible to have a key whose name conflicts with
   *  a method on a [[Result]] or its superclass Array, or any
   *  JavaScript keyword, this ensures all named values are still
   *  accessible by name.
   */
  getValue(name) {
    const index = getNames(this).indexOf(name);
    if (index === -1) {
      return void 0;
    }
    const value = this[index];
    if (value instanceof Error) {
      throwError(`property ${JSON.stringify(name)}`, value.error);
    }
    return value;
  }
  /**
   *  Creates a new [[Result]] for %%items%% with each entry
   *  also accessible by its corresponding name in %%keys%%.
   */
  static fromItems(items, keys) {
    return new _Result(_guard2, items, keys);
  }
};
_names = new WeakMap();
var Result = _Result;
function checkResultErrors(result) {
  const errors = [];
  const checkErrors = function(path, object2) {
    if (!Array.isArray(object2)) {
      return;
    }
    for (let key in object2) {
      const childPath = path.slice();
      childPath.push(key);
      try {
        checkErrors(childPath, object2[key]);
      } catch (error) {
        errors.push({ path: childPath, error });
      }
    }
  };
  checkErrors([], result);
  return errors;
}
function getValue(value) {
  let bytes2 = toBeArray(value);
  assert(bytes2.length <= WordSize, "value out-of-bounds", "BUFFER_OVERRUN", { buffer: bytes2, length: WordSize, offset: bytes2.length });
  if (bytes2.length !== WordSize) {
    bytes2 = getBytesCopy(concat([Padding.slice(bytes2.length % WordSize), bytes2]));
  }
  return bytes2;
}
var Coder = class {
  constructor(name, type, localName, dynamic) {
    // The coder name:
    //   - address, uint256, tuple, array, etc.
    __publicField(this, "name");
    // The fully expanded type, including composite types:
    //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.
    __publicField(this, "type");
    // The localName bound in the signature, in this example it is "baz":
    //   - tuple(address foo, uint bar) baz
    __publicField(this, "localName");
    // Whether this type is dynamic:
    //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.
    //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)
    __publicField(this, "dynamic");
    defineProperties(this, { name, type, localName, dynamic }, {
      name: "string",
      type: "string",
      localName: "string",
      dynamic: "boolean"
    });
  }
  _throwError(message, value) {
    assertArgument(false, message, this.localName, value);
  }
};
var _data, _dataLength, _Writer_instances, writeData_fn;
var Writer = class {
  constructor() {
    __privateAdd(this, _Writer_instances);
    // An array of WordSize lengthed objects to concatenation
    __privateAdd(this, _data);
    __privateAdd(this, _dataLength);
    __privateSet(this, _data, []);
    __privateSet(this, _dataLength, 0);
  }
  get data() {
    return concat(__privateGet(this, _data));
  }
  get length() {
    return __privateGet(this, _dataLength);
  }
  appendWriter(writer) {
    return __privateMethod(this, _Writer_instances, writeData_fn).call(this, getBytesCopy(writer.data));
  }
  // Arrayish item; pad on the right to *nearest* WordSize
  writeBytes(value) {
    let bytes2 = getBytesCopy(value);
    const paddingOffset = bytes2.length % WordSize;
    if (paddingOffset) {
      bytes2 = getBytesCopy(concat([bytes2, Padding.slice(paddingOffset)]));
    }
    return __privateMethod(this, _Writer_instances, writeData_fn).call(this, bytes2);
  }
  // Numeric item; pad on the left *to* WordSize
  writeValue(value) {
    return __privateMethod(this, _Writer_instances, writeData_fn).call(this, getValue(value));
  }
  // Inserts a numeric place-holder, returning a callback that can
  // be used to asjust the value later
  writeUpdatableValue() {
    const offset = __privateGet(this, _data).length;
    __privateGet(this, _data).push(Padding);
    __privateSet(this, _dataLength, __privateGet(this, _dataLength) + WordSize);
    return (value) => {
      __privateGet(this, _data)[offset] = getValue(value);
    };
  }
};
_data = new WeakMap();
_dataLength = new WeakMap();
_Writer_instances = new WeakSet();
writeData_fn = function(data) {
  __privateGet(this, _data).push(data);
  __privateSet(this, _dataLength, __privateGet(this, _dataLength) + data.length);
  return data.length;
};
var _data2, _offset, _bytesRead, _parent, _maxInflation, _Reader_instances, incrementBytesRead_fn, peekBytes_fn;
var _Reader = class _Reader {
  constructor(data, allowLoose, maxInflation) {
    __privateAdd(this, _Reader_instances);
    // Allows incomplete unpadded data to be read; otherwise an error
    // is raised if attempting to overrun the buffer. This is required
    // to deal with an old Solidity bug, in which event data for
    // external (not public thoguh) was tightly packed.
    __publicField(this, "allowLoose");
    __privateAdd(this, _data2);
    __privateAdd(this, _offset);
    __privateAdd(this, _bytesRead);
    __privateAdd(this, _parent);
    __privateAdd(this, _maxInflation);
    defineProperties(this, { allowLoose: !!allowLoose });
    __privateSet(this, _data2, getBytesCopy(data));
    __privateSet(this, _bytesRead, 0);
    __privateSet(this, _parent, null);
    __privateSet(this, _maxInflation, maxInflation != null ? maxInflation : 1024);
    __privateSet(this, _offset, 0);
  }
  get data() {
    return hexlify(__privateGet(this, _data2));
  }
  get dataLength() {
    return __privateGet(this, _data2).length;
  }
  get consumed() {
    return __privateGet(this, _offset);
  }
  get bytes() {
    return new Uint8Array(__privateGet(this, _data2));
  }
  // Create a sub-reader with the same underlying data, but offset
  subReader(offset) {
    const reader = new _Reader(__privateGet(this, _data2).slice(__privateGet(this, _offset) + offset), this.allowLoose, __privateGet(this, _maxInflation));
    __privateSet(reader, _parent, this);
    return reader;
  }
  // Read bytes
  readBytes(length, loose) {
    let bytes2 = __privateMethod(this, _Reader_instances, peekBytes_fn).call(this, 0, length, !!loose);
    __privateMethod(this, _Reader_instances, incrementBytesRead_fn).call(this, length);
    __privateSet(this, _offset, __privateGet(this, _offset) + bytes2.length);
    return bytes2.slice(0, length);
  }
  // Read a numeric values
  readValue() {
    return toBigInt(this.readBytes(WordSize));
  }
  readIndex() {
    return toNumber(this.readBytes(WordSize));
  }
};
_data2 = new WeakMap();
_offset = new WeakMap();
_bytesRead = new WeakMap();
_parent = new WeakMap();
_maxInflation = new WeakMap();
_Reader_instances = new WeakSet();
incrementBytesRead_fn = function(count) {
  var _a2;
  if (__privateGet(this, _parent)) {
    return __privateMethod(_a2 = __privateGet(this, _parent), _Reader_instances, incrementBytesRead_fn).call(_a2, count);
  }
  __privateSet(this, _bytesRead, __privateGet(this, _bytesRead) + count);
  assert(__privateGet(this, _maxInflation) < 1 || __privateGet(this, _bytesRead) <= __privateGet(this, _maxInflation) * this.dataLength, `compressed ABI data exceeds inflation ratio of ${__privateGet(this, _maxInflation)} ( see: https://github.com/ethers-io/ethers.js/issues/4537 )`, "BUFFER_OVERRUN", {
    buffer: getBytesCopy(__privateGet(this, _data2)),
    offset: __privateGet(this, _offset),
    length: count,
    info: {
      bytesRead: __privateGet(this, _bytesRead),
      dataLength: this.dataLength
    }
  });
};
peekBytes_fn = function(offset, length, loose) {
  let alignedLength = Math.ceil(length / WordSize) * WordSize;
  if (__privateGet(this, _offset) + alignedLength > __privateGet(this, _data2).length) {
    if (this.allowLoose && loose && __privateGet(this, _offset) + length <= __privateGet(this, _data2).length) {
      alignedLength = length;
    } else {
      assert(false, "data out-of-bounds", "BUFFER_OVERRUN", {
        buffer: getBytesCopy(__privateGet(this, _data2)),
        length: __privateGet(this, _data2).length,
        offset: __privateGet(this, _offset) + alignedLength
      });
    }
  }
  return __privateGet(this, _data2).slice(__privateGet(this, _offset), __privateGet(this, _offset) + alignedLength);
};
var Reader = _Reader;

// node_modules/@noble/hashes/esm/_assert.js
function number(n2) {
  if (!Number.isSafeInteger(n2) || n2 < 0)
    throw new Error(`Wrong positive integer: ${n2}`);
}
function bytes(b2, ...lengths) {
  if (!(b2 instanceof Uint8Array))
    throw new Error("Expected Uint8Array");
  if (lengths.length > 0 && !lengths.includes(b2.length))
    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b2.length}`);
}
function hash(hash2) {
  if (typeof hash2 !== "function" || typeof hash2.create !== "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  number(hash2.outputLen);
  number(hash2.blockLen);
}
function exists(instance, checkFinished = true) {
  if (instance.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (checkFinished && instance.finished)
    throw new Error("Hash#digest() has already been called");
}
function output(out, instance) {
  bytes(out);
  const min = instance.outputLen;
  if (out.length < min) {
    throw new Error(`digestInto() expects output buffer of length at least ${min}`);
  }
}

// node_modules/@noble/hashes/esm/crypto.js
var crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;

// node_modules/@noble/hashes/esm/utils.js
var u8a = (a) => a instanceof Uint8Array;
var u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
var createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
var rotr = (word, shift) => word << 32 - shift | word >>> shift;
var isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!isLE)
  throw new Error("Non little-endian hardware is not supported");
var nextTick = async () => {
};
async function asyncLoop(iters, tick, cb) {
  let ts = Date.now();
  for (let i = 0; i < iters; i++) {
    cb(i);
    const diff = Date.now() - ts;
    if (diff >= 0 && diff < tick)
      continue;
    await nextTick();
    ts += diff;
  }
}
function utf8ToBytes(str) {
  if (typeof str !== "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
  return new Uint8Array(new TextEncoder().encode(str));
}
function toBytes(data) {
  if (typeof data === "string")
    data = utf8ToBytes(data);
  if (!u8a(data))
    throw new Error(`expected Uint8Array, got ${typeof data}`);
  return data;
}
function concatBytes(...arrays) {
  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
  let pad = 0;
  arrays.forEach((a) => {
    if (!u8a(a))
      throw new Error("Uint8Array expected");
    r.set(a, pad);
    pad += a.length;
  });
  return r;
}
var Hash = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
var toStr = {}.toString;
function checkOpts(defaults, opts) {
  if (opts !== void 0 && toStr.call(opts) !== "[object Object]")
    throw new Error("Options should be object or undefined");
  const merged = Object.assign(defaults, opts);
  return merged;
}
function wrapConstructor(hashCons) {
  const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
  const tmp = hashCons();
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = () => hashCons();
  return hashC;
}
function wrapXOFConstructorWithOpts(hashCons) {
  const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
  const tmp = hashCons({});
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = (opts) => hashCons(opts);
  return hashC;
}
function randomBytes(bytesLength = 32) {
  if (crypto && typeof crypto.getRandomValues === "function") {
    return crypto.getRandomValues(new Uint8Array(bytesLength));
  }
  throw new Error("crypto.getRandomValues must be defined");
}

// node_modules/@noble/hashes/esm/hmac.js
var HMAC = class extends Hash {
  constructor(hash2, _key) {
    super();
    this.finished = false;
    this.destroyed = false;
    hash(hash2);
    const key = toBytes(_key);
    this.iHash = hash2.create();
    if (typeof this.iHash.update !== "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen;
    this.outputLen = this.iHash.outputLen;
    const blockLen = this.blockLen;
    const pad = new Uint8Array(blockLen);
    pad.set(key.length > blockLen ? hash2.create().update(key).digest() : key);
    for (let i = 0; i < pad.length; i++)
      pad[i] ^= 54;
    this.iHash.update(pad);
    this.oHash = hash2.create();
    for (let i = 0; i < pad.length; i++)
      pad[i] ^= 54 ^ 92;
    this.oHash.update(pad);
    pad.fill(0);
  }
  update(buf) {
    exists(this);
    this.iHash.update(buf);
    return this;
  }
  digestInto(out) {
    exists(this);
    bytes(out, this.outputLen);
    this.finished = true;
    this.iHash.digestInto(out);
    this.oHash.update(out);
    this.oHash.digestInto(out);
    this.destroy();
  }
  digest() {
    const out = new Uint8Array(this.oHash.outputLen);
    this.digestInto(out);
    return out;
  }
  _cloneInto(to) {
    to || (to = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
    to = to;
    to.finished = finished;
    to.destroyed = destroyed;
    to.blockLen = blockLen;
    to.outputLen = outputLen;
    to.oHash = oHash._cloneInto(to.oHash);
    to.iHash = iHash._cloneInto(to.iHash);
    return to;
  }
  destroy() {
    this.destroyed = true;
    this.oHash.destroy();
    this.iHash.destroy();
  }
};
var hmac = (hash2, key, message) => new HMAC(hash2, key).update(message).digest();
hmac.create = (hash2, key) => new HMAC(hash2, key);

// node_modules/@noble/hashes/esm/pbkdf2.js
function pbkdf2Init(hash2, _password, _salt, _opts) {
  hash(hash2);
  const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);
  const { c, dkLen, asyncTick } = opts;
  number(c);
  number(dkLen);
  number(asyncTick);
  if (c < 1)
    throw new Error("PBKDF2: iterations (c) should be >= 1");
  const password = toBytes(_password);
  const salt = toBytes(_salt);
  const DK = new Uint8Array(dkLen);
  const PRF = hmac.create(hash2, password);
  const PRFSalt = PRF._cloneInto().update(salt);
  return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
}
function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
  PRF.destroy();
  PRFSalt.destroy();
  if (prfW)
    prfW.destroy();
  u.fill(0);
  return DK;
}
function pbkdf2(hash2, password, salt, opts) {
  const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash2, password, salt, opts);
  let prfW;
  const arr = new Uint8Array(4);
  const view = createView(arr);
  const u = new Uint8Array(PRF.outputLen);
  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
    const Ti = DK.subarray(pos, pos + PRF.outputLen);
    view.setInt32(0, ti, false);
    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
    Ti.set(u.subarray(0, Ti.length));
    for (let ui = 1; ui < c; ui++) {
      PRF._cloneInto(prfW).update(u).digestInto(u);
      for (let i = 0; i < Ti.length; i++)
        Ti[i] ^= u[i];
    }
  }
  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
}

// node_modules/@noble/hashes/esm/_sha2.js
function setBigUint64(view, byteOffset, value, isLE2) {
  if (typeof view.setBigUint64 === "function")
    return view.setBigUint64(byteOffset, value, isLE2);
  const _32n2 = BigInt(32);
  const _u32_max = BigInt(4294967295);
  const wh = Number(value >> _32n2 & _u32_max);
  const wl = Number(value & _u32_max);
  const h = isLE2 ? 4 : 0;
  const l = isLE2 ? 0 : 4;
  view.setUint32(byteOffset + h, wh, isLE2);
  view.setUint32(byteOffset + l, wl, isLE2);
}
var SHA2 = class extends Hash {
  constructor(blockLen, outputLen, padOffset, isLE2) {
    super();
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.padOffset = padOffset;
    this.isLE = isLE2;
    this.finished = false;
    this.length = 0;
    this.pos = 0;
    this.destroyed = false;
    this.buffer = new Uint8Array(blockLen);
    this.view = createView(this.buffer);
  }
  update(data) {
    exists(this);
    const { view, buffer, blockLen } = this;
    data = toBytes(data);
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take = Math.min(blockLen - this.pos, len - pos);
      if (take === blockLen) {
        const dataView = createView(data);
        for (; blockLen <= len - pos; pos += blockLen)
          this.process(dataView, pos);
        continue;
      }
      buffer.set(data.subarray(pos, pos + take), this.pos);
      this.pos += take;
      pos += take;
      if (this.pos === blockLen) {
        this.process(view, 0);
        this.pos = 0;
      }
    }
    this.length += data.length;
    this.roundClean();
    return this;
  }
  digestInto(out) {
    exists(this);
    output(out, this);
    this.finished = true;
    const { buffer, view, blockLen, isLE: isLE2 } = this;
    let { pos } = this;
    buffer[pos++] = 128;
    this.buffer.subarray(pos).fill(0);
    if (this.padOffset > blockLen - pos) {
      this.process(view, 0);
      pos = 0;
    }
    for (let i = pos; i < blockLen; i++)
      buffer[i] = 0;
    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE2);
    this.process(view, 0);
    const oview = createView(out);
    const len = this.outputLen;
    if (len % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const outLen = len / 4;
    const state = this.get();
    if (outLen > state.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let i = 0; i < outLen; i++)
      oview.setUint32(4 * i, state[i], isLE2);
  }
  digest() {
    const { buffer, outputLen } = this;
    this.digestInto(buffer);
    const res = buffer.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to) {
    to || (to = new this.constructor());
    to.set(...this.get());
    const { blockLen, buffer, length, finished, destroyed, pos } = this;
    to.length = length;
    to.pos = pos;
    to.finished = finished;
    to.destroyed = destroyed;
    if (length % blockLen)
      to.buffer.set(buffer);
    return to;
  }
};

// node_modules/@noble/hashes/esm/sha256.js
var Chi = (a, b2, c) => a & b2 ^ ~a & c;
var Maj = (a, b2, c) => a & b2 ^ a & c ^ b2 & c;
var SHA256_K = /* @__PURE__ */ new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]);
var IV = /* @__PURE__ */ new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]);
var SHA256_W = /* @__PURE__ */ new Uint32Array(64);
var SHA256 = class extends SHA2 {
  constructor() {
    super(64, 32, 8, false);
    this.A = IV[0] | 0;
    this.B = IV[1] | 0;
    this.C = IV[2] | 0;
    this.D = IV[3] | 0;
    this.E = IV[4] | 0;
    this.F = IV[5] | 0;
    this.G = IV[6] | 0;
    this.H = IV[7] | 0;
  }
  get() {
    const { A, B, C, D, E, F, G, H } = this;
    return [A, B, C, D, E, F, G, H];
  }
  // prettier-ignore
  set(A, B, C, D, E, F, G, H) {
    this.A = A | 0;
    this.B = B | 0;
    this.C = C | 0;
    this.D = D | 0;
    this.E = E | 0;
    this.F = F | 0;
    this.G = G | 0;
    this.H = H | 0;
  }
  process(view, offset) {
    for (let i = 0; i < 16; i++, offset += 4)
      SHA256_W[i] = view.getUint32(offset, false);
    for (let i = 16; i < 64; i++) {
      const W15 = SHA256_W[i - 15];
      const W2 = SHA256_W[i - 2];
      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;
      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;
      SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
    }
    let { A, B, C, D, E, F, G, H } = this;
    for (let i = 0; i < 64; i++) {
      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);
      const T13 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);
      const T22 = sigma0 + Maj(A, B, C) | 0;
      H = G;
      G = F;
      F = E;
      E = D + T13 | 0;
      D = C;
      C = B;
      B = A;
      A = T13 + T22 | 0;
    }
    A = A + this.A | 0;
    B = B + this.B | 0;
    C = C + this.C | 0;
    D = D + this.D | 0;
    E = E + this.E | 0;
    F = F + this.F | 0;
    G = G + this.G | 0;
    H = H + this.H | 0;
    this.set(A, B, C, D, E, F, G, H);
  }
  roundClean() {
    SHA256_W.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0);
    this.buffer.fill(0);
  }
};
var sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());

// node_modules/@noble/hashes/esm/_u64.js
var U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
var _32n = /* @__PURE__ */ BigInt(32);
function fromBig(n2, le = false) {
  if (le)
    return { h: Number(n2 & U32_MASK64), l: Number(n2 >> _32n & U32_MASK64) };
  return { h: Number(n2 >> _32n & U32_MASK64) | 0, l: Number(n2 & U32_MASK64) | 0 };
}
function split(lst, le = false) {
  let Ah = new Uint32Array(lst.length);
  let Al = new Uint32Array(lst.length);
  for (let i = 0; i < lst.length; i++) {
    const { h, l } = fromBig(lst[i], le);
    [Ah[i], Al[i]] = [h, l];
  }
  return [Ah, Al];
}
var toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
var shrSH = (h, _l, s) => h >>> s;
var shrSL = (h, l, s) => h << 32 - s | l >>> s;
var rotrSH = (h, l, s) => h >>> s | l << 32 - s;
var rotrSL = (h, l, s) => h << 32 - s | l >>> s;
var rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;
var rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;
var rotr32H = (_h, l) => l;
var rotr32L = (h, _l) => h;
var rotlSH = (h, l, s) => h << s | l >>> 32 - s;
var rotlSL = (h, l, s) => l << s | h >>> 32 - s;
var rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;
var rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;
function add(Ah, Al, Bh, Bl) {
  const l = (Al >>> 0) + (Bl >>> 0);
  return { h: Ah + Bh + (l / 2 ** 32 | 0) | 0, l: l | 0 };
}
var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
var add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
var add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
var add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
var add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
var add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
var u64 = {
  fromBig,
  split,
  toBig,
  shrSH,
  shrSL,
  rotrSH,
  rotrSL,
  rotrBH,
  rotrBL,
  rotr32H,
  rotr32L,
  rotlSH,
  rotlSL,
  rotlBH,
  rotlBL,
  add,
  add3L,
  add3H,
  add4L,
  add4H,
  add5H,
  add5L
};
var u64_default = u64;

// node_modules/@noble/hashes/esm/sha512.js
var [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64_default.split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((n2) => BigInt(n2))))();
var SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);
var SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);
var SHA512 = class extends SHA2 {
  constructor() {
    super(128, 64, 16, false);
    this.Ah = 1779033703 | 0;
    this.Al = 4089235720 | 0;
    this.Bh = 3144134277 | 0;
    this.Bl = 2227873595 | 0;
    this.Ch = 1013904242 | 0;
    this.Cl = 4271175723 | 0;
    this.Dh = 2773480762 | 0;
    this.Dl = 1595750129 | 0;
    this.Eh = 1359893119 | 0;
    this.El = 2917565137 | 0;
    this.Fh = 2600822924 | 0;
    this.Fl = 725511199 | 0;
    this.Gh = 528734635 | 0;
    this.Gl = 4215389547 | 0;
    this.Hh = 1541459225 | 0;
    this.Hl = 327033209 | 0;
  }
  // prettier-ignore
  get() {
    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
  }
  // prettier-ignore
  set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
    this.Ah = Ah | 0;
    this.Al = Al | 0;
    this.Bh = Bh | 0;
    this.Bl = Bl | 0;
    this.Ch = Ch | 0;
    this.Cl = Cl | 0;
    this.Dh = Dh | 0;
    this.Dl = Dl | 0;
    this.Eh = Eh | 0;
    this.El = El | 0;
    this.Fh = Fh | 0;
    this.Fl = Fl | 0;
    this.Gh = Gh | 0;
    this.Gl = Gl | 0;
    this.Hh = Hh | 0;
    this.Hl = Hl | 0;
  }
  process(view, offset) {
    for (let i = 0; i < 16; i++, offset += 4) {
      SHA512_W_H[i] = view.getUint32(offset);
      SHA512_W_L[i] = view.getUint32(offset += 4);
    }
    for (let i = 16; i < 80; i++) {
      const W15h = SHA512_W_H[i - 15] | 0;
      const W15l = SHA512_W_L[i - 15] | 0;
      const s0h = u64_default.rotrSH(W15h, W15l, 1) ^ u64_default.rotrSH(W15h, W15l, 8) ^ u64_default.shrSH(W15h, W15l, 7);
      const s0l = u64_default.rotrSL(W15h, W15l, 1) ^ u64_default.rotrSL(W15h, W15l, 8) ^ u64_default.shrSL(W15h, W15l, 7);
      const W2h = SHA512_W_H[i - 2] | 0;
      const W2l = SHA512_W_L[i - 2] | 0;
      const s1h = u64_default.rotrSH(W2h, W2l, 19) ^ u64_default.rotrBH(W2h, W2l, 61) ^ u64_default.shrSH(W2h, W2l, 6);
      const s1l = u64_default.rotrSL(W2h, W2l, 19) ^ u64_default.rotrBL(W2h, W2l, 61) ^ u64_default.shrSL(W2h, W2l, 6);
      const SUMl = u64_default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
      const SUMh = u64_default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
      SHA512_W_H[i] = SUMh | 0;
      SHA512_W_L[i] = SUMl | 0;
    }
    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    for (let i = 0; i < 80; i++) {
      const sigma1h = u64_default.rotrSH(Eh, El, 14) ^ u64_default.rotrSH(Eh, El, 18) ^ u64_default.rotrBH(Eh, El, 41);
      const sigma1l = u64_default.rotrSL(Eh, El, 14) ^ u64_default.rotrSL(Eh, El, 18) ^ u64_default.rotrBL(Eh, El, 41);
      const CHIh = Eh & Fh ^ ~Eh & Gh;
      const CHIl = El & Fl ^ ~El & Gl;
      const T1ll = u64_default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
      const T1h = u64_default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
      const T1l = T1ll | 0;
      const sigma0h = u64_default.rotrSH(Ah, Al, 28) ^ u64_default.rotrBH(Ah, Al, 34) ^ u64_default.rotrBH(Ah, Al, 39);
      const sigma0l = u64_default.rotrSL(Ah, Al, 28) ^ u64_default.rotrBL(Ah, Al, 34) ^ u64_default.rotrBL(Ah, Al, 39);
      const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
      const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
      Hh = Gh | 0;
      Hl = Gl | 0;
      Gh = Fh | 0;
      Gl = Fl | 0;
      Fh = Eh | 0;
      Fl = El | 0;
      ({ h: Eh, l: El } = u64_default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
      Dh = Ch | 0;
      Dl = Cl | 0;
      Ch = Bh | 0;
      Cl = Bl | 0;
      Bh = Ah | 0;
      Bl = Al | 0;
      const All = u64_default.add3L(T1l, sigma0l, MAJl);
      Ah = u64_default.add3H(All, T1h, sigma0h, MAJh);
      Al = All | 0;
    }
    ({ h: Ah, l: Al } = u64_default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
    ({ h: Bh, l: Bl } = u64_default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
    ({ h: Ch, l: Cl } = u64_default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
    ({ h: Dh, l: Dl } = u64_default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
    ({ h: Eh, l: El } = u64_default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
    ({ h: Fh, l: Fl } = u64_default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
    ({ h: Gh, l: Gl } = u64_default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
    ({ h: Hh, l: Hl } = u64_default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
  }
  roundClean() {
    SHA512_W_H.fill(0);
    SHA512_W_L.fill(0);
  }
  destroy() {
    this.buffer.fill(0);
    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());

// node_modules/ethers/lib.esm/crypto/crypto-browser.js
function getGlobal() {
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw new Error("unable to locate global object");
}
var anyGlobal = getGlobal();
var crypto2 = anyGlobal.crypto || anyGlobal.msCrypto;
function createHash(algo) {
  switch (algo) {
    case "sha256":
      return sha256.create();
    case "sha512":
      return sha512.create();
  }
  assertArgument(false, "invalid hashing algorithm name", "algorithm", algo);
}
function createHmac(_algo, key) {
  const algo = { sha256, sha512 }[_algo];
  assertArgument(algo != null, "invalid hmac algorithm", "algorithm", _algo);
  return hmac.create(algo, key);
}
function pbkdf2Sync(password, salt, iterations, keylen, _algo) {
  const algo = { sha256, sha512 }[_algo];
  assertArgument(algo != null, "invalid pbkdf2 algorithm", "algorithm", _algo);
  return pbkdf2(algo, password, salt, { c: iterations, dkLen: keylen });
}
function randomBytes2(length) {
  assert(crypto2 != null, "platform does not support secure random numbers", "UNSUPPORTED_OPERATION", {
    operation: "randomBytes"
  });
  assertArgument(Number.isInteger(length) && length > 0 && length <= 1024, "invalid length", "length", length);
  const result = new Uint8Array(length);
  crypto2.getRandomValues(result);
  return result;
}

// node_modules/ethers/lib.esm/crypto/hmac.js
var locked2 = false;
var _computeHmac = function(algorithm, key, data) {
  return createHmac(algorithm, key).update(data).digest();
};
var __computeHmac = _computeHmac;
function computeHmac(algorithm, _key, _data5) {
  const key = getBytes(_key, "key");
  const data = getBytes(_data5, "data");
  return hexlify(__computeHmac(algorithm, key, data));
}
computeHmac._ = _computeHmac;
computeHmac.lock = function() {
  locked2 = true;
};
computeHmac.register = function(func) {
  if (locked2) {
    throw new Error("computeHmac is locked");
  }
  __computeHmac = func;
};
Object.freeze(computeHmac);

// node_modules/@noble/hashes/esm/sha3.js
var [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];
var _0n = /* @__PURE__ */ BigInt(0);
var _1n = /* @__PURE__ */ BigInt(1);
var _2n = /* @__PURE__ */ BigInt(2);
var _7n = /* @__PURE__ */ BigInt(7);
var _256n = /* @__PURE__ */ BigInt(256);
var _0x71n = /* @__PURE__ */ BigInt(113);
for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {
  [x, y] = [y, (2 * x + 3 * y) % 5];
  SHA3_PI.push(2 * (5 * y + x));
  SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
  let t = _0n;
  for (let j = 0; j < 7; j++) {
    R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;
    if (R & _2n)
      t ^= _1n << (_1n << /* @__PURE__ */ BigInt(j)) - _1n;
  }
  _SHA3_IOTA.push(t);
}
var [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);
var rotlH = (h, l, s) => s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s);
var rotlL = (h, l, s) => s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s);
function keccakP(s, rounds = 24) {
  const B = new Uint32Array(5 * 2);
  for (let round = 24 - rounds; round < 24; round++) {
    for (let x = 0; x < 10; x++)
      B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
    for (let x = 0; x < 10; x += 2) {
      const idx1 = (x + 8) % 10;
      const idx0 = (x + 2) % 10;
      const B0 = B[idx0];
      const B1 = B[idx0 + 1];
      const Th = rotlH(B0, B1, 1) ^ B[idx1];
      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
      for (let y = 0; y < 50; y += 10) {
        s[x + y] ^= Th;
        s[x + y + 1] ^= Tl;
      }
    }
    let curH = s[2];
    let curL = s[3];
    for (let t = 0; t < 24; t++) {
      const shift = SHA3_ROTL[t];
      const Th = rotlH(curH, curL, shift);
      const Tl = rotlL(curH, curL, shift);
      const PI = SHA3_PI[t];
      curH = s[PI];
      curL = s[PI + 1];
      s[PI] = Th;
      s[PI + 1] = Tl;
    }
    for (let y = 0; y < 50; y += 10) {
      for (let x = 0; x < 10; x++)
        B[x] = s[y + x];
      for (let x = 0; x < 10; x++)
        s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
    }
    s[0] ^= SHA3_IOTA_H[round];
    s[1] ^= SHA3_IOTA_L[round];
  }
  B.fill(0);
}
var Keccak = class _Keccak extends Hash {
  // NOTE: we accept arguments in bytes instead of bits here.
  constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
    super();
    this.blockLen = blockLen;
    this.suffix = suffix;
    this.outputLen = outputLen;
    this.enableXOF = enableXOF;
    this.rounds = rounds;
    this.pos = 0;
    this.posOut = 0;
    this.finished = false;
    this.destroyed = false;
    number(outputLen);
    if (0 >= this.blockLen || this.blockLen >= 200)
      throw new Error("Sha3 supports only keccak-f1600 function");
    this.state = new Uint8Array(200);
    this.state32 = u32(this.state);
  }
  keccak() {
    keccakP(this.state32, this.rounds);
    this.posOut = 0;
    this.pos = 0;
  }
  update(data) {
    exists(this);
    const { blockLen, state } = this;
    data = toBytes(data);
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take = Math.min(blockLen - this.pos, len - pos);
      for (let i = 0; i < take; i++)
        state[this.pos++] ^= data[pos++];
      if (this.pos === blockLen)
        this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = true;
    const { state, suffix, pos, blockLen } = this;
    state[pos] ^= suffix;
    if ((suffix & 128) !== 0 && pos === blockLen - 1)
      this.keccak();
    state[blockLen - 1] ^= 128;
    this.keccak();
  }
  writeInto(out) {
    exists(this, false);
    bytes(out);
    this.finish();
    const bufferOut = this.state;
    const { blockLen } = this;
    for (let pos = 0, len = out.length; pos < len; ) {
      if (this.posOut >= blockLen)
        this.keccak();
      const take = Math.min(blockLen - this.posOut, len - pos);
      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
      this.posOut += take;
      pos += take;
    }
    return out;
  }
  xofInto(out) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(out);
  }
  xof(bytes2) {
    number(bytes2);
    return this.xofInto(new Uint8Array(bytes2));
  }
  digestInto(out) {
    output(out, this);
    if (this.finished)
      throw new Error("digest() was already called");
    this.writeInto(out);
    this.destroy();
    return out;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true;
    this.state.fill(0);
  }
  _cloneInto(to) {
    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
    to || (to = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
    to.state32.set(this.state32);
    to.pos = this.pos;
    to.posOut = this.posOut;
    to.finished = this.finished;
    to.rounds = rounds;
    to.suffix = suffix;
    to.outputLen = outputLen;
    to.enableXOF = enableXOF;
    to.destroyed = this.destroyed;
    return to;
  }
};
var gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));
var sha3_224 = /* @__PURE__ */ gen(6, 144, 224 / 8);
var sha3_256 = /* @__PURE__ */ gen(6, 136, 256 / 8);
var sha3_384 = /* @__PURE__ */ gen(6, 104, 384 / 8);
var sha3_512 = /* @__PURE__ */ gen(6, 72, 512 / 8);
var keccak_224 = /* @__PURE__ */ gen(1, 144, 224 / 8);
var keccak_256 = /* @__PURE__ */ gen(1, 136, 256 / 8);
var keccak_384 = /* @__PURE__ */ gen(1, 104, 384 / 8);
var keccak_512 = /* @__PURE__ */ gen(1, 72, 512 / 8);
var genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
var shake128 = /* @__PURE__ */ genShake(31, 168, 128 / 8);
var shake256 = /* @__PURE__ */ genShake(31, 136, 256 / 8);

// node_modules/ethers/lib.esm/crypto/keccak.js
var locked3 = false;
var _keccak256 = function(data) {
  return keccak_256(data);
};
var __keccak256 = _keccak256;
function keccak256(_data5) {
  const data = getBytes(_data5, "data");
  return hexlify(__keccak256(data));
}
keccak256._ = _keccak256;
keccak256.lock = function() {
  locked3 = true;
};
keccak256.register = function(func) {
  if (locked3) {
    throw new TypeError("keccak256 is locked");
  }
  __keccak256 = func;
};
Object.freeze(keccak256);

// node_modules/@noble/hashes/esm/ripemd160.js
var Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
var Id = /* @__PURE__ */ Uint8Array.from({ length: 16 }, (_, i) => i);
var Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);
var idxL = [Id];
var idxR = [Pi];
for (let i = 0; i < 4; i++)
  for (let j of [idxL, idxR])
    j.push(j[i].map((k) => Rho[k]));
var shifts = /* @__PURE__ */ [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((i) => new Uint8Array(i));
var shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts[i][j]));
var shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts[i][j]));
var Kl = /* @__PURE__ */ new Uint32Array([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]);
var Kr = /* @__PURE__ */ new Uint32Array([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
var rotl = (word, shift) => word << shift | word >>> 32 - shift;
function f(group, x, y, z) {
  if (group === 0)
    return x ^ y ^ z;
  else if (group === 1)
    return x & y | ~x & z;
  else if (group === 2)
    return (x | ~y) ^ z;
  else if (group === 3)
    return x & z | y & ~z;
  else
    return x ^ (y | ~z);
}
var BUF = /* @__PURE__ */ new Uint32Array(16);
var RIPEMD160 = class extends SHA2 {
  constructor() {
    super(64, 20, 8, true);
    this.h0 = 1732584193 | 0;
    this.h1 = 4023233417 | 0;
    this.h2 = 2562383102 | 0;
    this.h3 = 271733878 | 0;
    this.h4 = 3285377520 | 0;
  }
  get() {
    const { h0, h1, h2, h3, h4 } = this;
    return [h0, h1, h2, h3, h4];
  }
  set(h0, h1, h2, h3, h4) {
    this.h0 = h0 | 0;
    this.h1 = h1 | 0;
    this.h2 = h2 | 0;
    this.h3 = h3 | 0;
    this.h4 = h4 | 0;
  }
  process(view, offset) {
    for (let i = 0; i < 16; i++, offset += 4)
      BUF[i] = view.getUint32(offset, true);
    let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;
    for (let group = 0; group < 5; group++) {
      const rGroup = 4 - group;
      const hbl = Kl[group], hbr = Kr[group];
      const rl = idxL[group], rr = idxR[group];
      const sl = shiftsL[group], sr = shiftsR[group];
      for (let i = 0; i < 16; i++) {
        const tl = rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el | 0;
        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl;
      }
      for (let i = 0; i < 16; i++) {
        const tr = rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er | 0;
        ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr;
      }
    }
    this.set(this.h1 + cl + dr | 0, this.h2 + dl + er | 0, this.h3 + el + ar | 0, this.h4 + al + br | 0, this.h0 + bl + cr | 0);
  }
  roundClean() {
    BUF.fill(0);
  }
  destroy() {
    this.destroyed = true;
    this.buffer.fill(0);
    this.set(0, 0, 0, 0, 0);
  }
};
var ripemd160 = /* @__PURE__ */ wrapConstructor(() => new RIPEMD160());

// node_modules/ethers/lib.esm/crypto/ripemd160.js
var locked4 = false;
var _ripemd160 = function(data) {
  return ripemd160(data);
};
var __ripemd160 = _ripemd160;
function ripemd1602(_data5) {
  const data = getBytes(_data5, "data");
  return hexlify(__ripemd160(data));
}
ripemd1602._ = _ripemd160;
ripemd1602.lock = function() {
  locked4 = true;
};
ripemd1602.register = function(func) {
  if (locked4) {
    throw new TypeError("ripemd160 is locked");
  }
  __ripemd160 = func;
};
Object.freeze(ripemd1602);

// node_modules/ethers/lib.esm/crypto/pbkdf2.js
var locked5 = false;
var _pbkdf2 = function(password, salt, iterations, keylen, algo) {
  return pbkdf2Sync(password, salt, iterations, keylen, algo);
};
var __pbkdf2 = _pbkdf2;
function pbkdf22(_password, _salt, iterations, keylen, algo) {
  const password = getBytes(_password, "password");
  const salt = getBytes(_salt, "salt");
  return hexlify(__pbkdf2(password, salt, iterations, keylen, algo));
}
pbkdf22._ = _pbkdf2;
pbkdf22.lock = function() {
  locked5 = true;
};
pbkdf22.register = function(func) {
  if (locked5) {
    throw new Error("pbkdf2 is locked");
  }
  __pbkdf2 = func;
};
Object.freeze(pbkdf22);

// node_modules/ethers/lib.esm/crypto/random.js
var locked6 = false;
var _randomBytes = function(length) {
  return new Uint8Array(randomBytes2(length));
};
var __randomBytes = _randomBytes;
function randomBytes3(length) {
  return __randomBytes(length);
}
randomBytes3._ = _randomBytes;
randomBytes3.lock = function() {
  locked6 = true;
};
randomBytes3.register = function(func) {
  if (locked6) {
    throw new Error("randomBytes is locked");
  }
  __randomBytes = func;
};
Object.freeze(randomBytes3);

// node_modules/@noble/hashes/esm/scrypt.js
var rotl2 = (a, b2) => a << b2 | a >>> 32 - b2;
function XorAndSalsa(prev, pi, input, ii, out, oi) {
  let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];
  let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];
  let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];
  let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];
  let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];
  let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];
  let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];
  let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];
  let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
  for (let i = 0; i < 8; i += 2) {
    x04 ^= rotl2(x00 + x12 | 0, 7);
    x08 ^= rotl2(x04 + x00 | 0, 9);
    x12 ^= rotl2(x08 + x04 | 0, 13);
    x00 ^= rotl2(x12 + x08 | 0, 18);
    x09 ^= rotl2(x05 + x01 | 0, 7);
    x13 ^= rotl2(x09 + x05 | 0, 9);
    x01 ^= rotl2(x13 + x09 | 0, 13);
    x05 ^= rotl2(x01 + x13 | 0, 18);
    x14 ^= rotl2(x10 + x06 | 0, 7);
    x02 ^= rotl2(x14 + x10 | 0, 9);
    x06 ^= rotl2(x02 + x14 | 0, 13);
    x10 ^= rotl2(x06 + x02 | 0, 18);
    x03 ^= rotl2(x15 + x11 | 0, 7);
    x07 ^= rotl2(x03 + x15 | 0, 9);
    x11 ^= rotl2(x07 + x03 | 0, 13);
    x15 ^= rotl2(x11 + x07 | 0, 18);
    x01 ^= rotl2(x00 + x03 | 0, 7);
    x02 ^= rotl2(x01 + x00 | 0, 9);
    x03 ^= rotl2(x02 + x01 | 0, 13);
    x00 ^= rotl2(x03 + x02 | 0, 18);
    x06 ^= rotl2(x05 + x04 | 0, 7);
    x07 ^= rotl2(x06 + x05 | 0, 9);
    x04 ^= rotl2(x07 + x06 | 0, 13);
    x05 ^= rotl2(x04 + x07 | 0, 18);
    x11 ^= rotl2(x10 + x09 | 0, 7);
    x08 ^= rotl2(x11 + x10 | 0, 9);
    x09 ^= rotl2(x08 + x11 | 0, 13);
    x10 ^= rotl2(x09 + x08 | 0, 18);
    x12 ^= rotl2(x15 + x14 | 0, 7);
    x13 ^= rotl2(x12 + x15 | 0, 9);
    x14 ^= rotl2(x13 + x12 | 0, 13);
    x15 ^= rotl2(x14 + x13 | 0, 18);
  }
  out[oi++] = y00 + x00 | 0;
  out[oi++] = y01 + x01 | 0;
  out[oi++] = y02 + x02 | 0;
  out[oi++] = y03 + x03 | 0;
  out[oi++] = y04 + x04 | 0;
  out[oi++] = y05 + x05 | 0;
  out[oi++] = y06 + x06 | 0;
  out[oi++] = y07 + x07 | 0;
  out[oi++] = y08 + x08 | 0;
  out[oi++] = y09 + x09 | 0;
  out[oi++] = y10 + x10 | 0;
  out[oi++] = y11 + x11 | 0;
  out[oi++] = y12 + x12 | 0;
  out[oi++] = y13 + x13 | 0;
  out[oi++] = y14 + x14 | 0;
  out[oi++] = y15 + x15 | 0;
}
function BlockMix(input, ii, out, oi, r) {
  let head = oi + 0;
  let tail = oi + 16 * r;
  for (let i = 0; i < 16; i++)
    out[tail + i] = input[ii + (2 * r - 1) * 16 + i];
  for (let i = 0; i < r; i++, head += 16, ii += 16) {
    XorAndSalsa(out, tail, input, ii, out, head);
    if (i > 0)
      tail += 16;
    XorAndSalsa(out, head, input, ii += 16, out, tail);
  }
}
function scryptInit(password, salt, _opts) {
  const opts = checkOpts({
    dkLen: 32,
    asyncTick: 10,
    maxmem: 1024 ** 3 + 1024
  }, _opts);
  const { N: N3, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;
  number(N3);
  number(r);
  number(p);
  number(dkLen);
  number(asyncTick);
  number(maxmem);
  if (onProgress !== void 0 && typeof onProgress !== "function")
    throw new Error("progressCb should be function");
  const blockSize = 128 * r;
  const blockSize32 = blockSize / 4;
  if (N3 <= 1 || (N3 & N3 - 1) !== 0 || N3 >= 2 ** (blockSize / 8) || N3 > 2 ** 32) {
    throw new Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");
  }
  if (p < 0 || p > (2 ** 32 - 1) * 32 / blockSize) {
    throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");
  }
  if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {
    throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");
  }
  const memUsed = blockSize * (N3 + p);
  if (memUsed > maxmem) {
    throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);
  }
  const B = pbkdf2(sha256, password, salt, { c: 1, dkLen: blockSize * p });
  const B32 = u32(B);
  const V = u32(new Uint8Array(blockSize * N3));
  const tmp = u32(new Uint8Array(blockSize));
  let blockMixCb = () => {
  };
  if (onProgress) {
    const totalBlockMix = 2 * N3 * p;
    const callbackPer = Math.max(Math.floor(totalBlockMix / 1e4), 1);
    let blockMixCnt = 0;
    blockMixCb = () => {
      blockMixCnt++;
      if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))
        onProgress(blockMixCnt / totalBlockMix);
    };
  }
  return { N: N3, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };
}
function scryptOutput(password, dkLen, B, V, tmp) {
  const res = pbkdf2(sha256, password, B, { c: 1, dkLen });
  B.fill(0);
  V.fill(0);
  tmp.fill(0);
  return res;
}
function scrypt(password, salt, opts) {
  const { N: N3, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);
  for (let pi = 0; pi < p; pi++) {
    const Pi2 = blockSize32 * pi;
    for (let i = 0; i < blockSize32; i++)
      V[i] = B32[Pi2 + i];
    for (let i = 0, pos = 0; i < N3 - 1; i++) {
      BlockMix(V, pos, V, pos += blockSize32, r);
      blockMixCb();
    }
    BlockMix(V, (N3 - 1) * blockSize32, B32, Pi2, r);
    blockMixCb();
    for (let i = 0; i < N3; i++) {
      const j = B32[Pi2 + blockSize32 - 16] % N3;
      for (let k = 0; k < blockSize32; k++)
        tmp[k] = B32[Pi2 + k] ^ V[j * blockSize32 + k];
      BlockMix(tmp, 0, B32, Pi2, r);
      blockMixCb();
    }
  }
  return scryptOutput(password, dkLen, B, V, tmp);
}
async function scryptAsync(password, salt, opts) {
  const { N: N3, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);
  for (let pi = 0; pi < p; pi++) {
    const Pi2 = blockSize32 * pi;
    for (let i = 0; i < blockSize32; i++)
      V[i] = B32[Pi2 + i];
    let pos = 0;
    await asyncLoop(N3 - 1, asyncTick, () => {
      BlockMix(V, pos, V, pos += blockSize32, r);
      blockMixCb();
    });
    BlockMix(V, (N3 - 1) * blockSize32, B32, Pi2, r);
    blockMixCb();
    await asyncLoop(N3, asyncTick, () => {
      const j = B32[Pi2 + blockSize32 - 16] % N3;
      for (let k = 0; k < blockSize32; k++)
        tmp[k] = B32[Pi2 + k] ^ V[j * blockSize32 + k];
      BlockMix(tmp, 0, B32, Pi2, r);
      blockMixCb();
    });
  }
  return scryptOutput(password, dkLen, B, V, tmp);
}

// node_modules/ethers/lib.esm/crypto/scrypt.js
var lockedSync = false;
var lockedAsync = false;
var _scryptAsync = async function(passwd, salt, N3, r, p, dkLen, onProgress) {
  return await scryptAsync(passwd, salt, { N: N3, r, p, dkLen, onProgress });
};
var _scryptSync = function(passwd, salt, N3, r, p, dkLen) {
  return scrypt(passwd, salt, { N: N3, r, p, dkLen });
};
var __scryptAsync = _scryptAsync;
var __scryptSync = _scryptSync;
async function scrypt2(_passwd, _salt, N3, r, p, dkLen, progress) {
  const passwd = getBytes(_passwd, "passwd");
  const salt = getBytes(_salt, "salt");
  return hexlify(await __scryptAsync(passwd, salt, N3, r, p, dkLen, progress));
}
scrypt2._ = _scryptAsync;
scrypt2.lock = function() {
  lockedAsync = true;
};
scrypt2.register = function(func) {
  if (lockedAsync) {
    throw new Error("scrypt is locked");
  }
  __scryptAsync = func;
};
Object.freeze(scrypt2);
function scryptSync(_passwd, _salt, N3, r, p, dkLen) {
  const passwd = getBytes(_passwd, "passwd");
  const salt = getBytes(_salt, "salt");
  return hexlify(__scryptSync(passwd, salt, N3, r, p, dkLen));
}
scryptSync._ = _scryptSync;
scryptSync.lock = function() {
  lockedSync = true;
};
scryptSync.register = function(func) {
  if (lockedSync) {
    throw new Error("scryptSync is locked");
  }
  __scryptSync = func;
};
Object.freeze(scryptSync);

// node_modules/ethers/lib.esm/crypto/sha2.js
var _sha256 = function(data) {
  return createHash("sha256").update(data).digest();
};
var _sha512 = function(data) {
  return createHash("sha512").update(data).digest();
};
var __sha256 = _sha256;
var __sha512 = _sha512;
var locked256 = false;
var locked512 = false;
function sha2562(_data5) {
  const data = getBytes(_data5, "data");
  return hexlify(__sha256(data));
}
sha2562._ = _sha256;
sha2562.lock = function() {
  locked256 = true;
};
sha2562.register = function(func) {
  if (locked256) {
    throw new Error("sha256 is locked");
  }
  __sha256 = func;
};
Object.freeze(sha2562);
function sha5122(_data5) {
  const data = getBytes(_data5, "data");
  return hexlify(__sha512(data));
}
sha5122._ = _sha512;
sha5122.lock = function() {
  locked512 = true;
};
sha5122.register = function(func) {
  if (locked512) {
    throw new Error("sha512 is locked");
  }
  __sha512 = func;
};
Object.freeze(sha2562);

// node_modules/ethers/node_modules/@noble/curves/esm/abstract/utils.js
var utils_exports = {};
__export(utils_exports, {
  bitGet: () => bitGet,
  bitLen: () => bitLen,
  bitMask: () => bitMask,
  bitSet: () => bitSet,
  bytesToHex: () => bytesToHex,
  bytesToNumberBE: () => bytesToNumberBE,
  bytesToNumberLE: () => bytesToNumberLE,
  concatBytes: () => concatBytes2,
  createHmacDrbg: () => createHmacDrbg,
  ensureBytes: () => ensureBytes,
  equalBytes: () => equalBytes,
  hexToBytes: () => hexToBytes,
  hexToNumber: () => hexToNumber,
  numberToBytesBE: () => numberToBytesBE,
  numberToBytesLE: () => numberToBytesLE,
  numberToHexUnpadded: () => numberToHexUnpadded,
  numberToVarBytesBE: () => numberToVarBytesBE,
  utf8ToBytes: () => utf8ToBytes2,
  validateObject: () => validateObject
});
var _0n2 = BigInt(0);
var _1n2 = BigInt(1);
var _2n2 = BigInt(2);
var u8a2 = (a) => a instanceof Uint8Array;
var hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
function bytesToHex(bytes2) {
  if (!u8a2(bytes2))
    throw new Error("Uint8Array expected");
  let hex = "";
  for (let i = 0; i < bytes2.length; i++) {
    hex += hexes[bytes2[i]];
  }
  return hex;
}
function numberToHexUnpadded(num) {
  const hex = num.toString(16);
  return hex.length & 1 ? `0${hex}` : hex;
}
function hexToNumber(hex) {
  if (typeof hex !== "string")
    throw new Error("hex string expected, got " + typeof hex);
  return BigInt(hex === "" ? "0" : `0x${hex}`);
}
function hexToBytes(hex) {
  if (typeof hex !== "string")
    throw new Error("hex string expected, got " + typeof hex);
  const len = hex.length;
  if (len % 2)
    throw new Error("padded hex string expected, got unpadded hex of length " + len);
  const array = new Uint8Array(len / 2);
  for (let i = 0; i < array.length; i++) {
    const j = i * 2;
    const hexByte = hex.slice(j, j + 2);
    const byte = Number.parseInt(hexByte, 16);
    if (Number.isNaN(byte) || byte < 0)
      throw new Error("Invalid byte sequence");
    array[i] = byte;
  }
  return array;
}
function bytesToNumberBE(bytes2) {
  return hexToNumber(bytesToHex(bytes2));
}
function bytesToNumberLE(bytes2) {
  if (!u8a2(bytes2))
    throw new Error("Uint8Array expected");
  return hexToNumber(bytesToHex(Uint8Array.from(bytes2).reverse()));
}
function numberToBytesBE(n2, len) {
  return hexToBytes(n2.toString(16).padStart(len * 2, "0"));
}
function numberToBytesLE(n2, len) {
  return numberToBytesBE(n2, len).reverse();
}
function numberToVarBytesBE(n2) {
  return hexToBytes(numberToHexUnpadded(n2));
}
function ensureBytes(title, hex, expectedLength) {
  let res;
  if (typeof hex === "string") {
    try {
      res = hexToBytes(hex);
    } catch (e) {
      throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`);
    }
  } else if (u8a2(hex)) {
    res = Uint8Array.from(hex);
  } else {
    throw new Error(`${title} must be hex string or Uint8Array`);
  }
  const len = res.length;
  if (typeof expectedLength === "number" && len !== expectedLength)
    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
  return res;
}
function concatBytes2(...arrays) {
  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
  let pad = 0;
  arrays.forEach((a) => {
    if (!u8a2(a))
      throw new Error("Uint8Array expected");
    r.set(a, pad);
    pad += a.length;
  });
  return r;
}
function equalBytes(b1, b2) {
  if (b1.length !== b2.length)
    return false;
  for (let i = 0; i < b1.length; i++)
    if (b1[i] !== b2[i])
      return false;
  return true;
}
function utf8ToBytes2(str) {
  if (typeof str !== "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
  return new Uint8Array(new TextEncoder().encode(str));
}
function bitLen(n2) {
  let len;
  for (len = 0; n2 > _0n2; n2 >>= _1n2, len += 1)
    ;
  return len;
}
function bitGet(n2, pos) {
  return n2 >> BigInt(pos) & _1n2;
}
var bitSet = (n2, pos, value) => {
  return n2 | (value ? _1n2 : _0n2) << BigInt(pos);
};
var bitMask = (n2) => (_2n2 << BigInt(n2 - 1)) - _1n2;
var u8n = (data) => new Uint8Array(data);
var u8fr = (arr) => Uint8Array.from(arr);
function createHmacDrbg(hashLen, qByteLen, hmacFn) {
  if (typeof hashLen !== "number" || hashLen < 2)
    throw new Error("hashLen must be a number");
  if (typeof qByteLen !== "number" || qByteLen < 2)
    throw new Error("qByteLen must be a number");
  if (typeof hmacFn !== "function")
    throw new Error("hmacFn must be a function");
  let v = u8n(hashLen);
  let k = u8n(hashLen);
  let i = 0;
  const reset = () => {
    v.fill(1);
    k.fill(0);
    i = 0;
  };
  const h = (...b2) => hmacFn(k, v, ...b2);
  const reseed = (seed = u8n()) => {
    k = h(u8fr([0]), seed);
    v = h();
    if (seed.length === 0)
      return;
    k = h(u8fr([1]), seed);
    v = h();
  };
  const gen2 = () => {
    if (i++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let len = 0;
    const out = [];
    while (len < qByteLen) {
      v = h();
      const sl = v.slice();
      out.push(sl);
      len += v.length;
    }
    return concatBytes2(...out);
  };
  const genUntil = (seed, pred) => {
    reset();
    reseed(seed);
    let res = void 0;
    while (!(res = pred(gen2())))
      reseed();
    reset();
    return res;
  };
  return genUntil;
}
var validatorFns = {
  bigint: (val) => typeof val === "bigint",
  function: (val) => typeof val === "function",
  boolean: (val) => typeof val === "boolean",
  string: (val) => typeof val === "string",
  stringOrUint8Array: (val) => typeof val === "string" || val instanceof Uint8Array,
  isSafeInteger: (val) => Number.isSafeInteger(val),
  array: (val) => Array.isArray(val),
  field: (val, object2) => object2.Fp.isValid(val),
  hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
};
function validateObject(object2, validators, optValidators = {}) {
  const checkField = (fieldName, type, isOptional) => {
    const checkVal = validatorFns[type];
    if (typeof checkVal !== "function")
      throw new Error(`Invalid validator "${type}", expected function`);
    const val = object2[fieldName];
    if (isOptional && val === void 0)
      return;
    if (!checkVal(val, object2)) {
      throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
    }
  };
  for (const [fieldName, type] of Object.entries(validators))
    checkField(fieldName, type, false);
  for (const [fieldName, type] of Object.entries(optValidators))
    checkField(fieldName, type, true);
  return object2;
}

// node_modules/ethers/node_modules/@noble/curves/esm/abstract/modular.js
var _0n3 = BigInt(0);
var _1n3 = BigInt(1);
var _2n3 = BigInt(2);
var _3n = BigInt(3);
var _4n = BigInt(4);
var _5n = BigInt(5);
var _8n = BigInt(8);
var _9n = BigInt(9);
var _16n = BigInt(16);
function mod(a, b2) {
  const result = a % b2;
  return result >= _0n3 ? result : b2 + result;
}
function pow(num, power, modulo) {
  if (modulo <= _0n3 || power < _0n3)
    throw new Error("Expected power/modulo > 0");
  if (modulo === _1n3)
    return _0n3;
  let res = _1n3;
  while (power > _0n3) {
    if (power & _1n3)
      res = res * num % modulo;
    num = num * num % modulo;
    power >>= _1n3;
  }
  return res;
}
function pow2(x, power, modulo) {
  let res = x;
  while (power-- > _0n3) {
    res *= res;
    res %= modulo;
  }
  return res;
}
function invert(number2, modulo) {
  if (number2 === _0n3 || modulo <= _0n3) {
    throw new Error(`invert: expected positive integers, got n=${number2} mod=${modulo}`);
  }
  let a = mod(number2, modulo);
  let b2 = modulo;
  let x = _0n3, y = _1n3, u = _1n3, v = _0n3;
  while (a !== _0n3) {
    const q = b2 / a;
    const r = b2 % a;
    const m = x - u * q;
    const n2 = y - v * q;
    b2 = a, a = r, x = u, y = v, u = m, v = n2;
  }
  const gcd = b2;
  if (gcd !== _1n3)
    throw new Error("invert: does not exist");
  return mod(x, modulo);
}
function tonelliShanks(P) {
  const legendreC = (P - _1n3) / _2n3;
  let Q, S2, Z;
  for (Q = P - _1n3, S2 = 0; Q % _2n3 === _0n3; Q /= _2n3, S2++)
    ;
  for (Z = _2n3; Z < P && pow(Z, legendreC, P) !== P - _1n3; Z++)
    ;
  if (S2 === 1) {
    const p1div4 = (P + _1n3) / _4n;
    return function tonelliFast(Fp2, n2) {
      const root = Fp2.pow(n2, p1div4);
      if (!Fp2.eql(Fp2.sqr(root), n2))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  const Q1div2 = (Q + _1n3) / _2n3;
  return function tonelliSlow(Fp2, n2) {
    if (Fp2.pow(n2, legendreC) === Fp2.neg(Fp2.ONE))
      throw new Error("Cannot find square root");
    let r = S2;
    let g = Fp2.pow(Fp2.mul(Fp2.ONE, Z), Q);
    let x = Fp2.pow(n2, Q1div2);
    let b2 = Fp2.pow(n2, Q);
    while (!Fp2.eql(b2, Fp2.ONE)) {
      if (Fp2.eql(b2, Fp2.ZERO))
        return Fp2.ZERO;
      let m = 1;
      for (let t2 = Fp2.sqr(b2); m < r; m++) {
        if (Fp2.eql(t2, Fp2.ONE))
          break;
        t2 = Fp2.sqr(t2);
      }
      const ge = Fp2.pow(g, _1n3 << BigInt(r - m - 1));
      g = Fp2.sqr(ge);
      x = Fp2.mul(x, ge);
      b2 = Fp2.mul(b2, g);
      r = m;
    }
    return x;
  };
}
function FpSqrt(P) {
  if (P % _4n === _3n) {
    const p1div4 = (P + _1n3) / _4n;
    return function sqrt3mod4(Fp2, n2) {
      const root = Fp2.pow(n2, p1div4);
      if (!Fp2.eql(Fp2.sqr(root), n2))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  if (P % _8n === _5n) {
    const c1 = (P - _5n) / _8n;
    return function sqrt5mod8(Fp2, n2) {
      const n22 = Fp2.mul(n2, _2n3);
      const v = Fp2.pow(n22, c1);
      const nv = Fp2.mul(n2, v);
      const i = Fp2.mul(Fp2.mul(nv, _2n3), v);
      const root = Fp2.mul(nv, Fp2.sub(i, Fp2.ONE));
      if (!Fp2.eql(Fp2.sqr(root), n2))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  if (P % _16n === _9n) {
  }
  return tonelliShanks(P);
}
var FIELD_FIELDS = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function validateField(field) {
  const initial = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "isSafeInteger",
    BITS: "isSafeInteger"
  };
  const opts = FIELD_FIELDS.reduce((map, val) => {
    map[val] = "function";
    return map;
  }, initial);
  return validateObject(field, opts);
}
function FpPow(f2, num, power) {
  if (power < _0n3)
    throw new Error("Expected power > 0");
  if (power === _0n3)
    return f2.ONE;
  if (power === _1n3)
    return num;
  let p = f2.ONE;
  let d = num;
  while (power > _0n3) {
    if (power & _1n3)
      p = f2.mul(p, d);
    d = f2.sqr(d);
    power >>= _1n3;
  }
  return p;
}
function FpInvertBatch(f2, nums) {
  const tmp = new Array(nums.length);
  const lastMultiplied = nums.reduce((acc, num, i) => {
    if (f2.is0(num))
      return acc;
    tmp[i] = acc;
    return f2.mul(acc, num);
  }, f2.ONE);
  const inverted = f2.inv(lastMultiplied);
  nums.reduceRight((acc, num, i) => {
    if (f2.is0(num))
      return acc;
    tmp[i] = f2.mul(acc, tmp[i]);
    return f2.mul(acc, num);
  }, inverted);
  return tmp;
}
function nLength(n2, nBitLength) {
  const _nBitLength = nBitLength !== void 0 ? nBitLength : n2.toString(2).length;
  const nByteLength = Math.ceil(_nBitLength / 8);
  return { nBitLength: _nBitLength, nByteLength };
}
function Field(ORDER, bitLen2, isLE2 = false, redef = {}) {
  if (ORDER <= _0n3)
    throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen2);
  if (BYTES > 2048)
    throw new Error("Field lengths over 2048 bytes are not supported");
  const sqrtP = FpSqrt(ORDER);
  const f2 = Object.freeze({
    ORDER,
    BITS,
    BYTES,
    MASK: bitMask(BITS),
    ZERO: _0n3,
    ONE: _1n3,
    create: (num) => mod(num, ORDER),
    isValid: (num) => {
      if (typeof num !== "bigint")
        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
      return _0n3 <= num && num < ORDER;
    },
    is0: (num) => num === _0n3,
    isOdd: (num) => (num & _1n3) === _1n3,
    neg: (num) => mod(-num, ORDER),
    eql: (lhs, rhs) => lhs === rhs,
    sqr: (num) => mod(num * num, ORDER),
    add: (lhs, rhs) => mod(lhs + rhs, ORDER),
    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
    pow: (num, power) => FpPow(f2, num, power),
    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
    // Same as above, but doesn't normalize
    sqrN: (num) => num * num,
    addN: (lhs, rhs) => lhs + rhs,
    subN: (lhs, rhs) => lhs - rhs,
    mulN: (lhs, rhs) => lhs * rhs,
    inv: (num) => invert(num, ORDER),
    sqrt: redef.sqrt || ((n2) => sqrtP(f2, n2)),
    invertBatch: (lst) => FpInvertBatch(f2, lst),
    // TODO: do we really need constant cmov?
    // We don't have const-time bigints anyway, so probably will be not very useful
    cmov: (a, b2, c) => c ? b2 : a,
    toBytes: (num) => isLE2 ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES),
    fromBytes: (bytes2) => {
      if (bytes2.length !== BYTES)
        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes2.length}`);
      return isLE2 ? bytesToNumberLE(bytes2) : bytesToNumberBE(bytes2);
    }
  });
  return Object.freeze(f2);
}
function getFieldBytesLength(fieldOrder) {
  if (typeof fieldOrder !== "bigint")
    throw new Error("field order must be bigint");
  const bitLength = fieldOrder.toString(2).length;
  return Math.ceil(bitLength / 8);
}
function getMinHashLength(fieldOrder) {
  const length = getFieldBytesLength(fieldOrder);
  return length + Math.ceil(length / 2);
}
function mapHashToField(key, fieldOrder, isLE2 = false) {
  const len = key.length;
  const fieldLen = getFieldBytesLength(fieldOrder);
  const minLen = getMinHashLength(fieldOrder);
  if (len < 16 || len < minLen || len > 1024)
    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
  const num = isLE2 ? bytesToNumberBE(key) : bytesToNumberLE(key);
  const reduced = mod(num, fieldOrder - _1n3) + _1n3;
  return isLE2 ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);
}

// node_modules/ethers/node_modules/@noble/curves/esm/abstract/curve.js
var _0n4 = BigInt(0);
var _1n4 = BigInt(1);
function wNAF(c, bits) {
  const constTimeNegate = (condition, item) => {
    const neg = item.negate();
    return condition ? neg : item;
  };
  const opts = (W) => {
    const windows = Math.ceil(bits / W) + 1;
    const windowSize = 2 ** (W - 1);
    return { windows, windowSize };
  };
  return {
    constTimeNegate,
    // non-const time multiplication ladder
    unsafeLadder(elm, n2) {
      let p = c.ZERO;
      let d = elm;
      while (n2 > _0n4) {
        if (n2 & _1n4)
          p = p.add(d);
        d = d.double();
        n2 >>= _1n4;
      }
      return p;
    },
    /**
     * Creates a wNAF precomputation window. Used for caching.
     * Default window size is set by `utils.precompute()` and is equal to 8.
     * Number of precomputed points depends on the curve size:
     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
     * - 𝑊 is the window size
     * - 𝑛 is the bitlength of the curve order.
     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
     * @returns precomputed point tables flattened to a single array
     */
    precomputeWindow(elm, W) {
      const { windows, windowSize } = opts(W);
      const points = [];
      let p = elm;
      let base = p;
      for (let window2 = 0; window2 < windows; window2++) {
        base = p;
        points.push(base);
        for (let i = 1; i < windowSize; i++) {
          base = base.add(p);
          points.push(base);
        }
        p = base.double();
      }
      return points;
    },
    /**
     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @returns real and fake (for const-time) points
     */
    wNAF(W, precomputes, n2) {
      const { windows, windowSize } = opts(W);
      let p = c.ZERO;
      let f2 = c.BASE;
      const mask2 = BigInt(2 ** W - 1);
      const maxNumber = 2 ** W;
      const shiftBy = BigInt(W);
      for (let window2 = 0; window2 < windows; window2++) {
        const offset = window2 * windowSize;
        let wbits = Number(n2 & mask2);
        n2 >>= shiftBy;
        if (wbits > windowSize) {
          wbits -= maxNumber;
          n2 += _1n4;
        }
        const offset1 = offset;
        const offset2 = offset + Math.abs(wbits) - 1;
        const cond1 = window2 % 2 !== 0;
        const cond2 = wbits < 0;
        if (wbits === 0) {
          f2 = f2.add(constTimeNegate(cond1, precomputes[offset1]));
        } else {
          p = p.add(constTimeNegate(cond2, precomputes[offset2]));
        }
      }
      return { p, f: f2 };
    },
    wNAFCached(P, precomputesMap, n2, transform) {
      const W = P._WINDOW_SIZE || 1;
      let comp = precomputesMap.get(P);
      if (!comp) {
        comp = this.precomputeWindow(P, W);
        if (W !== 1) {
          precomputesMap.set(P, transform(comp));
        }
      }
      return this.wNAF(W, comp, n2);
    }
  };
}
function validateBasic(curve) {
  validateField(curve.Fp);
  validateObject(curve, {
    n: "bigint",
    h: "bigint",
    Gx: "field",
    Gy: "field"
  }, {
    nBitLength: "isSafeInteger",
    nByteLength: "isSafeInteger"
  });
  return Object.freeze({
    ...nLength(curve.n, curve.nBitLength),
    ...curve,
    ...{ p: curve.Fp.ORDER }
  });
}

// node_modules/ethers/node_modules/@noble/curves/esm/abstract/weierstrass.js
function validatePointOpts(curve) {
  const opts = validateBasic(curve);
  validateObject(opts, {
    a: "field",
    b: "field"
  }, {
    allowedPrivateKeyLengths: "array",
    wrapPrivateKey: "boolean",
    isTorsionFree: "function",
    clearCofactor: "function",
    allowInfinityPoint: "boolean",
    fromBytes: "function",
    toBytes: "function"
  });
  const { endo, Fp: Fp2, a } = opts;
  if (endo) {
    if (!Fp2.eql(a, Fp2.ZERO)) {
      throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
    }
    if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
      throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
    }
  }
  return Object.freeze({ ...opts });
}
var { bytesToNumberBE: b2n, hexToBytes: h2b } = utils_exports;
var DER = {
  // asn.1 DER encoding utils
  Err: class DERErr extends Error {
    constructor(m = "") {
      super(m);
    }
  },
  _parseInt(data) {
    const { Err: E } = DER;
    if (data.length < 2 || data[0] !== 2)
      throw new E("Invalid signature integer tag");
    const len = data[1];
    const res = data.subarray(2, len + 2);
    if (!len || res.length !== len)
      throw new E("Invalid signature integer: wrong length");
    if (res[0] & 128)
      throw new E("Invalid signature integer: negative");
    if (res[0] === 0 && !(res[1] & 128))
      throw new E("Invalid signature integer: unnecessary leading zero");
    return { d: b2n(res), l: data.subarray(len + 2) };
  },
  toSig(hex) {
    const { Err: E } = DER;
    const data = typeof hex === "string" ? h2b(hex) : hex;
    if (!(data instanceof Uint8Array))
      throw new Error("ui8a expected");
    let l = data.length;
    if (l < 2 || data[0] != 48)
      throw new E("Invalid signature tag");
    if (data[1] !== l - 2)
      throw new E("Invalid signature: incorrect length");
    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));
    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);
    if (rBytesLeft.length)
      throw new E("Invalid signature: left bytes after parsing");
    return { r, s };
  },
  hexFromSig(sig) {
    const slice = (s2) => Number.parseInt(s2[0], 16) & 8 ? "00" + s2 : s2;
    const h = (num) => {
      const hex = num.toString(16);
      return hex.length & 1 ? `0${hex}` : hex;
    };
    const s = slice(h(sig.s));
    const r = slice(h(sig.r));
    const shl = s.length / 2;
    const rhl = r.length / 2;
    const sl = h(shl);
    const rl = h(rhl);
    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
  }
};
var _0n5 = BigInt(0);
var _1n5 = BigInt(1);
var _2n4 = BigInt(2);
var _3n2 = BigInt(3);
var _4n2 = BigInt(4);
function weierstrassPoints(opts) {
  const CURVE = validatePointOpts(opts);
  const { Fp: Fp2 } = CURVE;
  const toBytes2 = CURVE.toBytes || ((_c, point, _isCompressed) => {
    const a = point.toAffine();
    return concatBytes2(Uint8Array.from([4]), Fp2.toBytes(a.x), Fp2.toBytes(a.y));
  });
  const fromBytes = CURVE.fromBytes || ((bytes2) => {
    const tail = bytes2.subarray(1);
    const x = Fp2.fromBytes(tail.subarray(0, Fp2.BYTES));
    const y = Fp2.fromBytes(tail.subarray(Fp2.BYTES, 2 * Fp2.BYTES));
    return { x, y };
  });
  function weierstrassEquation(x) {
    const { a, b: b2 } = CURVE;
    const x2 = Fp2.sqr(x);
    const x3 = Fp2.mul(x2, x);
    return Fp2.add(Fp2.add(x3, Fp2.mul(x, a)), b2);
  }
  if (!Fp2.eql(Fp2.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
    throw new Error("bad generator point: equation left != right");
  function isWithinCurveOrder(num) {
    return typeof num === "bigint" && _0n5 < num && num < CURVE.n;
  }
  function assertGE(num) {
    if (!isWithinCurveOrder(num))
      throw new Error("Expected valid bigint: 0 < bigint < curve.n");
  }
  function normPrivateKeyToScalar(key) {
    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: n2 } = CURVE;
    if (lengths && typeof key !== "bigint") {
      if (key instanceof Uint8Array)
        key = bytesToHex(key);
      if (typeof key !== "string" || !lengths.includes(key.length))
        throw new Error("Invalid key");
      key = key.padStart(nByteLength * 2, "0");
    }
    let num;
    try {
      num = typeof key === "bigint" ? key : bytesToNumberBE(ensureBytes("private key", key, nByteLength));
    } catch (error) {
      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
    }
    if (wrapPrivateKey)
      num = mod(num, n2);
    assertGE(num);
    return num;
  }
  const pointPrecomputes = /* @__PURE__ */ new Map();
  function assertPrjPoint(other) {
    if (!(other instanceof Point2))
      throw new Error("ProjectivePoint expected");
  }
  class Point2 {
    constructor(px, py, pz) {
      this.px = px;
      this.py = py;
      this.pz = pz;
      if (px == null || !Fp2.isValid(px))
        throw new Error("x required");
      if (py == null || !Fp2.isValid(py))
        throw new Error("y required");
      if (pz == null || !Fp2.isValid(pz))
        throw new Error("z required");
    }
    // Does not validate if the point is on-curve.
    // Use fromHex instead, or call assertValidity() later.
    static fromAffine(p) {
      const { x, y } = p || {};
      if (!p || !Fp2.isValid(x) || !Fp2.isValid(y))
        throw new Error("invalid affine point");
      if (p instanceof Point2)
        throw new Error("projective point not allowed");
      const is0 = (i) => Fp2.eql(i, Fp2.ZERO);
      if (is0(x) && is0(y))
        return Point2.ZERO;
      return new Point2(x, y, Fp2.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    /**
     * Takes a bunch of Projective Points but executes only one
     * inversion on all of them. Inversion is very slow operation,
     * so this improves performance massively.
     * Optimization: converts a list of projective points to a list of identical points with Z=1.
     */
    static normalizeZ(points) {
      const toInv = Fp2.invertBatch(points.map((p) => p.pz));
      return points.map((p, i) => p.toAffine(toInv[i])).map(Point2.fromAffine);
    }
    /**
     * Converts hash string or Uint8Array to Point.
     * @param hex short/long ECDSA hex
     */
    static fromHex(hex) {
      const P = Point2.fromAffine(fromBytes(ensureBytes("pointHex", hex)));
      P.assertValidity();
      return P;
    }
    // Multiplies generator point by privateKey.
    static fromPrivateKey(privateKey) {
      return Point2.BASE.multiply(normPrivateKeyToScalar(privateKey));
    }
    // "Private method", don't use it directly
    _setWindowSize(windowSize) {
      this._WINDOW_SIZE = windowSize;
      pointPrecomputes.delete(this);
    }
    // A point on curve is valid if it conforms to equation.
    assertValidity() {
      if (this.is0()) {
        if (CURVE.allowInfinityPoint && !Fp2.is0(this.py))
          return;
        throw new Error("bad point: ZERO");
      }
      const { x, y } = this.toAffine();
      if (!Fp2.isValid(x) || !Fp2.isValid(y))
        throw new Error("bad point: x or y not FE");
      const left = Fp2.sqr(y);
      const right = weierstrassEquation(x);
      if (!Fp2.eql(left, right))
        throw new Error("bad point: equation left != right");
      if (!this.isTorsionFree())
        throw new Error("bad point: not in prime-order subgroup");
    }
    hasEvenY() {
      const { y } = this.toAffine();
      if (Fp2.isOdd)
        return !Fp2.isOdd(y);
      throw new Error("Field doesn't support isOdd");
    }
    /**
     * Compare one point to another.
     */
    equals(other) {
      assertPrjPoint(other);
      const { px: X1, py: Y1, pz: Z1 } = this;
      const { px: X2, py: Y2, pz: Z2 } = other;
      const U12 = Fp2.eql(Fp2.mul(X1, Z2), Fp2.mul(X2, Z1));
      const U22 = Fp2.eql(Fp2.mul(Y1, Z2), Fp2.mul(Y2, Z1));
      return U12 && U22;
    }
    /**
     * Flips point to one corresponding to (x, -y) in Affine coordinates.
     */
    negate() {
      return new Point2(this.px, Fp2.neg(this.py), this.pz);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a, b: b2 } = CURVE;
      const b3 = Fp2.mul(b2, _3n2);
      const { px: X1, py: Y1, pz: Z1 } = this;
      let X3 = Fp2.ZERO, Y3 = Fp2.ZERO, Z3 = Fp2.ZERO;
      let t0 = Fp2.mul(X1, X1);
      let t1 = Fp2.mul(Y1, Y1);
      let t2 = Fp2.mul(Z1, Z1);
      let t3 = Fp2.mul(X1, Y1);
      t3 = Fp2.add(t3, t3);
      Z3 = Fp2.mul(X1, Z1);
      Z3 = Fp2.add(Z3, Z3);
      X3 = Fp2.mul(a, Z3);
      Y3 = Fp2.mul(b3, t2);
      Y3 = Fp2.add(X3, Y3);
      X3 = Fp2.sub(t1, Y3);
      Y3 = Fp2.add(t1, Y3);
      Y3 = Fp2.mul(X3, Y3);
      X3 = Fp2.mul(t3, X3);
      Z3 = Fp2.mul(b3, Z3);
      t2 = Fp2.mul(a, t2);
      t3 = Fp2.sub(t0, t2);
      t3 = Fp2.mul(a, t3);
      t3 = Fp2.add(t3, Z3);
      Z3 = Fp2.add(t0, t0);
      t0 = Fp2.add(Z3, t0);
      t0 = Fp2.add(t0, t2);
      t0 = Fp2.mul(t0, t3);
      Y3 = Fp2.add(Y3, t0);
      t2 = Fp2.mul(Y1, Z1);
      t2 = Fp2.add(t2, t2);
      t0 = Fp2.mul(t2, t3);
      X3 = Fp2.sub(X3, t0);
      Z3 = Fp2.mul(t2, t1);
      Z3 = Fp2.add(Z3, Z3);
      Z3 = Fp2.add(Z3, Z3);
      return new Point2(X3, Y3, Z3);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(other) {
      assertPrjPoint(other);
      const { px: X1, py: Y1, pz: Z1 } = this;
      const { px: X2, py: Y2, pz: Z2 } = other;
      let X3 = Fp2.ZERO, Y3 = Fp2.ZERO, Z3 = Fp2.ZERO;
      const a = CURVE.a;
      const b3 = Fp2.mul(CURVE.b, _3n2);
      let t0 = Fp2.mul(X1, X2);
      let t1 = Fp2.mul(Y1, Y2);
      let t2 = Fp2.mul(Z1, Z2);
      let t3 = Fp2.add(X1, Y1);
      let t4 = Fp2.add(X2, Y2);
      t3 = Fp2.mul(t3, t4);
      t4 = Fp2.add(t0, t1);
      t3 = Fp2.sub(t3, t4);
      t4 = Fp2.add(X1, Z1);
      let t5 = Fp2.add(X2, Z2);
      t4 = Fp2.mul(t4, t5);
      t5 = Fp2.add(t0, t2);
      t4 = Fp2.sub(t4, t5);
      t5 = Fp2.add(Y1, Z1);
      X3 = Fp2.add(Y2, Z2);
      t5 = Fp2.mul(t5, X3);
      X3 = Fp2.add(t1, t2);
      t5 = Fp2.sub(t5, X3);
      Z3 = Fp2.mul(a, t4);
      X3 = Fp2.mul(b3, t2);
      Z3 = Fp2.add(X3, Z3);
      X3 = Fp2.sub(t1, Z3);
      Z3 = Fp2.add(t1, Z3);
      Y3 = Fp2.mul(X3, Z3);
      t1 = Fp2.add(t0, t0);
      t1 = Fp2.add(t1, t0);
      t2 = Fp2.mul(a, t2);
      t4 = Fp2.mul(b3, t4);
      t1 = Fp2.add(t1, t2);
      t2 = Fp2.sub(t0, t2);
      t2 = Fp2.mul(a, t2);
      t4 = Fp2.add(t4, t2);
      t0 = Fp2.mul(t1, t4);
      Y3 = Fp2.add(Y3, t0);
      t0 = Fp2.mul(t5, t4);
      X3 = Fp2.mul(t3, X3);
      X3 = Fp2.sub(X3, t0);
      t0 = Fp2.mul(t3, t1);
      Z3 = Fp2.mul(t5, Z3);
      Z3 = Fp2.add(Z3, t0);
      return new Point2(X3, Y3, Z3);
    }
    subtract(other) {
      return this.add(other.negate());
    }
    is0() {
      return this.equals(Point2.ZERO);
    }
    wNAF(n2) {
      return wnaf.wNAFCached(this, pointPrecomputes, n2, (comp) => {
        const toInv = Fp2.invertBatch(comp.map((p) => p.pz));
        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point2.fromAffine);
      });
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed private key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(n2) {
      const I = Point2.ZERO;
      if (n2 === _0n5)
        return I;
      assertGE(n2);
      if (n2 === _1n5)
        return this;
      const { endo } = CURVE;
      if (!endo)
        return wnaf.unsafeLadder(this, n2);
      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n2);
      let k1p = I;
      let k2p = I;
      let d = this;
      while (k1 > _0n5 || k2 > _0n5) {
        if (k1 & _1n5)
          k1p = k1p.add(d);
        if (k2 & _1n5)
          k2p = k2p.add(d);
        d = d.double();
        k1 >>= _1n5;
        k2 >>= _1n5;
      }
      if (k1neg)
        k1p = k1p.negate();
      if (k2neg)
        k2p = k2p.negate();
      k2p = new Point2(Fp2.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
      return k1p.add(k2p);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(scalar) {
      assertGE(scalar);
      let n2 = scalar;
      let point, fake;
      const { endo } = CURVE;
      if (endo) {
        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n2);
        let { p: k1p, f: f1p } = this.wNAF(k1);
        let { p: k2p, f: f2p } = this.wNAF(k2);
        k1p = wnaf.constTimeNegate(k1neg, k1p);
        k2p = wnaf.constTimeNegate(k2neg, k2p);
        k2p = new Point2(Fp2.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
        point = k1p.add(k2p);
        fake = f1p.add(f2p);
      } else {
        const { p, f: f2 } = this.wNAF(n2);
        point = p;
        fake = f2;
      }
      return Point2.normalizeZ([point, fake])[0];
    }
    /**
     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
     * Not using Strauss-Shamir trick: precomputation tables are faster.
     * The trick could be useful if both P and Q are not G (not in our case).
     * @returns non-zero affine point
     */
    multiplyAndAddUnsafe(Q, a, b2) {
      const G = Point2.BASE;
      const mul = (P, a2) => a2 === _0n5 || a2 === _1n5 || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);
      const sum = mul(this, a).add(mul(Q, b2));
      return sum.is0() ? void 0 : sum;
    }
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)
    toAffine(iz) {
      const { px: x, py: y, pz: z } = this;
      const is0 = this.is0();
      if (iz == null)
        iz = is0 ? Fp2.ONE : Fp2.inv(z);
      const ax = Fp2.mul(x, iz);
      const ay = Fp2.mul(y, iz);
      const zz = Fp2.mul(z, iz);
      if (is0)
        return { x: Fp2.ZERO, y: Fp2.ZERO };
      if (!Fp2.eql(zz, Fp2.ONE))
        throw new Error("invZ was invalid");
      return { x: ax, y: ay };
    }
    isTorsionFree() {
      const { h: cofactor, isTorsionFree } = CURVE;
      if (cofactor === _1n5)
        return true;
      if (isTorsionFree)
        return isTorsionFree(Point2, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: cofactor, clearCofactor } = CURVE;
      if (cofactor === _1n5)
        return this;
      if (clearCofactor)
        return clearCofactor(Point2, this);
      return this.multiplyUnsafe(CURVE.h);
    }
    toRawBytes(isCompressed = true) {
      this.assertValidity();
      return toBytes2(Point2, this, isCompressed);
    }
    toHex(isCompressed = true) {
      return bytesToHex(this.toRawBytes(isCompressed));
    }
  }
  Point2.BASE = new Point2(CURVE.Gx, CURVE.Gy, Fp2.ONE);
  Point2.ZERO = new Point2(Fp2.ZERO, Fp2.ONE, Fp2.ZERO);
  const _bits = CURVE.nBitLength;
  const wnaf = wNAF(Point2, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
  return {
    CURVE,
    ProjectivePoint: Point2,
    normPrivateKeyToScalar,
    weierstrassEquation,
    isWithinCurveOrder
  };
}
function validateOpts(curve) {
  const opts = validateBasic(curve);
  validateObject(opts, {
    hash: "hash",
    hmac: "function",
    randomBytes: "function"
  }, {
    bits2int: "function",
    bits2int_modN: "function",
    lowS: "boolean"
  });
  return Object.freeze({ lowS: true, ...opts });
}
function weierstrass(curveDef) {
  const CURVE = validateOpts(curveDef);
  const { Fp: Fp2, n: CURVE_ORDER } = CURVE;
  const compressedLen = Fp2.BYTES + 1;
  const uncompressedLen = 2 * Fp2.BYTES + 1;
  function isValidFieldElement(num) {
    return _0n5 < num && num < Fp2.ORDER;
  }
  function modN(a) {
    return mod(a, CURVE_ORDER);
  }
  function invN(a) {
    return invert(a, CURVE_ORDER);
  }
  const { ProjectivePoint: Point2, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
    ...CURVE,
    toBytes(_c, point, isCompressed) {
      const a = point.toAffine();
      const x = Fp2.toBytes(a.x);
      const cat = concatBytes2;
      if (isCompressed) {
        return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);
      } else {
        return cat(Uint8Array.from([4]), x, Fp2.toBytes(a.y));
      }
    },
    fromBytes(bytes2) {
      const len = bytes2.length;
      const head = bytes2[0];
      const tail = bytes2.subarray(1);
      if (len === compressedLen && (head === 2 || head === 3)) {
        const x = bytesToNumberBE(tail);
        if (!isValidFieldElement(x))
          throw new Error("Point is not on curve");
        const y2 = weierstrassEquation(x);
        let y = Fp2.sqrt(y2);
        const isYOdd = (y & _1n5) === _1n5;
        const isHeadOdd = (head & 1) === 1;
        if (isHeadOdd !== isYOdd)
          y = Fp2.neg(y);
        return { x, y };
      } else if (len === uncompressedLen && head === 4) {
        const x = Fp2.fromBytes(tail.subarray(0, Fp2.BYTES));
        const y = Fp2.fromBytes(tail.subarray(Fp2.BYTES, 2 * Fp2.BYTES));
        return { x, y };
      } else {
        throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
      }
    }
  });
  const numToNByteStr = (num) => bytesToHex(numberToBytesBE(num, CURVE.nByteLength));
  function isBiggerThanHalfOrder(number2) {
    const HALF = CURVE_ORDER >> _1n5;
    return number2 > HALF;
  }
  function normalizeS(s) {
    return isBiggerThanHalfOrder(s) ? modN(-s) : s;
  }
  const slcNum = (b2, from, to) => bytesToNumberBE(b2.slice(from, to));
  class Signature2 {
    constructor(r, s, recovery) {
      this.r = r;
      this.s = s;
      this.recovery = recovery;
      this.assertValidity();
    }
    // pair (bytes of r, bytes of s)
    static fromCompact(hex) {
      const l = CURVE.nByteLength;
      hex = ensureBytes("compactSignature", hex, l * 2);
      return new Signature2(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
    }
    // DER encoded ECDSA signature
    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
    static fromDER(hex) {
      const { r, s } = DER.toSig(ensureBytes("DER", hex));
      return new Signature2(r, s);
    }
    assertValidity() {
      if (!isWithinCurveOrder(this.r))
        throw new Error("r must be 0 < r < CURVE.n");
      if (!isWithinCurveOrder(this.s))
        throw new Error("s must be 0 < s < CURVE.n");
    }
    addRecoveryBit(recovery) {
      return new Signature2(this.r, this.s, recovery);
    }
    recoverPublicKey(msgHash) {
      const { r, s, recovery: rec } = this;
      const h = bits2int_modN(ensureBytes("msgHash", msgHash));
      if (rec == null || ![0, 1, 2, 3].includes(rec))
        throw new Error("recovery id invalid");
      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
      if (radj >= Fp2.ORDER)
        throw new Error("recovery id 2 or 3 invalid");
      const prefix = (rec & 1) === 0 ? "02" : "03";
      const R = Point2.fromHex(prefix + numToNByteStr(radj));
      const ir = invN(radj);
      const u1 = modN(-h * ir);
      const u2 = modN(s * ir);
      const Q = Point2.BASE.multiplyAndAddUnsafe(R, u1, u2);
      if (!Q)
        throw new Error("point at infinify");
      Q.assertValidity();
      return Q;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return isBiggerThanHalfOrder(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new Signature2(this.r, modN(-this.s), this.recovery) : this;
    }
    // DER-encoded
    toDERRawBytes() {
      return hexToBytes(this.toDERHex());
    }
    toDERHex() {
      return DER.hexFromSig({ r: this.r, s: this.s });
    }
    // padded bytes of r, then padded bytes of s
    toCompactRawBytes() {
      return hexToBytes(this.toCompactHex());
    }
    toCompactHex() {
      return numToNByteStr(this.r) + numToNByteStr(this.s);
    }
  }
  const utils = {
    isValidPrivateKey(privateKey) {
      try {
        normPrivateKeyToScalar(privateKey);
        return true;
      } catch (error) {
        return false;
      }
    },
    normPrivateKeyToScalar,
    /**
     * Produces cryptographically secure private key from random of size
     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
     */
    randomPrivateKey: () => {
      const length = getMinHashLength(CURVE.n);
      return mapHashToField(CURVE.randomBytes(length), CURVE.n);
    },
    /**
     * Creates precompute table for an arbitrary EC point. Makes point "cached".
     * Allows to massively speed-up `point.multiply(scalar)`.
     * @returns cached point
     * @example
     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
     * fast.multiply(privKey); // much faster ECDH now
     */
    precompute(windowSize = 8, point = Point2.BASE) {
      point._setWindowSize(windowSize);
      point.multiply(BigInt(3));
      return point;
    }
  };
  function getPublicKey(privateKey, isCompressed = true) {
    return Point2.fromPrivateKey(privateKey).toRawBytes(isCompressed);
  }
  function isProbPub(item) {
    const arr = item instanceof Uint8Array;
    const str = typeof item === "string";
    const len = (arr || str) && item.length;
    if (arr)
      return len === compressedLen || len === uncompressedLen;
    if (str)
      return len === 2 * compressedLen || len === 2 * uncompressedLen;
    if (item instanceof Point2)
      return true;
    return false;
  }
  function getSharedSecret(privateA, publicB, isCompressed = true) {
    if (isProbPub(privateA))
      throw new Error("first arg must be private key");
    if (!isProbPub(publicB))
      throw new Error("second arg must be public key");
    const b2 = Point2.fromHex(publicB);
    return b2.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
  }
  const bits2int = CURVE.bits2int || function(bytes2) {
    const num = bytesToNumberBE(bytes2);
    const delta = bytes2.length * 8 - CURVE.nBitLength;
    return delta > 0 ? num >> BigInt(delta) : num;
  };
  const bits2int_modN = CURVE.bits2int_modN || function(bytes2) {
    return modN(bits2int(bytes2));
  };
  const ORDER_MASK = bitMask(CURVE.nBitLength);
  function int2octets(num) {
    if (typeof num !== "bigint")
      throw new Error("bigint expected");
    if (!(_0n5 <= num && num < ORDER_MASK))
      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
    return numberToBytesBE(num, CURVE.nByteLength);
  }
  function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
    if (["recovered", "canonical"].some((k) => k in opts))
      throw new Error("sign() legacy options not supported");
    const { hash: hash2, randomBytes: randomBytes4 } = CURVE;
    let { lowS, prehash, extraEntropy: ent } = opts;
    if (lowS == null)
      lowS = true;
    msgHash = ensureBytes("msgHash", msgHash);
    if (prehash)
      msgHash = ensureBytes("prehashed msgHash", hash2(msgHash));
    const h1int = bits2int_modN(msgHash);
    const d = normPrivateKeyToScalar(privateKey);
    const seedArgs = [int2octets(d), int2octets(h1int)];
    if (ent != null) {
      const e = ent === true ? randomBytes4(Fp2.BYTES) : ent;
      seedArgs.push(ensureBytes("extraEntropy", e));
    }
    const seed = concatBytes2(...seedArgs);
    const m = h1int;
    function k2sig(kBytes) {
      const k = bits2int(kBytes);
      if (!isWithinCurveOrder(k))
        return;
      const ik = invN(k);
      const q = Point2.BASE.multiply(k).toAffine();
      const r = modN(q.x);
      if (r === _0n5)
        return;
      const s = modN(ik * modN(m + r * d));
      if (s === _0n5)
        return;
      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n5);
      let normS = s;
      if (lowS && isBiggerThanHalfOrder(s)) {
        normS = normalizeS(s);
        recovery ^= 1;
      }
      return new Signature2(r, normS, recovery);
    }
    return { seed, k2sig };
  }
  const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
  const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
  function sign(msgHash, privKey, opts = defaultSigOpts) {
    const { seed, k2sig } = prepSig(msgHash, privKey, opts);
    const C = CURVE;
    const drbg = createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
    return drbg(seed, k2sig);
  }
  Point2.BASE._setWindowSize(8);
  function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
    const sg = signature;
    msgHash = ensureBytes("msgHash", msgHash);
    publicKey = ensureBytes("publicKey", publicKey);
    if ("strict" in opts)
      throw new Error("options.strict was renamed to lowS");
    const { lowS, prehash } = opts;
    let _sig2 = void 0;
    let P;
    try {
      if (typeof sg === "string" || sg instanceof Uint8Array) {
        try {
          _sig2 = Signature2.fromDER(sg);
        } catch (derError) {
          if (!(derError instanceof DER.Err))
            throw derError;
          _sig2 = Signature2.fromCompact(sg);
        }
      } else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
        const { r: r2, s: s2 } = sg;
        _sig2 = new Signature2(r2, s2);
      } else {
        throw new Error("PARSE");
      }
      P = Point2.fromHex(publicKey);
    } catch (error) {
      if (error.message === "PARSE")
        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
      return false;
    }
    if (lowS && _sig2.hasHighS())
      return false;
    if (prehash)
      msgHash = CURVE.hash(msgHash);
    const { r, s } = _sig2;
    const h = bits2int_modN(msgHash);
    const is = invN(s);
    const u1 = modN(h * is);
    const u2 = modN(r * is);
    const R = Point2.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine();
    if (!R)
      return false;
    const v = modN(R.x);
    return v === r;
  }
  return {
    CURVE,
    getPublicKey,
    getSharedSecret,
    sign,
    verify,
    ProjectivePoint: Point2,
    Signature: Signature2,
    utils
  };
}

// node_modules/ethers/node_modules/@noble/curves/esm/_shortw_utils.js
function getHash(hash2) {
  return {
    hash: hash2,
    hmac: (key, ...msgs) => hmac(hash2, key, concatBytes(...msgs)),
    randomBytes
  };
}
function createCurve(curveDef, defHash) {
  const create = (hash2) => weierstrass({ ...curveDef, ...getHash(hash2) });
  return Object.freeze({ ...create(defHash), create });
}

// node_modules/ethers/node_modules/@noble/curves/esm/secp256k1.js
var secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
var secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
var _1n6 = BigInt(1);
var _2n5 = BigInt(2);
var divNearest = (a, b2) => (a + b2 / _2n5) / b2;
function sqrtMod(y) {
  const P = secp256k1P;
  const _3n3 = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
  const b2 = y * y * y % P;
  const b3 = b2 * b2 * y % P;
  const b6 = pow2(b3, _3n3, P) * b3 % P;
  const b9 = pow2(b6, _3n3, P) * b3 % P;
  const b11 = pow2(b9, _2n5, P) * b2 % P;
  const b22 = pow2(b11, _11n, P) * b11 % P;
  const b44 = pow2(b22, _22n, P) * b22 % P;
  const b88 = pow2(b44, _44n, P) * b44 % P;
  const b176 = pow2(b88, _88n, P) * b88 % P;
  const b220 = pow2(b176, _44n, P) * b44 % P;
  const b223 = pow2(b220, _3n3, P) * b3 % P;
  const t1 = pow2(b223, _23n, P) * b22 % P;
  const t2 = pow2(t1, _6n, P) * b2 % P;
  const root = pow2(t2, _2n5, P);
  if (!Fp.eql(Fp.sqr(root), y))
    throw new Error("Cannot find square root");
  return root;
}
var Fp = Field(secp256k1P, void 0, void 0, { sqrt: sqrtMod });
var secp256k1 = createCurve({
  a: BigInt(0),
  b: BigInt(7),
  Fp,
  n: secp256k1N,
  // Base point (x, y) aka generator point
  Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
  Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
  h: BigInt(1),
  lowS: true,
  /**
   * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
   * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
   * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
   * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
   */
  endo: {
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: (k) => {
      const n2 = secp256k1N;
      const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
      const b1 = -_1n6 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
      const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
      const b2 = a1;
      const POW_2_128 = BigInt("0x100000000000000000000000000000000");
      const c1 = divNearest(b2 * k, n2);
      const c2 = divNearest(-b1 * k, n2);
      let k1 = mod(k - c1 * a1 - c2 * a2, n2);
      let k2 = mod(-c1 * b1 - c2 * b2, n2);
      const k1neg = k1 > POW_2_128;
      const k2neg = k2 > POW_2_128;
      if (k1neg)
        k1 = n2 - k1;
      if (k2neg)
        k2 = n2 - k2;
      if (k1 > POW_2_128 || k2 > POW_2_128) {
        throw new Error("splitScalar: Endomorphism failed, k=" + k);
      }
      return { k1neg, k1, k2neg, k2 };
    }
  }
}, sha256);
var _0n6 = BigInt(0);
var Point = secp256k1.ProjectivePoint;

// node_modules/ethers/lib.esm/constants/addresses.js
var ZeroAddress = "0x0000000000000000000000000000000000000000";

// node_modules/ethers/lib.esm/constants/hashes.js
var ZeroHash = "0x0000000000000000000000000000000000000000000000000000000000000000";

// node_modules/ethers/lib.esm/constants/numbers.js
var N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
var WeiPerEther = BigInt("1000000000000000000");
var MaxUint256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var MinInt256 = BigInt("0x8000000000000000000000000000000000000000000000000000000000000000") * BigInt(-1);
var MaxInt256 = BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");

// node_modules/ethers/lib.esm/constants/strings.js
var EtherSymbol = "\u039E";
var MessagePrefix = "Ethereum Signed Message:\n";

// node_modules/ethers/lib.esm/crypto/signature.js
var BN_04 = BigInt(0);
var BN_13 = BigInt(1);
var BN_2 = BigInt(2);
var BN_27 = BigInt(27);
var BN_28 = BigInt(28);
var BN_35 = BigInt(35);
var _guard3 = {};
function toUint256(value) {
  return zeroPadValue(toBeArray(value), 32);
}
var _r, _s, _v, _networkV;
var _Signature = class _Signature {
  /**
   *  @private
   */
  constructor(guard, r, s, v) {
    __privateAdd(this, _r);
    __privateAdd(this, _s);
    __privateAdd(this, _v);
    __privateAdd(this, _networkV);
    assertPrivate(guard, _guard3, "Signature");
    __privateSet(this, _r, r);
    __privateSet(this, _s, s);
    __privateSet(this, _v, v);
    __privateSet(this, _networkV, null);
  }
  /**
   *  The ``r`` value for a signautre.
   *
   *  This represents the ``x`` coordinate of a "reference" or
   *  challenge point, from which the ``y`` can be computed.
   */
  get r() {
    return __privateGet(this, _r);
  }
  set r(value) {
    assertArgument(dataLength(value) === 32, "invalid r", "value", value);
    __privateSet(this, _r, hexlify(value));
  }
  /**
   *  The ``s`` value for a signature.
   */
  get s() {
    return __privateGet(this, _s);
  }
  set s(_value2) {
    assertArgument(dataLength(_value2) === 32, "invalid s", "value", _value2);
    const value = hexlify(_value2);
    assertArgument(parseInt(value.substring(0, 3)) < 8, "non-canonical s", "value", value);
    __privateSet(this, _s, value);
  }
  /**
   *  The ``v`` value for a signature.
   *
   *  Since a given ``x`` value for ``r`` has two possible values for
   *  its correspondin ``y``, the ``v`` indicates which of the two ``y``
   *  values to use.
   *
   *  It is normalized to the values ``27`` or ``28`` for legacy
   *  purposes.
   */
  get v() {
    return __privateGet(this, _v);
  }
  set v(value) {
    const v = getNumber(value, "value");
    assertArgument(v === 27 || v === 28, "invalid v", "v", value);
    __privateSet(this, _v, v);
  }
  /**
   *  The EIP-155 ``v`` for legacy transactions. For non-legacy
   *  transactions, this value is ``null``.
   */
  get networkV() {
    return __privateGet(this, _networkV);
  }
  /**
   *  The chain ID for EIP-155 legacy transactions. For non-legacy
   *  transactions, this value is ``null``.
   */
  get legacyChainId() {
    const v = this.networkV;
    if (v == null) {
      return null;
    }
    return _Signature.getChainId(v);
  }
  /**
   *  The ``yParity`` for the signature.
   *
   *  See ``v`` for more details on how this value is used.
   */
  get yParity() {
    return this.v === 27 ? 0 : 1;
  }
  /**
   *  The [[link-eip-2098]] compact representation of the ``yParity``
   *  and ``s`` compacted into a single ``bytes32``.
   */
  get yParityAndS() {
    const yParityAndS = getBytes(this.s);
    if (this.yParity) {
      yParityAndS[0] |= 128;
    }
    return hexlify(yParityAndS);
  }
  /**
   *  The [[link-eip-2098]] compact representation.
   */
  get compactSerialized() {
    return concat([this.r, this.yParityAndS]);
  }
  /**
   *  The serialized representation.
   */
  get serialized() {
    return concat([this.r, this.s, this.yParity ? "0x1c" : "0x1b"]);
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return `Signature { r: "${this.r}", s: "${this.s}", yParity: ${this.yParity}, networkV: ${this.networkV} }`;
  }
  /**
   *  Returns a new identical [[Signature]].
   */
  clone() {
    const clone = new _Signature(_guard3, this.r, this.s, this.v);
    if (this.networkV) {
      __privateSet(clone, _networkV, this.networkV);
    }
    return clone;
  }
  /**
   *  Returns a representation that is compatible with ``JSON.stringify``.
   */
  toJSON() {
    const networkV = this.networkV;
    return {
      _type: "signature",
      networkV: networkV != null ? networkV.toString() : null,
      r: this.r,
      s: this.s,
      v: this.v
    };
  }
  /**
   *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.
   *
   *  @example:
   *    Signature.getChainId(45)
   *    //_result:
   *
   *    Signature.getChainId(46)
   *    //_result:
   */
  static getChainId(v) {
    const bv = getBigInt(v, "v");
    if (bv == BN_27 || bv == BN_28) {
      return BN_04;
    }
    assertArgument(bv >= BN_35, "invalid EIP-155 v", "v", v);
    return (bv - BN_35) / BN_2;
  }
  /**
   *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.
   *
   *  Legacy transactions which use [[link-eip-155]] hijack the ``v``
   *  property to include the chain ID.
   *
   *  @example:
   *    Signature.getChainIdV(5, 27)
   *    //_result:
   *
   *    Signature.getChainIdV(5, 28)
   *    //_result:
   *
   */
  static getChainIdV(chainId, v) {
    return getBigInt(chainId) * BN_2 + BigInt(35 + v - 27);
  }
  /**
   *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,
   *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.
   *
   *  @example:
   *    // The values 0 and 1 imply v is actually yParity
   *    Signature.getNormalizedV(0)
   *    //_result:
   *
   *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)
   *    Signature.getNormalizedV(27)
   *    //_result:
   *
   *    // Legacy EIP-155 transaction (i.e. >= 35)
   *    Signature.getNormalizedV(46)
   *    //_result:
   *
   *    // Invalid values throw
   *    Signature.getNormalizedV(5)
   *    //_error:
   */
  static getNormalizedV(v) {
    const bv = getBigInt(v);
    if (bv === BN_04 || bv === BN_27) {
      return 27;
    }
    if (bv === BN_13 || bv === BN_28) {
      return 28;
    }
    assertArgument(bv >= BN_35, "invalid v", "v", v);
    return bv & BN_13 ? 27 : 28;
  }
  /**
   *  Creates a new [[Signature]].
   *
   *  If no %%sig%% is provided, a new [[Signature]] is created
   *  with default values.
   *
   *  If %%sig%% is a string, it is parsed.
   */
  static from(sig) {
    function assertError(check, message) {
      assertArgument(check, message, "signature", sig);
    }
    ;
    if (sig == null) {
      return new _Signature(_guard3, ZeroHash, ZeroHash, 27);
    }
    if (typeof sig === "string") {
      const bytes2 = getBytes(sig, "signature");
      if (bytes2.length === 64) {
        const r2 = hexlify(bytes2.slice(0, 32));
        const s2 = bytes2.slice(32, 64);
        const v2 = s2[0] & 128 ? 28 : 27;
        s2[0] &= 127;
        return new _Signature(_guard3, r2, hexlify(s2), v2);
      }
      if (bytes2.length === 65) {
        const r2 = hexlify(bytes2.slice(0, 32));
        const s2 = bytes2.slice(32, 64);
        assertError((s2[0] & 128) === 0, "non-canonical s");
        const v2 = _Signature.getNormalizedV(bytes2[64]);
        return new _Signature(_guard3, r2, hexlify(s2), v2);
      }
      assertError(false, "invalid raw signature length");
    }
    if (sig instanceof _Signature) {
      return sig.clone();
    }
    const _r2 = sig.r;
    assertError(_r2 != null, "missing r");
    const r = toUint256(_r2);
    const s = function(s2, yParityAndS) {
      if (s2 != null) {
        return toUint256(s2);
      }
      if (yParityAndS != null) {
        assertError(isHexString(yParityAndS, 32), "invalid yParityAndS");
        const bytes2 = getBytes(yParityAndS);
        bytes2[0] &= 127;
        return hexlify(bytes2);
      }
      assertError(false, "missing s");
    }(sig.s, sig.yParityAndS);
    assertError((getBytes(s)[0] & 128) == 0, "non-canonical s");
    const { networkV, v } = function(_v2, yParityAndS, yParity) {
      if (_v2 != null) {
        const v2 = getBigInt(_v2);
        return {
          networkV: v2 >= BN_35 ? v2 : void 0,
          v: _Signature.getNormalizedV(v2)
        };
      }
      if (yParityAndS != null) {
        assertError(isHexString(yParityAndS, 32), "invalid yParityAndS");
        return { v: getBytes(yParityAndS)[0] & 128 ? 28 : 27 };
      }
      if (yParity != null) {
        switch (getNumber(yParity, "sig.yParity")) {
          case 0:
            return { v: 27 };
          case 1:
            return { v: 28 };
        }
        assertError(false, "invalid yParity");
      }
      assertError(false, "missing v");
    }(sig.v, sig.yParityAndS, sig.yParity);
    const result = new _Signature(_guard3, r, s, v);
    if (networkV) {
      __privateSet(result, _networkV, networkV);
    }
    assertError(sig.yParity == null || getNumber(sig.yParity, "sig.yParity") === result.yParity, "yParity mismatch");
    assertError(sig.yParityAndS == null || sig.yParityAndS === result.yParityAndS, "yParityAndS mismatch");
    return result;
  }
};
_r = new WeakMap();
_s = new WeakMap();
_v = new WeakMap();
_networkV = new WeakMap();
var Signature = _Signature;

// node_modules/ethers/lib.esm/crypto/signing-key.js
var _privateKey;
var _SigningKey = class _SigningKey {
  /**
   *  Creates a new **SigningKey** for %%privateKey%%.
   */
  constructor(privateKey) {
    __privateAdd(this, _privateKey);
    assertArgument(dataLength(privateKey) === 32, "invalid private key", "privateKey", "[REDACTED]");
    __privateSet(this, _privateKey, hexlify(privateKey));
  }
  /**
   *  The private key.
   */
  get privateKey() {
    return __privateGet(this, _privateKey);
  }
  /**
   *  The uncompressed public key.
   *
   * This will always begin with the prefix ``0x04`` and be 132
   * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).
   */
  get publicKey() {
    return _SigningKey.computePublicKey(__privateGet(this, _privateKey));
  }
  /**
   *  The compressed public key.
   *
   *  This will always begin with either the prefix ``0x02`` or ``0x03``
   *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal
   *  nibbles)
   */
  get compressedPublicKey() {
    return _SigningKey.computePublicKey(__privateGet(this, _privateKey), true);
  }
  /**
   *  Return the signature of the signed %%digest%%.
   */
  sign(digest) {
    assertArgument(dataLength(digest) === 32, "invalid digest length", "digest", digest);
    const sig = secp256k1.sign(getBytesCopy(digest), getBytesCopy(__privateGet(this, _privateKey)), {
      lowS: true
    });
    return Signature.from({
      r: toBeHex(sig.r, 32),
      s: toBeHex(sig.s, 32),
      v: sig.recovery ? 28 : 27
    });
  }
  /**
   *  Returns the [[link-wiki-ecdh]] shared secret between this
   *  private key and the %%other%% key.
   *
   *  The %%other%% key may be any type of key, a raw public key,
   *  a compressed/uncompressed pubic key or aprivate key.
   *
   *  Best practice is usually to use a cryptographic hash on the
   *  returned value before using it as a symetric secret.
   *
   *  @example:
   *    sign1 = new SigningKey(id("some-secret-1"))
   *    sign2 = new SigningKey(id("some-secret-2"))
   *
   *    // Notice that privA.computeSharedSecret(pubB)...
   *    sign1.computeSharedSecret(sign2.publicKey)
   *    //_result:
   *
   *    // ...is equal to privB.computeSharedSecret(pubA).
   *    sign2.computeSharedSecret(sign1.publicKey)
   *    //_result:
   */
  computeSharedSecret(other) {
    const pubKey = _SigningKey.computePublicKey(other);
    return hexlify(secp256k1.getSharedSecret(getBytesCopy(__privateGet(this, _privateKey)), getBytes(pubKey), false));
  }
  /**
   *  Compute the public key for %%key%%, optionally %%compressed%%.
   *
   *  The %%key%% may be any type of key, a raw public key, a
   *  compressed/uncompressed public key or private key.
   *
   *  @example:
   *    sign = new SigningKey(id("some-secret"));
   *
   *    // Compute the uncompressed public key for a private key
   *    SigningKey.computePublicKey(sign.privateKey)
   *    //_result:
   *
   *    // Compute the compressed public key for a private key
   *    SigningKey.computePublicKey(sign.privateKey, true)
   *    //_result:
   *
   *    // Compute the uncompressed public key
   *    SigningKey.computePublicKey(sign.publicKey, false);
   *    //_result:
   *
   *    // Compute the Compressed a public key
   *    SigningKey.computePublicKey(sign.publicKey, true);
   *    //_result:
   */
  static computePublicKey(key, compressed) {
    let bytes2 = getBytes(key, "key");
    if (bytes2.length === 32) {
      const pubKey = secp256k1.getPublicKey(bytes2, !!compressed);
      return hexlify(pubKey);
    }
    if (bytes2.length === 64) {
      const pub = new Uint8Array(65);
      pub[0] = 4;
      pub.set(bytes2, 1);
      bytes2 = pub;
    }
    const point = secp256k1.ProjectivePoint.fromHex(bytes2);
    return hexlify(point.toRawBytes(compressed));
  }
  /**
   *  Returns the public key for the private key which produced the
   *  %%signature%% for the given %%digest%%.
   *
   *  @example:
   *    key = new SigningKey(id("some-secret"))
   *    digest = id("hello world")
   *    sig = key.sign(digest)
   *
   *    // Notice the signer public key...
   *    key.publicKey
   *    //_result:
   *
   *    // ...is equal to the recovered public key
   *    SigningKey.recoverPublicKey(digest, sig)
   *    //_result:
   *
   */
  static recoverPublicKey(digest, signature) {
    assertArgument(dataLength(digest) === 32, "invalid digest length", "digest", digest);
    const sig = Signature.from(signature);
    let secpSig = secp256k1.Signature.fromCompact(getBytesCopy(concat([sig.r, sig.s])));
    secpSig = secpSig.addRecoveryBit(sig.yParity);
    const pubKey = secpSig.recoverPublicKey(getBytesCopy(digest));
    assertArgument(pubKey != null, "invalid signautre for digest", "signature", signature);
    return "0x" + pubKey.toHex(false);
  }
  /**
   *  Returns the point resulting from adding the ellipic curve points
   *  %%p0%% and %%p1%%.
   *
   *  This is not a common function most developers should require, but
   *  can be useful for certain privacy-specific techniques.
   *
   *  For example, it is used by [[HDNodeWallet]] to compute child
   *  addresses from parent public keys and chain codes.
   */
  static addPoints(p0, p1, compressed) {
    const pub0 = secp256k1.ProjectivePoint.fromHex(_SigningKey.computePublicKey(p0).substring(2));
    const pub1 = secp256k1.ProjectivePoint.fromHex(_SigningKey.computePublicKey(p1).substring(2));
    return "0x" + pub0.add(pub1).toHex(!!compressed);
  }
};
_privateKey = new WeakMap();
var SigningKey = _SigningKey;

// node_modules/ethers/lib.esm/crypto/index.js
function lock() {
  computeHmac.lock();
  keccak256.lock();
  pbkdf22.lock();
  randomBytes3.lock();
  ripemd1602.lock();
  scrypt2.lock();
  scryptSync.lock();
  sha2562.lock();
  sha5122.lock();
  randomBytes3.lock();
}

// node_modules/ethers/lib.esm/address/address.js
var BN_05 = BigInt(0);
var BN_36 = BigInt(36);
function getChecksumAddress(address) {
  address = address.toLowerCase();
  const chars = address.substring(2).split("");
  const expanded = new Uint8Array(40);
  for (let i = 0; i < 40; i++) {
    expanded[i] = chars[i].charCodeAt(0);
  }
  const hashed = getBytes(keccak256(expanded));
  for (let i = 0; i < 40; i += 2) {
    if (hashed[i >> 1] >> 4 >= 8) {
      chars[i] = chars[i].toUpperCase();
    }
    if ((hashed[i >> 1] & 15) >= 8) {
      chars[i + 1] = chars[i + 1].toUpperCase();
    }
  }
  return "0x" + chars.join("");
}
var ibanLookup = {};
for (let i = 0; i < 10; i++) {
  ibanLookup[String(i)] = String(i);
}
for (let i = 0; i < 26; i++) {
  ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
}
var safeDigits = 15;
function ibanChecksum(address) {
  address = address.toUpperCase();
  address = address.substring(4) + address.substring(0, 2) + "00";
  let expanded = address.split("").map((c) => {
    return ibanLookup[c];
  }).join("");
  while (expanded.length >= safeDigits) {
    let block = expanded.substring(0, safeDigits);
    expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
  }
  let checksum2 = String(98 - parseInt(expanded, 10) % 97);
  while (checksum2.length < 2) {
    checksum2 = "0" + checksum2;
  }
  return checksum2;
}
var Base36 = function() {
  ;
  const result = {};
  for (let i = 0; i < 36; i++) {
    const key = "0123456789abcdefghijklmnopqrstuvwxyz"[i];
    result[key] = BigInt(i);
  }
  return result;
}();
function fromBase36(value) {
  value = value.toLowerCase();
  let result = BN_05;
  for (let i = 0; i < value.length; i++) {
    result = result * BN_36 + Base36[value[i]];
  }
  return result;
}
function getAddress(address) {
  assertArgument(typeof address === "string", "invalid address", "address", address);
  if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
    if (!address.startsWith("0x")) {
      address = "0x" + address;
    }
    const result = getChecksumAddress(address);
    assertArgument(!address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || result === address, "bad address checksum", "address", address);
    return result;
  }
  if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
    assertArgument(address.substring(2, 4) === ibanChecksum(address), "bad icap checksum", "address", address);
    let result = fromBase36(address.substring(4)).toString(16);
    while (result.length < 40) {
      result = "0" + result;
    }
    return getChecksumAddress("0x" + result);
  }
  assertArgument(false, "invalid address", "address", address);
}
function getIcapAddress(address) {
  let base36 = BigInt(getAddress(address)).toString(36).toUpperCase();
  while (base36.length < 30) {
    base36 = "0" + base36;
  }
  return "XE" + ibanChecksum("XE00" + base36) + base36;
}

// node_modules/ethers/lib.esm/address/contract-address.js
function getCreateAddress(tx) {
  const from = getAddress(tx.from);
  const nonce = getBigInt(tx.nonce, "tx.nonce");
  let nonceHex = nonce.toString(16);
  if (nonceHex === "0") {
    nonceHex = "0x";
  } else if (nonceHex.length % 2) {
    nonceHex = "0x0" + nonceHex;
  } else {
    nonceHex = "0x" + nonceHex;
  }
  return getAddress(dataSlice(keccak256(encodeRlp([from, nonceHex])), 12));
}
function getCreate2Address(_from, _salt, _initCodeHash) {
  const from = getAddress(_from);
  const salt = getBytes(_salt, "salt");
  const initCodeHash = getBytes(_initCodeHash, "initCodeHash");
  assertArgument(salt.length === 32, "salt must be 32 bytes", "salt", _salt);
  assertArgument(initCodeHash.length === 32, "initCodeHash must be 32 bytes", "initCodeHash", _initCodeHash);
  return getAddress(dataSlice(keccak256(concat(["0xff", from, salt, initCodeHash])), 12));
}

// node_modules/ethers/lib.esm/address/checks.js
function isAddressable(value) {
  return value && typeof value.getAddress === "function";
}
function isAddress(value) {
  try {
    getAddress(value);
    return true;
  } catch (error) {
  }
  return false;
}
async function checkAddress(target, promise) {
  const result = await promise;
  if (result == null || result === "0x0000000000000000000000000000000000000000") {
    assert(typeof target !== "string", "unconfigured name", "UNCONFIGURED_NAME", { value: target });
    assertArgument(false, "invalid AddressLike value; did not resolve to a value address", "target", target);
  }
  return getAddress(result);
}
function resolveAddress(target, resolver) {
  if (typeof target === "string") {
    if (target.match(/^0x[0-9a-f]{40}$/i)) {
      return getAddress(target);
    }
    assert(resolver != null, "ENS resolution requires a provider", "UNSUPPORTED_OPERATION", { operation: "resolveName" });
    return checkAddress(target, resolver.resolveName(target));
  } else if (isAddressable(target)) {
    return checkAddress(target, target.getAddress());
  } else if (target && typeof target.then === "function") {
    return checkAddress(target, target);
  }
  assertArgument(false, "unsupported addressable value", "target", target);
}

// node_modules/ethers/lib.esm/abi/typed.js
var _gaurd = {};
function n(value, width) {
  let signed2 = false;
  if (width < 0) {
    signed2 = true;
    width *= -1;
  }
  return new Typed(_gaurd, `${signed2 ? "" : "u"}int${width}`, value, { signed: signed2, width });
}
function b(value, size) {
  return new Typed(_gaurd, `bytes${size ? size : ""}`, value, { size });
}
var _typedSymbol = Symbol.for("_ethers_typed");
var _options;
var _Typed = class _Typed {
  /**
   *  @_ignore:
   */
  constructor(gaurd, type, value, options) {
    /**
     *  The type, as a Solidity-compatible type.
     */
    __publicField(this, "type");
    /**
     *  The actual value.
     */
    __publicField(this, "value");
    __privateAdd(this, _options);
    /**
     *  @_ignore:
     */
    __publicField(this, "_typedSymbol");
    if (options == null) {
      options = null;
    }
    assertPrivate(_gaurd, gaurd, "Typed");
    defineProperties(this, { _typedSymbol, type, value });
    __privateSet(this, _options, options);
    this.format();
  }
  /**
   *  Format the type as a Human-Readable type.
   */
  format() {
    if (this.type === "array") {
      throw new Error("");
    } else if (this.type === "dynamicArray") {
      throw new Error("");
    } else if (this.type === "tuple") {
      return `tuple(${this.value.map((v) => v.format()).join(",")})`;
    }
    return this.type;
  }
  /**
   *  The default value returned by this type.
   */
  defaultValue() {
    return 0;
  }
  /**
   *  The minimum value for numeric types.
   */
  minValue() {
    return 0;
  }
  /**
   *  The maximum value for numeric types.
   */
  maxValue() {
    return 0;
  }
  /**
   *  Returns ``true`` and provides a type guard is this is a [[TypedBigInt]].
   */
  isBigInt() {
    return !!this.type.match(/^u?int[0-9]+$/);
  }
  /**
   *  Returns ``true`` and provides a type guard is this is a [[TypedData]].
   */
  isData() {
    return this.type.startsWith("bytes");
  }
  /**
   *  Returns ``true`` and provides a type guard is this is a [[TypedString]].
   */
  isString() {
    return this.type === "string";
  }
  /**
   *  Returns the tuple name, if this is a tuple. Throws otherwise.
   */
  get tupleName() {
    if (this.type !== "tuple") {
      throw TypeError("not a tuple");
    }
    return __privateGet(this, _options);
  }
  // Returns the length of this type as an array
  // - `null` indicates the length is unforced, it could be dynamic
  // - `-1` indicates the length is dynamic
  // - any other value indicates it is a static array and is its length
  /**
   *  Returns the length of the array type or ``-1`` if it is dynamic.
   *
   *  Throws if the type is not an array.
   */
  get arrayLength() {
    if (this.type !== "array") {
      throw TypeError("not an array");
    }
    if (__privateGet(this, _options) === true) {
      return -1;
    }
    if (__privateGet(this, _options) === false) {
      return this.value.length;
    }
    return null;
  }
  /**
   *  Returns a new **Typed** of %%type%% with the %%value%%.
   */
  static from(type, value) {
    return new _Typed(_gaurd, type, value);
  }
  /**
   *  Return a new ``uint8`` type for %%v%%.
   */
  static uint8(v) {
    return n(v, 8);
  }
  /**
   *  Return a new ``uint16`` type for %%v%%.
   */
  static uint16(v) {
    return n(v, 16);
  }
  /**
   *  Return a new ``uint24`` type for %%v%%.
   */
  static uint24(v) {
    return n(v, 24);
  }
  /**
   *  Return a new ``uint32`` type for %%v%%.
   */
  static uint32(v) {
    return n(v, 32);
  }
  /**
   *  Return a new ``uint40`` type for %%v%%.
   */
  static uint40(v) {
    return n(v, 40);
  }
  /**
   *  Return a new ``uint48`` type for %%v%%.
   */
  static uint48(v) {
    return n(v, 48);
  }
  /**
   *  Return a new ``uint56`` type for %%v%%.
   */
  static uint56(v) {
    return n(v, 56);
  }
  /**
   *  Return a new ``uint64`` type for %%v%%.
   */
  static uint64(v) {
    return n(v, 64);
  }
  /**
   *  Return a new ``uint72`` type for %%v%%.
   */
  static uint72(v) {
    return n(v, 72);
  }
  /**
   *  Return a new ``uint80`` type for %%v%%.
   */
  static uint80(v) {
    return n(v, 80);
  }
  /**
   *  Return a new ``uint88`` type for %%v%%.
   */
  static uint88(v) {
    return n(v, 88);
  }
  /**
   *  Return a new ``uint96`` type for %%v%%.
   */
  static uint96(v) {
    return n(v, 96);
  }
  /**
   *  Return a new ``uint104`` type for %%v%%.
   */
  static uint104(v) {
    return n(v, 104);
  }
  /**
   *  Return a new ``uint112`` type for %%v%%.
   */
  static uint112(v) {
    return n(v, 112);
  }
  /**
   *  Return a new ``uint120`` type for %%v%%.
   */
  static uint120(v) {
    return n(v, 120);
  }
  /**
   *  Return a new ``uint128`` type for %%v%%.
   */
  static uint128(v) {
    return n(v, 128);
  }
  /**
   *  Return a new ``uint136`` type for %%v%%.
   */
  static uint136(v) {
    return n(v, 136);
  }
  /**
   *  Return a new ``uint144`` type for %%v%%.
   */
  static uint144(v) {
    return n(v, 144);
  }
  /**
   *  Return a new ``uint152`` type for %%v%%.
   */
  static uint152(v) {
    return n(v, 152);
  }
  /**
   *  Return a new ``uint160`` type for %%v%%.
   */
  static uint160(v) {
    return n(v, 160);
  }
  /**
   *  Return a new ``uint168`` type for %%v%%.
   */
  static uint168(v) {
    return n(v, 168);
  }
  /**
   *  Return a new ``uint176`` type for %%v%%.
   */
  static uint176(v) {
    return n(v, 176);
  }
  /**
   *  Return a new ``uint184`` type for %%v%%.
   */
  static uint184(v) {
    return n(v, 184);
  }
  /**
   *  Return a new ``uint192`` type for %%v%%.
   */
  static uint192(v) {
    return n(v, 192);
  }
  /**
   *  Return a new ``uint200`` type for %%v%%.
   */
  static uint200(v) {
    return n(v, 200);
  }
  /**
   *  Return a new ``uint208`` type for %%v%%.
   */
  static uint208(v) {
    return n(v, 208);
  }
  /**
   *  Return a new ``uint216`` type for %%v%%.
   */
  static uint216(v) {
    return n(v, 216);
  }
  /**
   *  Return a new ``uint224`` type for %%v%%.
   */
  static uint224(v) {
    return n(v, 224);
  }
  /**
   *  Return a new ``uint232`` type for %%v%%.
   */
  static uint232(v) {
    return n(v, 232);
  }
  /**
   *  Return a new ``uint240`` type for %%v%%.
   */
  static uint240(v) {
    return n(v, 240);
  }
  /**
   *  Return a new ``uint248`` type for %%v%%.
   */
  static uint248(v) {
    return n(v, 248);
  }
  /**
   *  Return a new ``uint256`` type for %%v%%.
   */
  static uint256(v) {
    return n(v, 256);
  }
  /**
   *  Return a new ``uint256`` type for %%v%%.
   */
  static uint(v) {
    return n(v, 256);
  }
  /**
   *  Return a new ``int8`` type for %%v%%.
   */
  static int8(v) {
    return n(v, -8);
  }
  /**
   *  Return a new ``int16`` type for %%v%%.
   */
  static int16(v) {
    return n(v, -16);
  }
  /**
   *  Return a new ``int24`` type for %%v%%.
   */
  static int24(v) {
    return n(v, -24);
  }
  /**
   *  Return a new ``int32`` type for %%v%%.
   */
  static int32(v) {
    return n(v, -32);
  }
  /**
   *  Return a new ``int40`` type for %%v%%.
   */
  static int40(v) {
    return n(v, -40);
  }
  /**
   *  Return a new ``int48`` type for %%v%%.
   */
  static int48(v) {
    return n(v, -48);
  }
  /**
   *  Return a new ``int56`` type for %%v%%.
   */
  static int56(v) {
    return n(v, -56);
  }
  /**
   *  Return a new ``int64`` type for %%v%%.
   */
  static int64(v) {
    return n(v, -64);
  }
  /**
   *  Return a new ``int72`` type for %%v%%.
   */
  static int72(v) {
    return n(v, -72);
  }
  /**
   *  Return a new ``int80`` type for %%v%%.
   */
  static int80(v) {
    return n(v, -80);
  }
  /**
   *  Return a new ``int88`` type for %%v%%.
   */
  static int88(v) {
    return n(v, -88);
  }
  /**
   *  Return a new ``int96`` type for %%v%%.
   */
  static int96(v) {
    return n(v, -96);
  }
  /**
   *  Return a new ``int104`` type for %%v%%.
   */
  static int104(v) {
    return n(v, -104);
  }
  /**
   *  Return a new ``int112`` type for %%v%%.
   */
  static int112(v) {
    return n(v, -112);
  }
  /**
   *  Return a new ``int120`` type for %%v%%.
   */
  static int120(v) {
    return n(v, -120);
  }
  /**
   *  Return a new ``int128`` type for %%v%%.
   */
  static int128(v) {
    return n(v, -128);
  }
  /**
   *  Return a new ``int136`` type for %%v%%.
   */
  static int136(v) {
    return n(v, -136);
  }
  /**
   *  Return a new ``int144`` type for %%v%%.
   */
  static int144(v) {
    return n(v, -144);
  }
  /**
   *  Return a new ``int52`` type for %%v%%.
   */
  static int152(v) {
    return n(v, -152);
  }
  /**
   *  Return a new ``int160`` type for %%v%%.
   */
  static int160(v) {
    return n(v, -160);
  }
  /**
   *  Return a new ``int168`` type for %%v%%.
   */
  static int168(v) {
    return n(v, -168);
  }
  /**
   *  Return a new ``int176`` type for %%v%%.
   */
  static int176(v) {
    return n(v, -176);
  }
  /**
   *  Return a new ``int184`` type for %%v%%.
   */
  static int184(v) {
    return n(v, -184);
  }
  /**
   *  Return a new ``int92`` type for %%v%%.
   */
  static int192(v) {
    return n(v, -192);
  }
  /**
   *  Return a new ``int200`` type for %%v%%.
   */
  static int200(v) {
    return n(v, -200);
  }
  /**
   *  Return a new ``int208`` type for %%v%%.
   */
  static int208(v) {
    return n(v, -208);
  }
  /**
   *  Return a new ``int216`` type for %%v%%.
   */
  static int216(v) {
    return n(v, -216);
  }
  /**
   *  Return a new ``int224`` type for %%v%%.
   */
  static int224(v) {
    return n(v, -224);
  }
  /**
   *  Return a new ``int232`` type for %%v%%.
   */
  static int232(v) {
    return n(v, -232);
  }
  /**
   *  Return a new ``int240`` type for %%v%%.
   */
  static int240(v) {
    return n(v, -240);
  }
  /**
   *  Return a new ``int248`` type for %%v%%.
   */
  static int248(v) {
    return n(v, -248);
  }
  /**
   *  Return a new ``int256`` type for %%v%%.
   */
  static int256(v) {
    return n(v, -256);
  }
  /**
   *  Return a new ``int256`` type for %%v%%.
   */
  static int(v) {
    return n(v, -256);
  }
  /**
   *  Return a new ``bytes1`` type for %%v%%.
   */
  static bytes1(v) {
    return b(v, 1);
  }
  /**
   *  Return a new ``bytes2`` type for %%v%%.
   */
  static bytes2(v) {
    return b(v, 2);
  }
  /**
   *  Return a new ``bytes3`` type for %%v%%.
   */
  static bytes3(v) {
    return b(v, 3);
  }
  /**
   *  Return a new ``bytes4`` type for %%v%%.
   */
  static bytes4(v) {
    return b(v, 4);
  }
  /**
   *  Return a new ``bytes5`` type for %%v%%.
   */
  static bytes5(v) {
    return b(v, 5);
  }
  /**
   *  Return a new ``bytes6`` type for %%v%%.
   */
  static bytes6(v) {
    return b(v, 6);
  }
  /**
   *  Return a new ``bytes7`` type for %%v%%.
   */
  static bytes7(v) {
    return b(v, 7);
  }
  /**
   *  Return a new ``bytes8`` type for %%v%%.
   */
  static bytes8(v) {
    return b(v, 8);
  }
  /**
   *  Return a new ``bytes9`` type for %%v%%.
   */
  static bytes9(v) {
    return b(v, 9);
  }
  /**
   *  Return a new ``bytes10`` type for %%v%%.
   */
  static bytes10(v) {
    return b(v, 10);
  }
  /**
   *  Return a new ``bytes11`` type for %%v%%.
   */
  static bytes11(v) {
    return b(v, 11);
  }
  /**
   *  Return a new ``bytes12`` type for %%v%%.
   */
  static bytes12(v) {
    return b(v, 12);
  }
  /**
   *  Return a new ``bytes13`` type for %%v%%.
   */
  static bytes13(v) {
    return b(v, 13);
  }
  /**
   *  Return a new ``bytes14`` type for %%v%%.
   */
  static bytes14(v) {
    return b(v, 14);
  }
  /**
   *  Return a new ``bytes15`` type for %%v%%.
   */
  static bytes15(v) {
    return b(v, 15);
  }
  /**
   *  Return a new ``bytes16`` type for %%v%%.
   */
  static bytes16(v) {
    return b(v, 16);
  }
  /**
   *  Return a new ``bytes17`` type for %%v%%.
   */
  static bytes17(v) {
    return b(v, 17);
  }
  /**
   *  Return a new ``bytes18`` type for %%v%%.
   */
  static bytes18(v) {
    return b(v, 18);
  }
  /**
   *  Return a new ``bytes19`` type for %%v%%.
   */
  static bytes19(v) {
    return b(v, 19);
  }
  /**
   *  Return a new ``bytes20`` type for %%v%%.
   */
  static bytes20(v) {
    return b(v, 20);
  }
  /**
   *  Return a new ``bytes21`` type for %%v%%.
   */
  static bytes21(v) {
    return b(v, 21);
  }
  /**
   *  Return a new ``bytes22`` type for %%v%%.
   */
  static bytes22(v) {
    return b(v, 22);
  }
  /**
   *  Return a new ``bytes23`` type for %%v%%.
   */
  static bytes23(v) {
    return b(v, 23);
  }
  /**
   *  Return a new ``bytes24`` type for %%v%%.
   */
  static bytes24(v) {
    return b(v, 24);
  }
  /**
   *  Return a new ``bytes25`` type for %%v%%.
   */
  static bytes25(v) {
    return b(v, 25);
  }
  /**
   *  Return a new ``bytes26`` type for %%v%%.
   */
  static bytes26(v) {
    return b(v, 26);
  }
  /**
   *  Return a new ``bytes27`` type for %%v%%.
   */
  static bytes27(v) {
    return b(v, 27);
  }
  /**
   *  Return a new ``bytes28`` type for %%v%%.
   */
  static bytes28(v) {
    return b(v, 28);
  }
  /**
   *  Return a new ``bytes29`` type for %%v%%.
   */
  static bytes29(v) {
    return b(v, 29);
  }
  /**
   *  Return a new ``bytes30`` type for %%v%%.
   */
  static bytes30(v) {
    return b(v, 30);
  }
  /**
   *  Return a new ``bytes31`` type for %%v%%.
   */
  static bytes31(v) {
    return b(v, 31);
  }
  /**
   *  Return a new ``bytes32`` type for %%v%%.
   */
  static bytes32(v) {
    return b(v, 32);
  }
  /**
   *  Return a new ``address`` type for %%v%%.
   */
  static address(v) {
    return new _Typed(_gaurd, "address", v);
  }
  /**
   *  Return a new ``bool`` type for %%v%%.
   */
  static bool(v) {
    return new _Typed(_gaurd, "bool", !!v);
  }
  /**
   *  Return a new ``bytes`` type for %%v%%.
   */
  static bytes(v) {
    return new _Typed(_gaurd, "bytes", v);
  }
  /**
   *  Return a new ``string`` type for %%v%%.
   */
  static string(v) {
    return new _Typed(_gaurd, "string", v);
  }
  /**
   *  Return a new ``array`` type for %%v%%, allowing %%dynamic%% length.
   */
  static array(v, dynamic) {
    throw new Error("not implemented yet");
    return new _Typed(_gaurd, "array", v, dynamic);
  }
  /**
   *  Return a new ``tuple`` type for %%v%%, with the optional %%name%%.
   */
  static tuple(v, name) {
    throw new Error("not implemented yet");
    return new _Typed(_gaurd, "tuple", v, name);
  }
  /**
   *  Return a new ``uint8`` type for %%v%%.
   */
  static overrides(v) {
    return new _Typed(_gaurd, "overrides", Object.assign({}, v));
  }
  /**
   *  Returns true only if %%value%% is a [[Typed]] instance.
   */
  static isTyped(value) {
    return value && typeof value === "object" && "_typedSymbol" in value && value._typedSymbol === _typedSymbol;
  }
  /**
   *  If the value is a [[Typed]] instance, validates the underlying value
   *  and returns it, otherwise returns value directly.
   *
   *  This is useful for functions that with to accept either a [[Typed]]
   *  object or values.
   */
  static dereference(value, type) {
    if (_Typed.isTyped(value)) {
      if (value.type !== type) {
        throw new Error(`invalid type: expecetd ${type}, got ${value.type}`);
      }
      return value.value;
    }
    return value;
  }
};
_options = new WeakMap();
var Typed = _Typed;

// node_modules/ethers/lib.esm/abi/coders/address.js
var AddressCoder = class extends Coder {
  constructor(localName) {
    super("address", "address", localName, false);
  }
  defaultValue() {
    return "0x0000000000000000000000000000000000000000";
  }
  encode(writer, _value2) {
    let value = Typed.dereference(_value2, "string");
    try {
      value = getAddress(value);
    } catch (error) {
      return this._throwError(error.message, _value2);
    }
    return writer.writeValue(value);
  }
  decode(reader) {
    return getAddress(toBeHex(reader.readValue(), 20));
  }
};

// node_modules/ethers/lib.esm/abi/coders/anonymous.js
var AnonymousCoder = class extends Coder {
  constructor(coder) {
    super(coder.name, coder.type, "_", coder.dynamic);
    __publicField(this, "coder");
    this.coder = coder;
  }
  defaultValue() {
    return this.coder.defaultValue();
  }
  encode(writer, value) {
    return this.coder.encode(writer, value);
  }
  decode(reader) {
    return this.coder.decode(reader);
  }
};

// node_modules/ethers/lib.esm/abi/coders/array.js
function pack(writer, coders, values) {
  let arrayValues = [];
  if (Array.isArray(values)) {
    arrayValues = values;
  } else if (values && typeof values === "object") {
    let unique = {};
    arrayValues = coders.map((coder) => {
      const name = coder.localName;
      assert(name, "cannot encode object for signature with missing names", "INVALID_ARGUMENT", { argument: "values", info: { coder }, value: values });
      assert(!unique[name], "cannot encode object for signature with duplicate names", "INVALID_ARGUMENT", { argument: "values", info: { coder }, value: values });
      unique[name] = true;
      return values[name];
    });
  } else {
    assertArgument(false, "invalid tuple value", "tuple", values);
  }
  assertArgument(coders.length === arrayValues.length, "types/value length mismatch", "tuple", values);
  let staticWriter = new Writer();
  let dynamicWriter = new Writer();
  let updateFuncs = [];
  coders.forEach((coder, index) => {
    let value = arrayValues[index];
    if (coder.dynamic) {
      let dynamicOffset = dynamicWriter.length;
      coder.encode(dynamicWriter, value);
      let updateFunc = staticWriter.writeUpdatableValue();
      updateFuncs.push((baseOffset) => {
        updateFunc(baseOffset + dynamicOffset);
      });
    } else {
      coder.encode(staticWriter, value);
    }
  });
  updateFuncs.forEach((func) => {
    func(staticWriter.length);
  });
  let length = writer.appendWriter(staticWriter);
  length += writer.appendWriter(dynamicWriter);
  return length;
}
function unpack(reader, coders) {
  let values = [];
  let keys = [];
  let baseReader = reader.subReader(0);
  coders.forEach((coder) => {
    let value = null;
    if (coder.dynamic) {
      let offset = reader.readIndex();
      let offsetReader = baseReader.subReader(offset);
      try {
        value = coder.decode(offsetReader);
      } catch (error) {
        if (isError(error, "BUFFER_OVERRUN")) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    } else {
      try {
        value = coder.decode(reader);
      } catch (error) {
        if (isError(error, "BUFFER_OVERRUN")) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    }
    if (value == void 0) {
      throw new Error("investigate");
    }
    values.push(value);
    keys.push(coder.localName || null);
  });
  return Result.fromItems(values, keys);
}
var ArrayCoder = class extends Coder {
  constructor(coder, length, localName) {
    const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
    const dynamic = length === -1 || coder.dynamic;
    super("array", type, localName, dynamic);
    __publicField(this, "coder");
    __publicField(this, "length");
    defineProperties(this, { coder, length });
  }
  defaultValue() {
    const defaultChild = this.coder.defaultValue();
    const result = [];
    for (let i = 0; i < this.length; i++) {
      result.push(defaultChild);
    }
    return result;
  }
  encode(writer, _value2) {
    const value = Typed.dereference(_value2, "array");
    if (!Array.isArray(value)) {
      this._throwError("expected array value", value);
    }
    let count = this.length;
    if (count === -1) {
      count = value.length;
      writer.writeValue(value.length);
    }
    assertArgumentCount(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
    let coders = [];
    for (let i = 0; i < value.length; i++) {
      coders.push(this.coder);
    }
    return pack(writer, coders, value);
  }
  decode(reader) {
    let count = this.length;
    if (count === -1) {
      count = reader.readIndex();
      assert(count * WordSize <= reader.dataLength, "insufficient data length", "BUFFER_OVERRUN", { buffer: reader.bytes, offset: count * WordSize, length: reader.dataLength });
    }
    let coders = [];
    for (let i = 0; i < count; i++) {
      coders.push(new AnonymousCoder(this.coder));
    }
    return unpack(reader, coders);
  }
};

// node_modules/ethers/lib.esm/abi/coders/boolean.js
var BooleanCoder = class extends Coder {
  constructor(localName) {
    super("bool", "bool", localName, false);
  }
  defaultValue() {
    return false;
  }
  encode(writer, _value2) {
    const value = Typed.dereference(_value2, "bool");
    return writer.writeValue(value ? 1 : 0);
  }
  decode(reader) {
    return !!reader.readValue();
  }
};

// node_modules/ethers/lib.esm/abi/coders/bytes.js
var DynamicBytesCoder = class extends Coder {
  constructor(type, localName) {
    super(type, type, localName, true);
  }
  defaultValue() {
    return "0x";
  }
  encode(writer, value) {
    value = getBytesCopy(value);
    let length = writer.writeValue(value.length);
    length += writer.writeBytes(value);
    return length;
  }
  decode(reader) {
    return reader.readBytes(reader.readIndex(), true);
  }
};
var BytesCoder = class extends DynamicBytesCoder {
  constructor(localName) {
    super("bytes", localName);
  }
  decode(reader) {
    return hexlify(super.decode(reader));
  }
};

// node_modules/ethers/lib.esm/abi/coders/fixed-bytes.js
var FixedBytesCoder = class extends Coder {
  constructor(size, localName) {
    let name = "bytes" + String(size);
    super(name, name, localName, false);
    __publicField(this, "size");
    defineProperties(this, { size }, { size: "number" });
  }
  defaultValue() {
    return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
  }
  encode(writer, _value2) {
    let data = getBytesCopy(Typed.dereference(_value2, this.type));
    if (data.length !== this.size) {
      this._throwError("incorrect data length", _value2);
    }
    return writer.writeBytes(data);
  }
  decode(reader) {
    return hexlify(reader.readBytes(this.size));
  }
};

// node_modules/ethers/lib.esm/abi/coders/null.js
var Empty = new Uint8Array([]);
var NullCoder = class extends Coder {
  constructor(localName) {
    super("null", "", localName, false);
  }
  defaultValue() {
    return null;
  }
  encode(writer, value) {
    if (value != null) {
      this._throwError("not null", value);
    }
    return writer.writeBytes(Empty);
  }
  decode(reader) {
    reader.readBytes(0);
    return null;
  }
};

// node_modules/ethers/lib.esm/abi/coders/number.js
var BN_06 = BigInt(0);
var BN_14 = BigInt(1);
var BN_MAX_UINT256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var NumberCoder = class extends Coder {
  constructor(size, signed2, localName) {
    const name = (signed2 ? "int" : "uint") + size * 8;
    super(name, name, localName, false);
    __publicField(this, "size");
    __publicField(this, "signed");
    defineProperties(this, { size, signed: signed2 }, { size: "number", signed: "boolean" });
  }
  defaultValue() {
    return 0;
  }
  encode(writer, _value2) {
    let value = getBigInt(Typed.dereference(_value2, this.type));
    let maxUintValue = mask(BN_MAX_UINT256, WordSize * 8);
    if (this.signed) {
      let bounds = mask(maxUintValue, this.size * 8 - 1);
      if (value > bounds || value < -(bounds + BN_14)) {
        this._throwError("value out-of-bounds", _value2);
      }
      value = toTwos(value, 8 * WordSize);
    } else if (value < BN_06 || value > mask(maxUintValue, this.size * 8)) {
      this._throwError("value out-of-bounds", _value2);
    }
    return writer.writeValue(value);
  }
  decode(reader) {
    let value = mask(reader.readValue(), this.size * 8);
    if (this.signed) {
      value = fromTwos(value, this.size * 8);
    }
    return value;
  }
};

// node_modules/ethers/lib.esm/abi/coders/string.js
var StringCoder = class extends DynamicBytesCoder {
  constructor(localName) {
    super("string", localName);
  }
  defaultValue() {
    return "";
  }
  encode(writer, _value2) {
    return super.encode(writer, toUtf8Bytes(Typed.dereference(_value2, "string")));
  }
  decode(reader) {
    return toUtf8String(super.decode(reader));
  }
};

// node_modules/ethers/lib.esm/abi/coders/tuple.js
var TupleCoder = class extends Coder {
  constructor(coders, localName) {
    let dynamic = false;
    const types = [];
    coders.forEach((coder) => {
      if (coder.dynamic) {
        dynamic = true;
      }
      types.push(coder.type);
    });
    const type = "tuple(" + types.join(",") + ")";
    super("tuple", type, localName, dynamic);
    __publicField(this, "coders");
    defineProperties(this, { coders: Object.freeze(coders.slice()) });
  }
  defaultValue() {
    const values = [];
    this.coders.forEach((coder) => {
      values.push(coder.defaultValue());
    });
    const uniqueNames = this.coders.reduce((accum, coder) => {
      const name = coder.localName;
      if (name) {
        if (!accum[name]) {
          accum[name] = 0;
        }
        accum[name]++;
      }
      return accum;
    }, {});
    this.coders.forEach((coder, index) => {
      let name = coder.localName;
      if (!name || uniqueNames[name] !== 1) {
        return;
      }
      if (name === "length") {
        name = "_length";
      }
      if (values[name] != null) {
        return;
      }
      values[name] = values[index];
    });
    return Object.freeze(values);
  }
  encode(writer, _value2) {
    const value = Typed.dereference(_value2, "tuple");
    return pack(writer, this.coders, value);
  }
  decode(reader) {
    return unpack(reader, this.coders);
  }
};

// node_modules/ethers/lib.esm/hash/id.js
function id(value) {
  return keccak256(toUtf8Bytes(value));
}

// node_modules/@adraffy/ens-normalize/dist/index.mjs
var COMPRESSED$1 = "";
var FENCED = /* @__PURE__ */ new Map([[8217, "apostrophe"], [8260, "fraction slash"], [12539, "middle dot"]]);
var NSM_MAX = 4;
function decode_arithmetic(bytes2) {
  let pos = 0;
  function u16() {
    return bytes2[pos++] << 8 | bytes2[pos++];
  }
  let symbol_count = u16();
  let total = 1;
  let acc = [0, 1];
  for (let i = 1; i < symbol_count; i++) {
    acc.push(total += u16());
  }
  let skip = u16();
  let pos_payload = pos;
  pos += skip;
  let read_width = 0;
  let read_buffer = 0;
  function read_bit() {
    if (read_width == 0) {
      read_buffer = read_buffer << 8 | bytes2[pos++];
      read_width = 8;
    }
    return read_buffer >> --read_width & 1;
  }
  const N3 = 31;
  const FULL = 2 ** N3;
  const HALF = FULL >>> 1;
  const QRTR = HALF >> 1;
  const MASK = FULL - 1;
  let register = 0;
  for (let i = 0; i < N3; i++) register = register << 1 | read_bit();
  let symbols = [];
  let low = 0;
  let range = FULL;
  while (true) {
    let value = Math.floor(((register - low + 1) * total - 1) / range);
    let start = 0;
    let end = symbol_count;
    while (end - start > 1) {
      let mid = start + end >>> 1;
      if (value < acc[mid]) {
        end = mid;
      } else {
        start = mid;
      }
    }
    if (start == 0) break;
    symbols.push(start);
    let a = low + Math.floor(range * acc[start] / total);
    let b2 = low + Math.floor(range * acc[start + 1] / total) - 1;
    while (((a ^ b2) & HALF) == 0) {
      register = register << 1 & MASK | read_bit();
      a = a << 1 & MASK;
      b2 = b2 << 1 & MASK | 1;
    }
    while (a & ~b2 & QRTR) {
      register = register & HALF | register << 1 & MASK >>> 1 | read_bit();
      a = a << 1 ^ HALF;
      b2 = (b2 ^ HALF) << 1 | HALF | 1;
    }
    low = a;
    range = 1 + b2 - a;
  }
  let offset = symbol_count - 4;
  return symbols.map((x) => {
    switch (x - offset) {
      case 3:
        return offset + 65792 + (bytes2[pos_payload++] << 16 | bytes2[pos_payload++] << 8 | bytes2[pos_payload++]);
      case 2:
        return offset + 256 + (bytes2[pos_payload++] << 8 | bytes2[pos_payload++]);
      case 1:
        return offset + bytes2[pos_payload++];
      default:
        return x - 1;
    }
  });
}
function read_payload(v) {
  let pos = 0;
  return () => v[pos++];
}
function read_compressed_payload(s) {
  return read_payload(decode_arithmetic(unsafe_atob(s)));
}
function unsafe_atob(s) {
  let lookup = [];
  [..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"].forEach((c, i) => lookup[c.charCodeAt(0)] = i);
  let n2 = s.length;
  let ret = new Uint8Array(6 * n2 >> 3);
  for (let i = 0, pos = 0, width = 0, carry = 0; i < n2; i++) {
    carry = carry << 6 | lookup[s.charCodeAt(i)];
    width += 6;
    if (width >= 8) {
      ret[pos++] = carry >> (width -= 8);
    }
  }
  return ret;
}
function signed(i) {
  return i & 1 ? ~i >> 1 : i >> 1;
}
function read_deltas(n2, next) {
  let v = Array(n2);
  for (let i = 0, x = 0; i < n2; i++) v[i] = x += signed(next());
  return v;
}
function read_sorted(next, prev = 0) {
  let ret = [];
  while (true) {
    let x = next();
    let n2 = next();
    if (!n2) break;
    prev += x;
    for (let i = 0; i < n2; i++) {
      ret.push(prev + i);
    }
    prev += n2 + 1;
  }
  return ret;
}
function read_sorted_arrays(next) {
  return read_array_while(() => {
    let v = read_sorted(next);
    if (v.length) return v;
  });
}
function read_mapped(next) {
  let ret = [];
  while (true) {
    let w = next();
    if (w == 0) break;
    ret.push(read_linear_table(w, next));
  }
  while (true) {
    let w = next() - 1;
    if (w < 0) break;
    ret.push(read_replacement_table(w, next));
  }
  return ret.flat();
}
function read_array_while(next) {
  let v = [];
  while (true) {
    let x = next(v.length);
    if (!x) break;
    v.push(x);
  }
  return v;
}
function read_transposed(n2, w, next) {
  let m = Array(n2).fill().map(() => []);
  for (let i = 0; i < w; i++) {
    read_deltas(n2, next).forEach((x, j) => m[j].push(x));
  }
  return m;
}
function read_linear_table(w, next) {
  let dx = 1 + next();
  let dy = next();
  let vN = read_array_while(next);
  let m = read_transposed(vN.length, 1 + w, next);
  return m.flatMap((v, i) => {
    let [x, ...ys] = v;
    return Array(vN[i]).fill().map((_, j) => {
      let j_dy = j * dy;
      return [x + j * dx, ys.map((y) => y + j_dy)];
    });
  });
}
function read_replacement_table(w, next) {
  let n2 = 1 + next();
  let m = read_transposed(n2, 1 + w, next);
  return m.map((v) => [v[0], v.slice(1)]);
}
function read_trie(next) {
  let ret = [];
  let sorted = read_sorted(next);
  expand(decode2([]), []);
  return ret;
  function decode2(Q) {
    let S2 = next();
    let B = read_array_while(() => {
      let cps = read_sorted(next).map((i) => sorted[i]);
      if (cps.length) return decode2(cps);
    });
    return { S: S2, B, Q };
  }
  function expand({ S: S2, B }, cps, saved) {
    if (S2 & 4 && saved === cps[cps.length - 1]) return;
    if (S2 & 2) saved = cps[cps.length - 1];
    if (S2 & 1) ret.push(cps);
    for (let br of B) {
      for (let cp of br.Q) {
        expand(br, [...cps, cp], saved);
      }
    }
  }
}
function hex_cp(cp) {
  return cp.toString(16).toUpperCase().padStart(2, "0");
}
function quote_cp(cp) {
  return `{${hex_cp(cp)}}`;
}
function explode_cp(s) {
  let cps = [];
  for (let pos = 0, len = s.length; pos < len; ) {
    let cp = s.codePointAt(pos);
    pos += cp < 65536 ? 1 : 2;
    cps.push(cp);
  }
  return cps;
}
function str_from_cps(cps) {
  const chunk = 4096;
  let len = cps.length;
  if (len < chunk) return String.fromCodePoint(...cps);
  let buf = [];
  for (let i = 0; i < len; ) {
    buf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));
  }
  return buf.join("");
}
function compare_arrays(a, b2) {
  let n2 = a.length;
  let c = n2 - b2.length;
  for (let i = 0; c == 0 && i < n2; i++) c = a[i] - b2[i];
  return c;
}
var COMPRESSED = "AEUDTAHBCFQATQDRADAAcgAgADQAFAAsABQAHwAOACQADQARAAoAFwAHABIACAAPAAUACwAFAAwABAAQAAMABwAEAAoABQAIAAIACgABAAQAFAALAAIACwABAAIAAQAHAAMAAwAEAAsADAAMAAwACgANAA0AAwAKAAkABAAdAAYAZwDSAdsDJgC0CkMB8xhZAqfoC190UGcThgBurwf7PT09Pb09AjgJum8OjDllxHYUKXAPxzq6tABAxgK8ysUvWAgMPT09PT09PSs6LT2HcgWXWwFLoSMEEEl5RFVMKvO0XQ8ExDdJMnIgsj26PTQyy8FfEQ8AY8IPAGcEbwRwBHEEcgRzBHQEdQR2BHcEeAR6BHsEfAR+BIAEgfndBQoBYgULAWIFDAFiBNcE2ATZBRAFEQUvBdALFAsVDPcNBw13DYcOMA4xDjMB4BllHI0B2grbAMDpHLkQ7QHVAPRNQQFnGRUEg0yEB2uaJF8AJpIBpob5AERSMAKNoAXqaQLUBMCzEiACnwRZEkkVsS7tANAsBG0RuAQLEPABv9HICTUBXigPZwRBApMDOwAamhtaABqEAY8KvKx3LQ4ArAB8UhwEBAVSagD8AEFZADkBIadVj2UMUgx5Il4ANQC9AxIB1BlbEPMAs30CGxlXAhwZKQIECBc6EbsCoxngzv7UzRQA8M0BawL6ZwkN7wABAD33OQRcsgLJCjMCjqUChtw/km+NAsXPAoP2BT84PwURAK0RAvptb6cApQS/OMMey5HJS84UdxpxTPkCogVFITaTOwERAK5pAvkNBOVyA7q3BKlOJSALAgUIBRcEdASpBXqzABXFSWZOawLCOqw//AolCZdvv3dSBkEQGyelEPcMMwG1ATsN7UvYBPEGOwTJH30ZGQ/NlZwIpS3dDO0m4y6hgFoj9SqDBe1L9DzdC01RaA9ZC2UJ4zpjgU4DIQENIosK3Q05CG0Q8wrJaw3lEUUHOQPVSZoApQcBCxEdNRW1JhBirAsJOXcG+xr2C48mrxMpevwF0xohBk0BKRr/AM8u54WwWjFcHE9fBgMLJSPHFKhQIA0lQLd4SBobBxUlqQKRQ3BKh1E2HpMh9jw9DWYuE1F8B/U8BRlPC4E8nkarRQ4R0j6NPUgiSUwsBDV/LC8niwnPD4UMuXxyAVkJIQmxDHETMREXN8UIOQcZLZckJxUIIUaVYJoE958D8xPRAwsFPwlBBxMDtRwtEy4VKQUNgSTXAvM21S6zAo9WgAEXBcsPJR/fEFBH4A7pCJsCZQODJesALRUhABcimwhDYwBfj9hTBS7LCMdqbCN0A2cU52ERcweRDlcHpxwzFb8c4XDIXguGCCijrwlbAXUJmQFfBOMICTVbjKAgQWdTi1gYmyBhQT9d/AIxDGUVn0S9h3gCiw9rEhsBNQFzBzkNAQJ3Ee0RaxCVCOuGBDW1M/g6JQRPIYMgEQonA09szgsnJvkM+GkBoxJiAww0PXfuZ6tgtiQX/QcZMsVBYCHxC5JPzQycGsEYQlQuGeQHvwPzGvMn6kFXBf8DowMTOk0z7gS9C2kIiwk/AEkOoxcH1xhqCnGM0AExiwG3mQNXkYMCb48GNwcLAGcLhwV55QAdAqcIowAFAM8DVwA5Aq0HnQAZAIVBAT0DJy8BIeUCjwOTCDHLAZUvAfMpBBvDDBUA9zduSgLDsQKAamaiBd1YAo4CSTUBTSUEBU5HUQOvceEA2wBLBhPfRwEVq0rLGuNDAd9vKwDHAPsABTUHBUEBzQHzbQC3AV8LMQmis7UBTekpAIMAFWsB1wKJAN0ANQB/8QFTAE0FWfkF0wJPSQERMRgrV2EBuwMfATMBDQB5BsuNpckHHwRtB9MCEBsV4QLvLge1AQMi3xPNQsUCvd5VoWACZIECYkJbTa9bNyACofcCaJgCZgkCn4Q4GwsCZjsCZiYEbgR/A38TA36SOQY5dxc5gjojIwJsHQIyNjgKAm3HAm2u74ozZ0UrAWcA3gDhAEoFB5gMjQD+C8IADbUCdy8CdqI/AnlLQwJ4uh1c20WuRtcCfD8CesgCfQkCfPAFWQUgSABIfWMkAoFtAoAAAoAFAn+uSVhKWxUXSswC0QEC0MxLJwOITwOH5kTFkTIC8qFdAwMDrkvOTC0lA89NTE2vAos/AorYwRsHHUNnBbcCjjcCjlxAl4ECjtkCjlx4UbRTNQpS1FSFApP7ApMMAOkAHFUeVa9V0AYsGymVhjLheGZFOzkCl58C77JYIagAWSUClo8ClnycAKlZrFoJgU0AOwKWtQKWTlxEXNECmcsCmWRcyl0HGQKcmznCOp0CnBYCn5sCnriKAB0PMSoPAp3xAp6SALU9YTRh7wKe0wKgbgGpAp6fHwKeTqVjyGQnJSsCJ68CJn4CoPsCoEwCot0CocQCpi8Cpc4Cp/8AfQKn8mh8aLEAA0lqHGrRAqzjAqyuAq1nAq0CAlcdAlXcArHh1wMfTmyXArK9DQKy6Bds4G1jbUhfAyXNArZcOz9ukAMpRQK4XgK5RxUCuSp3cDZw4QK9GQK72nCWAzIRAr6IcgIDM3ECvhpzInNPAsPLAsMEc4J0SzVFdOADPKcDPJoDPb8CxXwCxkcCxhCJAshpUQLIRALJTwLJLgJknQLd0nh5YXiueSVL0AMYo2cCAmH0GfOVJHsLXpJeuxECz2sCz2wvS1PS8xOfAMatAs9zASnqA04SfksFAtwnAtuKAtJPA1JcA1NfAQEDVYyAiT8AyxbtYEWCHILTgs6DjQLaxwLZ3oQQhEmnPAOGpQAvA2QOhnFZ+QBVAt9lAt64c3cC4i/tFAHzMCcB9JsB8tKHAuvzAulweQLq+QLq5AD5RwG5Au6JAuuclqqXAwLuPwOF4Jh5cOBxoQLzAwBpA44WmZMC9xMDkW4DkocC95gC+dkC+GaaHJqruzebHgOdgwL++gEbADmfHJ+zAwWNA6ZqA6bZANHFAwZqoYiiBQkDDEkCwAA/AwDhQRdTARHzA2sHl2cFAJMtK7evvdsBiZkUfxEEOQH7KQUhDp0JnwCS/SlXxQL3AZ0AtwW5AG8LbUEuFCaNLgFDAYD8AbUmAHUDDgRtACwCFgyhAAAKAj0CagPdA34EkQEgRQUhfAoABQBEABMANhICdwEABdUDa+8KxQIA9wqfJ7+xt+UBkSFBQgHpFH8RNMCJAAQAGwBaAkUChIsABjpTOpSNbQC4Oo860ACNOME63AClAOgAywE6gTo7Ofw5+Tt2iTpbO56JOm85GAFWATMBbAUvNV01njWtNWY1dTW2NcU1gjWRNdI14TWeNa017jX9NbI1wTYCNhE1xjXVNhY2JzXeNe02LjY9Ni41LSE2OjY9Njw2yTcIBJA8VzY4Nt03IDcPNsogN4k3MAoEsDxnNiQ3GTdsOo03IULUQwdC4EMLHA8PCZsobShRVQYA6X8A6bABFCnXAukBowC9BbcAbwNzBL8MDAMMAQgDAAkKCwsLCQoGBAVVBI/DvwDz9b29kaUCb0QtsRTNLt4eGBcSHAMZFhYZEhYEARAEBUEcQRxBHEEcQRxBHEEaQRxBHEFCSTxBPElISUhBNkM2QTYbNklISVmBVIgBFLWZAu0BhQCjBcEAbykBvwGJAaQcEZ0ePCklMAAhMvAIMAL54gC7Bm8EescjzQMpARQpKgDUABavAj626xQAJP0A3etzuf4NNRA7efy2Z9NQrCnC0OSyANz5BBIbJ5IFDR6miIavYS6tprjjmuKebxm5C74Q225X1pkaYYPb6f1DK4k3xMEBb9S2WMjEibTNWhsRJIA+vwNVEiXTE5iXs/wezV66oFLfp9NZGYW+Gk19J2+bCT6Ye2w6LDYdgzKMUabk595eLBCXANz9HUpWbATq9vqXVx9XDg+Pc9Xp4+bsS005SVM/BJBM4687WUuf+Uj9dEi8aDNaPxtpbDxcG1THTImUMZq4UCaaNYpsVqraNyKLJXDYsFZ/5jl7bLRtO88t7P3xZaAxhb5OdPMXqsSkp1WCieG8jXm1U99+blvLlXzPCS+M93VnJCiK+09LfaSaBAVBomyDgJua8dfUzR7ga34IvR2Nvj+A9heJ6lsl1KG4NkI1032Cnff1m1wof2B9oHJK4bi6JkEdSqeNeiuo6QoZZincoc73/TH9SXF8sCE7XyuYyW8WSgbGFCjPV0ihLKhdPs08Tx82fYAkLLc4I2wdl4apY7GU5lHRFzRWJep7Ww3wbeA3qmd59/86P4xuNaqDpygXt6M85glSBHOCGgJDnt+pN9bK7HApMguX6+06RZNjzVmcZJ+wcUrJ9//bpRNxNuKpNl9uFds+S9tdx7LaM5ZkIrPj6nIU9mnbFtVbs9s/uLgl8MVczAwet+iOEzzBlYW7RCMgE6gyNLeq6+1tIx4dpgZnd0DksJS5f+JNDpwwcPNXaaVspq1fbQajOrJgK0ofKtJ1Ne90L6VO4MOl5S886p7u6xo7OLjG8TGL+HU1JXGJgppg4nNbNJ5nlzSpuPYy21JUEcUA94PoFiZfjZue+QnyQ80ekOuZVkxx4g+cvhJfHgNl4hy1/a6+RKcKlar/J29y//EztlbVPHVUeQ1zX86eQVAjR/M3dA9w4W8LfaXp4EgM85wOWasli837PzVMOnsLzR+k3o75/lRPAJSE1xAKQzEi5v10ke+VBvRt1cwQRMd+U5mLCTGVd6XiZtgBG5cDi0w22GKcVNvHiu5LQbZEDVtz0onn7k5+heuKXVsZtSzilkLRAUmjMXEMB3J9YC50XBxPiz53SC+EhnPl9WsKCv92SM/OFFIMJZYfl0WW8tIO3UxYcwdMAj7FSmgrsZ2aAZO03BOhP1bNNZItyXYQFTpC3SG1VuPDqH9GkiCDmE+JwxyIVSO5siDErAOpEXFgjy6PQtOVDj+s6e1r8heWVvmZnTciuf4EiNZzCAd7SOMhXERIOlsHIMG399i9aLTy3m2hRLZjJVDNLS53iGIK11dPqQt0zBDyg6qc7YqkDm2M5Ve6dCWCaCbTXX2rToaIgz6+zh4lYUi/+6nqcFMAkQJKHYLK0wYk5N9szV6xihDbDDFr45lN1K4aCXBq/FitPSud9gLt5ZVn+ZqGX7cwm2z5EGMgfFpIFyhGGuDPmso6TItTMwny+7uPnLCf4W6goFQFV0oQSsc9VfMmVLcLr6ZetDZbaSFTLqnSO/bIPjA3/zAUoqgGFAEQS4IhuMzEp2I3jJzbzkk/IEmyax+rhZTwd6f+CGtwPixu8IvzACquPWPREu9ZvGkUzpRwvRRuaNN6cr0W1wWits9ICdYJ7ltbgMiSL3sTPeufgNcVqMVWFkCPDH4jG2jA0XcVgQj62Cb29v9f/z/+2KbYvIv/zzjpQAPkliaVDzNrW57TZ/ZOyZD0nlfMmAIBIAGAI0D3k/mdN4xr9v85ZbZbbqfH2jGd5hUqNZWwl5SPfoGmfElmazUIeNL1j/mkF7VNAzTq4jNt8JoQ11NQOcmhprXoxSxfRGJ9LDEOAQ+dmxAQH90iti9e2u/MoeuaGcDTHoC+xsmEeWmxEKefQuIzHbpw5Tc5cEocboAD09oipWQhtTO1wivf/O+DRe2rpl/E9wlrzBorjJsOeG1B/XPW4EaJEFdNlECEZga5ZoGRHXgYouGRuVkm8tDESiEyFNo+3s5M5puSdTyUL2llnINVHEt91XUNW4ewdMgJ4boJfEyt/iY5WXqbA+A2Fkt5Z0lutiWhe9nZIyIUjyXDC3UsaG1t+eNx6z4W/OYoTB7A6x+dNSTOi9AInctbESqm5gvOLww7OWXPrmHwVZasrl4eD113pm+JtT7JVOvnCXqdzzdTRHgJ0PiGTFYW5Gvt9R9LD6Lzfs0v/TZZHSmyVNq7viIHE6DBK7Qp07Iz55EM8SYtQvZf/obBniTWi5C2/ovHfw4VndkE5XYdjOhCMRjDeOEfXeN/CwfGduiUIfsoFeUxXeQXba7c7972XNv8w+dTjjUM0QeNAReW+J014dKAD/McQYXT7c0GQPIkn3Ll6R7gGjuiQoZD0TEeEqQpKoZ15g/0OPQI17QiSv9AUROa/V/TQN3dvLArec3RrsYlvBm1b8LWzltdugsC50lNKYLEp2a+ZZYqPejULRlOJh5zj/LVMyTDvwKhMxxwuDkxJ1QpoNI0OTWLom4Z71SNzI9TV1iXJrIu9Wcnd+MCaAw8o1jSXd94YU/1gnkrC9BUEOtQvEIQ7g0i6h+KL2JKk8Ydl7HruvgWMSAmNe+LshGhV4qnWHhO9/RIPQzY1tHRj2VqOyNsDpK0cww+56AdDC4gsWwY0XxoucIWIqs/GcwnWqlaT0KPr8mbK5U94/301i1WLt4YINTVvCFBrFZbIbY8eycOdeJ2teD5IfPLCRg7jjcFTwlMFNl9zdh/o3E/hHPwj7BWg0MU09pPrBLbrCgm54A6H+I6v27+jL5gkjWg/iYdks9jbfVP5y/n0dlgWEMlKasl7JvFZd56LfybW1eeaVO0gxTfXZwD8G4SI116yx7UKVRgui6Ya1YpixqXeNLc8IxtAwCU5IhwQgn+NqHnRaDv61CxKhOq4pOX7M6pkA+Pmpd4j1vn6ACUALoLLc4vpXci8VidLxzm7qFBe7s+quuJs6ETYmnpgS3LwSZxPIltgBDXz8M1k/W2ySNv2f9/NPhxLGK2D21dkHeSGmenRT3Yqcdl0m/h3OYr8V+lXNYGf8aCCpd4bWjE4QIPj7vUKN4Nrfs7ML6Y2OyS830JCnofg/k7lpFpt4SqZc5HGg1HCOrHvOdC8bP6FGDbE/VV0mX4IakzbdS/op+Kt3G24/8QbBV7y86sGSQ/vZzU8FXs7u6jIvwchsEP2BpIhW3G8uWNwa3HmjfH/ZjhhCWvluAcF+nMf14ClKg5hGgtPLJ98ueNAkc5Hs2WZlk2QHvfreCK1CCGO6nMZVSb99VM/ajr8WHTte9JSmkXq/i/U943HEbdzW6Re/S88dKgg8pGOLlAeNiqrcLkUR3/aClFpMXcOUP3rmETcWSfMXZE3TUOi8i+fqRnTYLflVx/Vb/6GJ7eIRZUA6k3RYR3iFSK9c4iDdNwJuZL2FKz/IK5VimcNWEqdXjSoxSgmF0UPlDoUlNrPcM7ftmA8Y9gKiqKEHuWN+AZRIwtVSxye2Kf8rM3lhJ5XcBXU9n4v0Oy1RU2M+4qM8AQPVwse8ErNSob5oFPWxuqZnVzo1qB/IBxkM3EVUKFUUlO3e51259GgNcJbCmlvrdjtoTW7rChm1wyCKzpCTwozUUEOIcWLneRLgMXh+SjGSFkAllzbGS5HK7LlfCMRNRDSvbQPjcXaenNYxCvu2Qyznz6StuxVj66SgI0T8B6/sfHAJYZaZ78thjOSIFumNWLQbeZixDCCC+v0YBtkxiBB3jefHqZ/dFHU+crbj6OvS1x/JDD7vlm7zOVPwpUC01nhxZuY/63E7g";
var S0 = 44032;
var L0 = 4352;
var V0 = 4449;
var T0 = 4519;
var L_COUNT = 19;
var V_COUNT = 21;
var T_COUNT = 28;
var N_COUNT = V_COUNT * T_COUNT;
var S_COUNT = L_COUNT * N_COUNT;
var S1 = S0 + S_COUNT;
var L1 = L0 + L_COUNT;
var V1 = V0 + V_COUNT;
var T1 = T0 + T_COUNT;
function unpack_cc(packed) {
  return packed >> 24 & 255;
}
function unpack_cp(packed) {
  return packed & 16777215;
}
var SHIFTED_RANK;
var EXCLUSIONS;
var DECOMP;
var RECOMP;
function init$1() {
  let r = read_compressed_payload(COMPRESSED);
  SHIFTED_RANK = new Map(read_sorted_arrays(r).flatMap((v, i) => v.map((x) => [x, i + 1 << 24])));
  EXCLUSIONS = new Set(read_sorted(r));
  DECOMP = /* @__PURE__ */ new Map();
  RECOMP = /* @__PURE__ */ new Map();
  for (let [cp, cps] of read_mapped(r)) {
    if (!EXCLUSIONS.has(cp) && cps.length == 2) {
      let [a, b2] = cps;
      let bucket = RECOMP.get(a);
      if (!bucket) {
        bucket = /* @__PURE__ */ new Map();
        RECOMP.set(a, bucket);
      }
      bucket.set(b2, cp);
    }
    DECOMP.set(cp, cps.reverse());
  }
}
function is_hangul(cp) {
  return cp >= S0 && cp < S1;
}
function compose_pair(a, b2) {
  if (a >= L0 && a < L1 && b2 >= V0 && b2 < V1) {
    return S0 + (a - L0) * N_COUNT + (b2 - V0) * T_COUNT;
  } else if (is_hangul(a) && b2 > T0 && b2 < T1 && (a - S0) % T_COUNT == 0) {
    return a + (b2 - T0);
  } else {
    let recomp = RECOMP.get(a);
    if (recomp) {
      recomp = recomp.get(b2);
      if (recomp) {
        return recomp;
      }
    }
    return -1;
  }
}
function decomposed(cps) {
  if (!SHIFTED_RANK) init$1();
  let ret = [];
  let buf = [];
  let check_order = false;
  function add2(cp) {
    let cc = SHIFTED_RANK.get(cp);
    if (cc) {
      check_order = true;
      cp |= cc;
    }
    ret.push(cp);
  }
  for (let cp of cps) {
    while (true) {
      if (cp < 128) {
        ret.push(cp);
      } else if (is_hangul(cp)) {
        let s_index = cp - S0;
        let l_index = s_index / N_COUNT | 0;
        let v_index = s_index % N_COUNT / T_COUNT | 0;
        let t_index = s_index % T_COUNT;
        add2(L0 + l_index);
        add2(V0 + v_index);
        if (t_index > 0) add2(T0 + t_index);
      } else {
        let mapped = DECOMP.get(cp);
        if (mapped) {
          buf.push(...mapped);
        } else {
          add2(cp);
        }
      }
      if (!buf.length) break;
      cp = buf.pop();
    }
  }
  if (check_order && ret.length > 1) {
    let prev_cc = unpack_cc(ret[0]);
    for (let i = 1; i < ret.length; i++) {
      let cc = unpack_cc(ret[i]);
      if (cc == 0 || prev_cc <= cc) {
        prev_cc = cc;
        continue;
      }
      let j = i - 1;
      while (true) {
        let tmp = ret[j + 1];
        ret[j + 1] = ret[j];
        ret[j] = tmp;
        if (!j) break;
        prev_cc = unpack_cc(ret[--j]);
        if (prev_cc <= cc) break;
      }
      prev_cc = unpack_cc(ret[i]);
    }
  }
  return ret;
}
function composed_from_decomposed(v) {
  let ret = [];
  let stack = [];
  let prev_cp = -1;
  let prev_cc = 0;
  for (let packed of v) {
    let cc = unpack_cc(packed);
    let cp = unpack_cp(packed);
    if (prev_cp == -1) {
      if (cc == 0) {
        prev_cp = cp;
      } else {
        ret.push(cp);
      }
    } else if (prev_cc > 0 && prev_cc >= cc) {
      if (cc == 0) {
        ret.push(prev_cp, ...stack);
        stack.length = 0;
        prev_cp = cp;
      } else {
        stack.push(cp);
      }
      prev_cc = cc;
    } else {
      let composed = compose_pair(prev_cp, cp);
      if (composed >= 0) {
        prev_cp = composed;
      } else if (prev_cc == 0 && cc == 0) {
        ret.push(prev_cp);
        prev_cp = cp;
      } else {
        stack.push(cp);
        prev_cc = cc;
      }
    }
  }
  if (prev_cp >= 0) {
    ret.push(prev_cp, ...stack);
  }
  return ret;
}
function nfd(cps) {
  return decomposed(cps).map(unpack_cp);
}
function nfc(cps) {
  return composed_from_decomposed(decomposed(cps));
}
var HYPHEN = 45;
var STOP_CH = ".";
var FE0F = 65039;
var UNIQUE_PH = 1;
var Array_from = (x) => Array.from(x);
function group_has_cp(g, cp) {
  return g.P.has(cp) || g.Q.has(cp);
}
var Emoji = class extends Array {
  get is_emoji() {
    return true;
  }
  // free tagging system
};
var MAPPED;
var IGNORED;
var CM;
var NSM;
var ESCAPE;
var NFC_CHECK;
var GROUPS;
var WHOLE_VALID;
var WHOLE_MAP;
var VALID;
var EMOJI_LIST;
var EMOJI_ROOT;
function init() {
  if (MAPPED) return;
  let r = read_compressed_payload(COMPRESSED$1);
  const read_sorted_array = () => read_sorted(r);
  const read_sorted_set = () => new Set(read_sorted_array());
  const set_add_many = (set, v) => v.forEach((x) => set.add(x));
  MAPPED = new Map(read_mapped(r));
  IGNORED = read_sorted_set();
  CM = read_sorted_array();
  NSM = new Set(read_sorted_array().map((i) => CM[i]));
  CM = new Set(CM);
  ESCAPE = read_sorted_set();
  NFC_CHECK = read_sorted_set();
  let chunks = read_sorted_arrays(r);
  let unrestricted = r();
  const read_chunked = () => {
    let set = /* @__PURE__ */ new Set();
    read_sorted_array().forEach((i) => set_add_many(set, chunks[i]));
    set_add_many(set, read_sorted_array());
    return set;
  };
  GROUPS = read_array_while((i) => {
    let N3 = read_array_while(r).map((x) => x + 96);
    if (N3.length) {
      let R = i >= unrestricted;
      N3[0] -= 32;
      N3 = str_from_cps(N3);
      if (R) N3 = `Restricted[${N3}]`;
      let P = read_chunked();
      let Q = read_chunked();
      let M = !r();
      return { N: N3, P, Q, M, R };
    }
  });
  WHOLE_VALID = read_sorted_set();
  WHOLE_MAP = /* @__PURE__ */ new Map();
  let wholes = read_sorted_array().concat(Array_from(WHOLE_VALID)).sort((a, b2) => a - b2);
  wholes.forEach((cp, i) => {
    let d = r();
    let w = wholes[i] = d ? wholes[i - d] : { V: [], M: /* @__PURE__ */ new Map() };
    w.V.push(cp);
    if (!WHOLE_VALID.has(cp)) {
      WHOLE_MAP.set(cp, w);
    }
  });
  for (let { V, M } of new Set(WHOLE_MAP.values())) {
    let recs = [];
    for (let cp of V) {
      let gs = GROUPS.filter((g) => group_has_cp(g, cp));
      let rec = recs.find(({ G }) => gs.some((g) => G.has(g)));
      if (!rec) {
        rec = { G: /* @__PURE__ */ new Set(), V: [] };
        recs.push(rec);
      }
      rec.V.push(cp);
      set_add_many(rec.G, gs);
    }
    let union = recs.flatMap((x) => Array_from(x.G));
    for (let { G, V: V2 } of recs) {
      let complement = new Set(union.filter((g) => !G.has(g)));
      for (let cp of V2) {
        M.set(cp, complement);
      }
    }
  }
  VALID = /* @__PURE__ */ new Set();
  let multi = /* @__PURE__ */ new Set();
  const add_to_union = (cp) => VALID.has(cp) ? multi.add(cp) : VALID.add(cp);
  for (let g of GROUPS) {
    for (let cp of g.P) add_to_union(cp);
    for (let cp of g.Q) add_to_union(cp);
  }
  for (let cp of VALID) {
    if (!WHOLE_MAP.has(cp) && !multi.has(cp)) {
      WHOLE_MAP.set(cp, UNIQUE_PH);
    }
  }
  set_add_many(VALID, nfd(VALID));
  EMOJI_LIST = read_trie(r).map((v) => Emoji.from(v)).sort(compare_arrays);
  EMOJI_ROOT = /* @__PURE__ */ new Map();
  for (let cps of EMOJI_LIST) {
    let prev = [EMOJI_ROOT];
    for (let cp of cps) {
      let next = prev.map((node) => {
        let child = node.get(cp);
        if (!child) {
          child = /* @__PURE__ */ new Map();
          node.set(cp, child);
        }
        return child;
      });
      if (cp === FE0F) {
        prev.push(...next);
      } else {
        prev = next;
      }
    }
    for (let x of prev) {
      x.V = cps;
    }
  }
}
function quoted_cp(cp) {
  return (should_escape(cp) ? "" : `${bidi_qq(safe_str_from_cps([cp]))} `) + quote_cp(cp);
}
function bidi_qq(s) {
  return `"${s}"\u200E`;
}
function check_label_extension(cps) {
  if (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) {
    throw new Error(`invalid label extension: "${str_from_cps(cps.slice(0, 4))}"`);
  }
}
function check_leading_underscore(cps) {
  const UNDERSCORE = 95;
  for (let i = cps.lastIndexOf(UNDERSCORE); i > 0; ) {
    if (cps[--i] !== UNDERSCORE) {
      throw new Error("underscore allowed only at start");
    }
  }
}
function check_fenced(cps) {
  let cp = cps[0];
  let prev = FENCED.get(cp);
  if (prev) throw error_placement(`leading ${prev}`);
  let n2 = cps.length;
  let last = -1;
  for (let i = 1; i < n2; i++) {
    cp = cps[i];
    let match = FENCED.get(cp);
    if (match) {
      if (last == i) throw error_placement(`${prev} + ${match}`);
      last = i + 1;
      prev = match;
    }
  }
  if (last == n2) throw error_placement(`trailing ${prev}`);
}
function safe_str_from_cps(cps, max = Infinity, quoter = quote_cp) {
  let buf = [];
  if (is_combining_mark(cps[0])) buf.push("\u25CC");
  if (cps.length > max) {
    max >>= 1;
    cps = [...cps.slice(0, max), 8230, ...cps.slice(-max)];
  }
  let prev = 0;
  let n2 = cps.length;
  for (let i = 0; i < n2; i++) {
    let cp = cps[i];
    if (should_escape(cp)) {
      buf.push(str_from_cps(cps.slice(prev, i)));
      buf.push(quoter(cp));
      prev = i + 1;
    }
  }
  buf.push(str_from_cps(cps.slice(prev, n2)));
  return buf.join("");
}
function is_combining_mark(cp) {
  init();
  return CM.has(cp);
}
function should_escape(cp) {
  init();
  return ESCAPE.has(cp);
}
function ens_normalize(name) {
  return flatten(split2(name, nfc, filter_fe0f));
}
function split2(name, nf, ef) {
  if (!name) return [];
  init();
  let offset = 0;
  return name.split(STOP_CH).map((label) => {
    let input = explode_cp(label);
    let info = {
      input,
      offset
      // codepoint, not substring!
    };
    offset += input.length + 1;
    try {
      let tokens = info.tokens = tokens_from_str(input, nf, ef);
      let token_count = tokens.length;
      let type;
      if (!token_count) {
        throw new Error(`empty label`);
      }
      let norm = info.output = tokens.flat();
      check_leading_underscore(norm);
      let emoji = info.emoji = token_count > 1 || tokens[0].is_emoji;
      if (!emoji && norm.every((cp) => cp < 128)) {
        check_label_extension(norm);
        type = "ASCII";
      } else {
        let chars = tokens.flatMap((x) => x.is_emoji ? [] : x);
        if (!chars.length) {
          type = "Emoji";
        } else {
          if (CM.has(norm[0])) throw error_placement("leading combining mark");
          for (let i = 1; i < token_count; i++) {
            let cps = tokens[i];
            if (!cps.is_emoji && CM.has(cps[0])) {
              throw error_placement(`emoji + combining mark: "${str_from_cps(tokens[i - 1])} + ${safe_str_from_cps([cps[0]])}"`);
            }
          }
          check_fenced(norm);
          let unique = Array_from(new Set(chars));
          let [g] = determine_group(unique);
          check_group(g, chars);
          check_whole(g, unique);
          type = g.N;
        }
      }
      info.type = type;
    } catch (err) {
      info.error = err;
    }
    return info;
  });
}
function check_whole(group, unique) {
  let maker;
  let shared = [];
  for (let cp of unique) {
    let whole = WHOLE_MAP.get(cp);
    if (whole === UNIQUE_PH) return;
    if (whole) {
      let set = whole.M.get(cp);
      maker = maker ? maker.filter((g) => set.has(g)) : Array_from(set);
      if (!maker.length) return;
    } else {
      shared.push(cp);
    }
  }
  if (maker) {
    for (let g of maker) {
      if (shared.every((cp) => group_has_cp(g, cp))) {
        throw new Error(`whole-script confusable: ${group.N}/${g.N}`);
      }
    }
  }
}
function determine_group(unique) {
  let groups = GROUPS;
  for (let cp of unique) {
    let gs = groups.filter((g) => group_has_cp(g, cp));
    if (!gs.length) {
      if (!GROUPS.some((g) => group_has_cp(g, cp))) {
        throw error_disallowed(cp);
      } else {
        throw error_group_member(groups[0], cp);
      }
    }
    groups = gs;
    if (gs.length == 1) break;
  }
  return groups;
}
function flatten(split3) {
  return split3.map(({ input, error, output: output2 }) => {
    if (error) {
      let msg = error.message;
      throw new Error(split3.length == 1 ? msg : `Invalid label ${bidi_qq(safe_str_from_cps(input, 63))}: ${msg}`);
    }
    return str_from_cps(output2);
  }).join(STOP_CH);
}
function error_disallowed(cp) {
  return new Error(`disallowed character: ${quoted_cp(cp)}`);
}
function error_group_member(g, cp) {
  let quoted = quoted_cp(cp);
  let gg = GROUPS.find((g2) => g2.P.has(cp));
  if (gg) {
    quoted = `${gg.N} ${quoted}`;
  }
  return new Error(`illegal mixture: ${g.N} + ${quoted}`);
}
function error_placement(where) {
  return new Error(`illegal placement: ${where}`);
}
function check_group(g, cps) {
  for (let cp of cps) {
    if (!group_has_cp(g, cp)) {
      throw error_group_member(g, cp);
    }
  }
  if (g.M) {
    let decomposed2 = nfd(cps);
    for (let i = 1, e = decomposed2.length; i < e; i++) {
      if (NSM.has(decomposed2[i])) {
        let j = i + 1;
        for (let cp; j < e && NSM.has(cp = decomposed2[j]); j++) {
          for (let k = i; k < j; k++) {
            if (decomposed2[k] == cp) {
              throw new Error(`duplicate non-spacing marks: ${quoted_cp(cp)}`);
            }
          }
        }
        if (j - i > NSM_MAX) {
          throw new Error(`excessive non-spacing marks: ${bidi_qq(safe_str_from_cps(decomposed2.slice(i - 1, j)))} (${j - i}/${NSM_MAX})`);
        }
        i = j;
      }
    }
  }
}
function tokens_from_str(input, nf, ef) {
  let ret = [];
  let chars = [];
  input = input.slice().reverse();
  while (input.length) {
    let emoji = consume_emoji_reversed(input);
    if (emoji) {
      if (chars.length) {
        ret.push(nf(chars));
        chars = [];
      }
      ret.push(ef(emoji));
    } else {
      let cp = input.pop();
      if (VALID.has(cp)) {
        chars.push(cp);
      } else {
        let cps = MAPPED.get(cp);
        if (cps) {
          chars.push(...cps);
        } else if (!IGNORED.has(cp)) {
          throw error_disallowed(cp);
        }
      }
    }
  }
  if (chars.length) {
    ret.push(nf(chars));
  }
  return ret;
}
function filter_fe0f(cps) {
  return cps.filter((cp) => cp != FE0F);
}
function consume_emoji_reversed(cps, eaten) {
  let node = EMOJI_ROOT;
  let emoji;
  let pos = cps.length;
  while (pos) {
    node = node.get(cps[--pos]);
    if (!node) break;
    let { V } = node;
    if (V) {
      emoji = V;
      if (eaten) eaten.push(...cps.slice(pos).reverse());
      cps.length = pos;
    }
  }
  return emoji;
}

// node_modules/ethers/lib.esm/hash/namehash.js
var Zeros2 = new Uint8Array(32);
Zeros2.fill(0);
function checkComponent(comp) {
  assertArgument(comp.length !== 0, "invalid ENS name; empty component", "comp", comp);
  return comp;
}
function ensNameSplit(name) {
  const bytes2 = toUtf8Bytes(ensNormalize(name));
  const comps = [];
  if (name.length === 0) {
    return comps;
  }
  let last = 0;
  for (let i = 0; i < bytes2.length; i++) {
    const d = bytes2[i];
    if (d === 46) {
      comps.push(checkComponent(bytes2.slice(last, i)));
      last = i + 1;
    }
  }
  assertArgument(last < bytes2.length, "invalid ENS name; empty component", "name", name);
  comps.push(checkComponent(bytes2.slice(last)));
  return comps;
}
function ensNormalize(name) {
  try {
    if (name.length === 0) {
      throw new Error("empty label");
    }
    return ens_normalize(name);
  } catch (error) {
    assertArgument(false, `invalid ENS name (${error.message})`, "name", name);
  }
}
function isValidName(name) {
  try {
    return ensNameSplit(name).length !== 0;
  } catch (error) {
  }
  return false;
}
function namehash(name) {
  assertArgument(typeof name === "string", "invalid ENS name; not a string", "name", name);
  assertArgument(name.length, `invalid ENS name (empty label)`, "name", name);
  let result = Zeros2;
  const comps = ensNameSplit(name);
  while (comps.length) {
    result = keccak256(concat([result, keccak256(comps.pop())]));
  }
  return hexlify(result);
}
function dnsEncode(name, _maxLength) {
  const length = _maxLength != null ? _maxLength : 63;
  assertArgument(length <= 255, "DNS encoded label cannot exceed 255", "length", length);
  return hexlify(concat(ensNameSplit(name).map((comp) => {
    assertArgument(comp.length <= length, `label ${JSON.stringify(name)} exceeds ${length} bytes`, "name", name);
    const bytes2 = new Uint8Array(comp.length + 1);
    bytes2.set(comp, 1);
    bytes2[0] = bytes2.length - 1;
    return bytes2;
  }))) + "00";
}

// node_modules/ethers/lib.esm/transaction/accesslist.js
function accessSetify(addr, storageKeys) {
  return {
    address: getAddress(addr),
    storageKeys: storageKeys.map((storageKey, index) => {
      assertArgument(isHexString(storageKey, 32), "invalid slot", `storageKeys[${index}]`, storageKey);
      return storageKey.toLowerCase();
    })
  };
}
function accessListify(value) {
  if (Array.isArray(value)) {
    return value.map((set, index) => {
      if (Array.isArray(set)) {
        assertArgument(set.length === 2, "invalid slot set", `value[${index}]`, set);
        return accessSetify(set[0], set[1]);
      }
      assertArgument(set != null && typeof set === "object", "invalid address-slot set", "value", value);
      return accessSetify(set.address, set.storageKeys);
    });
  }
  assertArgument(value != null && typeof value === "object", "invalid access list", "value", value);
  const result = Object.keys(value).map((addr) => {
    const storageKeys = value[addr].reduce((accum, storageKey) => {
      accum[storageKey] = true;
      return accum;
    }, {});
    return accessSetify(addr, Object.keys(storageKeys).sort());
  });
  result.sort((a, b2) => a.address.localeCompare(b2.address));
  return result;
}

// node_modules/ethers/lib.esm/transaction/address.js
function computeAddress(key) {
  let pubkey;
  if (typeof key === "string") {
    pubkey = SigningKey.computePublicKey(key, false);
  } else {
    pubkey = key.publicKey;
  }
  return getAddress(keccak256("0x" + pubkey.substring(4)).substring(26));
}
function recoverAddress(digest, signature) {
  return computeAddress(SigningKey.recoverPublicKey(digest, signature));
}

// node_modules/ethers/lib.esm/transaction/transaction.js
var BN_07 = BigInt(0);
var BN_22 = BigInt(2);
var BN_272 = BigInt(27);
var BN_282 = BigInt(28);
var BN_352 = BigInt(35);
var BN_MAX_UINT = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var BLOB_SIZE = 4096 * 32;
function getVersionedHash(version2, hash2) {
  let versioned = version2.toString(16);
  while (versioned.length < 2) {
    versioned = "0" + versioned;
  }
  versioned += sha2562(hash2).substring(4);
  return "0x" + versioned;
}
function handleAddress(value) {
  if (value === "0x") {
    return null;
  }
  return getAddress(value);
}
function handleAccessList(value, param) {
  try {
    return accessListify(value);
  } catch (error) {
    assertArgument(false, error.message, param, value);
  }
}
function handleNumber(_value2, param) {
  if (_value2 === "0x") {
    return 0;
  }
  return getNumber(_value2, param);
}
function handleUint(_value2, param) {
  if (_value2 === "0x") {
    return BN_07;
  }
  const value = getBigInt(_value2, param);
  assertArgument(value <= BN_MAX_UINT, "value exceeds uint size", param, value);
  return value;
}
function formatNumber(_value2, name) {
  const value = getBigInt(_value2, "value");
  const result = toBeArray(value);
  assertArgument(result.length <= 32, `value too large`, `tx.${name}`, value);
  return result;
}
function formatAccessList(value) {
  return accessListify(value).map((set) => [set.address, set.storageKeys]);
}
function formatHashes(value, param) {
  assertArgument(Array.isArray(value), `invalid ${param}`, "value", value);
  for (let i = 0; i < value.length; i++) {
    assertArgument(isHexString(value[i], 32), "invalid ${ param } hash", `value[${i}]`, value[i]);
  }
  return value;
}
function _parseLegacy(data) {
  const fields = decodeRlp(data);
  assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 6), "invalid field count for legacy transaction", "data", data);
  const tx = {
    type: 0,
    nonce: handleNumber(fields[0], "nonce"),
    gasPrice: handleUint(fields[1], "gasPrice"),
    gasLimit: handleUint(fields[2], "gasLimit"),
    to: handleAddress(fields[3]),
    value: handleUint(fields[4], "value"),
    data: hexlify(fields[5]),
    chainId: BN_07
  };
  if (fields.length === 6) {
    return tx;
  }
  const v = handleUint(fields[6], "v");
  const r = handleUint(fields[7], "r");
  const s = handleUint(fields[8], "s");
  if (r === BN_07 && s === BN_07) {
    tx.chainId = v;
  } else {
    let chainId = (v - BN_352) / BN_22;
    if (chainId < BN_07) {
      chainId = BN_07;
    }
    tx.chainId = chainId;
    assertArgument(chainId !== BN_07 || (v === BN_272 || v === BN_282), "non-canonical legacy v", "v", fields[6]);
    tx.signature = Signature.from({
      r: zeroPadValue(fields[7], 32),
      s: zeroPadValue(fields[8], 32),
      v
    });
  }
  return tx;
}
function _serializeLegacy(tx, sig) {
  const fields = [
    formatNumber(tx.nonce, "nonce"),
    formatNumber(tx.gasPrice || 0, "gasPrice"),
    formatNumber(tx.gasLimit, "gasLimit"),
    tx.to || "0x",
    formatNumber(tx.value, "value"),
    tx.data
  ];
  let chainId = BN_07;
  if (tx.chainId != BN_07) {
    chainId = getBigInt(tx.chainId, "tx.chainId");
    assertArgument(!sig || sig.networkV == null || sig.legacyChainId === chainId, "tx.chainId/sig.v mismatch", "sig", sig);
  } else if (tx.signature) {
    const legacy = tx.signature.legacyChainId;
    if (legacy != null) {
      chainId = legacy;
    }
  }
  if (!sig) {
    if (chainId !== BN_07) {
      fields.push(toBeArray(chainId));
      fields.push("0x");
      fields.push("0x");
    }
    return encodeRlp(fields);
  }
  let v = BigInt(27 + sig.yParity);
  if (chainId !== BN_07) {
    v = Signature.getChainIdV(chainId, sig.v);
  } else if (BigInt(sig.v) !== v) {
    assertArgument(false, "tx.chainId/sig.v mismatch", "sig", sig);
  }
  fields.push(toBeArray(v));
  fields.push(toBeArray(sig.r));
  fields.push(toBeArray(sig.s));
  return encodeRlp(fields);
}
function _parseEipSignature(tx, fields) {
  let yParity;
  try {
    yParity = handleNumber(fields[0], "yParity");
    if (yParity !== 0 && yParity !== 1) {
      throw new Error("bad yParity");
    }
  } catch (error) {
    assertArgument(false, "invalid yParity", "yParity", fields[0]);
  }
  const r = zeroPadValue(fields[1], 32);
  const s = zeroPadValue(fields[2], 32);
  const signature = Signature.from({ r, s, yParity });
  tx.signature = signature;
}
function _parseEip1559(data) {
  const fields = decodeRlp(getBytes(data).slice(1));
  assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 12), "invalid field count for transaction type: 2", "data", hexlify(data));
  const tx = {
    type: 2,
    chainId: handleUint(fields[0], "chainId"),
    nonce: handleNumber(fields[1], "nonce"),
    maxPriorityFeePerGas: handleUint(fields[2], "maxPriorityFeePerGas"),
    maxFeePerGas: handleUint(fields[3], "maxFeePerGas"),
    gasPrice: null,
    gasLimit: handleUint(fields[4], "gasLimit"),
    to: handleAddress(fields[5]),
    value: handleUint(fields[6], "value"),
    data: hexlify(fields[7]),
    accessList: handleAccessList(fields[8], "accessList")
  };
  if (fields.length === 9) {
    return tx;
  }
  _parseEipSignature(tx, fields.slice(9));
  return tx;
}
function _serializeEip1559(tx, sig) {
  const fields = [
    formatNumber(tx.chainId, "chainId"),
    formatNumber(tx.nonce, "nonce"),
    formatNumber(tx.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
    formatNumber(tx.maxFeePerGas || 0, "maxFeePerGas"),
    formatNumber(tx.gasLimit, "gasLimit"),
    tx.to || "0x",
    formatNumber(tx.value, "value"),
    tx.data,
    formatAccessList(tx.accessList || [])
  ];
  if (sig) {
    fields.push(formatNumber(sig.yParity, "yParity"));
    fields.push(toBeArray(sig.r));
    fields.push(toBeArray(sig.s));
  }
  return concat(["0x02", encodeRlp(fields)]);
}
function _parseEip2930(data) {
  const fields = decodeRlp(getBytes(data).slice(1));
  assertArgument(Array.isArray(fields) && (fields.length === 8 || fields.length === 11), "invalid field count for transaction type: 1", "data", hexlify(data));
  const tx = {
    type: 1,
    chainId: handleUint(fields[0], "chainId"),
    nonce: handleNumber(fields[1], "nonce"),
    gasPrice: handleUint(fields[2], "gasPrice"),
    gasLimit: handleUint(fields[3], "gasLimit"),
    to: handleAddress(fields[4]),
    value: handleUint(fields[5], "value"),
    data: hexlify(fields[6]),
    accessList: handleAccessList(fields[7], "accessList")
  };
  if (fields.length === 8) {
    return tx;
  }
  _parseEipSignature(tx, fields.slice(8));
  return tx;
}
function _serializeEip2930(tx, sig) {
  const fields = [
    formatNumber(tx.chainId, "chainId"),
    formatNumber(tx.nonce, "nonce"),
    formatNumber(tx.gasPrice || 0, "gasPrice"),
    formatNumber(tx.gasLimit, "gasLimit"),
    tx.to || "0x",
    formatNumber(tx.value, "value"),
    tx.data,
    formatAccessList(tx.accessList || [])
  ];
  if (sig) {
    fields.push(formatNumber(sig.yParity, "recoveryParam"));
    fields.push(toBeArray(sig.r));
    fields.push(toBeArray(sig.s));
  }
  return concat(["0x01", encodeRlp(fields)]);
}
function _parseEip4844(data) {
  let fields = decodeRlp(getBytes(data).slice(1));
  let typeName = "3";
  let blobs = null;
  if (fields.length === 4 && Array.isArray(fields[0])) {
    typeName = "3 (network format)";
    const fBlobs = fields[1], fCommits = fields[2], fProofs = fields[3];
    assertArgument(Array.isArray(fBlobs), "invalid network format: blobs not an array", "fields[1]", fBlobs);
    assertArgument(Array.isArray(fCommits), "invalid network format: commitments not an array", "fields[2]", fCommits);
    assertArgument(Array.isArray(fProofs), "invalid network format: proofs not an array", "fields[3]", fProofs);
    assertArgument(fBlobs.length === fCommits.length, "invalid network format: blobs/commitments length mismatch", "fields", fields);
    assertArgument(fBlobs.length === fProofs.length, "invalid network format: blobs/proofs length mismatch", "fields", fields);
    blobs = [];
    for (let i = 0; i < fields[1].length; i++) {
      blobs.push({
        data: fBlobs[i],
        commitment: fCommits[i],
        proof: fProofs[i]
      });
    }
    fields = fields[0];
  }
  assertArgument(Array.isArray(fields) && (fields.length === 11 || fields.length === 14), `invalid field count for transaction type: ${typeName}`, "data", hexlify(data));
  const tx = {
    type: 3,
    chainId: handleUint(fields[0], "chainId"),
    nonce: handleNumber(fields[1], "nonce"),
    maxPriorityFeePerGas: handleUint(fields[2], "maxPriorityFeePerGas"),
    maxFeePerGas: handleUint(fields[3], "maxFeePerGas"),
    gasPrice: null,
    gasLimit: handleUint(fields[4], "gasLimit"),
    to: handleAddress(fields[5]),
    value: handleUint(fields[6], "value"),
    data: hexlify(fields[7]),
    accessList: handleAccessList(fields[8], "accessList"),
    maxFeePerBlobGas: handleUint(fields[9], "maxFeePerBlobGas"),
    blobVersionedHashes: fields[10]
  };
  if (blobs) {
    tx.blobs = blobs;
  }
  assertArgument(tx.to != null, `invalid address for transaction type: ${typeName}`, "data", data);
  assertArgument(Array.isArray(tx.blobVersionedHashes), "invalid blobVersionedHashes: must be an array", "data", data);
  for (let i = 0; i < tx.blobVersionedHashes.length; i++) {
    assertArgument(isHexString(tx.blobVersionedHashes[i], 32), `invalid blobVersionedHash at index ${i}: must be length 32`, "data", data);
  }
  if (fields.length === 11) {
    return tx;
  }
  _parseEipSignature(tx, fields.slice(11));
  return tx;
}
function _serializeEip4844(tx, sig, blobs) {
  const fields = [
    formatNumber(tx.chainId, "chainId"),
    formatNumber(tx.nonce, "nonce"),
    formatNumber(tx.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
    formatNumber(tx.maxFeePerGas || 0, "maxFeePerGas"),
    formatNumber(tx.gasLimit, "gasLimit"),
    tx.to || ZeroAddress,
    formatNumber(tx.value, "value"),
    tx.data,
    formatAccessList(tx.accessList || []),
    formatNumber(tx.maxFeePerBlobGas || 0, "maxFeePerBlobGas"),
    formatHashes(tx.blobVersionedHashes || [], "blobVersionedHashes")
  ];
  if (sig) {
    fields.push(formatNumber(sig.yParity, "yParity"));
    fields.push(toBeArray(sig.r));
    fields.push(toBeArray(sig.s));
    if (blobs) {
      return concat([
        "0x03",
        encodeRlp([
          fields,
          blobs.map((b2) => b2.data),
          blobs.map((b2) => b2.commitment),
          blobs.map((b2) => b2.proof)
        ])
      ]);
    }
  }
  return concat(["0x03", encodeRlp(fields)]);
}
var _type, _to, _data3, _nonce, _gasLimit, _gasPrice, _maxPriorityFeePerGas, _maxFeePerGas, _value, _chainId, _sig, _accessList, _maxFeePerBlobGas, _blobVersionedHashes, _kzg, _blobs, _Transaction_instances, getSerialized_fn;
var _Transaction = class _Transaction {
  /**
   *  Creates a new Transaction with default values.
   */
  constructor() {
    __privateAdd(this, _Transaction_instances);
    __privateAdd(this, _type);
    __privateAdd(this, _to);
    __privateAdd(this, _data3);
    __privateAdd(this, _nonce);
    __privateAdd(this, _gasLimit);
    __privateAdd(this, _gasPrice);
    __privateAdd(this, _maxPriorityFeePerGas);
    __privateAdd(this, _maxFeePerGas);
    __privateAdd(this, _value);
    __privateAdd(this, _chainId);
    __privateAdd(this, _sig);
    __privateAdd(this, _accessList);
    __privateAdd(this, _maxFeePerBlobGas);
    __privateAdd(this, _blobVersionedHashes);
    __privateAdd(this, _kzg);
    __privateAdd(this, _blobs);
    __privateSet(this, _type, null);
    __privateSet(this, _to, null);
    __privateSet(this, _nonce, 0);
    __privateSet(this, _gasLimit, BN_07);
    __privateSet(this, _gasPrice, null);
    __privateSet(this, _maxPriorityFeePerGas, null);
    __privateSet(this, _maxFeePerGas, null);
    __privateSet(this, _data3, "0x");
    __privateSet(this, _value, BN_07);
    __privateSet(this, _chainId, BN_07);
    __privateSet(this, _sig, null);
    __privateSet(this, _accessList, null);
    __privateSet(this, _maxFeePerBlobGas, null);
    __privateSet(this, _blobVersionedHashes, null);
    __privateSet(this, _blobs, null);
    __privateSet(this, _kzg, null);
  }
  /**
   *  The transaction type.
   *
   *  If null, the type will be automatically inferred based on
   *  explicit properties.
   */
  get type() {
    return __privateGet(this, _type);
  }
  set type(value) {
    switch (value) {
      case null:
        __privateSet(this, _type, null);
        break;
      case 0:
      case "legacy":
        __privateSet(this, _type, 0);
        break;
      case 1:
      case "berlin":
      case "eip-2930":
        __privateSet(this, _type, 1);
        break;
      case 2:
      case "london":
      case "eip-1559":
        __privateSet(this, _type, 2);
        break;
      case 3:
      case "cancun":
      case "eip-4844":
        __privateSet(this, _type, 3);
        break;
      default:
        assertArgument(false, "unsupported transaction type", "type", value);
    }
  }
  /**
   *  The name of the transaction type.
   */
  get typeName() {
    switch (this.type) {
      case 0:
        return "legacy";
      case 1:
        return "eip-2930";
      case 2:
        return "eip-1559";
      case 3:
        return "eip-4844";
    }
    return null;
  }
  /**
   *  The ``to`` address for the transaction or ``null`` if the
   *  transaction is an ``init`` transaction.
   */
  get to() {
    const value = __privateGet(this, _to);
    if (value == null && this.type === 3) {
      return ZeroAddress;
    }
    return value;
  }
  set to(value) {
    __privateSet(this, _to, value == null ? null : getAddress(value));
  }
  /**
   *  The transaction nonce.
   */
  get nonce() {
    return __privateGet(this, _nonce);
  }
  set nonce(value) {
    __privateSet(this, _nonce, getNumber(value, "value"));
  }
  /**
   *  The gas limit.
   */
  get gasLimit() {
    return __privateGet(this, _gasLimit);
  }
  set gasLimit(value) {
    __privateSet(this, _gasLimit, getBigInt(value));
  }
  /**
   *  The gas price.
   *
   *  On legacy networks this defines the fee that will be paid. On
   *  EIP-1559 networks, this should be ``null``.
   */
  get gasPrice() {
    const value = __privateGet(this, _gasPrice);
    if (value == null && (this.type === 0 || this.type === 1)) {
      return BN_07;
    }
    return value;
  }
  set gasPrice(value) {
    __privateSet(this, _gasPrice, value == null ? null : getBigInt(value, "gasPrice"));
  }
  /**
   *  The maximum priority fee per unit of gas to pay. On legacy
   *  networks this should be ``null``.
   */
  get maxPriorityFeePerGas() {
    const value = __privateGet(this, _maxPriorityFeePerGas);
    if (value == null) {
      if (this.type === 2 || this.type === 3) {
        return BN_07;
      }
      return null;
    }
    return value;
  }
  set maxPriorityFeePerGas(value) {
    __privateSet(this, _maxPriorityFeePerGas, value == null ? null : getBigInt(value, "maxPriorityFeePerGas"));
  }
  /**
   *  The maximum total fee per unit of gas to pay. On legacy
   *  networks this should be ``null``.
   */
  get maxFeePerGas() {
    const value = __privateGet(this, _maxFeePerGas);
    if (value == null) {
      if (this.type === 2 || this.type === 3) {
        return BN_07;
      }
      return null;
    }
    return value;
  }
  set maxFeePerGas(value) {
    __privateSet(this, _maxFeePerGas, value == null ? null : getBigInt(value, "maxFeePerGas"));
  }
  /**
   *  The transaction data. For ``init`` transactions this is the
   *  deployment code.
   */
  get data() {
    return __privateGet(this, _data3);
  }
  set data(value) {
    __privateSet(this, _data3, hexlify(value));
  }
  /**
   *  The amount of ether (in wei) to send in this transactions.
   */
  get value() {
    return __privateGet(this, _value);
  }
  set value(value) {
    __privateSet(this, _value, getBigInt(value, "value"));
  }
  /**
   *  The chain ID this transaction is valid on.
   */
  get chainId() {
    return __privateGet(this, _chainId);
  }
  set chainId(value) {
    __privateSet(this, _chainId, getBigInt(value));
  }
  /**
   *  If signed, the signature for this transaction.
   */
  get signature() {
    return __privateGet(this, _sig) || null;
  }
  set signature(value) {
    __privateSet(this, _sig, value == null ? null : Signature.from(value));
  }
  /**
   *  The access list.
   *
   *  An access list permits discounted (but pre-paid) access to
   *  bytecode and state variable access within contract execution.
   */
  get accessList() {
    const value = __privateGet(this, _accessList) || null;
    if (value == null) {
      if (this.type === 1 || this.type === 2 || this.type === 3) {
        return [];
      }
      return null;
    }
    return value;
  }
  set accessList(value) {
    __privateSet(this, _accessList, value == null ? null : accessListify(value));
  }
  /**
   *  The max fee per blob gas for Cancun transactions.
   */
  get maxFeePerBlobGas() {
    const value = __privateGet(this, _maxFeePerBlobGas);
    if (value == null && this.type === 3) {
      return BN_07;
    }
    return value;
  }
  set maxFeePerBlobGas(value) {
    __privateSet(this, _maxFeePerBlobGas, value == null ? null : getBigInt(value, "maxFeePerBlobGas"));
  }
  /**
   *  The BLOb versioned hashes for Cancun transactions.
   */
  get blobVersionedHashes() {
    let value = __privateGet(this, _blobVersionedHashes);
    if (value == null && this.type === 3) {
      return [];
    }
    return value;
  }
  set blobVersionedHashes(value) {
    if (value != null) {
      assertArgument(Array.isArray(value), "blobVersionedHashes must be an Array", "value", value);
      value = value.slice();
      for (let i = 0; i < value.length; i++) {
        assertArgument(isHexString(value[i], 32), "invalid blobVersionedHash", `value[${i}]`, value[i]);
      }
    }
    __privateSet(this, _blobVersionedHashes, value);
  }
  /**
   *  The BLObs for the Transaction, if any.
   *
   *  If ``blobs`` is non-``null``, then the [[seriailized]]
   *  will return the network formatted sidecar, otherwise it
   *  will return the standard [[link-eip-2718]] payload. The
   *  [[unsignedSerialized]] is unaffected regardless.
   *
   *  When setting ``blobs``, either fully valid [[Blob]] objects
   *  may be specified (i.e. correctly padded, with correct
   *  committments and proofs) or a raw [[BytesLike]] may
   *  be provided.
   *
   *  If raw [[BytesLike]] are provided, the [[kzg]] property **must**
   *  be already set. The blob will be correctly padded and the
   *  [[KzgLibrary]] will be used to compute the committment and
   *  proof for the blob.
   *
   *  A BLOb is a sequence of field elements, each of which must
   *  be within the BLS field modulo, so some additional processing
   *  may be required to encode arbitrary data to ensure each 32 byte
   *  field is within the valid range.
   *
   *  Setting this automatically populates [[blobVersionedHashes]],
   *  overwriting any existing values. Setting this to ``null``
   *  does **not** remove the [[blobVersionedHashes]], leaving them
   *  present.
   */
  get blobs() {
    if (__privateGet(this, _blobs) == null) {
      return null;
    }
    return __privateGet(this, _blobs).map((b2) => Object.assign({}, b2));
  }
  set blobs(_blobs2) {
    if (_blobs2 == null) {
      __privateSet(this, _blobs, null);
      return;
    }
    const blobs = [];
    const versionedHashes = [];
    for (let i = 0; i < _blobs2.length; i++) {
      const blob = _blobs2[i];
      if (isBytesLike(blob)) {
        assert(__privateGet(this, _kzg), "adding a raw blob requires a KZG library", "UNSUPPORTED_OPERATION", {
          operation: "set blobs()"
        });
        let data = getBytes(blob);
        assertArgument(data.length <= BLOB_SIZE, "blob is too large", `blobs[${i}]`, blob);
        if (data.length !== BLOB_SIZE) {
          const padded = new Uint8Array(BLOB_SIZE);
          padded.set(data);
          data = padded;
        }
        const commit = __privateGet(this, _kzg).blobToKzgCommitment(data);
        const proof = hexlify(__privateGet(this, _kzg).computeBlobKzgProof(data, commit));
        blobs.push({
          data: hexlify(data),
          commitment: hexlify(commit),
          proof
        });
        versionedHashes.push(getVersionedHash(1, commit));
      } else {
        const commit = hexlify(blob.commitment);
        blobs.push({
          data: hexlify(blob.data),
          commitment: commit,
          proof: hexlify(blob.proof)
        });
        versionedHashes.push(getVersionedHash(1, commit));
      }
    }
    __privateSet(this, _blobs, blobs);
    __privateSet(this, _blobVersionedHashes, versionedHashes);
  }
  get kzg() {
    return __privateGet(this, _kzg);
  }
  set kzg(kzg) {
    __privateSet(this, _kzg, kzg);
  }
  /**
   *  The transaction hash, if signed. Otherwise, ``null``.
   */
  get hash() {
    if (this.signature == null) {
      return null;
    }
    return keccak256(__privateMethod(this, _Transaction_instances, getSerialized_fn).call(this, true, false));
  }
  /**
   *  The pre-image hash of this transaction.
   *
   *  This is the digest that a [[Signer]] must sign to authorize
   *  this transaction.
   */
  get unsignedHash() {
    return keccak256(this.unsignedSerialized);
  }
  /**
   *  The sending address, if signed. Otherwise, ``null``.
   */
  get from() {
    if (this.signature == null) {
      return null;
    }
    return recoverAddress(this.unsignedHash, this.signature);
  }
  /**
   *  The public key of the sender, if signed. Otherwise, ``null``.
   */
  get fromPublicKey() {
    if (this.signature == null) {
      return null;
    }
    return SigningKey.recoverPublicKey(this.unsignedHash, this.signature);
  }
  /**
   *  Returns true if signed.
   *
   *  This provides a Type Guard that properties requiring a signed
   *  transaction are non-null.
   */
  isSigned() {
    return this.signature != null;
  }
  /**
   *  The serialized transaction.
   *
   *  This throws if the transaction is unsigned. For the pre-image,
   *  use [[unsignedSerialized]].
   */
  get serialized() {
    return __privateMethod(this, _Transaction_instances, getSerialized_fn).call(this, true, true);
  }
  /**
   *  The transaction pre-image.
   *
   *  The hash of this is the digest which needs to be signed to
   *  authorize this transaction.
   */
  get unsignedSerialized() {
    return __privateMethod(this, _Transaction_instances, getSerialized_fn).call(this, false, false);
  }
  /**
   *  Return the most "likely" type; currently the highest
   *  supported transaction type.
   */
  inferType() {
    const types = this.inferTypes();
    if (types.indexOf(2) >= 0) {
      return 2;
    }
    return types.pop();
  }
  /**
   *  Validates the explicit properties and returns a list of compatible
   *  transaction types.
   */
  inferTypes() {
    const hasGasPrice = this.gasPrice != null;
    const hasFee = this.maxFeePerGas != null || this.maxPriorityFeePerGas != null;
    const hasAccessList = this.accessList != null;
    const hasBlob = __privateGet(this, _maxFeePerBlobGas) != null || __privateGet(this, _blobVersionedHashes);
    if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) {
      assert(this.maxFeePerGas >= this.maxPriorityFeePerGas, "priorityFee cannot be more than maxFee", "BAD_DATA", { value: this });
    }
    assert(!hasFee || this.type !== 0 && this.type !== 1, "transaction type cannot have maxFeePerGas or maxPriorityFeePerGas", "BAD_DATA", { value: this });
    assert(this.type !== 0 || !hasAccessList, "legacy transaction cannot have accessList", "BAD_DATA", { value: this });
    const types = [];
    if (this.type != null) {
      types.push(this.type);
    } else {
      if (hasFee) {
        types.push(2);
      } else if (hasGasPrice) {
        types.push(1);
        if (!hasAccessList) {
          types.push(0);
        }
      } else if (hasAccessList) {
        types.push(1);
        types.push(2);
      } else if (hasBlob && this.to) {
        types.push(3);
      } else {
        types.push(0);
        types.push(1);
        types.push(2);
        types.push(3);
      }
    }
    types.sort();
    return types;
  }
  /**
   *  Returns true if this transaction is a legacy transaction (i.e.
   *  ``type === 0``).
   *
   *  This provides a Type Guard that the related properties are
   *  non-null.
   */
  isLegacy() {
    return this.type === 0;
  }
  /**
   *  Returns true if this transaction is berlin hardform transaction (i.e.
   *  ``type === 1``).
   *
   *  This provides a Type Guard that the related properties are
   *  non-null.
   */
  isBerlin() {
    return this.type === 1;
  }
  /**
   *  Returns true if this transaction is london hardform transaction (i.e.
   *  ``type === 2``).
   *
   *  This provides a Type Guard that the related properties are
   *  non-null.
   */
  isLondon() {
    return this.type === 2;
  }
  /**
   *  Returns true if this transaction is an [[link-eip-4844]] BLOB
   *  transaction.
   *
   *  This provides a Type Guard that the related properties are
   *  non-null.
   */
  isCancun() {
    return this.type === 3;
  }
  /**
   *  Create a copy of this transaciton.
   */
  clone() {
    return _Transaction.from(this);
  }
  /**
   *  Return a JSON-friendly object.
   */
  toJSON() {
    const s = (v) => {
      if (v == null) {
        return null;
      }
      return v.toString();
    };
    return {
      type: this.type,
      to: this.to,
      //            from: this.from,
      data: this.data,
      nonce: this.nonce,
      gasLimit: s(this.gasLimit),
      gasPrice: s(this.gasPrice),
      maxPriorityFeePerGas: s(this.maxPriorityFeePerGas),
      maxFeePerGas: s(this.maxFeePerGas),
      value: s(this.value),
      chainId: s(this.chainId),
      sig: this.signature ? this.signature.toJSON() : null,
      accessList: this.accessList
    };
  }
  /**
   *  Create a **Transaction** from a serialized transaction or a
   *  Transaction-like object.
   */
  static from(tx) {
    if (tx == null) {
      return new _Transaction();
    }
    if (typeof tx === "string") {
      const payload = getBytes(tx);
      if (payload[0] >= 127) {
        return _Transaction.from(_parseLegacy(payload));
      }
      switch (payload[0]) {
        case 1:
          return _Transaction.from(_parseEip2930(payload));
        case 2:
          return _Transaction.from(_parseEip1559(payload));
        case 3:
          return _Transaction.from(_parseEip4844(payload));
      }
      assert(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: "from" });
    }
    const result = new _Transaction();
    if (tx.type != null) {
      result.type = tx.type;
    }
    if (tx.to != null) {
      result.to = tx.to;
    }
    if (tx.nonce != null) {
      result.nonce = tx.nonce;
    }
    if (tx.gasLimit != null) {
      result.gasLimit = tx.gasLimit;
    }
    if (tx.gasPrice != null) {
      result.gasPrice = tx.gasPrice;
    }
    if (tx.maxPriorityFeePerGas != null) {
      result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;
    }
    if (tx.maxFeePerGas != null) {
      result.maxFeePerGas = tx.maxFeePerGas;
    }
    if (tx.maxFeePerBlobGas != null) {
      result.maxFeePerBlobGas = tx.maxFeePerBlobGas;
    }
    if (tx.data != null) {
      result.data = tx.data;
    }
    if (tx.value != null) {
      result.value = tx.value;
    }
    if (tx.chainId != null) {
      result.chainId = tx.chainId;
    }
    if (tx.signature != null) {
      result.signature = Signature.from(tx.signature);
    }
    if (tx.accessList != null) {
      result.accessList = tx.accessList;
    }
    if (tx.blobVersionedHashes != null) {
      result.blobVersionedHashes = tx.blobVersionedHashes;
    }
    if (tx.kzg != null) {
      result.kzg = tx.kzg;
    }
    if (tx.blobs != null) {
      result.blobs = tx.blobs;
    }
    if (tx.hash != null) {
      assertArgument(result.isSigned(), "unsigned transaction cannot define '.hash'", "tx", tx);
      assertArgument(result.hash === tx.hash, "hash mismatch", "tx", tx);
    }
    if (tx.from != null) {
      assertArgument(result.isSigned(), "unsigned transaction cannot define '.from'", "tx", tx);
      assertArgument(result.from.toLowerCase() === (tx.from || "").toLowerCase(), "from mismatch", "tx", tx);
    }
    return result;
  }
};
_type = new WeakMap();
_to = new WeakMap();
_data3 = new WeakMap();
_nonce = new WeakMap();
_gasLimit = new WeakMap();
_gasPrice = new WeakMap();
_maxPriorityFeePerGas = new WeakMap();
_maxFeePerGas = new WeakMap();
_value = new WeakMap();
_chainId = new WeakMap();
_sig = new WeakMap();
_accessList = new WeakMap();
_maxFeePerBlobGas = new WeakMap();
_blobVersionedHashes = new WeakMap();
_kzg = new WeakMap();
_blobs = new WeakMap();
_Transaction_instances = new WeakSet();
getSerialized_fn = function(signed2, sidecar) {
  assert(!signed2 || this.signature != null, "cannot serialize unsigned transaction; maybe you meant .unsignedSerialized", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
  const sig = signed2 ? this.signature : null;
  switch (this.inferType()) {
    case 0:
      return _serializeLegacy(this, sig);
    case 1:
      return _serializeEip2930(this, sig);
    case 2:
      return _serializeEip1559(this, sig);
    case 3:
      return _serializeEip4844(this, sig, sidecar ? this.blobs : null);
  }
  assert(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
};
var Transaction = _Transaction;

// node_modules/ethers/lib.esm/hash/message.js
function hashMessage(message) {
  if (typeof message === "string") {
    message = toUtf8Bytes(message);
  }
  return keccak256(concat([
    toUtf8Bytes(MessagePrefix),
    toUtf8Bytes(String(message.length)),
    message
  ]));
}
function verifyMessage(message, sig) {
  const digest = hashMessage(message);
  return recoverAddress(digest, sig);
}

// node_modules/ethers/lib.esm/hash/solidity.js
var regexBytes = new RegExp("^bytes([0-9]+)$");
var regexNumber = new RegExp("^(u?int)([0-9]*)$");
var regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
function _pack(type, value, isArray) {
  switch (type) {
    case "address":
      if (isArray) {
        return getBytes(zeroPadValue(value, 32));
      }
      return getBytes(getAddress(value));
    case "string":
      return toUtf8Bytes(value);
    case "bytes":
      return getBytes(value);
    case "bool":
      value = !!value ? "0x01" : "0x00";
      if (isArray) {
        return getBytes(zeroPadValue(value, 32));
      }
      return getBytes(value);
  }
  let match = type.match(regexNumber);
  if (match) {
    let signed2 = match[1] === "int";
    let size = parseInt(match[2] || "256");
    assertArgument((!match[2] || match[2] === String(size)) && size % 8 === 0 && size !== 0 && size <= 256, "invalid number type", "type", type);
    if (isArray) {
      size = 256;
    }
    if (signed2) {
      value = toTwos(value, size);
    }
    return getBytes(zeroPadValue(toBeArray(value), size / 8));
  }
  match = type.match(regexBytes);
  if (match) {
    const size = parseInt(match[1]);
    assertArgument(String(size) === match[1] && size !== 0 && size <= 32, "invalid bytes type", "type", type);
    assertArgument(dataLength(value) === size, `invalid value for ${type}`, "value", value);
    if (isArray) {
      return getBytes(zeroPadBytes(value, 32));
    }
    return value;
  }
  match = type.match(regexArray);
  if (match && Array.isArray(value)) {
    const baseType = match[1];
    const count = parseInt(match[2] || String(value.length));
    assertArgument(count === value.length, `invalid array length for ${type}`, "value", value);
    const result = [];
    value.forEach(function(value2) {
      result.push(_pack(baseType, value2, true));
    });
    return getBytes(concat(result));
  }
  assertArgument(false, "invalid type", "type", type);
}
function solidityPacked(types, values) {
  assertArgument(types.length === values.length, "wrong number of values; expected ${ types.length }", "values", values);
  const tight = [];
  types.forEach(function(type, index) {
    tight.push(_pack(type, values[index]));
  });
  return hexlify(concat(tight));
}
function solidityPackedKeccak256(types, values) {
  return keccak256(solidityPacked(types, values));
}
function solidityPackedSha256(types, values) {
  return sha2562(solidityPacked(types, values));
}

// node_modules/ethers/lib.esm/hash/typed-data.js
var padding = new Uint8Array(32);
padding.fill(0);
var BN__1 = BigInt(-1);
var BN_08 = BigInt(0);
var BN_15 = BigInt(1);
var BN_MAX_UINT2562 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
function hexPadRight(value) {
  const bytes2 = getBytes(value);
  const padOffset = bytes2.length % 32;
  if (padOffset) {
    return concat([bytes2, padding.slice(padOffset)]);
  }
  return hexlify(bytes2);
}
var hexTrue = toBeHex(BN_15, 32);
var hexFalse = toBeHex(BN_08, 32);
var domainFieldTypes = {
  name: "string",
  version: "string",
  chainId: "uint256",
  verifyingContract: "address",
  salt: "bytes32"
};
var domainFieldNames = [
  "name",
  "version",
  "chainId",
  "verifyingContract",
  "salt"
];
function checkString(key) {
  return function(value) {
    assertArgument(typeof value === "string", `invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
    return value;
  };
}
var domainChecks = {
  name: checkString("name"),
  version: checkString("version"),
  chainId: function(_value2) {
    const value = getBigInt(_value2, "domain.chainId");
    assertArgument(value >= 0, "invalid chain ID", "domain.chainId", _value2);
    if (Number.isSafeInteger(value)) {
      return Number(value);
    }
    return toQuantity(value);
  },
  verifyingContract: function(value) {
    try {
      return getAddress(value).toLowerCase();
    } catch (error) {
    }
    assertArgument(false, `invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
  },
  salt: function(value) {
    const bytes2 = getBytes(value, "domain.salt");
    assertArgument(bytes2.length === 32, `invalid domain value "salt"`, "domain.salt", value);
    return hexlify(bytes2);
  }
};
function getBaseEncoder(type) {
  {
    const match = type.match(/^(u?)int(\d+)$/);
    if (match) {
      const signed2 = match[1] === "";
      const width = parseInt(match[2]);
      assertArgument(width % 8 === 0 && width !== 0 && width <= 256 && match[2] === String(width), "invalid numeric width", "type", type);
      const boundsUpper = mask(BN_MAX_UINT2562, signed2 ? width - 1 : width);
      const boundsLower = signed2 ? (boundsUpper + BN_15) * BN__1 : BN_08;
      return function(_value2) {
        const value = getBigInt(_value2, "value");
        assertArgument(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${type}`, "value", value);
        return toBeHex(signed2 ? toTwos(value, 256) : value, 32);
      };
    }
  }
  {
    const match = type.match(/^bytes(\d+)$/);
    if (match) {
      const width = parseInt(match[1]);
      assertArgument(width !== 0 && width <= 32 && match[1] === String(width), "invalid bytes width", "type", type);
      return function(value) {
        const bytes2 = getBytes(value);
        assertArgument(bytes2.length === width, `invalid length for ${type}`, "value", value);
        return hexPadRight(value);
      };
    }
  }
  switch (type) {
    case "address":
      return function(value) {
        return zeroPadValue(getAddress(value), 32);
      };
    case "bool":
      return function(value) {
        return !value ? hexFalse : hexTrue;
      };
    case "bytes":
      return function(value) {
        return keccak256(value);
      };
    case "string":
      return function(value) {
        return id(value);
      };
  }
  return null;
}
function encodeType(name, fields) {
  return `${name}(${fields.map(({ name: name2, type }) => type + " " + name2).join(",")})`;
}
function splitArray(type) {
  const match = type.match(/^([^\x5b]*)((\x5b\d*\x5d)*)(\x5b(\d*)\x5d)$/);
  if (match) {
    return {
      base: match[1],
      index: match[2] + match[4],
      array: {
        base: match[1],
        prefix: match[1] + match[2],
        count: match[5] ? parseInt(match[5]) : -1
      }
    };
  }
  return { base: type };
}
var _types, _fullTypes, _encoderCache, _TypedDataEncoder_instances, getEncoder_fn;
var _TypedDataEncoder = class _TypedDataEncoder {
  /**
   *  Create a new **TypedDataEncoder** for %%types%%.
   *
   *  This performs all necessary checking that types are valid and
   *  do not violate the [[link-eip-712]] structural constraints as
   *  well as computes the [[primaryType]].
   */
  constructor(_types2) {
    __privateAdd(this, _TypedDataEncoder_instances);
    /**
     *  The primary type for the structured [[types]].
     *
     *  This is derived automatically from the [[types]], since no
     *  recursion is possible, once the DAG for the types is consturcted
     *  internally, the primary type must be the only remaining type with
     *  no parent nodes.
     */
    __publicField(this, "primaryType");
    __privateAdd(this, _types);
    __privateAdd(this, _fullTypes);
    __privateAdd(this, _encoderCache);
    __privateSet(this, _fullTypes, /* @__PURE__ */ new Map());
    __privateSet(this, _encoderCache, /* @__PURE__ */ new Map());
    const links = /* @__PURE__ */ new Map();
    const parents = /* @__PURE__ */ new Map();
    const subtypes = /* @__PURE__ */ new Map();
    const types = {};
    Object.keys(_types2).forEach((type) => {
      types[type] = _types2[type].map(({ name, type: type2 }) => {
        let { base, index } = splitArray(type2);
        if (base === "int" && !_types2["int"]) {
          base = "int256";
        }
        if (base === "uint" && !_types2["uint"]) {
          base = "uint256";
        }
        return { name, type: base + (index || "") };
      });
      links.set(type, /* @__PURE__ */ new Set());
      parents.set(type, []);
      subtypes.set(type, /* @__PURE__ */ new Set());
    });
    __privateSet(this, _types, JSON.stringify(types));
    for (const name in types) {
      const uniqueNames = /* @__PURE__ */ new Set();
      for (const field of types[name]) {
        assertArgument(!uniqueNames.has(field.name), `duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, "types", _types2);
        uniqueNames.add(field.name);
        const baseType = splitArray(field.type).base;
        assertArgument(baseType !== name, `circular type reference to ${JSON.stringify(baseType)}`, "types", _types2);
        const encoder = getBaseEncoder(baseType);
        if (encoder) {
          continue;
        }
        assertArgument(parents.has(baseType), `unknown type ${JSON.stringify(baseType)}`, "types", _types2);
        parents.get(baseType).push(name);
        links.get(name).add(baseType);
      }
    }
    const primaryTypes = Array.from(parents.keys()).filter((n2) => parents.get(n2).length === 0);
    assertArgument(primaryTypes.length !== 0, "missing primary type", "types", _types2);
    assertArgument(primaryTypes.length === 1, `ambiguous primary types or unused types: ${primaryTypes.map((t) => JSON.stringify(t)).join(", ")}`, "types", _types2);
    defineProperties(this, { primaryType: primaryTypes[0] });
    function checkCircular(type, found) {
      assertArgument(!found.has(type), `circular type reference to ${JSON.stringify(type)}`, "types", _types2);
      found.add(type);
      for (const child of links.get(type)) {
        if (!parents.has(child)) {
          continue;
        }
        checkCircular(child, found);
        for (const subtype of found) {
          subtypes.get(subtype).add(child);
        }
      }
      found.delete(type);
    }
    checkCircular(this.primaryType, /* @__PURE__ */ new Set());
    for (const [name, set] of subtypes) {
      const st = Array.from(set);
      st.sort();
      __privateGet(this, _fullTypes).set(name, encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(""));
    }
  }
  /**
   *  The types.
   */
  get types() {
    return JSON.parse(__privateGet(this, _types));
  }
  /**
   *  Returnthe encoder for the specific %%type%%.
   */
  getEncoder(type) {
    let encoder = __privateGet(this, _encoderCache).get(type);
    if (!encoder) {
      encoder = __privateMethod(this, _TypedDataEncoder_instances, getEncoder_fn).call(this, type);
      __privateGet(this, _encoderCache).set(type, encoder);
    }
    return encoder;
  }
  /**
   *  Return the full type for %%name%%.
   */
  encodeType(name) {
    const result = __privateGet(this, _fullTypes).get(name);
    assertArgument(result, `unknown type: ${JSON.stringify(name)}`, "name", name);
    return result;
  }
  /**
   *  Return the encoded %%value%% for the %%type%%.
   */
  encodeData(type, value) {
    return this.getEncoder(type)(value);
  }
  /**
   *  Returns the hash of %%value%% for the type of %%name%%.
   */
  hashStruct(name, value) {
    return keccak256(this.encodeData(name, value));
  }
  /**
   *  Return the fulled encoded %%value%% for the [[types]].
   */
  encode(value) {
    return this.encodeData(this.primaryType, value);
  }
  /**
   *  Return the hash of the fully encoded %%value%% for the [[types]].
   */
  hash(value) {
    return this.hashStruct(this.primaryType, value);
  }
  /**
   *  @_ignore:
   */
  _visit(type, value, callback) {
    {
      const encoder = getBaseEncoder(type);
      if (encoder) {
        return callback(type, value);
      }
    }
    const array = splitArray(type).array;
    if (array) {
      assertArgument(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, "value", value);
      return value.map((v) => this._visit(array.prefix, v, callback));
    }
    const fields = this.types[type];
    if (fields) {
      return fields.reduce((accum, { name, type: type2 }) => {
        accum[name] = this._visit(type2, value[name], callback);
        return accum;
      }, {});
    }
    assertArgument(false, `unknown type: ${type}`, "type", type);
  }
  /**
   *  Call %%calback%% for each value in %%value%%, passing the type and
   *  component within %%value%%.
   *
   *  This is useful for replacing addresses or other transformation that
   *  may be desired on each component, based on its type.
   */
  visit(value, callback) {
    return this._visit(this.primaryType, value, callback);
  }
  /**
   *  Create a new **TypedDataEncoder** for %%types%%.
   */
  static from(types) {
    return new _TypedDataEncoder(types);
  }
  /**
   *  Return the primary type for %%types%%.
   */
  static getPrimaryType(types) {
    return _TypedDataEncoder.from(types).primaryType;
  }
  /**
   *  Return the hashed struct for %%value%% using %%types%% and %%name%%.
   */
  static hashStruct(name, types, value) {
    return _TypedDataEncoder.from(types).hashStruct(name, value);
  }
  /**
   *  Return the domain hash for %%domain%%.
   */
  static hashDomain(domain) {
    const domainFields = [];
    for (const name in domain) {
      if (domain[name] == null) {
        continue;
      }
      const type = domainFieldTypes[name];
      assertArgument(type, `invalid typed-data domain key: ${JSON.stringify(name)}`, "domain", domain);
      domainFields.push({ name, type });
    }
    domainFields.sort((a, b2) => {
      return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b2.name);
    });
    return _TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain);
  }
  /**
   *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.
   */
  static encode(domain, types, value) {
    return concat([
      "0x1901",
      _TypedDataEncoder.hashDomain(domain),
      _TypedDataEncoder.from(types).hash(value)
    ]);
  }
  /**
   *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.
   */
  static hash(domain, types, value) {
    return keccak256(_TypedDataEncoder.encode(domain, types, value));
  }
  // Replaces all address types with ENS names with their looked up address
  /**
   * Resolves to the value from resolving all addresses in %%value%% for
   * %%types%% and the %%domain%%.
   */
  static async resolveNames(domain, types, value, resolveName) {
    domain = Object.assign({}, domain);
    for (const key in domain) {
      if (domain[key] == null) {
        delete domain[key];
      }
    }
    const ensCache = {};
    if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {
      ensCache[domain.verifyingContract] = "0x";
    }
    const encoder = _TypedDataEncoder.from(types);
    encoder.visit(value, (type, value2) => {
      if (type === "address" && !isHexString(value2, 20)) {
        ensCache[value2] = "0x";
      }
      return value2;
    });
    for (const name in ensCache) {
      ensCache[name] = await resolveName(name);
    }
    if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
      domain.verifyingContract = ensCache[domain.verifyingContract];
    }
    value = encoder.visit(value, (type, value2) => {
      if (type === "address" && ensCache[value2]) {
        return ensCache[value2];
      }
      return value2;
    });
    return { domain, value };
  }
  /**
   *  Returns the JSON-encoded payload expected by nodes which implement
   *  the JSON-RPC [[link-eip-712]] method.
   */
  static getPayload(domain, types, value) {
    _TypedDataEncoder.hashDomain(domain);
    const domainValues = {};
    const domainTypes = [];
    domainFieldNames.forEach((name) => {
      const value2 = domain[name];
      if (value2 == null) {
        return;
      }
      domainValues[name] = domainChecks[name](value2);
      domainTypes.push({ name, type: domainFieldTypes[name] });
    });
    const encoder = _TypedDataEncoder.from(types);
    types = encoder.types;
    const typesWithDomain = Object.assign({}, types);
    assertArgument(typesWithDomain.EIP712Domain == null, "types must not contain EIP712Domain type", "types.EIP712Domain", types);
    typesWithDomain.EIP712Domain = domainTypes;
    encoder.encode(value);
    return {
      types: typesWithDomain,
      domain: domainValues,
      primaryType: encoder.primaryType,
      message: encoder.visit(value, (type, value2) => {
        if (type.match(/^bytes(\d*)/)) {
          return hexlify(getBytes(value2));
        }
        if (type.match(/^u?int/)) {
          return getBigInt(value2).toString();
        }
        switch (type) {
          case "address":
            return value2.toLowerCase();
          case "bool":
            return !!value2;
          case "string":
            assertArgument(typeof value2 === "string", "invalid string", "value", value2);
            return value2;
        }
        assertArgument(false, "unsupported type", "type", type);
      })
    };
  }
};
_types = new WeakMap();
_fullTypes = new WeakMap();
_encoderCache = new WeakMap();
_TypedDataEncoder_instances = new WeakSet();
getEncoder_fn = function(type) {
  {
    const encoder = getBaseEncoder(type);
    if (encoder) {
      return encoder;
    }
  }
  const array = splitArray(type).array;
  if (array) {
    const subtype = array.prefix;
    const subEncoder = this.getEncoder(subtype);
    return (value) => {
      assertArgument(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, "value", value);
      let result = value.map(subEncoder);
      if (__privateGet(this, _fullTypes).has(subtype)) {
        result = result.map(keccak256);
      }
      return keccak256(concat(result));
    };
  }
  const fields = this.types[type];
  if (fields) {
    const encodedType = id(__privateGet(this, _fullTypes).get(type));
    return (value) => {
      const values = fields.map(({ name, type: type2 }) => {
        const result = this.getEncoder(type2)(value[name]);
        if (__privateGet(this, _fullTypes).has(type2)) {
          return keccak256(result);
        }
        return result;
      });
      values.unshift(encodedType);
      return concat(values);
    };
  }
  assertArgument(false, `unknown type: ${type}`, "type", type);
};
var TypedDataEncoder = _TypedDataEncoder;
function verifyTypedData(domain, types, value, signature) {
  return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature);
}

// node_modules/ethers/lib.esm/abi/fragments.js
function setify(items) {
  const result = /* @__PURE__ */ new Set();
  items.forEach((k) => result.add(k));
  return Object.freeze(result);
}
var _kwVisibDeploy = "external public payable override";
var KwVisibDeploy = setify(_kwVisibDeploy.split(" "));
var _kwVisib = "constant external internal payable private public pure view override";
var KwVisib = setify(_kwVisib.split(" "));
var _kwTypes = "constructor error event fallback function receive struct";
var KwTypes = setify(_kwTypes.split(" "));
var _kwModifiers = "calldata memory storage payable indexed";
var KwModifiers = setify(_kwModifiers.split(" "));
var _kwOther = "tuple returns";
var _keywords = [_kwTypes, _kwModifiers, _kwOther, _kwVisib].join(" ");
var Keywords = setify(_keywords.split(" "));
var SimpleTokens = {
  "(": "OPEN_PAREN",
  ")": "CLOSE_PAREN",
  "[": "OPEN_BRACKET",
  "]": "CLOSE_BRACKET",
  ",": "COMMA",
  "@": "AT"
};
var regexWhitespacePrefix = new RegExp("^(\\s*)");
var regexNumberPrefix = new RegExp("^([0-9]+)");
var regexIdPrefix = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)");
var regexId = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$");
var regexType = new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$");
var _offset2, _tokens, _TokenString_instances, subTokenString_fn;
var _TokenString = class _TokenString {
  constructor(tokens) {
    __privateAdd(this, _TokenString_instances);
    __privateAdd(this, _offset2);
    __privateAdd(this, _tokens);
    __privateSet(this, _offset2, 0);
    __privateSet(this, _tokens, tokens.slice());
  }
  get offset() {
    return __privateGet(this, _offset2);
  }
  get length() {
    return __privateGet(this, _tokens).length - __privateGet(this, _offset2);
  }
  clone() {
    return new _TokenString(__privateGet(this, _tokens));
  }
  reset() {
    __privateSet(this, _offset2, 0);
  }
  // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens
  popKeyword(allowed) {
    const top = this.peek();
    if (top.type !== "KEYWORD" || !allowed.has(top.text)) {
      throw new Error(`expected keyword ${top.text}`);
    }
    return this.pop().text;
  }
  // Pops and returns the value of the next token if it is `type`; throws if out of tokens
  popType(type) {
    if (this.peek().type !== type) {
      const top = this.peek();
      throw new Error(`expected ${type}; got ${top.type} ${JSON.stringify(top.text)}`);
    }
    return this.pop().text;
  }
  // Pops and returns a "(" TOKENS ")"
  popParen() {
    const top = this.peek();
    if (top.type !== "OPEN_PAREN") {
      throw new Error("bad start");
    }
    const result = __privateMethod(this, _TokenString_instances, subTokenString_fn).call(this, __privateGet(this, _offset2) + 1, top.match + 1);
    __privateSet(this, _offset2, top.match + 1);
    return result;
  }
  // Pops and returns the items within "(" ITEM1 "," ITEM2 "," ... ")"
  popParams() {
    const top = this.peek();
    if (top.type !== "OPEN_PAREN") {
      throw new Error("bad start");
    }
    const result = [];
    while (__privateGet(this, _offset2) < top.match - 1) {
      const link = this.peek().linkNext;
      result.push(__privateMethod(this, _TokenString_instances, subTokenString_fn).call(this, __privateGet(this, _offset2) + 1, link));
      __privateSet(this, _offset2, link);
    }
    __privateSet(this, _offset2, top.match + 1);
    return result;
  }
  // Returns the top Token, throwing if out of tokens
  peek() {
    if (__privateGet(this, _offset2) >= __privateGet(this, _tokens).length) {
      throw new Error("out-of-bounds");
    }
    return __privateGet(this, _tokens)[__privateGet(this, _offset2)];
  }
  // Returns the next value, if it is a keyword in `allowed`
  peekKeyword(allowed) {
    const top = this.peekType("KEYWORD");
    return top != null && allowed.has(top) ? top : null;
  }
  // Returns the value of the next token if it is `type`
  peekType(type) {
    if (this.length === 0) {
      return null;
    }
    const top = this.peek();
    return top.type === type ? top.text : null;
  }
  // Returns the next token; throws if out of tokens
  pop() {
    const result = this.peek();
    __privateWrapper(this, _offset2)._++;
    return result;
  }
  toString() {
    const tokens = [];
    for (let i = __privateGet(this, _offset2); i < __privateGet(this, _tokens).length; i++) {
      const token = __privateGet(this, _tokens)[i];
      tokens.push(`${token.type}:${token.text}`);
    }
    return `<TokenString ${tokens.join(" ")}>`;
  }
};
_offset2 = new WeakMap();
_tokens = new WeakMap();
_TokenString_instances = new WeakSet();
subTokenString_fn = function(from = 0, to = 0) {
  return new _TokenString(__privateGet(this, _tokens).slice(from, to).map((t) => {
    return Object.freeze(Object.assign({}, t, {
      match: t.match - from,
      linkBack: t.linkBack - from,
      linkNext: t.linkNext - from
    }));
  }));
};
var TokenString = _TokenString;
function lex(text) {
  const tokens = [];
  const throwError2 = (message) => {
    const token = offset < text.length ? JSON.stringify(text[offset]) : "$EOI";
    throw new Error(`invalid token ${token} at ${offset}: ${message}`);
  };
  let brackets = [];
  let commas = [];
  let offset = 0;
  while (offset < text.length) {
    let cur = text.substring(offset);
    let match = cur.match(regexWhitespacePrefix);
    if (match) {
      offset += match[1].length;
      cur = text.substring(offset);
    }
    const token = { depth: brackets.length, linkBack: -1, linkNext: -1, match: -1, type: "", text: "", offset, value: -1 };
    tokens.push(token);
    let type = SimpleTokens[cur[0]] || "";
    if (type) {
      token.type = type;
      token.text = cur[0];
      offset++;
      if (type === "OPEN_PAREN") {
        brackets.push(tokens.length - 1);
        commas.push(tokens.length - 1);
      } else if (type == "CLOSE_PAREN") {
        if (brackets.length === 0) {
          throwError2("no matching open bracket");
        }
        token.match = brackets.pop();
        tokens[token.match].match = tokens.length - 1;
        token.depth--;
        token.linkBack = commas.pop();
        tokens[token.linkBack].linkNext = tokens.length - 1;
      } else if (type === "COMMA") {
        token.linkBack = commas.pop();
        tokens[token.linkBack].linkNext = tokens.length - 1;
        commas.push(tokens.length - 1);
      } else if (type === "OPEN_BRACKET") {
        token.type = "BRACKET";
      } else if (type === "CLOSE_BRACKET") {
        let suffix = tokens.pop().text;
        if (tokens.length > 0 && tokens[tokens.length - 1].type === "NUMBER") {
          const value = tokens.pop().text;
          suffix = value + suffix;
          tokens[tokens.length - 1].value = getNumber(value);
        }
        if (tokens.length === 0 || tokens[tokens.length - 1].type !== "BRACKET") {
          throw new Error("missing opening bracket");
        }
        tokens[tokens.length - 1].text += suffix;
      }
      continue;
    }
    match = cur.match(regexIdPrefix);
    if (match) {
      token.text = match[1];
      offset += token.text.length;
      if (Keywords.has(token.text)) {
        token.type = "KEYWORD";
        continue;
      }
      if (token.text.match(regexType)) {
        token.type = "TYPE";
        continue;
      }
      token.type = "ID";
      continue;
    }
    match = cur.match(regexNumberPrefix);
    if (match) {
      token.text = match[1];
      token.type = "NUMBER";
      offset += token.text.length;
      continue;
    }
    throw new Error(`unexpected token ${JSON.stringify(cur[0])} at position ${offset}`);
  }
  return new TokenString(tokens.map((t) => Object.freeze(t)));
}
function allowSingle(set, allowed) {
  let included = [];
  for (const key in allowed.keys()) {
    if (set.has(key)) {
      included.push(key);
    }
  }
  if (included.length > 1) {
    throw new Error(`conflicting types: ${included.join(", ")}`);
  }
}
function consumeName(type, tokens) {
  if (tokens.peekKeyword(KwTypes)) {
    const keyword = tokens.pop().text;
    if (keyword !== type) {
      throw new Error(`expected ${type}, got ${keyword}`);
    }
  }
  return tokens.popType("ID");
}
function consumeKeywords(tokens, allowed) {
  const keywords = /* @__PURE__ */ new Set();
  while (true) {
    const keyword = tokens.peekType("KEYWORD");
    if (keyword == null || allowed && !allowed.has(keyword)) {
      break;
    }
    tokens.pop();
    if (keywords.has(keyword)) {
      throw new Error(`duplicate keywords: ${JSON.stringify(keyword)}`);
    }
    keywords.add(keyword);
  }
  return Object.freeze(keywords);
}
function consumeMutability(tokens) {
  let modifiers = consumeKeywords(tokens, KwVisib);
  allowSingle(modifiers, setify("constant payable nonpayable".split(" ")));
  allowSingle(modifiers, setify("pure view payable nonpayable".split(" ")));
  if (modifiers.has("view")) {
    return "view";
  }
  if (modifiers.has("pure")) {
    return "pure";
  }
  if (modifiers.has("payable")) {
    return "payable";
  }
  if (modifiers.has("nonpayable")) {
    return "nonpayable";
  }
  if (modifiers.has("constant")) {
    return "view";
  }
  return "nonpayable";
}
function consumeParams(tokens, allowIndexed) {
  return tokens.popParams().map((t) => ParamType.from(t, allowIndexed));
}
function consumeGas(tokens) {
  if (tokens.peekType("AT")) {
    tokens.pop();
    if (tokens.peekType("NUMBER")) {
      return getBigInt(tokens.pop().text);
    }
    throw new Error("invalid gas");
  }
  return null;
}
function consumeEoi(tokens) {
  if (tokens.length) {
    throw new Error(`unexpected tokens at offset ${tokens.offset}: ${tokens.toString()}`);
  }
}
var regexArrayType = new RegExp(/^(.*)\[([0-9]*)\]$/);
function verifyBasicType(type) {
  const match = type.match(regexType);
  assertArgument(match, "invalid type", "type", type);
  if (type === "uint") {
    return "uint256";
  }
  if (type === "int") {
    return "int256";
  }
  if (match[2]) {
    const length = parseInt(match[2]);
    assertArgument(length !== 0 && length <= 32, "invalid bytes length", "type", type);
  } else if (match[3]) {
    const size = parseInt(match[3]);
    assertArgument(size !== 0 && size <= 256 && size % 8 === 0, "invalid numeric width", "type", type);
  }
  return type;
}
var _guard4 = {};
var internal = Symbol.for("_ethers_internal");
var ParamTypeInternal = "_ParamTypeInternal";
var ErrorFragmentInternal = "_ErrorInternal";
var EventFragmentInternal = "_EventInternal";
var ConstructorFragmentInternal = "_ConstructorInternal";
var FallbackFragmentInternal = "_FallbackInternal";
var FunctionFragmentInternal = "_FunctionInternal";
var StructFragmentInternal = "_StructInternal";
var _ParamType_instances, walkAsync_fn;
var _ParamType = class _ParamType {
  /**
   *  @private
   */
  constructor(guard, name, type, baseType, indexed, components, arrayLength, arrayChildren) {
    __privateAdd(this, _ParamType_instances);
    /**
     *  The local name of the parameter (or ``""`` if unbound)
     */
    __publicField(this, "name");
    /**
     *  The fully qualified type (e.g. ``"address"``, ``"tuple(address)"``,
     *  ``"uint256[3][]"``)
     */
    __publicField(this, "type");
    /**
     *  The base type (e.g. ``"address"``, ``"tuple"``, ``"array"``)
     */
    __publicField(this, "baseType");
    /**
     *  True if the parameters is indexed.
     *
     *  For non-indexable types this is ``null``.
     */
    __publicField(this, "indexed");
    /**
     *  The components for the tuple.
     *
     *  For non-tuple types this is ``null``.
     */
    __publicField(this, "components");
    /**
     *  The array length, or ``-1`` for dynamic-lengthed arrays.
     *
     *  For non-array types this is ``null``.
     */
    __publicField(this, "arrayLength");
    /**
     *  The type of each child in the array.
     *
     *  For non-array types this is ``null``.
     */
    __publicField(this, "arrayChildren");
    assertPrivate(guard, _guard4, "ParamType");
    Object.defineProperty(this, internal, { value: ParamTypeInternal });
    if (components) {
      components = Object.freeze(components.slice());
    }
    if (baseType === "array") {
      if (arrayLength == null || arrayChildren == null) {
        throw new Error("");
      }
    } else if (arrayLength != null || arrayChildren != null) {
      throw new Error("");
    }
    if (baseType === "tuple") {
      if (components == null) {
        throw new Error("");
      }
    } else if (components != null) {
      throw new Error("");
    }
    defineProperties(this, {
      name,
      type,
      baseType,
      indexed,
      components,
      arrayLength,
      arrayChildren
    });
  }
  /**
   *  Return a string representation of this type.
   *
   *  For example,
   *
   *  ``sighash" => "(uint256,address)"``
   *
   *  ``"minimal" => "tuple(uint256,address) indexed"``
   *
   *  ``"full" => "tuple(uint256 foo, address bar) indexed baz"``
   */
  format(format) {
    if (format == null) {
      format = "sighash";
    }
    if (format === "json") {
      const name = this.name || "";
      if (this.isArray()) {
        const result3 = JSON.parse(this.arrayChildren.format("json"));
        result3.name = name;
        result3.type += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`;
        return JSON.stringify(result3);
      }
      const result2 = {
        type: this.baseType === "tuple" ? "tuple" : this.type,
        name
      };
      if (typeof this.indexed === "boolean") {
        result2.indexed = this.indexed;
      }
      if (this.isTuple()) {
        result2.components = this.components.map((c) => JSON.parse(c.format(format)));
      }
      return JSON.stringify(result2);
    }
    let result = "";
    if (this.isArray()) {
      result += this.arrayChildren.format(format);
      result += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`;
    } else {
      if (this.isTuple()) {
        result += "(" + this.components.map((comp) => comp.format(format)).join(format === "full" ? ", " : ",") + ")";
      } else {
        result += this.type;
      }
    }
    if (format !== "sighash") {
      if (this.indexed === true) {
        result += " indexed";
      }
      if (format === "full" && this.name) {
        result += " " + this.name;
      }
    }
    return result;
  }
  /**
   *  Returns true if %%this%% is an Array type.
   *
   *  This provides a type gaurd ensuring that [[arrayChildren]]
   *  and [[arrayLength]] are non-null.
   */
  isArray() {
    return this.baseType === "array";
  }
  /**
   *  Returns true if %%this%% is a Tuple type.
   *
   *  This provides a type gaurd ensuring that [[components]]
   *  is non-null.
   */
  isTuple() {
    return this.baseType === "tuple";
  }
  /**
   *  Returns true if %%this%% is an Indexable type.
   *
   *  This provides a type gaurd ensuring that [[indexed]]
   *  is non-null.
   */
  isIndexable() {
    return this.indexed != null;
  }
  /**
   *  Walks the **ParamType** with %%value%%, calling %%process%%
   *  on each type, destructing the %%value%% recursively.
   */
  walk(value, process) {
    if (this.isArray()) {
      if (!Array.isArray(value)) {
        throw new Error("invalid array value");
      }
      if (this.arrayLength !== -1 && value.length !== this.arrayLength) {
        throw new Error("array is wrong length");
      }
      const _this = this;
      return value.map((v) => _this.arrayChildren.walk(v, process));
    }
    if (this.isTuple()) {
      if (!Array.isArray(value)) {
        throw new Error("invalid tuple value");
      }
      if (value.length !== this.components.length) {
        throw new Error("array is wrong length");
      }
      const _this = this;
      return value.map((v, i) => _this.components[i].walk(v, process));
    }
    return process(this.type, value);
  }
  /**
   *  Walks the **ParamType** with %%value%%, asynchronously calling
   *  %%process%% on each type, destructing the %%value%% recursively.
   *
   *  This can be used to resolve ENS names by walking and resolving each
   *  ``"address"`` type.
   */
  async walkAsync(value, process) {
    const promises = [];
    const result = [value];
    __privateMethod(this, _ParamType_instances, walkAsync_fn).call(this, promises, value, process, (value2) => {
      result[0] = value2;
    });
    if (promises.length) {
      await Promise.all(promises);
    }
    return result[0];
  }
  /**
   *  Creates a new **ParamType** for %%obj%%.
   *
   *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,
   *  otherwise the ``indexed`` keyword will throw an error.
   */
  static from(obj, allowIndexed) {
    if (_ParamType.isParamType(obj)) {
      return obj;
    }
    if (typeof obj === "string") {
      try {
        return _ParamType.from(lex(obj), allowIndexed);
      } catch (error) {
        assertArgument(false, "invalid param type", "obj", obj);
      }
    } else if (obj instanceof TokenString) {
      let type2 = "", baseType = "";
      let comps = null;
      if (consumeKeywords(obj, setify(["tuple"])).has("tuple") || obj.peekType("OPEN_PAREN")) {
        baseType = "tuple";
        comps = obj.popParams().map((t) => _ParamType.from(t));
        type2 = `tuple(${comps.map((c) => c.format()).join(",")})`;
      } else {
        type2 = verifyBasicType(obj.popType("TYPE"));
        baseType = type2;
      }
      let arrayChildren = null;
      let arrayLength = null;
      while (obj.length && obj.peekType("BRACKET")) {
        const bracket = obj.pop();
        arrayChildren = new _ParamType(_guard4, "", type2, baseType, null, comps, arrayLength, arrayChildren);
        arrayLength = bracket.value;
        type2 += bracket.text;
        baseType = "array";
        comps = null;
      }
      let indexed2 = null;
      const keywords = consumeKeywords(obj, KwModifiers);
      if (keywords.has("indexed")) {
        if (!allowIndexed) {
          throw new Error("");
        }
        indexed2 = true;
      }
      const name2 = obj.peekType("ID") ? obj.pop().text : "";
      if (obj.length) {
        throw new Error("leftover tokens");
      }
      return new _ParamType(_guard4, name2, type2, baseType, indexed2, comps, arrayLength, arrayChildren);
    }
    const name = obj.name;
    assertArgument(!name || typeof name === "string" && name.match(regexId), "invalid name", "obj.name", name);
    let indexed = obj.indexed;
    if (indexed != null) {
      assertArgument(allowIndexed, "parameter cannot be indexed", "obj.indexed", obj.indexed);
      indexed = !!indexed;
    }
    let type = obj.type;
    let arrayMatch = type.match(regexArrayType);
    if (arrayMatch) {
      const arrayLength = parseInt(arrayMatch[2] || "-1");
      const arrayChildren = _ParamType.from({
        type: arrayMatch[1],
        components: obj.components
      });
      return new _ParamType(_guard4, name || "", type, "array", indexed, null, arrayLength, arrayChildren);
    }
    if (type === "tuple" || type.startsWith(
      "tuple("
      /* fix: ) */
    ) || type.startsWith(
      "("
      /* fix: ) */
    )) {
      const comps = obj.components != null ? obj.components.map((c) => _ParamType.from(c)) : null;
      const tuple = new _ParamType(_guard4, name || "", type, "tuple", indexed, comps, null, null);
      return tuple;
    }
    type = verifyBasicType(obj.type);
    return new _ParamType(_guard4, name || "", type, type, indexed, null, null, null);
  }
  /**
   *  Returns true if %%value%% is a **ParamType**.
   */
  static isParamType(value) {
    return value && value[internal] === ParamTypeInternal;
  }
};
_ParamType_instances = new WeakSet();
walkAsync_fn = function(promises, value, process, setValue) {
  if (this.isArray()) {
    if (!Array.isArray(value)) {
      throw new Error("invalid array value");
    }
    if (this.arrayLength !== -1 && value.length !== this.arrayLength) {
      throw new Error("array is wrong length");
    }
    const childType = this.arrayChildren;
    const result2 = value.slice();
    result2.forEach((value2, index) => {
      var _a2;
      __privateMethod(_a2 = childType, _ParamType_instances, walkAsync_fn).call(_a2, promises, value2, process, (value3) => {
        result2[index] = value3;
      });
    });
    setValue(result2);
    return;
  }
  if (this.isTuple()) {
    const components = this.components;
    let result2;
    if (Array.isArray(value)) {
      result2 = value.slice();
    } else {
      if (value == null || typeof value !== "object") {
        throw new Error("invalid tuple value");
      }
      result2 = components.map((param) => {
        if (!param.name) {
          throw new Error("cannot use object value with unnamed components");
        }
        if (!(param.name in value)) {
          throw new Error(`missing value for component ${param.name}`);
        }
        return value[param.name];
      });
    }
    if (result2.length !== this.components.length) {
      throw new Error("array is wrong length");
    }
    result2.forEach((value2, index) => {
      var _a2;
      __privateMethod(_a2 = components[index], _ParamType_instances, walkAsync_fn).call(_a2, promises, value2, process, (value3) => {
        result2[index] = value3;
      });
    });
    setValue(result2);
    return;
  }
  const result = process(this.type, value);
  if (result.then) {
    promises.push(async function() {
      setValue(await result);
    }());
  } else {
    setValue(result);
  }
};
var ParamType = _ParamType;
var Fragment = class _Fragment {
  /**
   *  @private
   */
  constructor(guard, type, inputs) {
    /**
     *  The type of the fragment.
     */
    __publicField(this, "type");
    /**
     *  The inputs for the fragment.
     */
    __publicField(this, "inputs");
    assertPrivate(guard, _guard4, "Fragment");
    inputs = Object.freeze(inputs.slice());
    defineProperties(this, { type, inputs });
  }
  /**
   *  Creates a new **Fragment** for %%obj%%, wich can be any supported
   *  ABI frgament type.
   */
  static from(obj) {
    if (typeof obj === "string") {
      try {
        _Fragment.from(JSON.parse(obj));
      } catch (e) {
      }
      return _Fragment.from(lex(obj));
    }
    if (obj instanceof TokenString) {
      const type = obj.peekKeyword(KwTypes);
      switch (type) {
        case "constructor":
          return ConstructorFragment.from(obj);
        case "error":
          return ErrorFragment.from(obj);
        case "event":
          return EventFragment.from(obj);
        case "fallback":
        case "receive":
          return FallbackFragment.from(obj);
        case "function":
          return FunctionFragment.from(obj);
        case "struct":
          return StructFragment.from(obj);
      }
    } else if (typeof obj === "object") {
      switch (obj.type) {
        case "constructor":
          return ConstructorFragment.from(obj);
        case "error":
          return ErrorFragment.from(obj);
        case "event":
          return EventFragment.from(obj);
        case "fallback":
        case "receive":
          return FallbackFragment.from(obj);
        case "function":
          return FunctionFragment.from(obj);
        case "struct":
          return StructFragment.from(obj);
      }
      assert(false, `unsupported type: ${obj.type}`, "UNSUPPORTED_OPERATION", {
        operation: "Fragment.from"
      });
    }
    assertArgument(false, "unsupported frgament object", "obj", obj);
  }
  /**
   *  Returns true if %%value%% is a [[ConstructorFragment]].
   */
  static isConstructor(value) {
    return ConstructorFragment.isFragment(value);
  }
  /**
   *  Returns true if %%value%% is an [[ErrorFragment]].
   */
  static isError(value) {
    return ErrorFragment.isFragment(value);
  }
  /**
   *  Returns true if %%value%% is an [[EventFragment]].
   */
  static isEvent(value) {
    return EventFragment.isFragment(value);
  }
  /**
   *  Returns true if %%value%% is a [[FunctionFragment]].
   */
  static isFunction(value) {
    return FunctionFragment.isFragment(value);
  }
  /**
   *  Returns true if %%value%% is a [[StructFragment]].
   */
  static isStruct(value) {
    return StructFragment.isFragment(value);
  }
};
var NamedFragment = class extends Fragment {
  /**
   *  @private
   */
  constructor(guard, type, name, inputs) {
    super(guard, type, inputs);
    /**
     *  The name of the fragment.
     */
    __publicField(this, "name");
    assertArgument(typeof name === "string" && name.match(regexId), "invalid identifier", "name", name);
    inputs = Object.freeze(inputs.slice());
    defineProperties(this, { name });
  }
};
function joinParams(format, params) {
  return "(" + params.map((p) => p.format(format)).join(format === "full" ? ", " : ",") + ")";
}
var ErrorFragment = class _ErrorFragment extends NamedFragment {
  /**
   *  @private
   */
  constructor(guard, name, inputs) {
    super(guard, "error", name, inputs);
    Object.defineProperty(this, internal, { value: ErrorFragmentInternal });
  }
  /**
   *  The Custom Error selector.
   */
  get selector() {
    return id(this.format("sighash")).substring(0, 10);
  }
  /**
   *  Returns a string representation of this fragment as %%format%%.
   */
  format(format) {
    if (format == null) {
      format = "sighash";
    }
    if (format === "json") {
      return JSON.stringify({
        type: "error",
        name: this.name,
        inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
      });
    }
    const result = [];
    if (format !== "sighash") {
      result.push("error");
    }
    result.push(this.name + joinParams(format, this.inputs));
    return result.join(" ");
  }
  /**
   *  Returns a new **ErrorFragment** for %%obj%%.
   */
  static from(obj) {
    if (_ErrorFragment.isFragment(obj)) {
      return obj;
    }
    if (typeof obj === "string") {
      return _ErrorFragment.from(lex(obj));
    } else if (obj instanceof TokenString) {
      const name = consumeName("error", obj);
      const inputs = consumeParams(obj);
      consumeEoi(obj);
      return new _ErrorFragment(_guard4, name, inputs);
    }
    return new _ErrorFragment(_guard4, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is an
   *  **ErrorFragment**.
   */
  static isFragment(value) {
    return value && value[internal] === ErrorFragmentInternal;
  }
};
var EventFragment = class _EventFragment extends NamedFragment {
  /**
   *  @private
   */
  constructor(guard, name, inputs, anonymous) {
    super(guard, "event", name, inputs);
    /**
     *  Whether this event is anonymous.
     */
    __publicField(this, "anonymous");
    Object.defineProperty(this, internal, { value: EventFragmentInternal });
    defineProperties(this, { anonymous });
  }
  /**
   *  The Event topic hash.
   */
  get topicHash() {
    return id(this.format("sighash"));
  }
  /**
   *  Returns a string representation of this event as %%format%%.
   */
  format(format) {
    if (format == null) {
      format = "sighash";
    }
    if (format === "json") {
      return JSON.stringify({
        type: "event",
        anonymous: this.anonymous,
        name: this.name,
        inputs: this.inputs.map((i) => JSON.parse(i.format(format)))
      });
    }
    const result = [];
    if (format !== "sighash") {
      result.push("event");
    }
    result.push(this.name + joinParams(format, this.inputs));
    if (format !== "sighash" && this.anonymous) {
      result.push("anonymous");
    }
    return result.join(" ");
  }
  /**
   *  Return the topic hash for an event with %%name%% and %%params%%.
   */
  static getTopicHash(name, params) {
    params = (params || []).map((p) => ParamType.from(p));
    const fragment = new _EventFragment(_guard4, name, params, false);
    return fragment.topicHash;
  }
  /**
   *  Returns a new **EventFragment** for %%obj%%.
   */
  static from(obj) {
    if (_EventFragment.isFragment(obj)) {
      return obj;
    }
    if (typeof obj === "string") {
      try {
        return _EventFragment.from(lex(obj));
      } catch (error) {
        assertArgument(false, "invalid event fragment", "obj", obj);
      }
    } else if (obj instanceof TokenString) {
      const name = consumeName("event", obj);
      const inputs = consumeParams(obj, true);
      const anonymous = !!consumeKeywords(obj, setify(["anonymous"])).has("anonymous");
      consumeEoi(obj);
      return new _EventFragment(_guard4, name, inputs, anonymous);
    }
    return new _EventFragment(_guard4, obj.name, obj.inputs ? obj.inputs.map((p) => ParamType.from(p, true)) : [], !!obj.anonymous);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is an
   *  **EventFragment**.
   */
  static isFragment(value) {
    return value && value[internal] === EventFragmentInternal;
  }
};
var ConstructorFragment = class _ConstructorFragment extends Fragment {
  /**
   *  @private
   */
  constructor(guard, type, inputs, payable, gas) {
    super(guard, type, inputs);
    /**
     *  Whether the constructor can receive an endowment.
     */
    __publicField(this, "payable");
    /**
     *  The recommended gas limit for deployment or ``null``.
     */
    __publicField(this, "gas");
    Object.defineProperty(this, internal, { value: ConstructorFragmentInternal });
    defineProperties(this, { payable, gas });
  }
  /**
   *  Returns a string representation of this constructor as %%format%%.
   */
  format(format) {
    assert(format != null && format !== "sighash", "cannot format a constructor for sighash", "UNSUPPORTED_OPERATION", { operation: "format(sighash)" });
    if (format === "json") {
      return JSON.stringify({
        type: "constructor",
        stateMutability: this.payable ? "payable" : "undefined",
        payable: this.payable,
        gas: this.gas != null ? this.gas : void 0,
        inputs: this.inputs.map((i) => JSON.parse(i.format(format)))
      });
    }
    const result = [`constructor${joinParams(format, this.inputs)}`];
    if (this.payable) {
      result.push("payable");
    }
    if (this.gas != null) {
      result.push(`@${this.gas.toString()}`);
    }
    return result.join(" ");
  }
  /**
   *  Returns a new **ConstructorFragment** for %%obj%%.
   */
  static from(obj) {
    if (_ConstructorFragment.isFragment(obj)) {
      return obj;
    }
    if (typeof obj === "string") {
      try {
        return _ConstructorFragment.from(lex(obj));
      } catch (error) {
        assertArgument(false, "invalid constuctor fragment", "obj", obj);
      }
    } else if (obj instanceof TokenString) {
      consumeKeywords(obj, setify(["constructor"]));
      const inputs = consumeParams(obj);
      const payable = !!consumeKeywords(obj, KwVisibDeploy).has("payable");
      const gas = consumeGas(obj);
      consumeEoi(obj);
      return new _ConstructorFragment(_guard4, "constructor", inputs, payable, gas);
    }
    return new _ConstructorFragment(_guard4, "constructor", obj.inputs ? obj.inputs.map(ParamType.from) : [], !!obj.payable, obj.gas != null ? obj.gas : null);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is a
   *  **ConstructorFragment**.
   */
  static isFragment(value) {
    return value && value[internal] === ConstructorFragmentInternal;
  }
};
var FallbackFragment = class _FallbackFragment extends Fragment {
  constructor(guard, inputs, payable) {
    super(guard, "fallback", inputs);
    /**
     *  If the function can be sent value during invocation.
     */
    __publicField(this, "payable");
    Object.defineProperty(this, internal, { value: FallbackFragmentInternal });
    defineProperties(this, { payable });
  }
  /**
   *  Returns a string representation of this fallback as %%format%%.
   */
  format(format) {
    const type = this.inputs.length === 0 ? "receive" : "fallback";
    if (format === "json") {
      const stateMutability = this.payable ? "payable" : "nonpayable";
      return JSON.stringify({ type, stateMutability });
    }
    return `${type}()${this.payable ? " payable" : ""}`;
  }
  /**
   *  Returns a new **FallbackFragment** for %%obj%%.
   */
  static from(obj) {
    if (_FallbackFragment.isFragment(obj)) {
      return obj;
    }
    if (typeof obj === "string") {
      try {
        return _FallbackFragment.from(lex(obj));
      } catch (error) {
        assertArgument(false, "invalid fallback fragment", "obj", obj);
      }
    } else if (obj instanceof TokenString) {
      const errorObj = obj.toString();
      const topIsValid = obj.peekKeyword(setify(["fallback", "receive"]));
      assertArgument(topIsValid, "type must be fallback or receive", "obj", errorObj);
      const type = obj.popKeyword(setify(["fallback", "receive"]));
      if (type === "receive") {
        const inputs2 = consumeParams(obj);
        assertArgument(inputs2.length === 0, `receive cannot have arguments`, "obj.inputs", inputs2);
        consumeKeywords(obj, setify(["payable"]));
        consumeEoi(obj);
        return new _FallbackFragment(_guard4, [], true);
      }
      let inputs = consumeParams(obj);
      if (inputs.length) {
        assertArgument(inputs.length === 1 && inputs[0].type === "bytes", "invalid fallback inputs", "obj.inputs", inputs.map((i) => i.format("minimal")).join(", "));
      } else {
        inputs = [ParamType.from("bytes")];
      }
      const mutability = consumeMutability(obj);
      assertArgument(mutability === "nonpayable" || mutability === "payable", "fallback cannot be constants", "obj.stateMutability", mutability);
      if (consumeKeywords(obj, setify(["returns"])).has("returns")) {
        const outputs = consumeParams(obj);
        assertArgument(outputs.length === 1 && outputs[0].type === "bytes", "invalid fallback outputs", "obj.outputs", outputs.map((i) => i.format("minimal")).join(", "));
      }
      consumeEoi(obj);
      return new _FallbackFragment(_guard4, inputs, mutability === "payable");
    }
    if (obj.type === "receive") {
      return new _FallbackFragment(_guard4, [], true);
    }
    if (obj.type === "fallback") {
      const inputs = [ParamType.from("bytes")];
      const payable = obj.stateMutability === "payable";
      return new _FallbackFragment(_guard4, inputs, payable);
    }
    assertArgument(false, "invalid fallback description", "obj", obj);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is a
   *  **FallbackFragment**.
   */
  static isFragment(value) {
    return value && value[internal] === FallbackFragmentInternal;
  }
};
var FunctionFragment = class _FunctionFragment extends NamedFragment {
  /**
   *  @private
   */
  constructor(guard, name, stateMutability, inputs, outputs, gas) {
    super(guard, "function", name, inputs);
    /**
     *  If the function is constant (e.g. ``pure`` or ``view`` functions).
     */
    __publicField(this, "constant");
    /**
     *  The returned types for the result of calling this function.
     */
    __publicField(this, "outputs");
    /**
     *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``
     *  or ``pure``)
     */
    __publicField(this, "stateMutability");
    /**
     *  If the function can be sent value during invocation.
     */
    __publicField(this, "payable");
    /**
     *  The recommended gas limit to send when calling this function.
     */
    __publicField(this, "gas");
    Object.defineProperty(this, internal, { value: FunctionFragmentInternal });
    outputs = Object.freeze(outputs.slice());
    const constant = stateMutability === "view" || stateMutability === "pure";
    const payable = stateMutability === "payable";
    defineProperties(this, { constant, gas, outputs, payable, stateMutability });
  }
  /**
   *  The Function selector.
   */
  get selector() {
    return id(this.format("sighash")).substring(0, 10);
  }
  /**
   *  Returns a string representation of this function as %%format%%.
   */
  format(format) {
    if (format == null) {
      format = "sighash";
    }
    if (format === "json") {
      return JSON.stringify({
        type: "function",
        name: this.name,
        constant: this.constant,
        stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
        payable: this.payable,
        gas: this.gas != null ? this.gas : void 0,
        inputs: this.inputs.map((i) => JSON.parse(i.format(format))),
        outputs: this.outputs.map((o) => JSON.parse(o.format(format)))
      });
    }
    const result = [];
    if (format !== "sighash") {
      result.push("function");
    }
    result.push(this.name + joinParams(format, this.inputs));
    if (format !== "sighash") {
      if (this.stateMutability !== "nonpayable") {
        result.push(this.stateMutability);
      }
      if (this.outputs && this.outputs.length) {
        result.push("returns");
        result.push(joinParams(format, this.outputs));
      }
      if (this.gas != null) {
        result.push(`@${this.gas.toString()}`);
      }
    }
    return result.join(" ");
  }
  /**
   *  Return the selector for a function with %%name%% and %%params%%.
   */
  static getSelector(name, params) {
    params = (params || []).map((p) => ParamType.from(p));
    const fragment = new _FunctionFragment(_guard4, name, "view", params, [], null);
    return fragment.selector;
  }
  /**
   *  Returns a new **FunctionFragment** for %%obj%%.
   */
  static from(obj) {
    if (_FunctionFragment.isFragment(obj)) {
      return obj;
    }
    if (typeof obj === "string") {
      try {
        return _FunctionFragment.from(lex(obj));
      } catch (error) {
        assertArgument(false, "invalid function fragment", "obj", obj);
      }
    } else if (obj instanceof TokenString) {
      const name = consumeName("function", obj);
      const inputs = consumeParams(obj);
      const mutability = consumeMutability(obj);
      let outputs = [];
      if (consumeKeywords(obj, setify(["returns"])).has("returns")) {
        outputs = consumeParams(obj);
      }
      const gas = consumeGas(obj);
      consumeEoi(obj);
      return new _FunctionFragment(_guard4, name, mutability, inputs, outputs, gas);
    }
    let stateMutability = obj.stateMutability;
    if (stateMutability == null) {
      stateMutability = "payable";
      if (typeof obj.constant === "boolean") {
        stateMutability = "view";
        if (!obj.constant) {
          stateMutability = "payable";
          if (typeof obj.payable === "boolean" && !obj.payable) {
            stateMutability = "nonpayable";
          }
        }
      } else if (typeof obj.payable === "boolean" && !obj.payable) {
        stateMutability = "nonpayable";
      }
    }
    return new _FunctionFragment(_guard4, obj.name, stateMutability, obj.inputs ? obj.inputs.map(ParamType.from) : [], obj.outputs ? obj.outputs.map(ParamType.from) : [], obj.gas != null ? obj.gas : null);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is a
   *  **FunctionFragment**.
   */
  static isFragment(value) {
    return value && value[internal] === FunctionFragmentInternal;
  }
};
var StructFragment = class _StructFragment extends NamedFragment {
  /**
   *  @private
   */
  constructor(guard, name, inputs) {
    super(guard, "struct", name, inputs);
    Object.defineProperty(this, internal, { value: StructFragmentInternal });
  }
  /**
   *  Returns a string representation of this struct as %%format%%.
   */
  format() {
    throw new Error("@TODO");
  }
  /**
   *  Returns a new **StructFragment** for %%obj%%.
   */
  static from(obj) {
    if (typeof obj === "string") {
      try {
        return _StructFragment.from(lex(obj));
      } catch (error) {
        assertArgument(false, "invalid struct fragment", "obj", obj);
      }
    } else if (obj instanceof TokenString) {
      const name = consumeName("struct", obj);
      const inputs = consumeParams(obj);
      consumeEoi(obj);
      return new _StructFragment(_guard4, name, inputs);
    }
    return new _StructFragment(_guard4, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);
  }
  // @TODO: fix this return type
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is a
   *  **StructFragment**.
   */
  static isFragment(value) {
    return value && value[internal] === StructFragmentInternal;
  }
};

// node_modules/ethers/lib.esm/abi/abi-coder.js
var PanicReasons = /* @__PURE__ */ new Map();
PanicReasons.set(0, "GENERIC_PANIC");
PanicReasons.set(1, "ASSERT_FALSE");
PanicReasons.set(17, "OVERFLOW");
PanicReasons.set(18, "DIVIDE_BY_ZERO");
PanicReasons.set(33, "ENUM_RANGE_ERROR");
PanicReasons.set(34, "BAD_STORAGE_DATA");
PanicReasons.set(49, "STACK_UNDERFLOW");
PanicReasons.set(50, "ARRAY_RANGE_ERROR");
PanicReasons.set(65, "OUT_OF_MEMORY");
PanicReasons.set(81, "UNINITIALIZED_FUNCTION_CALL");
var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
var defaultCoder = null;
var defaultMaxInflation = 1024;
function getBuiltinCallException(action, tx, data, abiCoder) {
  let message = "missing revert data";
  let reason = null;
  const invocation = null;
  let revert = null;
  if (data) {
    message = "execution reverted";
    const bytes2 = getBytes(data);
    data = hexlify(data);
    if (bytes2.length === 0) {
      message += " (no data present; likely require(false) occurred";
      reason = "require(false)";
    } else if (bytes2.length % 32 !== 4) {
      message += " (could not decode reason; invalid data length)";
    } else if (hexlify(bytes2.slice(0, 4)) === "0x08c379a0") {
      try {
        reason = abiCoder.decode(["string"], bytes2.slice(4))[0];
        revert = {
          signature: "Error(string)",
          name: "Error",
          args: [reason]
        };
        message += `: ${JSON.stringify(reason)}`;
      } catch (error) {
        message += " (could not decode reason; invalid string data)";
      }
    } else if (hexlify(bytes2.slice(0, 4)) === "0x4e487b71") {
      try {
        const code = Number(abiCoder.decode(["uint256"], bytes2.slice(4))[0]);
        revert = {
          signature: "Panic(uint256)",
          name: "Panic",
          args: [code]
        };
        reason = `Panic due to ${PanicReasons.get(code) || "UNKNOWN"}(${code})`;
        message += `: ${reason}`;
      } catch (error) {
        message += " (could not decode panic code)";
      }
    } else {
      message += " (unknown custom error)";
    }
  }
  const transaction = {
    to: tx.to ? getAddress(tx.to) : null,
    data: tx.data || "0x"
  };
  if (tx.from) {
    transaction.from = getAddress(tx.from);
  }
  return makeError(message, "CALL_EXCEPTION", {
    action,
    data,
    reason,
    transaction,
    invocation,
    revert
  });
}
var _AbiCoder_instances, getCoder_fn;
var _AbiCoder = class _AbiCoder {
  constructor() {
    __privateAdd(this, _AbiCoder_instances);
  }
  /**
   *  Get the default values for the given %%types%%.
   *
   *  For example, a ``uint`` is by default ``0`` and ``bool``
   *  is by default ``false``.
   */
  getDefaultValue(types) {
    const coders = types.map((type) => __privateMethod(this, _AbiCoder_instances, getCoder_fn).call(this, ParamType.from(type)));
    const coder = new TupleCoder(coders, "_");
    return coder.defaultValue();
  }
  /**
   *  Encode the %%values%% as the %%types%% into ABI data.
   *
   *  @returns DataHexstring
   */
  encode(types, values) {
    assertArgumentCount(values.length, types.length, "types/values length mismatch");
    const coders = types.map((type) => __privateMethod(this, _AbiCoder_instances, getCoder_fn).call(this, ParamType.from(type)));
    const coder = new TupleCoder(coders, "_");
    const writer = new Writer();
    coder.encode(writer, values);
    return writer.data;
  }
  /**
   *  Decode the ABI %%data%% as the %%types%% into values.
   *
   *  If %%loose%% decoding is enabled, then strict padding is
   *  not enforced. Some older versions of Solidity incorrectly
   *  padded event data emitted from ``external`` functions.
   */
  decode(types, data, loose) {
    const coders = types.map((type) => __privateMethod(this, _AbiCoder_instances, getCoder_fn).call(this, ParamType.from(type)));
    const coder = new TupleCoder(coders, "_");
    return coder.decode(new Reader(data, loose, defaultMaxInflation));
  }
  static _setDefaultMaxInflation(value) {
    assertArgument(typeof value === "number" && Number.isInteger(value), "invalid defaultMaxInflation factor", "value", value);
    defaultMaxInflation = value;
  }
  /**
   *  Returns the shared singleton instance of a default [[AbiCoder]].
   *
   *  On the first call, the instance is created internally.
   */
  static defaultAbiCoder() {
    if (defaultCoder == null) {
      defaultCoder = new _AbiCoder();
    }
    return defaultCoder;
  }
  /**
   *  Returns an ethers-compatible [[CallExceptionError]] Error for the given
   *  result %%data%% for the [[CallExceptionAction]] %%action%% against
   *  the Transaction %%tx%%.
   */
  static getBuiltinCallException(action, tx, data) {
    return getBuiltinCallException(action, tx, data, _AbiCoder.defaultAbiCoder());
  }
};
_AbiCoder_instances = new WeakSet();
getCoder_fn = function(param) {
  if (param.isArray()) {
    return new ArrayCoder(__privateMethod(this, _AbiCoder_instances, getCoder_fn).call(this, param.arrayChildren), param.arrayLength, param.name);
  }
  if (param.isTuple()) {
    return new TupleCoder(param.components.map((c) => __privateMethod(this, _AbiCoder_instances, getCoder_fn).call(this, c)), param.name);
  }
  switch (param.baseType) {
    case "address":
      return new AddressCoder(param.name);
    case "bool":
      return new BooleanCoder(param.name);
    case "string":
      return new StringCoder(param.name);
    case "bytes":
      return new BytesCoder(param.name);
    case "":
      return new NullCoder(param.name);
  }
  let match = param.type.match(paramTypeNumber);
  if (match) {
    let size = parseInt(match[2] || "256");
    assertArgument(size !== 0 && size <= 256 && size % 8 === 0, "invalid " + match[1] + " bit length", "param", param);
    return new NumberCoder(size / 8, match[1] === "int", param.name);
  }
  match = param.type.match(paramTypeBytes);
  if (match) {
    let size = parseInt(match[1]);
    assertArgument(size !== 0 && size <= 32, "invalid bytes length", "param", param);
    return new FixedBytesCoder(size, param.name);
  }
  assertArgument(false, "invalid type", "type", param.type);
};
var AbiCoder = _AbiCoder;

// node_modules/ethers/lib.esm/abi/bytes32.js
function encodeBytes32String(text) {
  const bytes2 = toUtf8Bytes(text);
  if (bytes2.length > 31) {
    throw new Error("bytes32 string must be less than 32 bytes");
  }
  return zeroPadBytes(bytes2, 32);
}
function decodeBytes32String(_bytes) {
  const data = getBytes(_bytes, "bytes");
  if (data.length !== 32) {
    throw new Error("invalid bytes32 - not 32 bytes long");
  }
  if (data[31] !== 0) {
    throw new Error("invalid bytes32 string - no null terminator");
  }
  let length = 31;
  while (data[length - 1] === 0) {
    length--;
  }
  return toUtf8String(data.slice(0, length));
}

// node_modules/ethers/lib.esm/abi/interface.js
var LogDescription = class {
  /**
   *  @_ignore:
   */
  constructor(fragment, topic, args) {
    /**
     *  The matching fragment for the ``topic0``.
     */
    __publicField(this, "fragment");
    /**
     *  The name of the Event.
     */
    __publicField(this, "name");
    /**
     *  The full Event signature.
     */
    __publicField(this, "signature");
    /**
     *  The topic hash for the Event.
     */
    __publicField(this, "topic");
    /**
     *  The arguments passed into the Event with ``emit``.
     */
    __publicField(this, "args");
    const name = fragment.name, signature = fragment.format();
    defineProperties(this, {
      fragment,
      name,
      signature,
      topic,
      args
    });
  }
};
var TransactionDescription = class {
  /**
   *  @_ignore:
   */
  constructor(fragment, selector, args, value) {
    /**
     *  The matching fragment from the transaction ``data``.
     */
    __publicField(this, "fragment");
    /**
     *  The name of the Function from the transaction ``data``.
     */
    __publicField(this, "name");
    /**
     *  The arguments passed to the Function from the transaction ``data``.
     */
    __publicField(this, "args");
    /**
     *  The full Function signature from the transaction ``data``.
     */
    __publicField(this, "signature");
    /**
     *  The selector for the Function from the transaction ``data``.
     */
    __publicField(this, "selector");
    /**
     *  The ``value`` (in wei) from the transaction.
     */
    __publicField(this, "value");
    const name = fragment.name, signature = fragment.format();
    defineProperties(this, {
      fragment,
      name,
      args,
      signature,
      selector,
      value
    });
  }
};
var ErrorDescription = class {
  /**
   *  @_ignore:
   */
  constructor(fragment, selector, args) {
    /**
     *  The matching fragment.
     */
    __publicField(this, "fragment");
    /**
     *  The name of the Error.
     */
    __publicField(this, "name");
    /**
     *  The arguments passed to the Error with ``revert``.
     */
    __publicField(this, "args");
    /**
     *  The full Error signature.
     */
    __publicField(this, "signature");
    /**
     *  The selector for the Error.
     */
    __publicField(this, "selector");
    const name = fragment.name, signature = fragment.format();
    defineProperties(this, {
      fragment,
      name,
      args,
      signature,
      selector
    });
  }
};
var Indexed = class {
  /**
   *  @_ignore:
   */
  constructor(hash2) {
    /**
     *  The ``keccak256`` of the value logged.
     */
    __publicField(this, "hash");
    /**
     *  @_ignore:
     */
    __publicField(this, "_isIndexed");
    defineProperties(this, { hash: hash2, _isIndexed: true });
  }
  /**
   *  Returns ``true`` if %%value%% is an **Indexed**.
   *
   *  This provides a Type Guard for property access.
   */
  static isIndexed(value) {
    return !!(value && value._isIndexed);
  }
};
var PanicReasons2 = {
  "0": "generic panic",
  "1": "assert(false)",
  "17": "arithmetic overflow",
  "18": "division or modulo by zero",
  "33": "enum overflow",
  "34": "invalid encoded storage byte array accessed",
  "49": "out-of-bounds array access; popping on an empty array",
  "50": "out-of-bounds access of an array or bytesN",
  "65": "out of memory",
  "81": "uninitialized function"
};
var BuiltinErrors = {
  "0x08c379a0": {
    signature: "Error(string)",
    name: "Error",
    inputs: ["string"],
    reason: (message) => {
      return `reverted with reason string ${JSON.stringify(message)}`;
    }
  },
  "0x4e487b71": {
    signature: "Panic(uint256)",
    name: "Panic",
    inputs: ["uint256"],
    reason: (code) => {
      let reason = "unknown panic code";
      if (code >= 0 && code <= 255 && PanicReasons2[code.toString()]) {
        reason = PanicReasons2[code.toString()];
      }
      return `reverted with panic code 0x${code.toString(16)} (${reason})`;
    }
  }
};
var _errors, _events, _functions, _abiCoder, _Interface_instances, getFunction_fn, getEvent_fn;
var _Interface = class _Interface {
  /**
   *  Create a new Interface for the %%fragments%%.
   */
  constructor(fragments) {
    __privateAdd(this, _Interface_instances);
    /**
     *  All the Contract ABI members (i.e. methods, events, errors, etc).
     */
    __publicField(this, "fragments");
    /**
     *  The Contract constructor.
     */
    __publicField(this, "deploy");
    /**
     *  The Fallback method, if any.
     */
    __publicField(this, "fallback");
    /**
     *  If receiving ether is supported.
     */
    __publicField(this, "receive");
    __privateAdd(this, _errors);
    __privateAdd(this, _events);
    __privateAdd(this, _functions);
    //    #structs: Map<string, StructFragment>;
    __privateAdd(this, _abiCoder);
    let abi = [];
    if (typeof fragments === "string") {
      abi = JSON.parse(fragments);
    } else {
      abi = fragments;
    }
    __privateSet(this, _functions, /* @__PURE__ */ new Map());
    __privateSet(this, _errors, /* @__PURE__ */ new Map());
    __privateSet(this, _events, /* @__PURE__ */ new Map());
    const frags = [];
    for (const a of abi) {
      try {
        frags.push(Fragment.from(a));
      } catch (error) {
        console.log(`[Warning] Invalid Fragment ${JSON.stringify(a)}:`, error.message);
      }
    }
    defineProperties(this, {
      fragments: Object.freeze(frags)
    });
    let fallback = null;
    let receive = false;
    __privateSet(this, _abiCoder, this.getAbiCoder());
    this.fragments.forEach((fragment, index) => {
      let bucket;
      switch (fragment.type) {
        case "constructor":
          if (this.deploy) {
            console.log("duplicate definition - constructor");
            return;
          }
          defineProperties(this, { deploy: fragment });
          return;
        case "fallback":
          if (fragment.inputs.length === 0) {
            receive = true;
          } else {
            assertArgument(!fallback || fragment.payable !== fallback.payable, "conflicting fallback fragments", `fragments[${index}]`, fragment);
            fallback = fragment;
            receive = fallback.payable;
          }
          return;
        case "function":
          bucket = __privateGet(this, _functions);
          break;
        case "event":
          bucket = __privateGet(this, _events);
          break;
        case "error":
          bucket = __privateGet(this, _errors);
          break;
        default:
          return;
      }
      const signature = fragment.format();
      if (bucket.has(signature)) {
        return;
      }
      bucket.set(signature, fragment);
    });
    if (!this.deploy) {
      defineProperties(this, {
        deploy: ConstructorFragment.from("constructor()")
      });
    }
    defineProperties(this, { fallback, receive });
  }
  /**
   *  Returns the entire Human-Readable ABI, as an array of
   *  signatures, optionally as %%minimal%% strings, which
   *  removes parameter names and unneceesary spaces.
   */
  format(minimal) {
    const format = minimal ? "minimal" : "full";
    const abi = this.fragments.map((f2) => f2.format(format));
    return abi;
  }
  /**
   *  Return the JSON-encoded ABI. This is the format Solidiy
   *  returns.
   */
  formatJson() {
    const abi = this.fragments.map((f2) => f2.format("json"));
    return JSON.stringify(abi.map((j) => JSON.parse(j)));
  }
  /**
   *  The ABI coder that will be used to encode and decode binary
   *  data.
   */
  getAbiCoder() {
    return AbiCoder.defaultAbiCoder();
  }
  /**
   *  Get the function name for %%key%%, which may be a function selector,
   *  function name or function signature that belongs to the ABI.
   */
  getFunctionName(key) {
    const fragment = __privateMethod(this, _Interface_instances, getFunction_fn).call(this, key, null, false);
    assertArgument(fragment, "no matching function", "key", key);
    return fragment.name;
  }
  /**
   *  Returns true if %%key%% (a function selector, function name or
   *  function signature) is present in the ABI.
   *
   *  In the case of a function name, the name may be ambiguous, so
   *  accessing the [[FunctionFragment]] may require refinement.
   */
  hasFunction(key) {
    return !!__privateMethod(this, _Interface_instances, getFunction_fn).call(this, key, null, false);
  }
  /**
   *  Get the [[FunctionFragment]] for %%key%%, which may be a function
   *  selector, function name or function signature that belongs to the ABI.
   *
   *  If %%values%% is provided, it will use the Typed API to handle
   *  ambiguous cases where multiple functions match by name.
   *
   *  If the %%key%% and %%values%% do not refine to a single function in
   *  the ABI, this will throw.
   */
  getFunction(key, values) {
    return __privateMethod(this, _Interface_instances, getFunction_fn).call(this, key, values || null, true);
  }
  /**
   *  Iterate over all functions, calling %%callback%%, sorted by their name.
   */
  forEachFunction(callback) {
    const names2 = Array.from(__privateGet(this, _functions).keys());
    names2.sort((a, b2) => a.localeCompare(b2));
    for (let i = 0; i < names2.length; i++) {
      const name = names2[i];
      callback(__privateGet(this, _functions).get(name), i);
    }
  }
  /**
   *  Get the event name for %%key%%, which may be a topic hash,
   *  event name or event signature that belongs to the ABI.
   */
  getEventName(key) {
    const fragment = __privateMethod(this, _Interface_instances, getEvent_fn).call(this, key, null, false);
    assertArgument(fragment, "no matching event", "key", key);
    return fragment.name;
  }
  /**
   *  Returns true if %%key%% (an event topic hash, event name or
   *  event signature) is present in the ABI.
   *
   *  In the case of an event name, the name may be ambiguous, so
   *  accessing the [[EventFragment]] may require refinement.
   */
  hasEvent(key) {
    return !!__privateMethod(this, _Interface_instances, getEvent_fn).call(this, key, null, false);
  }
  /**
   *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,
   *  event name or event signature that belongs to the ABI.
   *
   *  If %%values%% is provided, it will use the Typed API to handle
   *  ambiguous cases where multiple events match by name.
   *
   *  If the %%key%% and %%values%% do not refine to a single event in
   *  the ABI, this will throw.
   */
  getEvent(key, values) {
    return __privateMethod(this, _Interface_instances, getEvent_fn).call(this, key, values || null, true);
  }
  /**
   *  Iterate over all events, calling %%callback%%, sorted by their name.
   */
  forEachEvent(callback) {
    const names2 = Array.from(__privateGet(this, _events).keys());
    names2.sort((a, b2) => a.localeCompare(b2));
    for (let i = 0; i < names2.length; i++) {
      const name = names2[i];
      callback(__privateGet(this, _events).get(name), i);
    }
  }
  /**
   *  Get the [[ErrorFragment]] for %%key%%, which may be an error
   *  selector, error name or error signature that belongs to the ABI.
   *
   *  If %%values%% is provided, it will use the Typed API to handle
   *  ambiguous cases where multiple errors match by name.
   *
   *  If the %%key%% and %%values%% do not refine to a single error in
   *  the ABI, this will throw.
   */
  getError(key, values) {
    if (isHexString(key)) {
      const selector = key.toLowerCase();
      if (BuiltinErrors[selector]) {
        return ErrorFragment.from(BuiltinErrors[selector].signature);
      }
      for (const fragment of __privateGet(this, _errors).values()) {
        if (selector === fragment.selector) {
          return fragment;
        }
      }
      return null;
    }
    if (key.indexOf("(") === -1) {
      const matching = [];
      for (const [name, fragment] of __privateGet(this, _errors)) {
        if (name.split(
          "("
          /* fix:) */
        )[0] === key) {
          matching.push(fragment);
        }
      }
      if (matching.length === 0) {
        if (key === "Error") {
          return ErrorFragment.from("error Error(string)");
        }
        if (key === "Panic") {
          return ErrorFragment.from("error Panic(uint256)");
        }
        return null;
      } else if (matching.length > 1) {
        const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
        assertArgument(false, `ambiguous error description (i.e. ${matchStr})`, "name", key);
      }
      return matching[0];
    }
    key = ErrorFragment.from(key).format();
    if (key === "Error(string)") {
      return ErrorFragment.from("error Error(string)");
    }
    if (key === "Panic(uint256)") {
      return ErrorFragment.from("error Panic(uint256)");
    }
    const result = __privateGet(this, _errors).get(key);
    if (result) {
      return result;
    }
    return null;
  }
  /**
   *  Iterate over all errors, calling %%callback%%, sorted by their name.
   */
  forEachError(callback) {
    const names2 = Array.from(__privateGet(this, _errors).keys());
    names2.sort((a, b2) => a.localeCompare(b2));
    for (let i = 0; i < names2.length; i++) {
      const name = names2[i];
      callback(__privateGet(this, _errors).get(name), i);
    }
  }
  // Get the 4-byte selector used by Solidity to identify a function
  /*
  getSelector(fragment: ErrorFragment | FunctionFragment): string {
      if (typeof(fragment) === "string") {
          const matches: Array<Fragment> = [ ];
  
          try { matches.push(this.getFunction(fragment)); } catch (error) { }
          try { matches.push(this.getError(<string>fragment)); } catch (_) { }
  
          if (matches.length === 0) {
              logger.throwArgumentError("unknown fragment", "key", fragment);
          } else if (matches.length > 1) {
              logger.throwArgumentError("ambiguous fragment matches function and error", "key", fragment);
          }
  
          fragment = matches[0];
      }
  
      return dataSlice(id(fragment.format()), 0, 4);
  }
      */
  // Get the 32-byte topic hash used by Solidity to identify an event
  /*
  getEventTopic(fragment: EventFragment): string {
      //if (typeof(fragment) === "string") { fragment = this.getEvent(eventFragment); }
      return id(fragment.format());
  }
  */
  _decodeParams(params, data) {
    return __privateGet(this, _abiCoder).decode(params, data);
  }
  _encodeParams(params, values) {
    return __privateGet(this, _abiCoder).encode(params, values);
  }
  /**
   *  Encodes a ``tx.data`` object for deploying the Contract with
   *  the %%values%% as the constructor arguments.
   */
  encodeDeploy(values) {
    return this._encodeParams(this.deploy.inputs, values || []);
  }
  /**
   *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
   *  specified error (see [[getError]] for valid values for
   *  %%key%%).
   *
   *  Most developers should prefer the [[parseCallResult]] method instead,
   *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
   *  corresponding error.
   */
  decodeErrorResult(fragment, data) {
    if (typeof fragment === "string") {
      const f2 = this.getError(fragment);
      assertArgument(f2, "unknown error", "fragment", fragment);
      fragment = f2;
    }
    assertArgument(dataSlice(data, 0, 4) === fragment.selector, `data signature does not match error ${fragment.name}.`, "data", data);
    return this._decodeParams(fragment.inputs, dataSlice(data, 4));
  }
  /**
   *  Encodes the transaction revert data for a call result that
   *  reverted from the the Contract with the sepcified %%error%%
   *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.
   *
   *  This is generally not used by most developers, unless trying to mock
   *  a result from a Contract.
   */
  encodeErrorResult(fragment, values) {
    if (typeof fragment === "string") {
      const f2 = this.getError(fragment);
      assertArgument(f2, "unknown error", "fragment", fragment);
      fragment = f2;
    }
    return concat([
      fragment.selector,
      this._encodeParams(fragment.inputs, values || [])
    ]);
  }
  /**
   *  Decodes the %%data%% from a transaction ``tx.data`` for
   *  the function specified (see [[getFunction]] for valid values
   *  for %%fragment%%).
   *
   *  Most developers should prefer the [[parseTransaction]] method
   *  instead, which will automatically detect the fragment.
   */
  decodeFunctionData(fragment, data) {
    if (typeof fragment === "string") {
      const f2 = this.getFunction(fragment);
      assertArgument(f2, "unknown function", "fragment", fragment);
      fragment = f2;
    }
    assertArgument(dataSlice(data, 0, 4) === fragment.selector, `data signature does not match function ${fragment.name}.`, "data", data);
    return this._decodeParams(fragment.inputs, dataSlice(data, 4));
  }
  /**
   *  Encodes the ``tx.data`` for a transaction that calls the function
   *  specified (see [[getFunction]] for valid values for %%fragment%%) with
   *  the %%values%%.
   */
  encodeFunctionData(fragment, values) {
    if (typeof fragment === "string") {
      const f2 = this.getFunction(fragment);
      assertArgument(f2, "unknown function", "fragment", fragment);
      fragment = f2;
    }
    return concat([
      fragment.selector,
      this._encodeParams(fragment.inputs, values || [])
    ]);
  }
  /**
   *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
   *  specified function (see [[getFunction]] for valid values for
   *  %%key%%).
   *
   *  Most developers should prefer the [[parseCallResult]] method instead,
   *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
   *  corresponding error.
   */
  decodeFunctionResult(fragment, data) {
    if (typeof fragment === "string") {
      const f2 = this.getFunction(fragment);
      assertArgument(f2, "unknown function", "fragment", fragment);
      fragment = f2;
    }
    let message = "invalid length for result data";
    const bytes2 = getBytesCopy(data);
    if (bytes2.length % 32 === 0) {
      try {
        return __privateGet(this, _abiCoder).decode(fragment.outputs, bytes2);
      } catch (error) {
        message = "could not decode result data";
      }
    }
    assert(false, message, "BAD_DATA", {
      value: hexlify(bytes2),
      info: { method: fragment.name, signature: fragment.format() }
    });
  }
  makeError(_data5, tx) {
    const data = getBytes(_data5, "data");
    const error = AbiCoder.getBuiltinCallException("call", tx, data);
    const customPrefix = "execution reverted (unknown custom error)";
    if (error.message.startsWith(customPrefix)) {
      const selector = hexlify(data.slice(0, 4));
      const ef = this.getError(selector);
      if (ef) {
        try {
          const args = __privateGet(this, _abiCoder).decode(ef.inputs, data.slice(4));
          error.revert = {
            name: ef.name,
            signature: ef.format(),
            args
          };
          error.reason = error.revert.signature;
          error.message = `execution reverted: ${error.reason}`;
        } catch (e) {
          error.message = `execution reverted (coult not decode custom error)`;
        }
      }
    }
    const parsed = this.parseTransaction(tx);
    if (parsed) {
      error.invocation = {
        method: parsed.name,
        signature: parsed.signature,
        args: parsed.args
      };
    }
    return error;
  }
  /**
   *  Encodes the result data (e.g. from an ``eth_call``) for the
   *  specified function (see [[getFunction]] for valid values
   *  for %%fragment%%) with %%values%%.
   *
   *  This is generally not used by most developers, unless trying to mock
   *  a result from a Contract.
   */
  encodeFunctionResult(fragment, values) {
    if (typeof fragment === "string") {
      const f2 = this.getFunction(fragment);
      assertArgument(f2, "unknown function", "fragment", fragment);
      fragment = f2;
    }
    return hexlify(__privateGet(this, _abiCoder).encode(fragment.outputs, values || []));
  }
  /*
      spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {
          const promises: Array<Promise<>> = [ ];
          const process = function(type: ParamType, value: any): any {
              if (type.baseType === "array") {
                  return descend(type.child
              }
              if (type. === "address") {
              }
          };
  
          const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {
              if (inputs.length !== values.length) { throw new Error("length mismatch"); }
              
          };
  
          const result: Array<any> = [ ];
          values.forEach((value, index) => {
              if (value == null) {
                  topics.push(null);
              } else if (param.baseType === "array" || param.baseType === "tuple") {
                  logger.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
              } else if (Array.isArray(value)) {
                  topics.push(value.map((value) => encodeTopic(param, value)));
              } else {
                  topics.push(encodeTopic(param, value));
              }
          });
      }
  */
  // Create the filter for the event with search criteria (e.g. for eth_filterLog)
  encodeFilterTopics(fragment, values) {
    if (typeof fragment === "string") {
      const f2 = this.getEvent(fragment);
      assertArgument(f2, "unknown event", "eventFragment", fragment);
      fragment = f2;
    }
    assert(values.length <= fragment.inputs.length, `too many arguments for ${fragment.format()}`, "UNEXPECTED_ARGUMENT", { count: values.length, expectedCount: fragment.inputs.length });
    const topics = [];
    if (!fragment.anonymous) {
      topics.push(fragment.topicHash);
    }
    const encodeTopic = (param, value) => {
      if (param.type === "string") {
        return id(value);
      } else if (param.type === "bytes") {
        return keccak256(hexlify(value));
      }
      if (param.type === "bool" && typeof value === "boolean") {
        value = value ? "0x01" : "0x00";
      } else if (param.type.match(/^u?int/)) {
        value = toBeHex(value);
      } else if (param.type.match(/^bytes/)) {
        value = zeroPadBytes(value, 32);
      } else if (param.type === "address") {
        __privateGet(this, _abiCoder).encode(["address"], [value]);
      }
      return zeroPadValue(hexlify(value), 32);
    };
    values.forEach((value, index) => {
      const param = fragment.inputs[index];
      if (!param.indexed) {
        assertArgument(value == null, "cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
        return;
      }
      if (value == null) {
        topics.push(null);
      } else if (param.baseType === "array" || param.baseType === "tuple") {
        assertArgument(false, "filtering with tuples or arrays not supported", "contract." + param.name, value);
      } else if (Array.isArray(value)) {
        topics.push(value.map((value2) => encodeTopic(param, value2)));
      } else {
        topics.push(encodeTopic(param, value));
      }
    });
    while (topics.length && topics[topics.length - 1] === null) {
      topics.pop();
    }
    return topics;
  }
  encodeEventLog(fragment, values) {
    if (typeof fragment === "string") {
      const f2 = this.getEvent(fragment);
      assertArgument(f2, "unknown event", "eventFragment", fragment);
      fragment = f2;
    }
    const topics = [];
    const dataTypes = [];
    const dataValues = [];
    if (!fragment.anonymous) {
      topics.push(fragment.topicHash);
    }
    assertArgument(values.length === fragment.inputs.length, "event arguments/values mismatch", "values", values);
    fragment.inputs.forEach((param, index) => {
      const value = values[index];
      if (param.indexed) {
        if (param.type === "string") {
          topics.push(id(value));
        } else if (param.type === "bytes") {
          topics.push(keccak256(value));
        } else if (param.baseType === "tuple" || param.baseType === "array") {
          throw new Error("not implemented");
        } else {
          topics.push(__privateGet(this, _abiCoder).encode([param.type], [value]));
        }
      } else {
        dataTypes.push(param);
        dataValues.push(value);
      }
    });
    return {
      data: __privateGet(this, _abiCoder).encode(dataTypes, dataValues),
      topics
    };
  }
  // Decode a filter for the event and the search criteria
  decodeEventLog(fragment, data, topics) {
    if (typeof fragment === "string") {
      const f2 = this.getEvent(fragment);
      assertArgument(f2, "unknown event", "eventFragment", fragment);
      fragment = f2;
    }
    if (topics != null && !fragment.anonymous) {
      const eventTopic = fragment.topicHash;
      assertArgument(isHexString(topics[0], 32) && topics[0].toLowerCase() === eventTopic, "fragment/topic mismatch", "topics[0]", topics[0]);
      topics = topics.slice(1);
    }
    const indexed = [];
    const nonIndexed = [];
    const dynamic = [];
    fragment.inputs.forEach((param, index) => {
      if (param.indexed) {
        if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
          indexed.push(ParamType.from({ type: "bytes32", name: param.name }));
          dynamic.push(true);
        } else {
          indexed.push(param);
          dynamic.push(false);
        }
      } else {
        nonIndexed.push(param);
        dynamic.push(false);
      }
    });
    const resultIndexed = topics != null ? __privateGet(this, _abiCoder).decode(indexed, concat(topics)) : null;
    const resultNonIndexed = __privateGet(this, _abiCoder).decode(nonIndexed, data, true);
    const values = [];
    const keys = [];
    let nonIndexedIndex = 0, indexedIndex = 0;
    fragment.inputs.forEach((param, index) => {
      let value = null;
      if (param.indexed) {
        if (resultIndexed == null) {
          value = new Indexed(null);
        } else if (dynamic[index]) {
          value = new Indexed(resultIndexed[indexedIndex++]);
        } else {
          try {
            value = resultIndexed[indexedIndex++];
          } catch (error) {
            value = error;
          }
        }
      } else {
        try {
          value = resultNonIndexed[nonIndexedIndex++];
        } catch (error) {
          value = error;
        }
      }
      values.push(value);
      keys.push(param.name || null);
    });
    return Result.fromItems(values, keys);
  }
  /**
   *  Parses a transaction, finding the matching function and extracts
   *  the parameter values along with other useful function details.
   *
   *  If the matching function cannot be found, return null.
   */
  parseTransaction(tx) {
    const data = getBytes(tx.data, "tx.data");
    const value = getBigInt(tx.value != null ? tx.value : 0, "tx.value");
    const fragment = this.getFunction(hexlify(data.slice(0, 4)));
    if (!fragment) {
      return null;
    }
    const args = __privateGet(this, _abiCoder).decode(fragment.inputs, data.slice(4));
    return new TransactionDescription(fragment, fragment.selector, args, value);
  }
  parseCallResult(data) {
    throw new Error("@TODO");
  }
  /**
   *  Parses a receipt log, finding the matching event and extracts
   *  the parameter values along with other useful event details.
   *
   *  If the matching event cannot be found, returns null.
   */
  parseLog(log) {
    const fragment = this.getEvent(log.topics[0]);
    if (!fragment || fragment.anonymous) {
      return null;
    }
    return new LogDescription(fragment, fragment.topicHash, this.decodeEventLog(fragment, log.data, log.topics));
  }
  /**
   *  Parses a revert data, finding the matching error and extracts
   *  the parameter values along with other useful error details.
   *
   *  If the matching error cannot be found, returns null.
   */
  parseError(data) {
    const hexData = hexlify(data);
    const fragment = this.getError(dataSlice(hexData, 0, 4));
    if (!fragment) {
      return null;
    }
    const args = __privateGet(this, _abiCoder).decode(fragment.inputs, dataSlice(hexData, 4));
    return new ErrorDescription(fragment, fragment.selector, args);
  }
  /**
   *  Creates a new [[Interface]] from the ABI %%value%%.
   *
   *  The %%value%% may be provided as an existing [[Interface]] object,
   *  a JSON-encoded ABI or any Human-Readable ABI format.
   */
  static from(value) {
    if (value instanceof _Interface) {
      return value;
    }
    if (typeof value === "string") {
      return new _Interface(JSON.parse(value));
    }
    if (typeof value.formatJson === "function") {
      return new _Interface(value.formatJson());
    }
    if (typeof value.format === "function") {
      return new _Interface(value.format("json"));
    }
    return new _Interface(value);
  }
};
_errors = new WeakMap();
_events = new WeakMap();
_functions = new WeakMap();
_abiCoder = new WeakMap();
_Interface_instances = new WeakSet();
// Find a function definition by any means necessary (unless it is ambiguous)
getFunction_fn = function(key, values, forceUnique) {
  if (isHexString(key)) {
    const selector = key.toLowerCase();
    for (const fragment of __privateGet(this, _functions).values()) {
      if (selector === fragment.selector) {
        return fragment;
      }
    }
    return null;
  }
  if (key.indexOf("(") === -1) {
    const matching = [];
    for (const [name, fragment] of __privateGet(this, _functions)) {
      if (name.split(
        "("
        /* fix:) */
      )[0] === key) {
        matching.push(fragment);
      }
    }
    if (values) {
      const lastValue = values.length > 0 ? values[values.length - 1] : null;
      let valueLength = values.length;
      let allowOptions = true;
      if (Typed.isTyped(lastValue) && lastValue.type === "overrides") {
        allowOptions = false;
        valueLength--;
      }
      for (let i = matching.length - 1; i >= 0; i--) {
        const inputs = matching[i].inputs.length;
        if (inputs !== valueLength && (!allowOptions || inputs !== valueLength - 1)) {
          matching.splice(i, 1);
        }
      }
      for (let i = matching.length - 1; i >= 0; i--) {
        const inputs = matching[i].inputs;
        for (let j = 0; j < values.length; j++) {
          if (!Typed.isTyped(values[j])) {
            continue;
          }
          if (j >= inputs.length) {
            if (values[j].type === "overrides") {
              continue;
            }
            matching.splice(i, 1);
            break;
          }
          if (values[j].type !== inputs[j].baseType) {
            matching.splice(i, 1);
            break;
          }
        }
      }
    }
    if (matching.length === 1 && values && values.length !== matching[0].inputs.length) {
      const lastArg = values[values.length - 1];
      if (lastArg == null || Array.isArray(lastArg) || typeof lastArg !== "object") {
        matching.splice(0, 1);
      }
    }
    if (matching.length === 0) {
      return null;
    }
    if (matching.length > 1 && forceUnique) {
      const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
      assertArgument(false, `ambiguous function description (i.e. matches ${matchStr})`, "key", key);
    }
    return matching[0];
  }
  const result = __privateGet(this, _functions).get(FunctionFragment.from(key).format());
  if (result) {
    return result;
  }
  return null;
};
// Find an event definition by any means necessary (unless it is ambiguous)
getEvent_fn = function(key, values, forceUnique) {
  if (isHexString(key)) {
    const eventTopic = key.toLowerCase();
    for (const fragment of __privateGet(this, _events).values()) {
      if (eventTopic === fragment.topicHash) {
        return fragment;
      }
    }
    return null;
  }
  if (key.indexOf("(") === -1) {
    const matching = [];
    for (const [name, fragment] of __privateGet(this, _events)) {
      if (name.split(
        "("
        /* fix:) */
      )[0] === key) {
        matching.push(fragment);
      }
    }
    if (values) {
      for (let i = matching.length - 1; i >= 0; i--) {
        if (matching[i].inputs.length < values.length) {
          matching.splice(i, 1);
        }
      }
      for (let i = matching.length - 1; i >= 0; i--) {
        const inputs = matching[i].inputs;
        for (let j = 0; j < values.length; j++) {
          if (!Typed.isTyped(values[j])) {
            continue;
          }
          if (values[j].type !== inputs[j].baseType) {
            matching.splice(i, 1);
            break;
          }
        }
      }
    }
    if (matching.length === 0) {
      return null;
    }
    if (matching.length > 1 && forceUnique) {
      const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
      assertArgument(false, `ambiguous event description (i.e. matches ${matchStr})`, "key", key);
    }
    return matching[0];
  }
  const result = __privateGet(this, _events).get(EventFragment.from(key).format());
  if (result) {
    return result;
  }
  return null;
};
var Interface = _Interface;

// node_modules/ethers/lib.esm/providers/provider.js
var BN_09 = BigInt(0);
function getValue2(value) {
  if (value == null) {
    return null;
  }
  return value;
}
function toJson(value) {
  if (value == null) {
    return null;
  }
  return value.toString();
}
var FeeData = class {
  /**
   *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and
   *  %%maxPriorityFeePerGas%%.
   */
  constructor(gasPrice, maxFeePerGas, maxPriorityFeePerGas) {
    /**
     *  The gas price for legacy networks.
     */
    __publicField(this, "gasPrice");
    /**
     *  The maximum fee to pay per gas.
     *
     *  The base fee per gas is defined by the network and based on
     *  congestion, increasing the cost during times of heavy load
     *  and lowering when less busy.
     *
     *  The actual fee per gas will be the base fee for the block
     *  and the priority fee, up to the max fee per gas.
     *
     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
     */
    __publicField(this, "maxFeePerGas");
    /**
     *  The additional amout to pay per gas to encourage a validator
     *  to include the transaction.
     *
     *  The purpose of this is to compensate the validator for the
     *  adjusted risk for including a given transaction.
     *
     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
     */
    __publicField(this, "maxPriorityFeePerGas");
    defineProperties(this, {
      gasPrice: getValue2(gasPrice),
      maxFeePerGas: getValue2(maxFeePerGas),
      maxPriorityFeePerGas: getValue2(maxPriorityFeePerGas)
    });
  }
  /**
   *  Returns a JSON-friendly value.
   */
  toJSON() {
    const { gasPrice, maxFeePerGas, maxPriorityFeePerGas } = this;
    return {
      _type: "FeeData",
      gasPrice: toJson(gasPrice),
      maxFeePerGas: toJson(maxFeePerGas),
      maxPriorityFeePerGas: toJson(maxPriorityFeePerGas)
    };
  }
};
function copyRequest(req) {
  const result = {};
  if (req.to) {
    result.to = req.to;
  }
  if (req.from) {
    result.from = req.from;
  }
  if (req.data) {
    result.data = hexlify(req.data);
  }
  const bigIntKeys = "chainId,gasLimit,gasPrice,maxFeePerBlobGas,maxFeePerGas,maxPriorityFeePerGas,value".split(/,/);
  for (const key of bigIntKeys) {
    if (!(key in req) || req[key] == null) {
      continue;
    }
    result[key] = getBigInt(req[key], `request.${key}`);
  }
  const numberKeys = "type,nonce".split(/,/);
  for (const key of numberKeys) {
    if (!(key in req) || req[key] == null) {
      continue;
    }
    result[key] = getNumber(req[key], `request.${key}`);
  }
  if (req.accessList) {
    result.accessList = accessListify(req.accessList);
  }
  if ("blockTag" in req) {
    result.blockTag = req.blockTag;
  }
  if ("enableCcipRead" in req) {
    result.enableCcipRead = !!req.enableCcipRead;
  }
  if ("customData" in req) {
    result.customData = req.customData;
  }
  if ("blobVersionedHashes" in req && req.blobVersionedHashes) {
    result.blobVersionedHashes = req.blobVersionedHashes.slice();
  }
  if ("kzg" in req) {
    result.kzg = req.kzg;
  }
  if ("blobs" in req && req.blobs) {
    result.blobs = req.blobs.map((b2) => {
      if (isBytesLike(b2)) {
        return hexlify(b2);
      }
      return Object.assign({}, b2);
    });
  }
  return result;
}
var _transactions;
var Block = class {
  /**
   *  Create a new **Block** object.
   *
   *  This should generally not be necessary as the unless implementing a
   *  low-level library.
   */
  constructor(block, provider) {
    /**
     *  The provider connected to the block used to fetch additional details
     *  if necessary.
     */
    __publicField(this, "provider");
    /**
     *  The block number, sometimes called the block height. This is a
     *  sequential number that is one higher than the parent block.
     */
    __publicField(this, "number");
    /**
     *  The block hash.
     *
     *  This hash includes all properties, so can be safely used to identify
     *  an exact set of block properties.
     */
    __publicField(this, "hash");
    /**
     *  The timestamp for this block, which is the number of seconds since
     *  epoch that this block was included.
     */
    __publicField(this, "timestamp");
    /**
     *  The block hash of the parent block.
     */
    __publicField(this, "parentHash");
    /**
     *  The hash tree root of the parent beacon block for the given
     *  execution block. See [[link-eip-4788]].
     */
    __publicField(this, "parentBeaconBlockRoot");
    /**
     *  The nonce.
     *
     *  On legacy networks, this is the random number inserted which
     *  permitted the difficulty target to be reached.
     */
    __publicField(this, "nonce");
    /**
     *  The difficulty target.
     *
     *  On legacy networks, this is the proof-of-work target required
     *  for a block to meet the protocol rules to be included.
     *
     *  On modern networks, this is a random number arrived at using
     *  randao.  @TODO: Find links?
     */
    __publicField(this, "difficulty");
    /**
     *  The total gas limit for this block.
     */
    __publicField(this, "gasLimit");
    /**
     *  The total gas used in this block.
     */
    __publicField(this, "gasUsed");
    /**
     *  The root hash for the global state after applying changes
     *  in this block.
     */
    __publicField(this, "stateRoot");
    /**
     *  The hash of the transaction receipts trie.
     */
    __publicField(this, "receiptsRoot");
    /**
     *  The total amount of blob gas consumed by the transactions
     *  within the block. See [[link-eip-4844]].
     */
    __publicField(this, "blobGasUsed");
    /**
     *  The running total of blob gas consumed in excess of the
     *  target, prior to the block. See [[link-eip-4844]].
     */
    __publicField(this, "excessBlobGas");
    /**
     *  The miner coinbase address, wihch receives any subsidies for
     *  including this block.
     */
    __publicField(this, "miner");
    /**
     *  The latest RANDAO mix of the post beacon state of
     *  the previous block.
     */
    __publicField(this, "prevRandao");
    /**
     *  Any extra data the validator wished to include.
     */
    __publicField(this, "extraData");
    /**
     *  The base fee per gas that all transactions in this block were
     *  charged.
     *
     *  This adjusts after each block, depending on how congested the network
     *  is.
     */
    __publicField(this, "baseFeePerGas");
    __privateAdd(this, _transactions);
    __privateSet(this, _transactions, block.transactions.map((tx) => {
      if (typeof tx !== "string") {
        return new TransactionResponse(tx, provider);
      }
      return tx;
    }));
    defineProperties(this, {
      provider,
      hash: getValue2(block.hash),
      number: block.number,
      timestamp: block.timestamp,
      parentHash: block.parentHash,
      parentBeaconBlockRoot: block.parentBeaconBlockRoot,
      nonce: block.nonce,
      difficulty: block.difficulty,
      gasLimit: block.gasLimit,
      gasUsed: block.gasUsed,
      blobGasUsed: block.blobGasUsed,
      excessBlobGas: block.excessBlobGas,
      miner: block.miner,
      prevRandao: getValue2(block.prevRandao),
      extraData: block.extraData,
      baseFeePerGas: getValue2(block.baseFeePerGas),
      stateRoot: block.stateRoot,
      receiptsRoot: block.receiptsRoot
    });
  }
  /**
   *  Returns the list of transaction hashes, in the order
   *  they were executed within the block.
   */
  get transactions() {
    return __privateGet(this, _transactions).map((tx) => {
      if (typeof tx === "string") {
        return tx;
      }
      return tx.hash;
    });
  }
  /**
   *  Returns the complete transactions, in the order they
   *  were executed within the block.
   *
   *  This is only available for blocks which prefetched
   *  transactions, by passing ``true`` to %%prefetchTxs%%
   *  into [[Provider-getBlock]].
   */
  get prefetchedTransactions() {
    const txs = __privateGet(this, _transactions).slice();
    if (txs.length === 0) {
      return [];
    }
    assert(typeof txs[0] === "object", "transactions were not prefetched with block request", "UNSUPPORTED_OPERATION", {
      operation: "transactionResponses()"
    });
    return txs;
  }
  /**
   *  Returns a JSON-friendly value.
   */
  toJSON() {
    const { baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash: hash2, miner, prevRandao, nonce, number: number2, parentHash, parentBeaconBlockRoot, stateRoot, receiptsRoot, timestamp, transactions } = this;
    return {
      _type: "Block",
      baseFeePerGas: toJson(baseFeePerGas),
      difficulty: toJson(difficulty),
      extraData,
      gasLimit: toJson(gasLimit),
      gasUsed: toJson(gasUsed),
      blobGasUsed: toJson(this.blobGasUsed),
      excessBlobGas: toJson(this.excessBlobGas),
      hash: hash2,
      miner,
      prevRandao,
      nonce,
      number: number2,
      parentHash,
      timestamp,
      parentBeaconBlockRoot,
      stateRoot,
      receiptsRoot,
      transactions
    };
  }
  [Symbol.iterator]() {
    let index = 0;
    const txs = this.transactions;
    return {
      next: () => {
        if (index < this.length) {
          return {
            value: txs[index++],
            done: false
          };
        }
        return { value: void 0, done: true };
      }
    };
  }
  /**
   *  The number of transactions in this block.
   */
  get length() {
    return __privateGet(this, _transactions).length;
  }
  /**
   *  The [[link-js-date]] this block was included at.
   */
  get date() {
    if (this.timestamp == null) {
      return null;
    }
    return new Date(this.timestamp * 1e3);
  }
  /**
   *  Get the transaction at %%indexe%% within this block.
   */
  async getTransaction(indexOrHash) {
    let tx = void 0;
    if (typeof indexOrHash === "number") {
      tx = __privateGet(this, _transactions)[indexOrHash];
    } else {
      const hash2 = indexOrHash.toLowerCase();
      for (const v of __privateGet(this, _transactions)) {
        if (typeof v === "string") {
          if (v !== hash2) {
            continue;
          }
          tx = v;
          break;
        } else {
          if (v.hash === hash2) {
            continue;
          }
          tx = v;
          break;
        }
      }
    }
    if (tx == null) {
      throw new Error("no such tx");
    }
    if (typeof tx === "string") {
      return await this.provider.getTransaction(tx);
    } else {
      return tx;
    }
  }
  /**
   *  If a **Block** was fetched with a request to include the transactions
   *  this will allow synchronous access to those transactions.
   *
   *  If the transactions were not prefetched, this will throw.
   */
  getPrefetchedTransaction(indexOrHash) {
    const txs = this.prefetchedTransactions;
    if (typeof indexOrHash === "number") {
      return txs[indexOrHash];
    }
    indexOrHash = indexOrHash.toLowerCase();
    for (const tx of txs) {
      if (tx.hash === indexOrHash) {
        return tx;
      }
    }
    assertArgument(false, "no matching transaction", "indexOrHash", indexOrHash);
  }
  /**
   *  Returns true if this block been mined. This provides a type guard
   *  for all properties on a [[MinedBlock]].
   */
  isMined() {
    return !!this.hash;
  }
  /**
   *  Returns true if this block is an [[link-eip-2930]] block.
   */
  isLondon() {
    return !!this.baseFeePerGas;
  }
  /**
   *  @_ignore:
   */
  orphanedEvent() {
    if (!this.isMined()) {
      throw new Error("");
    }
    return createOrphanedBlockFilter(this);
  }
};
_transactions = new WeakMap();
var Log = class {
  /**
   *  @_ignore:
   */
  constructor(log, provider) {
    /**
     *  The provider connected to the log used to fetch additional details
     *  if necessary.
     */
    __publicField(this, "provider");
    /**
     *  The transaction hash of the transaction this log occurred in. Use the
     *  [[Log-getTransaction]] to get the [[TransactionResponse]].
     */
    __publicField(this, "transactionHash");
    /**
     *  The block hash of the block this log occurred in. Use the
     *  [[Log-getBlock]] to get the [[Block]].
     */
    __publicField(this, "blockHash");
    /**
     *  The block number of the block this log occurred in. It is preferred
     *  to use the [[Block-hash]] when fetching the related [[Block]],
     *  since in the case of an orphaned block, the block at that height may
     *  have changed.
     */
    __publicField(this, "blockNumber");
    /**
     *  If the **Log** represents a block that was removed due to an orphaned
     *  block, this will be true.
     *
     *  This can only happen within an orphan event listener.
     */
    __publicField(this, "removed");
    /**
     *  The address of the contract that emitted this log.
     */
    __publicField(this, "address");
    /**
     *  The data included in this log when it was emitted.
     */
    __publicField(this, "data");
    /**
     *  The indexed topics included in this log when it was emitted.
     *
     *  All topics are included in the bloom filters, so they can be
     *  efficiently filtered using the [[Provider-getLogs]] method.
     */
    __publicField(this, "topics");
    /**
     *  The index within the block this log occurred at. This is generally
     *  not useful to developers, but can be used with the various roots
     *  to proof inclusion within a block.
     */
    __publicField(this, "index");
    /**
     *  The index within the transaction of this log.
     */
    __publicField(this, "transactionIndex");
    this.provider = provider;
    const topics = Object.freeze(log.topics.slice());
    defineProperties(this, {
      transactionHash: log.transactionHash,
      blockHash: log.blockHash,
      blockNumber: log.blockNumber,
      removed: log.removed,
      address: log.address,
      data: log.data,
      topics,
      index: log.index,
      transactionIndex: log.transactionIndex
    });
  }
  /**
   *  Returns a JSON-compatible object.
   */
  toJSON() {
    const { address, blockHash, blockNumber, data, index, removed, topics, transactionHash, transactionIndex } = this;
    return {
      _type: "log",
      address,
      blockHash,
      blockNumber,
      data,
      index,
      removed,
      topics,
      transactionHash,
      transactionIndex
    };
  }
  /**
   *  Returns the block that this log occurred in.
   */
  async getBlock() {
    const block = await this.provider.getBlock(this.blockHash);
    assert(!!block, "failed to find transaction", "UNKNOWN_ERROR", {});
    return block;
  }
  /**
   *  Returns the transaction that this log occurred in.
   */
  async getTransaction() {
    const tx = await this.provider.getTransaction(this.transactionHash);
    assert(!!tx, "failed to find transaction", "UNKNOWN_ERROR", {});
    return tx;
  }
  /**
   *  Returns the transaction receipt fot the transaction that this
   *  log occurred in.
   */
  async getTransactionReceipt() {
    const receipt = await this.provider.getTransactionReceipt(this.transactionHash);
    assert(!!receipt, "failed to find transaction receipt", "UNKNOWN_ERROR", {});
    return receipt;
  }
  /**
   *  @_ignore:
   */
  removedEvent() {
    return createRemovedLogFilter(this);
  }
};
var _logs;
var TransactionReceipt = class {
  /**
   *  @_ignore:
   */
  constructor(tx, provider) {
    /**
     *  The provider connected to the log used to fetch additional details
     *  if necessary.
     */
    __publicField(this, "provider");
    /**
     *  The address the transaction was sent to.
     */
    __publicField(this, "to");
    /**
     *  The sender of the transaction.
     */
    __publicField(this, "from");
    /**
     *  The address of the contract if the transaction was directly
     *  responsible for deploying one.
     *
     *  This is non-null **only** if the ``to`` is empty and the ``data``
     *  was successfully executed as initcode.
     */
    __publicField(this, "contractAddress");
    /**
     *  The transaction hash.
     */
    __publicField(this, "hash");
    /**
     *  The index of this transaction within the block transactions.
     */
    __publicField(this, "index");
    /**
     *  The block hash of the [[Block]] this transaction was included in.
     */
    __publicField(this, "blockHash");
    /**
     *  The block number of the [[Block]] this transaction was included in.
     */
    __publicField(this, "blockNumber");
    /**
     *  The bloom filter bytes that represent all logs that occurred within
     *  this transaction. This is generally not useful for most developers,
     *  but can be used to validate the included logs.
     */
    __publicField(this, "logsBloom");
    /**
     *  The actual amount of gas used by this transaction.
     *
     *  When creating a transaction, the amount of gas that will be used can
     *  only be approximated, but the sender must pay the gas fee for the
     *  entire gas limit. After the transaction, the difference is refunded.
     */
    __publicField(this, "gasUsed");
    /**
     *  The gas used for BLObs. See [[link-eip-4844]].
     */
    __publicField(this, "blobGasUsed");
    /**
     *  The amount of gas used by all transactions within the block for this
     *  and all transactions with a lower ``index``.
     *
     *  This is generally not useful for developers but can be used to
     *  validate certain aspects of execution.
     */
    __publicField(this, "cumulativeGasUsed");
    /**
     *  The actual gas price used during execution.
     *
     *  Due to the complexity of [[link-eip-1559]] this value can only
     *  be caluclated after the transaction has been mined, snce the base
     *  fee is protocol-enforced.
     */
    __publicField(this, "gasPrice");
    /**
     *  The price paid per BLOB in gas. See [[link-eip-4844]].
     */
    __publicField(this, "blobGasPrice");
    /**
     *  The [[link-eip-2718]] transaction type.
     */
    __publicField(this, "type");
    //readonly byzantium!: boolean;
    /**
     *  The status of this transaction, indicating success (i.e. ``1``) or
     *  a revert (i.e. ``0``).
     *
     *  This is available in post-byzantium blocks, but some backends may
     *  backfill this value.
     */
    __publicField(this, "status");
    /**
     *  The root hash of this transaction.
     *
     *  This is no present and was only included in pre-byzantium blocks, but
     *  could be used to validate certain parts of the receipt.
     */
    __publicField(this, "root");
    __privateAdd(this, _logs);
    __privateSet(this, _logs, Object.freeze(tx.logs.map((log) => {
      return new Log(log, provider);
    })));
    let gasPrice = BN_09;
    if (tx.effectiveGasPrice != null) {
      gasPrice = tx.effectiveGasPrice;
    } else if (tx.gasPrice != null) {
      gasPrice = tx.gasPrice;
    }
    defineProperties(this, {
      provider,
      to: tx.to,
      from: tx.from,
      contractAddress: tx.contractAddress,
      hash: tx.hash,
      index: tx.index,
      blockHash: tx.blockHash,
      blockNumber: tx.blockNumber,
      logsBloom: tx.logsBloom,
      gasUsed: tx.gasUsed,
      cumulativeGasUsed: tx.cumulativeGasUsed,
      blobGasUsed: tx.blobGasUsed,
      gasPrice,
      blobGasPrice: tx.blobGasPrice,
      type: tx.type,
      //byzantium: tx.byzantium,
      status: tx.status,
      root: tx.root
    });
  }
  /**
   *  The logs for this transaction.
   */
  get logs() {
    return __privateGet(this, _logs);
  }
  /**
   *  Returns a JSON-compatible representation.
   */
  toJSON() {
    const {
      to,
      from,
      contractAddress,
      hash: hash2,
      index,
      blockHash,
      blockNumber,
      logsBloom,
      logs,
      //byzantium, 
      status,
      root
    } = this;
    return {
      _type: "TransactionReceipt",
      blockHash,
      blockNumber,
      //byzantium, 
      contractAddress,
      cumulativeGasUsed: toJson(this.cumulativeGasUsed),
      from,
      gasPrice: toJson(this.gasPrice),
      blobGasUsed: toJson(this.blobGasUsed),
      blobGasPrice: toJson(this.blobGasPrice),
      gasUsed: toJson(this.gasUsed),
      hash: hash2,
      index,
      logs,
      logsBloom,
      root,
      status,
      to
    };
  }
  /**
   *  @_ignore:
   */
  get length() {
    return this.logs.length;
  }
  [Symbol.iterator]() {
    let index = 0;
    return {
      next: () => {
        if (index < this.length) {
          return { value: this.logs[index++], done: false };
        }
        return { value: void 0, done: true };
      }
    };
  }
  /**
   *  The total fee for this transaction, in wei.
   */
  get fee() {
    return this.gasUsed * this.gasPrice;
  }
  /**
   *  Resolves to the block this transaction occurred in.
   */
  async getBlock() {
    const block = await this.provider.getBlock(this.blockHash);
    if (block == null) {
      throw new Error("TODO");
    }
    return block;
  }
  /**
   *  Resolves to the transaction this transaction occurred in.
   */
  async getTransaction() {
    const tx = await this.provider.getTransaction(this.hash);
    if (tx == null) {
      throw new Error("TODO");
    }
    return tx;
  }
  /**
   *  Resolves to the return value of the execution of this transaction.
   *
   *  Support for this feature is limited, as it requires an archive node
   *  with the ``debug_`` or ``trace_`` API enabled.
   */
  async getResult() {
    return await this.provider.getTransactionResult(this.hash);
  }
  /**
   *  Resolves to the number of confirmations this transaction has.
   */
  async confirmations() {
    return await this.provider.getBlockNumber() - this.blockNumber + 1;
  }
  /**
   *  @_ignore:
   */
  removedEvent() {
    return createRemovedTransactionFilter(this);
  }
  /**
   *  @_ignore:
   */
  reorderedEvent(other) {
    assert(!other || other.isMined(), "unmined 'other' transction cannot be orphaned", "UNSUPPORTED_OPERATION", { operation: "reorderedEvent(other)" });
    return createReorderedTransactionFilter(this, other);
  }
};
_logs = new WeakMap();
var _startBlock;
var _TransactionResponse = class _TransactionResponse {
  /**
   *  @_ignore:
   */
  constructor(tx, provider) {
    /**
     *  The provider this is connected to, which will influence how its
     *  methods will resolve its async inspection methods.
     */
    __publicField(this, "provider");
    /**
     *  The block number of the block that this transaction was included in.
     *
     *  This is ``null`` for pending transactions.
     */
    __publicField(this, "blockNumber");
    /**
     *  The blockHash of the block that this transaction was included in.
     *
     *  This is ``null`` for pending transactions.
     */
    __publicField(this, "blockHash");
    /**
     *  The index within the block that this transaction resides at.
     */
    __publicField(this, "index");
    /**
     *  The transaction hash.
     */
    __publicField(this, "hash");
    /**
     *  The [[link-eip-2718]] transaction envelope type. This is
     *  ``0`` for legacy transactions types.
     */
    __publicField(this, "type");
    /**
     *  The receiver of this transaction.
     *
     *  If ``null``, then the transaction is an initcode transaction.
     *  This means the result of executing the [[data]] will be deployed
     *  as a new contract on chain (assuming it does not revert) and the
     *  address may be computed using [[getCreateAddress]].
     */
    __publicField(this, "to");
    /**
     *  The sender of this transaction. It is implicitly computed
     *  from the transaction pre-image hash (as the digest) and the
     *  [[signature]] using ecrecover.
     */
    __publicField(this, "from");
    /**
     *  The nonce, which is used to prevent replay attacks and offer
     *  a method to ensure transactions from a given sender are explicitly
     *  ordered.
     *
     *  When sending a transaction, this must be equal to the number of
     *  transactions ever sent by [[from]].
     */
    __publicField(this, "nonce");
    /**
     *  The maximum units of gas this transaction can consume. If execution
     *  exceeds this, the entries transaction is reverted and the sender
     *  is charged for the full amount, despite not state changes being made.
     */
    __publicField(this, "gasLimit");
    /**
     *  The gas price can have various values, depending on the network.
     *
     *  In modern networks, for transactions that are included this is
     *  the //effective gas price// (the fee per gas that was actually
     *  charged), while for transactions that have not been included yet
     *  is the [[maxFeePerGas]].
     *
     *  For legacy transactions, or transactions on legacy networks, this
     *  is the fee that will be charged per unit of gas the transaction
     *  consumes.
     */
    __publicField(this, "gasPrice");
    /**
     *  The maximum priority fee (per unit of gas) to allow a
     *  validator to charge the sender. This is inclusive of the
     *  [[maxFeeFeePerGas]].
     */
    __publicField(this, "maxPriorityFeePerGas");
    /**
     *  The maximum fee (per unit of gas) to allow this transaction
     *  to charge the sender.
     */
    __publicField(this, "maxFeePerGas");
    /**
     *  The [[link-eip-4844]] max fee per BLOb gas.
     */
    __publicField(this, "maxFeePerBlobGas");
    /**
     *  The data.
     */
    __publicField(this, "data");
    /**
     *  The value, in wei. Use [[formatEther]] to format this value
     *  as ether.
     */
    __publicField(this, "value");
    /**
     *  The chain ID.
     */
    __publicField(this, "chainId");
    /**
     *  The signature.
     */
    __publicField(this, "signature");
    /**
     *  The [[link-eip-2930]] access list for transaction types that
     *  support it, otherwise ``null``.
     */
    __publicField(this, "accessList");
    /**
     *  The [[link-eip-4844]] BLOb versioned hashes.
     */
    __publicField(this, "blobVersionedHashes");
    __privateAdd(this, _startBlock);
    this.provider = provider;
    this.blockNumber = tx.blockNumber != null ? tx.blockNumber : null;
    this.blockHash = tx.blockHash != null ? tx.blockHash : null;
    this.hash = tx.hash;
    this.index = tx.index;
    this.type = tx.type;
    this.from = tx.from;
    this.to = tx.to || null;
    this.gasLimit = tx.gasLimit;
    this.nonce = tx.nonce;
    this.data = tx.data;
    this.value = tx.value;
    this.gasPrice = tx.gasPrice;
    this.maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? tx.maxPriorityFeePerGas : null;
    this.maxFeePerGas = tx.maxFeePerGas != null ? tx.maxFeePerGas : null;
    this.maxFeePerBlobGas = tx.maxFeePerBlobGas != null ? tx.maxFeePerBlobGas : null;
    this.chainId = tx.chainId;
    this.signature = tx.signature;
    this.accessList = tx.accessList != null ? tx.accessList : null;
    this.blobVersionedHashes = tx.blobVersionedHashes != null ? tx.blobVersionedHashes : null;
    __privateSet(this, _startBlock, -1);
  }
  /**
   *  Returns a JSON-compatible representation of this transaction.
   */
  toJSON() {
    const { blockNumber, blockHash, index, hash: hash2, type, to, from, nonce, data, signature, accessList, blobVersionedHashes } = this;
    return {
      _type: "TransactionResponse",
      accessList,
      blockNumber,
      blockHash,
      blobVersionedHashes,
      chainId: toJson(this.chainId),
      data,
      from,
      gasLimit: toJson(this.gasLimit),
      gasPrice: toJson(this.gasPrice),
      hash: hash2,
      maxFeePerGas: toJson(this.maxFeePerGas),
      maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),
      maxFeePerBlobGas: toJson(this.maxFeePerBlobGas),
      nonce,
      signature,
      to,
      index,
      type,
      value: toJson(this.value)
    };
  }
  /**
   *  Resolves to the Block that this transaction was included in.
   *
   *  This will return null if the transaction has not been included yet.
   */
  async getBlock() {
    let blockNumber = this.blockNumber;
    if (blockNumber == null) {
      const tx = await this.getTransaction();
      if (tx) {
        blockNumber = tx.blockNumber;
      }
    }
    if (blockNumber == null) {
      return null;
    }
    const block = this.provider.getBlock(blockNumber);
    if (block == null) {
      throw new Error("TODO");
    }
    return block;
  }
  /**
   *  Resolves to this transaction being re-requested from the
   *  provider. This can be used if you have an unmined transaction
   *  and wish to get an up-to-date populated instance.
   */
  async getTransaction() {
    return this.provider.getTransaction(this.hash);
  }
  /**
   *  Resolve to the number of confirmations this transaction has.
   */
  async confirmations() {
    if (this.blockNumber == null) {
      const { tx, blockNumber: blockNumber2 } = await resolveProperties({
        tx: this.getTransaction(),
        blockNumber: this.provider.getBlockNumber()
      });
      if (tx == null || tx.blockNumber == null) {
        return 0;
      }
      return blockNumber2 - tx.blockNumber + 1;
    }
    const blockNumber = await this.provider.getBlockNumber();
    return blockNumber - this.blockNumber + 1;
  }
  /**
   *  Resolves once this transaction has been mined and has
   *  %%confirms%% blocks including it (default: ``1``) with an
   *  optional %%timeout%%.
   *
   *  This can resolve to ``null`` only if %%confirms%% is ``0``
   *  and the transaction has not been mined, otherwise this will
   *  wait until enough confirmations have completed.
   */
  async wait(_confirms, _timeout2) {
    const confirms = _confirms == null ? 1 : _confirms;
    const timeout = _timeout2 == null ? 0 : _timeout2;
    let startBlock = __privateGet(this, _startBlock);
    let nextScan = -1;
    let stopScanning = startBlock === -1 ? true : false;
    const checkReplacement = async () => {
      if (stopScanning) {
        return null;
      }
      const { blockNumber, nonce } = await resolveProperties({
        blockNumber: this.provider.getBlockNumber(),
        nonce: this.provider.getTransactionCount(this.from)
      });
      if (nonce < this.nonce) {
        startBlock = blockNumber;
        return;
      }
      if (stopScanning) {
        return null;
      }
      const mined = await this.getTransaction();
      if (mined && mined.blockNumber != null) {
        return;
      }
      if (nextScan === -1) {
        nextScan = startBlock - 3;
        if (nextScan < __privateGet(this, _startBlock)) {
          nextScan = __privateGet(this, _startBlock);
        }
      }
      while (nextScan <= blockNumber) {
        if (stopScanning) {
          return null;
        }
        const block = await this.provider.getBlock(nextScan, true);
        if (block == null) {
          return;
        }
        for (const hash2 of block) {
          if (hash2 === this.hash) {
            return;
          }
        }
        for (let i = 0; i < block.length; i++) {
          const tx = await block.getTransaction(i);
          if (tx.from === this.from && tx.nonce === this.nonce) {
            if (stopScanning) {
              return null;
            }
            const receipt2 = await this.provider.getTransactionReceipt(tx.hash);
            if (receipt2 == null) {
              return;
            }
            if (blockNumber - receipt2.blockNumber + 1 < confirms) {
              return;
            }
            let reason = "replaced";
            if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {
              reason = "repriced";
            } else if (tx.data === "0x" && tx.from === tx.to && tx.value === BN_09) {
              reason = "cancelled";
            }
            assert(false, "transaction was replaced", "TRANSACTION_REPLACED", {
              cancelled: reason === "replaced" || reason === "cancelled",
              reason,
              replacement: tx.replaceableTransaction(startBlock),
              hash: tx.hash,
              receipt: receipt2
            });
          }
        }
        nextScan++;
      }
      return;
    };
    const checkReceipt = (receipt2) => {
      if (receipt2 == null || receipt2.status !== 0) {
        return receipt2;
      }
      assert(false, "transaction execution reverted", "CALL_EXCEPTION", {
        action: "sendTransaction",
        data: null,
        reason: null,
        invocation: null,
        revert: null,
        transaction: {
          to: receipt2.to,
          from: receipt2.from,
          data: ""
          // @TODO: in v7, split out sendTransaction properties
        },
        receipt: receipt2
      });
    };
    const receipt = await this.provider.getTransactionReceipt(this.hash);
    if (confirms === 0) {
      return checkReceipt(receipt);
    }
    if (receipt) {
      if (await receipt.confirmations() >= confirms) {
        return checkReceipt(receipt);
      }
    } else {
      await checkReplacement();
      if (confirms === 0) {
        return null;
      }
    }
    const waiter = new Promise((resolve, reject) => {
      const cancellers = [];
      const cancel = () => {
        cancellers.forEach((c) => c());
      };
      cancellers.push(() => {
        stopScanning = true;
      });
      if (timeout > 0) {
        const timer = setTimeout(() => {
          cancel();
          reject(makeError("wait for transaction timeout", "TIMEOUT"));
        }, timeout);
        cancellers.push(() => {
          clearTimeout(timer);
        });
      }
      const txListener = async (receipt2) => {
        if (await receipt2.confirmations() >= confirms) {
          cancel();
          try {
            resolve(checkReceipt(receipt2));
          } catch (error) {
            reject(error);
          }
        }
      };
      cancellers.push(() => {
        this.provider.off(this.hash, txListener);
      });
      this.provider.on(this.hash, txListener);
      if (startBlock >= 0) {
        const replaceListener = async () => {
          try {
            await checkReplacement();
          } catch (error) {
            if (isError(error, "TRANSACTION_REPLACED")) {
              cancel();
              reject(error);
              return;
            }
          }
          if (!stopScanning) {
            this.provider.once("block", replaceListener);
          }
        };
        cancellers.push(() => {
          this.provider.off("block", replaceListener);
        });
        this.provider.once("block", replaceListener);
      }
    });
    return await waiter;
  }
  /**
   *  Returns ``true`` if this transaction has been included.
   *
   *  This is effective only as of the time the TransactionResponse
   *  was instantiated. To get up-to-date information, use
   *  [[getTransaction]].
   *
   *  This provides a Type Guard that this transaction will have
   *  non-null property values for properties that are null for
   *  unmined transactions.
   */
  isMined() {
    return this.blockHash != null;
  }
  /**
   *  Returns true if the transaction is a legacy (i.e. ``type == 0``)
   *  transaction.
   *
   *  This provides a Type Guard that this transaction will have
   *  the ``null``-ness for hardfork-specific properties set correctly.
   */
  isLegacy() {
    return this.type === 0;
  }
  /**
   *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)
   *  transaction. See [[link-eip-2070]].
   *
   *  This provides a Type Guard that this transaction will have
   *  the ``null``-ness for hardfork-specific properties set correctly.
   */
  isBerlin() {
    return this.type === 1;
  }
  /**
   *  Returns true if the transaction is a London (i.e. ``type == 2``)
   *  transaction. See [[link-eip-1559]].
   *
   *  This provides a Type Guard that this transaction will have
   *  the ``null``-ness for hardfork-specific properties set correctly.
   */
  isLondon() {
    return this.type === 2;
  }
  /**
   *  Returns true if hte transaction is a Cancun (i.e. ``type == 3``)
   *  transaction. See [[link-eip-4844]].
   */
  isCancun() {
    return this.type === 3;
  }
  /**
   *  Returns a filter which can be used to listen for orphan events
   *  that evict this transaction.
   */
  removedEvent() {
    assert(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
    return createRemovedTransactionFilter(this);
  }
  /**
   *  Returns a filter which can be used to listen for orphan events
   *  that re-order this event against %%other%%.
   */
  reorderedEvent(other) {
    assert(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
    assert(!other || other.isMined(), "unmined 'other' transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
    return createReorderedTransactionFilter(this, other);
  }
  /**
   *  Returns a new TransactionResponse instance which has the ability to
   *  detect (and throw an error) if the transaction is replaced, which
   *  will begin scanning at %%startBlock%%.
   *
   *  This should generally not be used by developers and is intended
   *  primarily for internal use. Setting an incorrect %%startBlock%% can
   *  have devastating performance consequences if used incorrectly.
   */
  replaceableTransaction(startBlock) {
    assertArgument(Number.isInteger(startBlock) && startBlock >= 0, "invalid startBlock", "startBlock", startBlock);
    const tx = new _TransactionResponse(this, this.provider);
    __privateSet(tx, _startBlock, startBlock);
    return tx;
  }
};
_startBlock = new WeakMap();
var TransactionResponse = _TransactionResponse;
function createOrphanedBlockFilter(block) {
  return { orphan: "drop-block", hash: block.hash, number: block.number };
}
function createReorderedTransactionFilter(tx, other) {
  return { orphan: "reorder-transaction", tx, other };
}
function createRemovedTransactionFilter(tx) {
  return { orphan: "drop-transaction", tx };
}
function createRemovedLogFilter(log) {
  return { orphan: "drop-log", log: {
    transactionHash: log.transactionHash,
    blockHash: log.blockHash,
    blockNumber: log.blockNumber,
    address: log.address,
    data: log.data,
    topics: Object.freeze(log.topics.slice()),
    index: log.index
  } };
}

// node_modules/ethers/lib.esm/contract/wrappers.js
var EventLog = class extends Log {
  /**
   * @_ignore:
   */
  constructor(log, iface2, fragment) {
    super(log, log.provider);
    /**
     *  The Contract Interface.
     */
    __publicField(this, "interface");
    /**
     *  The matching event.
     */
    __publicField(this, "fragment");
    /**
     *  The parsed arguments passed to the event by ``emit``.
     */
    __publicField(this, "args");
    const args = iface2.decodeEventLog(fragment, log.data, log.topics);
    defineProperties(this, { args, fragment, interface: iface2 });
  }
  /**
   *  The name of the event.
   */
  get eventName() {
    return this.fragment.name;
  }
  /**
   *  The signature of the event.
   */
  get eventSignature() {
    return this.fragment.format();
  }
};
var UndecodedEventLog = class extends Log {
  /**
   * @_ignore:
   */
  constructor(log, error) {
    super(log, log.provider);
    /**
     *  The error encounted when trying to decode the log.
     */
    __publicField(this, "error");
    defineProperties(this, { error });
  }
};
var _iface;
var ContractTransactionReceipt = class extends TransactionReceipt {
  /**
   *  @_ignore:
   */
  constructor(iface2, provider, tx) {
    super(tx, provider);
    __privateAdd(this, _iface);
    __privateSet(this, _iface, iface2);
  }
  /**
   *  The parsed logs for any [[Log]] which has a matching event in the
   *  Contract ABI.
   */
  get logs() {
    return super.logs.map((log) => {
      const fragment = log.topics.length ? __privateGet(this, _iface).getEvent(log.topics[0]) : null;
      if (fragment) {
        try {
          return new EventLog(log, __privateGet(this, _iface), fragment);
        } catch (error) {
          return new UndecodedEventLog(log, error);
        }
      }
      return log;
    });
  }
};
_iface = new WeakMap();
var _iface2;
var ContractTransactionResponse = class extends TransactionResponse {
  /**
   *  @_ignore:
   */
  constructor(iface2, provider, tx) {
    super(tx, provider);
    __privateAdd(this, _iface2);
    __privateSet(this, _iface2, iface2);
  }
  /**
   *  Resolves once this transaction has been mined and has
   *  %%confirms%% blocks including it (default: ``1``) with an
   *  optional %%timeout%%.
   *
   *  This can resolve to ``null`` only if %%confirms%% is ``0``
   *  and the transaction has not been mined, otherwise this will
   *  wait until enough confirmations have completed.
   */
  async wait(confirms, timeout) {
    const receipt = await super.wait(confirms, timeout);
    if (receipt == null) {
      return null;
    }
    return new ContractTransactionReceipt(__privateGet(this, _iface2), this.provider, receipt);
  }
};
_iface2 = new WeakMap();
var ContractUnknownEventPayload = class extends EventPayload {
  /**
   *  @_event:
   */
  constructor(contract, listener, filter, log) {
    super(contract, listener, filter);
    /**
     *  The log with no matching events.
     */
    __publicField(this, "log");
    defineProperties(this, { log });
  }
  /**
   *  Resolves to the block the event occured in.
   */
  async getBlock() {
    return await this.log.getBlock();
  }
  /**
   *  Resolves to the transaction the event occured in.
   */
  async getTransaction() {
    return await this.log.getTransaction();
  }
  /**
   *  Resolves to the transaction receipt the event occured in.
   */
  async getTransactionReceipt() {
    return await this.log.getTransactionReceipt();
  }
};
var ContractEventPayload = class extends ContractUnknownEventPayload {
  /**
   *  @_ignore:
   */
  constructor(contract, listener, filter, fragment, _log) {
    super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));
    const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);
    defineProperties(this, { args, fragment });
  }
  /**
   *  The event name.
   */
  get eventName() {
    return this.fragment.name;
  }
  /**
   *  The event signature.
   */
  get eventSignature() {
    return this.fragment.format();
  }
};

// node_modules/ethers/lib.esm/contract/contract.js
var BN_010 = BigInt(0);
function canCall(value) {
  return value && typeof value.call === "function";
}
function canEstimate(value) {
  return value && typeof value.estimateGas === "function";
}
function canResolve(value) {
  return value && typeof value.resolveName === "function";
}
function canSend(value) {
  return value && typeof value.sendTransaction === "function";
}
function getResolver(value) {
  if (value != null) {
    if (canResolve(value)) {
      return value;
    }
    if (value.provider) {
      return value.provider;
    }
  }
  return void 0;
}
var _filter;
var PreparedTopicFilter = class {
  constructor(contract, fragment, args) {
    __privateAdd(this, _filter);
    __publicField(this, "fragment");
    defineProperties(this, { fragment });
    if (fragment.inputs.length < args.length) {
      throw new Error("too many arguments");
    }
    const runner = getRunner(contract.runner, "resolveName");
    const resolver = canResolve(runner) ? runner : null;
    __privateSet(this, _filter, async function() {
      const resolvedArgs = await Promise.all(fragment.inputs.map((param, index) => {
        const arg = args[index];
        if (arg == null) {
          return null;
        }
        return param.walkAsync(args[index], (type, value) => {
          if (type === "address") {
            if (Array.isArray(value)) {
              return Promise.all(value.map((v) => resolveAddress(v, resolver)));
            }
            return resolveAddress(value, resolver);
          }
          return value;
        });
      }));
      return contract.interface.encodeFilterTopics(fragment, resolvedArgs);
    }());
  }
  getTopicFilter() {
    return __privateGet(this, _filter);
  }
};
_filter = new WeakMap();
function getRunner(value, feature) {
  if (value == null) {
    return null;
  }
  if (typeof value[feature] === "function") {
    return value;
  }
  if (value.provider && typeof value.provider[feature] === "function") {
    return value.provider;
  }
  return null;
}
function getProvider(value) {
  if (value == null) {
    return null;
  }
  return value.provider || null;
}
async function copyOverrides(arg, allowed) {
  const _overrides = Typed.dereference(arg, "overrides");
  assertArgument(typeof _overrides === "object", "invalid overrides parameter", "overrides", arg);
  const overrides = copyRequest(_overrides);
  assertArgument(overrides.to == null || (allowed || []).indexOf("to") >= 0, "cannot override to", "overrides.to", overrides.to);
  assertArgument(overrides.data == null || (allowed || []).indexOf("data") >= 0, "cannot override data", "overrides.data", overrides.data);
  if (overrides.from) {
    overrides.from = overrides.from;
  }
  return overrides;
}
async function resolveArgs(_runner, inputs, args) {
  const runner = getRunner(_runner, "resolveName");
  const resolver = canResolve(runner) ? runner : null;
  return await Promise.all(inputs.map((param, index) => {
    return param.walkAsync(args[index], (type, value) => {
      value = Typed.dereference(value, type);
      if (type === "address") {
        return resolveAddress(value, resolver);
      }
      return value;
    });
  }));
}
function buildWrappedFallback(contract) {
  const populateTransaction = async function(overrides) {
    const tx = await copyOverrides(overrides, ["data"]);
    tx.to = await contract.getAddress();
    if (tx.from) {
      tx.from = await resolveAddress(tx.from, getResolver(contract.runner));
    }
    const iface2 = contract.interface;
    const noValue = getBigInt(tx.value || BN_010, "overrides.value") === BN_010;
    const noData = (tx.data || "0x") === "0x";
    if (iface2.fallback && !iface2.fallback.payable && iface2.receive && !noData && !noValue) {
      assertArgument(false, "cannot send data to receive or send value to non-payable fallback", "overrides", overrides);
    }
    assertArgument(iface2.fallback || noData, "cannot send data to receive-only contract", "overrides.data", tx.data);
    const payable = iface2.receive || iface2.fallback && iface2.fallback.payable;
    assertArgument(payable || noValue, "cannot send value to non-payable fallback", "overrides.value", tx.value);
    assertArgument(iface2.fallback || noData, "cannot send data to receive-only contract", "overrides.data", tx.data);
    return tx;
  };
  const staticCall = async function(overrides) {
    const runner = getRunner(contract.runner, "call");
    assert(canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
    const tx = await populateTransaction(overrides);
    try {
      return await runner.call(tx);
    } catch (error) {
      if (isCallException(error) && error.data) {
        throw contract.interface.makeError(error.data, tx);
      }
      throw error;
    }
  };
  const send = async function(overrides) {
    const runner = contract.runner;
    assert(canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
    const tx = await runner.sendTransaction(await populateTransaction(overrides));
    const provider = getProvider(contract.runner);
    return new ContractTransactionResponse(contract.interface, provider, tx);
  };
  const estimateGas = async function(overrides) {
    const runner = getRunner(contract.runner, "estimateGas");
    assert(canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" });
    return await runner.estimateGas(await populateTransaction(overrides));
  };
  const method = async (overrides) => {
    return await send(overrides);
  };
  defineProperties(method, {
    _contract: contract,
    estimateGas,
    populateTransaction,
    send,
    staticCall
  });
  return method;
}
function buildWrappedMethod(contract, key) {
  const getFragment = function(...args) {
    const fragment = contract.interface.getFunction(key, args);
    assert(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
      operation: "fragment",
      info: { key, args }
    });
    return fragment;
  };
  const populateTransaction = async function(...args) {
    const fragment = getFragment(...args);
    let overrides = {};
    if (fragment.inputs.length + 1 === args.length) {
      overrides = await copyOverrides(args.pop());
      if (overrides.from) {
        overrides.from = await resolveAddress(overrides.from, getResolver(contract.runner));
      }
    }
    if (fragment.inputs.length !== args.length) {
      throw new Error("internal error: fragment inputs doesn't match arguments; should not happen");
    }
    const resolvedArgs = await resolveArgs(contract.runner, fragment.inputs, args);
    return Object.assign({}, overrides, await resolveProperties({
      to: contract.getAddress(),
      data: contract.interface.encodeFunctionData(fragment, resolvedArgs)
    }));
  };
  const staticCall = async function(...args) {
    const result = await staticCallResult(...args);
    if (result.length === 1) {
      return result[0];
    }
    return result;
  };
  const send = async function(...args) {
    const runner = contract.runner;
    assert(canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
    const tx = await runner.sendTransaction(await populateTransaction(...args));
    const provider = getProvider(contract.runner);
    return new ContractTransactionResponse(contract.interface, provider, tx);
  };
  const estimateGas = async function(...args) {
    const runner = getRunner(contract.runner, "estimateGas");
    assert(canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" });
    return await runner.estimateGas(await populateTransaction(...args));
  };
  const staticCallResult = async function(...args) {
    const runner = getRunner(contract.runner, "call");
    assert(canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
    const tx = await populateTransaction(...args);
    let result = "0x";
    try {
      result = await runner.call(tx);
    } catch (error) {
      if (isCallException(error) && error.data) {
        throw contract.interface.makeError(error.data, tx);
      }
      throw error;
    }
    const fragment = getFragment(...args);
    return contract.interface.decodeFunctionResult(fragment, result);
  };
  const method = async (...args) => {
    const fragment = getFragment(...args);
    if (fragment.constant) {
      return await staticCall(...args);
    }
    return await send(...args);
  };
  defineProperties(method, {
    name: contract.interface.getFunctionName(key),
    _contract: contract,
    _key: key,
    getFragment,
    estimateGas,
    populateTransaction,
    send,
    staticCall,
    staticCallResult
  });
  Object.defineProperty(method, "fragment", {
    configurable: false,
    enumerable: true,
    get: () => {
      const fragment = contract.interface.getFunction(key);
      assert(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
        operation: "fragment",
        info: { key }
      });
      return fragment;
    }
  });
  return method;
}
function buildWrappedEvent(contract, key) {
  const getFragment = function(...args) {
    const fragment = contract.interface.getEvent(key, args);
    assert(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
      operation: "fragment",
      info: { key, args }
    });
    return fragment;
  };
  const method = function(...args) {
    return new PreparedTopicFilter(contract, getFragment(...args), args);
  };
  defineProperties(method, {
    name: contract.interface.getEventName(key),
    _contract: contract,
    _key: key,
    getFragment
  });
  Object.defineProperty(method, "fragment", {
    configurable: false,
    enumerable: true,
    get: () => {
      const fragment = contract.interface.getEvent(key);
      assert(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
        operation: "fragment",
        info: { key }
      });
      return fragment;
    }
  });
  return method;
}
var internal2 = Symbol.for("_ethersInternal_contract");
var internalValues = /* @__PURE__ */ new WeakMap();
function setInternal(contract, values) {
  internalValues.set(contract[internal2], values);
}
function getInternal(contract) {
  return internalValues.get(contract[internal2]);
}
function isDeferred(value) {
  return value && typeof value === "object" && "getTopicFilter" in value && typeof value.getTopicFilter === "function" && value.fragment;
}
async function getSubInfo(contract, event) {
  let topics;
  let fragment = null;
  if (Array.isArray(event)) {
    const topicHashify = function(name) {
      if (isHexString(name, 32)) {
        return name;
      }
      const fragment2 = contract.interface.getEvent(name);
      assertArgument(fragment2, "unknown fragment", "name", name);
      return fragment2.topicHash;
    };
    topics = event.map((e) => {
      if (e == null) {
        return null;
      }
      if (Array.isArray(e)) {
        return e.map(topicHashify);
      }
      return topicHashify(e);
    });
  } else if (event === "*") {
    topics = [null];
  } else if (typeof event === "string") {
    if (isHexString(event, 32)) {
      topics = [event];
    } else {
      fragment = contract.interface.getEvent(event);
      assertArgument(fragment, "unknown fragment", "event", event);
      topics = [fragment.topicHash];
    }
  } else if (isDeferred(event)) {
    topics = await event.getTopicFilter();
  } else if ("fragment" in event) {
    fragment = event.fragment;
    topics = [fragment.topicHash];
  } else {
    assertArgument(false, "unknown event name", "event", event);
  }
  topics = topics.map((t) => {
    if (t == null) {
      return null;
    }
    if (Array.isArray(t)) {
      const items = Array.from(new Set(t.map((t2) => t2.toLowerCase())).values());
      if (items.length === 1) {
        return items[0];
      }
      items.sort();
      return items;
    }
    return t.toLowerCase();
  });
  const tag = topics.map((t) => {
    if (t == null) {
      return "null";
    }
    if (Array.isArray(t)) {
      return t.join("|");
    }
    return t;
  }).join("&");
  return { fragment, tag, topics };
}
async function hasSub(contract, event) {
  const { subs } = getInternal(contract);
  return subs.get((await getSubInfo(contract, event)).tag) || null;
}
async function getSub(contract, operation, event) {
  const provider = getProvider(contract.runner);
  assert(provider, "contract runner does not support subscribing", "UNSUPPORTED_OPERATION", { operation });
  const { fragment, tag, topics } = await getSubInfo(contract, event);
  const { addr, subs } = getInternal(contract);
  let sub = subs.get(tag);
  if (!sub) {
    const address = addr ? addr : contract;
    const filter = { address, topics };
    const listener = (log) => {
      let foundFragment = fragment;
      if (foundFragment == null) {
        try {
          foundFragment = contract.interface.getEvent(log.topics[0]);
        } catch (error) {
        }
      }
      if (foundFragment) {
        const _foundFragment = foundFragment;
        const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics) : [];
        emit(contract, event, args, (listener2) => {
          return new ContractEventPayload(contract, listener2, event, _foundFragment, log);
        });
      } else {
        emit(contract, event, [], (listener2) => {
          return new ContractUnknownEventPayload(contract, listener2, event, log);
        });
      }
    };
    let starting = [];
    const start = () => {
      if (starting.length) {
        return;
      }
      starting.push(provider.on(filter, listener));
    };
    const stop = async () => {
      if (starting.length == 0) {
        return;
      }
      let started = starting;
      starting = [];
      await Promise.all(started);
      provider.off(filter, listener);
    };
    sub = { tag, listeners: [], start, stop };
    subs.set(tag, sub);
  }
  return sub;
}
var lastEmit = Promise.resolve();
async function _emit(contract, event, args, payloadFunc) {
  await lastEmit;
  const sub = await hasSub(contract, event);
  if (!sub) {
    return false;
  }
  const count = sub.listeners.length;
  sub.listeners = sub.listeners.filter(({ listener, once }) => {
    const passArgs = Array.from(args);
    if (payloadFunc) {
      passArgs.push(payloadFunc(once ? null : listener));
    }
    try {
      listener.call(contract, ...passArgs);
    } catch (error) {
    }
    return !once;
  });
  if (sub.listeners.length === 0) {
    sub.stop();
    getInternal(contract).subs.delete(sub.tag);
  }
  return count > 0;
}
async function emit(contract, event, args, payloadFunc) {
  try {
    await lastEmit;
  } catch (error) {
  }
  const resultPromise = _emit(contract, event, args, payloadFunc);
  lastEmit = resultPromise;
  return await resultPromise;
}
var passProperties2 = ["then"];
var _a;
_a = internal2;
var _BaseContract = class _BaseContract {
  /**
   *  Creates a new contract connected to %%target%% with the %%abi%% and
   *  optionally connected to a %%runner%% to perform operations on behalf
   *  of.
   */
  constructor(target, abi, runner, _deployTx) {
    /**
     *  The target to connect to.
     *
     *  This can be an address, ENS name or any [[Addressable]], such as
     *  another contract. To get the resovled address, use the ``getAddress``
     *  method.
     */
    __publicField(this, "target");
    /**
     *  The contract Interface.
     */
    __publicField(this, "interface");
    /**
     *  The connected runner. This is generally a [[Provider]] or a
     *  [[Signer]], which dictates what operations are supported.
     *
     *  For example, a **Contract** connected to a [[Provider]] may
     *  only execute read-only operations.
     */
    __publicField(this, "runner");
    /**
     *  All the Events available on this contract.
     */
    __publicField(this, "filters");
    /**
     *  @_ignore:
     */
    __publicField(this, _a);
    /**
     *  The fallback or receive function if any.
     */
    __publicField(this, "fallback");
    assertArgument(typeof target === "string" || isAddressable(target), "invalid value for Contract target", "target", target);
    if (runner == null) {
      runner = null;
    }
    const iface2 = Interface.from(abi);
    defineProperties(this, { target, runner, interface: iface2 });
    Object.defineProperty(this, internal2, { value: {} });
    let addrPromise;
    let addr = null;
    let deployTx = null;
    if (_deployTx) {
      const provider = getProvider(runner);
      deployTx = new ContractTransactionResponse(this.interface, provider, _deployTx);
    }
    let subs = /* @__PURE__ */ new Map();
    if (typeof target === "string") {
      if (isHexString(target)) {
        addr = target;
        addrPromise = Promise.resolve(target);
      } else {
        const resolver = getRunner(runner, "resolveName");
        if (!canResolve(resolver)) {
          throw makeError("contract runner does not support name resolution", "UNSUPPORTED_OPERATION", {
            operation: "resolveName"
          });
        }
        addrPromise = resolver.resolveName(target).then((addr2) => {
          if (addr2 == null) {
            throw makeError("an ENS name used for a contract target must be correctly configured", "UNCONFIGURED_NAME", {
              value: target
            });
          }
          getInternal(this).addr = addr2;
          return addr2;
        });
      }
    } else {
      addrPromise = target.getAddress().then((addr2) => {
        if (addr2 == null) {
          throw new Error("TODO");
        }
        getInternal(this).addr = addr2;
        return addr2;
      });
    }
    setInternal(this, { addrPromise, addr, deployTx, subs });
    const filters = new Proxy({}, {
      get: (target2, prop, receiver) => {
        if (typeof prop === "symbol" || passProperties2.indexOf(prop) >= 0) {
          return Reflect.get(target2, prop, receiver);
        }
        try {
          return this.getEvent(prop);
        } catch (error) {
          if (!isError(error, "INVALID_ARGUMENT") || error.argument !== "key") {
            throw error;
          }
        }
        return void 0;
      },
      has: (target2, prop) => {
        if (passProperties2.indexOf(prop) >= 0) {
          return Reflect.has(target2, prop);
        }
        return Reflect.has(target2, prop) || this.interface.hasEvent(String(prop));
      }
    });
    defineProperties(this, { filters });
    defineProperties(this, {
      fallback: iface2.receive || iface2.fallback ? buildWrappedFallback(this) : null
    });
    return new Proxy(this, {
      get: (target2, prop, receiver) => {
        if (typeof prop === "symbol" || prop in target2 || passProperties2.indexOf(prop) >= 0) {
          return Reflect.get(target2, prop, receiver);
        }
        try {
          return target2.getFunction(prop);
        } catch (error) {
          if (!isError(error, "INVALID_ARGUMENT") || error.argument !== "key") {
            throw error;
          }
        }
        return void 0;
      },
      has: (target2, prop) => {
        if (typeof prop === "symbol" || prop in target2 || passProperties2.indexOf(prop) >= 0) {
          return Reflect.has(target2, prop);
        }
        return target2.interface.hasFunction(prop);
      }
    });
  }
  /**
   *  Return a new Contract instance with the same target and ABI, but
   *  a different %%runner%%.
   */
  connect(runner) {
    return new _BaseContract(this.target, this.interface, runner);
  }
  /**
   *  Return a new Contract instance with the same ABI and runner, but
   *  a different %%target%%.
   */
  attach(target) {
    return new _BaseContract(target, this.interface, this.runner);
  }
  /**
   *  Return the resolved address of this Contract.
   */
  async getAddress() {
    return await getInternal(this).addrPromise;
  }
  /**
   *  Return the deployed bytecode or null if no bytecode is found.
   */
  async getDeployedCode() {
    const provider = getProvider(this.runner);
    assert(provider, "runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "getDeployedCode" });
    const code = await provider.getCode(await this.getAddress());
    if (code === "0x") {
      return null;
    }
    return code;
  }
  /**
   *  Resolve to this Contract once the bytecode has been deployed, or
   *  resolve immediately if already deployed.
   */
  async waitForDeployment() {
    const deployTx = this.deploymentTransaction();
    if (deployTx) {
      await deployTx.wait();
      return this;
    }
    const code = await this.getDeployedCode();
    if (code != null) {
      return this;
    }
    const provider = getProvider(this.runner);
    assert(provider != null, "contract runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "waitForDeployment" });
    return new Promise((resolve, reject) => {
      const checkCode = async () => {
        try {
          const code2 = await this.getDeployedCode();
          if (code2 != null) {
            return resolve(this);
          }
          provider.once("block", checkCode);
        } catch (error) {
          reject(error);
        }
      };
      checkCode();
    });
  }
  /**
   *  Return the transaction used to deploy this contract.
   *
   *  This is only available if this instance was returned from a
   *  [[ContractFactory]].
   */
  deploymentTransaction() {
    return getInternal(this).deployTx;
  }
  /**
   *  Return the function for a given name. This is useful when a contract
   *  method name conflicts with a JavaScript name such as ``prototype`` or
   *  when using a Contract programatically.
   */
  getFunction(key) {
    if (typeof key !== "string") {
      key = key.format();
    }
    const func = buildWrappedMethod(this, key);
    return func;
  }
  /**
   *  Return the event for a given name. This is useful when a contract
   *  event name conflicts with a JavaScript name such as ``prototype`` or
   *  when using a Contract programatically.
   */
  getEvent(key) {
    if (typeof key !== "string") {
      key = key.format();
    }
    return buildWrappedEvent(this, key);
  }
  /**
   *  @_ignore:
   */
  async queryTransaction(hash2) {
    throw new Error("@TODO");
  }
  /*
      // @TODO: this is a non-backwards compatible change, but will be added
      //        in v7 and in a potential SmartContract class in an upcoming
      //        v6 release
      async getTransactionReceipt(hash: string): Promise<null | ContractTransactionReceipt> {
          const provider = getProvider(this.runner);
          assert(provider, "contract runner does not have a provider",
              "UNSUPPORTED_OPERATION", { operation: "queryTransaction" });
  
          const receipt = await provider.getTransactionReceipt(hash);
          if (receipt == null) { return null; }
  
          return new ContractTransactionReceipt(this.interface, provider, receipt);
      }
      */
  /**
   *  Provide historic access to event data for %%event%% in the range
   *  %%fromBlock%% (default: ``0``) to %%toBlock%% (default: ``"latest"``)
   *  inclusive.
   */
  async queryFilter(event, fromBlock, toBlock) {
    if (fromBlock == null) {
      fromBlock = 0;
    }
    if (toBlock == null) {
      toBlock = "latest";
    }
    const { addr, addrPromise } = getInternal(this);
    const address = addr ? addr : await addrPromise;
    const { fragment, topics } = await getSubInfo(this, event);
    const filter = { address, topics, fromBlock, toBlock };
    const provider = getProvider(this.runner);
    assert(provider, "contract runner does not have a provider", "UNSUPPORTED_OPERATION", { operation: "queryFilter" });
    return (await provider.getLogs(filter)).map((log) => {
      let foundFragment = fragment;
      if (foundFragment == null) {
        try {
          foundFragment = this.interface.getEvent(log.topics[0]);
        } catch (error) {
        }
      }
      if (foundFragment) {
        try {
          return new EventLog(log, this.interface, foundFragment);
        } catch (error) {
          return new UndecodedEventLog(log, error);
        }
      }
      return new Log(log, provider);
    });
  }
  /**
   *  Add an event %%listener%% for the %%event%%.
   */
  async on(event, listener) {
    const sub = await getSub(this, "on", event);
    sub.listeners.push({ listener, once: false });
    sub.start();
    return this;
  }
  /**
   *  Add an event %%listener%% for the %%event%%, but remove the listener
   *  after it is fired once.
   */
  async once(event, listener) {
    const sub = await getSub(this, "once", event);
    sub.listeners.push({ listener, once: true });
    sub.start();
    return this;
  }
  /**
   *  Emit an %%event%% calling all listeners with %%args%%.
   *
   *  Resolves to ``true`` if any listeners were called.
   */
  async emit(event, ...args) {
    return await emit(this, event, args, null);
  }
  /**
   *  Resolves to the number of listeners of %%event%% or the total number
   *  of listeners if unspecified.
   */
  async listenerCount(event) {
    if (event) {
      const sub = await hasSub(this, event);
      if (!sub) {
        return 0;
      }
      return sub.listeners.length;
    }
    const { subs } = getInternal(this);
    let total = 0;
    for (const { listeners } of subs.values()) {
      total += listeners.length;
    }
    return total;
  }
  /**
   *  Resolves to the listeners subscribed to %%event%% or all listeners
   *  if unspecified.
   */
  async listeners(event) {
    if (event) {
      const sub = await hasSub(this, event);
      if (!sub) {
        return [];
      }
      return sub.listeners.map(({ listener }) => listener);
    }
    const { subs } = getInternal(this);
    let result = [];
    for (const { listeners } of subs.values()) {
      result = result.concat(listeners.map(({ listener }) => listener));
    }
    return result;
  }
  /**
   *  Remove the %%listener%% from the listeners for %%event%% or remove
   *  all listeners if unspecified.
   */
  async off(event, listener) {
    const sub = await hasSub(this, event);
    if (!sub) {
      return this;
    }
    if (listener) {
      const index = sub.listeners.map(({ listener: listener2 }) => listener2).indexOf(listener);
      if (index >= 0) {
        sub.listeners.splice(index, 1);
      }
    }
    if (listener == null || sub.listeners.length === 0) {
      sub.stop();
      getInternal(this).subs.delete(sub.tag);
    }
    return this;
  }
  /**
   *  Remove all the listeners for %%event%% or remove all listeners if
   *  unspecified.
   */
  async removeAllListeners(event) {
    if (event) {
      const sub = await hasSub(this, event);
      if (!sub) {
        return this;
      }
      sub.stop();
      getInternal(this).subs.delete(sub.tag);
    } else {
      const { subs } = getInternal(this);
      for (const { tag, stop } of subs.values()) {
        stop();
        subs.delete(tag);
      }
    }
    return this;
  }
  /**
   *  Alias for [on].
   */
  async addListener(event, listener) {
    return await this.on(event, listener);
  }
  /**
   *  Alias for [off].
   */
  async removeListener(event, listener) {
    return await this.off(event, listener);
  }
  /**
   *  Create a new Class for the %%abi%%.
   */
  static buildClass(abi) {
    class CustomContract extends _BaseContract {
      constructor(address, runner = null) {
        super(address, abi, runner);
      }
    }
    return CustomContract;
  }
  /**
   *  Create a new BaseContract with a specified Interface.
   */
  static from(target, abi, runner) {
    if (runner == null) {
      runner = null;
    }
    const contract = new this(target, abi, runner);
    return contract;
  }
};
var BaseContract = _BaseContract;
function _ContractBase() {
  return BaseContract;
}
var Contract = class extends _ContractBase() {
};

// node_modules/ethers/lib.esm/contract/factory.js
var ContractFactory = class _ContractFactory {
  /**
   *  Create a new **ContractFactory** with %%abi%% and %%bytecode%%,
   *  optionally connected to %%runner%%.
   *
   *  The %%bytecode%% may be the ``bytecode`` property within the
   *  standard Solidity JSON output.
   */
  constructor(abi, bytecode, runner) {
    /**
     *  The Contract Interface.
     */
    __publicField(this, "interface");
    /**
     *  The Contract deployment bytecode. Often called the initcode.
     */
    __publicField(this, "bytecode");
    /**
     *  The ContractRunner to deploy the Contract as.
     */
    __publicField(this, "runner");
    const iface2 = Interface.from(abi);
    if (bytecode instanceof Uint8Array) {
      bytecode = hexlify(getBytes(bytecode));
    } else {
      if (typeof bytecode === "object") {
        bytecode = bytecode.object;
      }
      if (!bytecode.startsWith("0x")) {
        bytecode = "0x" + bytecode;
      }
      bytecode = hexlify(getBytes(bytecode));
    }
    defineProperties(this, {
      bytecode,
      interface: iface2,
      runner: runner || null
    });
  }
  attach(target) {
    return new BaseContract(target, this.interface, this.runner);
  }
  /**
   *  Resolves to the transaction to deploy the contract, passing %%args%%
   *  into the constructor.
   */
  async getDeployTransaction(...args) {
    let overrides = {};
    const fragment = this.interface.deploy;
    if (fragment.inputs.length + 1 === args.length) {
      overrides = await copyOverrides(args.pop());
    }
    if (fragment.inputs.length !== args.length) {
      throw new Error("incorrect number of arguments to constructor");
    }
    const resolvedArgs = await resolveArgs(this.runner, fragment.inputs, args);
    const data = concat([this.bytecode, this.interface.encodeDeploy(resolvedArgs)]);
    return Object.assign({}, overrides, { data });
  }
  /**
   *  Resolves to the Contract deployed by passing %%args%% into the
   *  constructor.
   *
   *  This will resolve to the Contract before it has been deployed to the
   *  network, so the [[BaseContract-waitForDeployment]] should be used before
   *  sending any transactions to it.
   */
  async deploy(...args) {
    const tx = await this.getDeployTransaction(...args);
    assert(this.runner && typeof this.runner.sendTransaction === "function", "factory runner does not support sending transactions", "UNSUPPORTED_OPERATION", {
      operation: "sendTransaction"
    });
    const sentTx = await this.runner.sendTransaction(tx);
    const address = getCreateAddress(sentTx);
    return new BaseContract(address, this.interface, this.runner, sentTx);
  }
  /**
   *  Return a new **ContractFactory** with the same ABI and bytecode,
   *  but connected to %%runner%%.
   */
  connect(runner) {
    return new _ContractFactory(this.interface, this.bytecode, runner);
  }
  /**
   *  Create a new **ContractFactory** from the standard Solidity JSON output.
   */
  static fromSolidity(output2, runner) {
    assertArgument(output2 != null, "bad compiler output", "output", output2);
    if (typeof output2 === "string") {
      output2 = JSON.parse(output2);
    }
    const abi = output2.abi;
    let bytecode = "";
    if (output2.bytecode) {
      bytecode = output2.bytecode;
    } else if (output2.evm && output2.evm.bytecode) {
      bytecode = output2.evm.bytecode;
    }
    return new this(abi, bytecode, runner);
  }
};

// node_modules/ethers/lib.esm/providers/ens-resolver.js
function getIpfsLink(link) {
  if (link.match(/^ipfs:\/\/ipfs\//i)) {
    link = link.substring(12);
  } else if (link.match(/^ipfs:\/\//i)) {
    link = link.substring(7);
  } else {
    assertArgument(false, "unsupported IPFS format", "link", link);
  }
  return `https://gateway.ipfs.io/ipfs/${link}`;
}
var MulticoinProviderPlugin = class {
  /**
   *  Creates a new **MulticoinProviderPluing** for %%name%%.
   */
  constructor(name) {
    /**
     *  The name.
     */
    __publicField(this, "name");
    defineProperties(this, { name });
  }
  connect(proivder) {
    return this;
  }
  /**
   *  Returns ``true`` if %%coinType%% is supported by this plugin.
   */
  supportsCoinType(coinType) {
    return false;
  }
  /**
   *  Resolves to the encoded %%address%% for %%coinType%%.
   */
  async encodeAddress(coinType, address) {
    throw new Error("unsupported coin");
  }
  /**
   *  Resolves to the decoded %%data%% for %%coinType%%.
   */
  async decodeAddress(coinType, data) {
    throw new Error("unsupported coin");
  }
};
var matcherIpfs = new RegExp("^(ipfs)://(.*)$", "i");
var matchers = [
  new RegExp("^(https)://(.*)$", "i"),
  new RegExp("^(data):(.*)$", "i"),
  matcherIpfs,
  new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")
];
var _supports2544, _resolver, _EnsResolver_instances, fetch_fn, _EnsResolver_static, getResolver_fn;
var _EnsResolver = class _EnsResolver {
  constructor(provider, address, name) {
    __privateAdd(this, _EnsResolver_instances);
    /**
     *  The connected provider.
     */
    __publicField(this, "provider");
    /**
     *  The address of the resolver.
     */
    __publicField(this, "address");
    /**
     *  The name this resolver was resolved against.
     */
    __publicField(this, "name");
    // For EIP-2544 names, the ancestor that provided the resolver
    __privateAdd(this, _supports2544);
    __privateAdd(this, _resolver);
    defineProperties(this, { provider, address, name });
    __privateSet(this, _supports2544, null);
    __privateSet(this, _resolver, new Contract(address, [
      "function supportsInterface(bytes4) view returns (bool)",
      "function resolve(bytes, bytes) view returns (bytes)",
      "function addr(bytes32) view returns (address)",
      "function addr(bytes32, uint) view returns (bytes)",
      "function text(bytes32, string) view returns (string)",
      "function contenthash(bytes32) view returns (bytes)"
    ], provider));
  }
  /**
   *  Resolves to true if the resolver supports wildcard resolution.
   */
  async supportsWildcard() {
    if (__privateGet(this, _supports2544) == null) {
      __privateSet(this, _supports2544, (async () => {
        try {
          return await __privateGet(this, _resolver).supportsInterface("0x9061b923");
        } catch (error) {
          if (isError(error, "CALL_EXCEPTION")) {
            return false;
          }
          __privateSet(this, _supports2544, null);
          throw error;
        }
      })());
    }
    return await __privateGet(this, _supports2544);
  }
  /**
   *  Resolves to the address for %%coinType%% or null if the
   *  provided %%coinType%% has not been configured.
   */
  async getAddress(coinType) {
    if (coinType == null) {
      coinType = 60;
    }
    if (coinType === 60) {
      try {
        const result = await __privateMethod(this, _EnsResolver_instances, fetch_fn).call(this, "addr(bytes32)");
        if (result == null || result === ZeroAddress) {
          return null;
        }
        return result;
      } catch (error) {
        if (isError(error, "CALL_EXCEPTION")) {
          return null;
        }
        throw error;
      }
    }
    if (coinType >= 0 && coinType < 2147483648) {
      let ethCoinType = coinType + 2147483648;
      const data2 = await __privateMethod(this, _EnsResolver_instances, fetch_fn).call(this, "addr(bytes32,uint)", [ethCoinType]);
      if (isHexString(data2, 20)) {
        return getAddress(data2);
      }
    }
    let coinPlugin = null;
    for (const plugin of this.provider.plugins) {
      if (!(plugin instanceof MulticoinProviderPlugin)) {
        continue;
      }
      if (plugin.supportsCoinType(coinType)) {
        coinPlugin = plugin;
        break;
      }
    }
    if (coinPlugin == null) {
      return null;
    }
    const data = await __privateMethod(this, _EnsResolver_instances, fetch_fn).call(this, "addr(bytes32,uint)", [coinType]);
    if (data == null || data === "0x") {
      return null;
    }
    const address = await coinPlugin.decodeAddress(coinType, data);
    if (address != null) {
      return address;
    }
    assert(false, `invalid coin data`, "UNSUPPORTED_OPERATION", {
      operation: `getAddress(${coinType})`,
      info: { coinType, data }
    });
  }
  /**
   *  Resolves to the EIP-634 text record for %%key%%, or ``null``
   *  if unconfigured.
   */
  async getText(key) {
    const data = await __privateMethod(this, _EnsResolver_instances, fetch_fn).call(this, "text(bytes32,string)", [key]);
    if (data == null || data === "0x") {
      return null;
    }
    return data;
  }
  /**
   *  Rsolves to the content-hash or ``null`` if unconfigured.
   */
  async getContentHash() {
    const data = await __privateMethod(this, _EnsResolver_instances, fetch_fn).call(this, "contenthash(bytes32)");
    if (data == null || data === "0x") {
      return null;
    }
    const ipfs = data.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
    if (ipfs) {
      const scheme = ipfs[1] === "e3010170" ? "ipfs" : "ipns";
      const length = parseInt(ipfs[4], 16);
      if (ipfs[5].length === length * 2) {
        return `${scheme}://${encodeBase58("0x" + ipfs[2])}`;
      }
    }
    const swarm = data.match(/^0xe40101fa011b20([0-9a-f]*)$/);
    if (swarm && swarm[1].length === 64) {
      return `bzz://${swarm[1]}`;
    }
    assert(false, `invalid or unsupported content hash data`, "UNSUPPORTED_OPERATION", {
      operation: "getContentHash()",
      info: { data }
    });
  }
  /**
   *  Resolves to the avatar url or ``null`` if the avatar is either
   *  unconfigured or incorrectly configured (e.g. references an NFT
   *  not owned by the address).
   *
   *  If diagnosing issues with configurations, the [[_getAvatar]]
   *  method may be useful.
   */
  async getAvatar() {
    const avatar = await this._getAvatar();
    return avatar.url;
  }
  /**
   *  When resolving an avatar, there are many steps involved, such
   *  fetching metadata and possibly validating ownership of an
   *  NFT.
   *
   *  This method can be used to examine each step and the value it
   *  was working from.
   */
  async _getAvatar() {
    const linkage = [{ type: "name", value: this.name }];
    try {
      const avatar = await this.getText("avatar");
      if (avatar == null) {
        linkage.push({ type: "!avatar", value: "" });
        return { url: null, linkage };
      }
      linkage.push({ type: "avatar", value: avatar });
      for (let i = 0; i < matchers.length; i++) {
        const match = avatar.match(matchers[i]);
        if (match == null) {
          continue;
        }
        const scheme = match[1].toLowerCase();
        switch (scheme) {
          case "https":
          case "data":
            linkage.push({ type: "url", value: avatar });
            return { linkage, url: avatar };
          case "ipfs": {
            const url = getIpfsLink(avatar);
            linkage.push({ type: "ipfs", value: avatar });
            linkage.push({ type: "url", value: url });
            return { linkage, url };
          }
          case "erc721":
          case "erc1155": {
            const selector = scheme === "erc721" ? "tokenURI(uint256)" : "uri(uint256)";
            linkage.push({ type: scheme, value: avatar });
            const owner = await this.getAddress();
            if (owner == null) {
              linkage.push({ type: "!owner", value: "" });
              return { url: null, linkage };
            }
            const comps = (match[2] || "").split("/");
            if (comps.length !== 2) {
              linkage.push({ type: `!${scheme}caip`, value: match[2] || "" });
              return { url: null, linkage };
            }
            const tokenId = comps[1];
            const contract = new Contract(comps[0], [
              // ERC-721
              "function tokenURI(uint) view returns (string)",
              "function ownerOf(uint) view returns (address)",
              // ERC-1155
              "function uri(uint) view returns (string)",
              "function balanceOf(address, uint256) view returns (uint)"
            ], this.provider);
            if (scheme === "erc721") {
              const tokenOwner = await contract.ownerOf(tokenId);
              if (owner !== tokenOwner) {
                linkage.push({ type: "!owner", value: tokenOwner });
                return { url: null, linkage };
              }
              linkage.push({ type: "owner", value: tokenOwner });
            } else if (scheme === "erc1155") {
              const balance = await contract.balanceOf(owner, tokenId);
              if (!balance) {
                linkage.push({ type: "!balance", value: "0" });
                return { url: null, linkage };
              }
              linkage.push({ type: "balance", value: balance.toString() });
            }
            let metadataUrl = await contract[selector](tokenId);
            if (metadataUrl == null || metadataUrl === "0x") {
              linkage.push({ type: "!metadata-url", value: "" });
              return { url: null, linkage };
            }
            linkage.push({ type: "metadata-url-base", value: metadataUrl });
            if (scheme === "erc1155") {
              metadataUrl = metadataUrl.replace("{id}", toBeHex(tokenId, 32).substring(2));
              linkage.push({ type: "metadata-url-expanded", value: metadataUrl });
            }
            if (metadataUrl.match(/^ipfs:/i)) {
              metadataUrl = getIpfsLink(metadataUrl);
            }
            linkage.push({ type: "metadata-url", value: metadataUrl });
            let metadata = {};
            const response = await new FetchRequest(metadataUrl).send();
            response.assertOk();
            try {
              metadata = response.bodyJson;
            } catch (error) {
              try {
                linkage.push({ type: "!metadata", value: response.bodyText });
              } catch (error2) {
                const bytes2 = response.body;
                if (bytes2) {
                  linkage.push({ type: "!metadata", value: hexlify(bytes2) });
                }
                return { url: null, linkage };
              }
              return { url: null, linkage };
            }
            if (!metadata) {
              linkage.push({ type: "!metadata", value: "" });
              return { url: null, linkage };
            }
            linkage.push({ type: "metadata", value: JSON.stringify(metadata) });
            let imageUrl = metadata.image;
            if (typeof imageUrl !== "string") {
              linkage.push({ type: "!imageUrl", value: "" });
              return { url: null, linkage };
            }
            if (imageUrl.match(/^(https:\/\/|data:)/i)) {
            } else {
              const ipfs = imageUrl.match(matcherIpfs);
              if (ipfs == null) {
                linkage.push({ type: "!imageUrl-ipfs", value: imageUrl });
                return { url: null, linkage };
              }
              linkage.push({ type: "imageUrl-ipfs", value: imageUrl });
              imageUrl = getIpfsLink(imageUrl);
            }
            linkage.push({ type: "url", value: imageUrl });
            return { linkage, url: imageUrl };
          }
        }
      }
    } catch (error) {
    }
    return { linkage, url: null };
  }
  static async getEnsAddress(provider) {
    const network = await provider.getNetwork();
    const ensPlugin = network.getPlugin("org.ethers.plugins.network.Ens");
    assert(ensPlugin, "network does not support ENS", "UNSUPPORTED_OPERATION", {
      operation: "getEnsAddress",
      info: { network }
    });
    return ensPlugin.address;
  }
  /**
   *  Resolve to the ENS resolver for %%name%% using %%provider%% or
   *  ``null`` if unconfigured.
   */
  static async fromName(provider, name) {
    var _a2;
    let currentName = name;
    while (true) {
      if (currentName === "" || currentName === ".") {
        return null;
      }
      if (name !== "eth" && currentName === "eth") {
        return null;
      }
      const addr = await __privateMethod(_a2 = _EnsResolver, _EnsResolver_static, getResolver_fn).call(_a2, provider, currentName);
      if (addr != null) {
        const resolver = new _EnsResolver(provider, addr, name);
        if (currentName !== name && !await resolver.supportsWildcard()) {
          return null;
        }
        return resolver;
      }
      currentName = currentName.split(".").slice(1).join(".");
    }
  }
};
_supports2544 = new WeakMap();
_resolver = new WeakMap();
_EnsResolver_instances = new WeakSet();
fetch_fn = async function(funcName, params) {
  params = (params || []).slice();
  const iface2 = __privateGet(this, _resolver).interface;
  params.unshift(namehash(this.name));
  let fragment = null;
  if (await this.supportsWildcard()) {
    fragment = iface2.getFunction(funcName);
    assert(fragment, "missing fragment", "UNKNOWN_ERROR", {
      info: { funcName }
    });
    params = [
      dnsEncode(this.name, 255),
      iface2.encodeFunctionData(fragment, params)
    ];
    funcName = "resolve(bytes,bytes)";
  }
  params.push({
    enableCcipRead: true
  });
  try {
    const result = await __privateGet(this, _resolver)[funcName](...params);
    if (fragment) {
      return iface2.decodeFunctionResult(fragment, result)[0];
    }
    return result;
  } catch (error) {
    if (!isError(error, "CALL_EXCEPTION")) {
      throw error;
    }
  }
  return null;
};
_EnsResolver_static = new WeakSet();
getResolver_fn = async function(provider, name) {
  const ensAddr = await _EnsResolver.getEnsAddress(provider);
  try {
    const contract = new Contract(ensAddr, [
      "function resolver(bytes32) view returns (address)"
    ], provider);
    const addr = await contract.resolver(namehash(name), {
      enableCcipRead: true
    });
    if (addr === ZeroAddress) {
      return null;
    }
    return addr;
  } catch (error) {
    throw error;
  }
  return null;
};
__privateAdd(_EnsResolver, _EnsResolver_static);
var EnsResolver = _EnsResolver;

// node_modules/ethers/lib.esm/providers/format.js
var BN_011 = BigInt(0);
function allowNull(format, nullValue) {
  return function(value) {
    if (value == null) {
      return nullValue;
    }
    return format(value);
  };
}
function arrayOf(format, allowNull2) {
  return (array) => {
    if (allowNull2 && array == null) {
      return null;
    }
    if (!Array.isArray(array)) {
      throw new Error("not an array");
    }
    return array.map((i) => format(i));
  };
}
function object(format, altNames) {
  return (value) => {
    const result = {};
    for (const key in format) {
      let srcKey = key;
      if (altNames && key in altNames && !(srcKey in value)) {
        for (const altKey of altNames[key]) {
          if (altKey in value) {
            srcKey = altKey;
            break;
          }
        }
      }
      try {
        const nv = format[key](value[srcKey]);
        if (nv !== void 0) {
          result[key] = nv;
        }
      } catch (error) {
        const message = error instanceof Error ? error.message : "not-an-error";
        assert(false, `invalid value for value.${key} (${message})`, "BAD_DATA", { value });
      }
    }
    return result;
  };
}
function formatBoolean(value) {
  switch (value) {
    case true:
    case "true":
      return true;
    case false:
    case "false":
      return false;
  }
  assertArgument(false, `invalid boolean; ${JSON.stringify(value)}`, "value", value);
}
function formatData(value) {
  assertArgument(isHexString(value, true), "invalid data", "value", value);
  return value;
}
function formatHash(value) {
  assertArgument(isHexString(value, 32), "invalid hash", "value", value);
  return value;
}
var _formatLog = object({
  address: getAddress,
  blockHash: formatHash,
  blockNumber: getNumber,
  data: formatData,
  index: getNumber,
  removed: allowNull(formatBoolean, false),
  topics: arrayOf(formatHash),
  transactionHash: formatHash,
  transactionIndex: getNumber
}, {
  index: ["logIndex"]
});
function formatLog(value) {
  return _formatLog(value);
}
var _formatBlock = object({
  hash: allowNull(formatHash),
  parentHash: formatHash,
  parentBeaconBlockRoot: allowNull(formatHash, null),
  number: getNumber,
  timestamp: getNumber,
  nonce: allowNull(formatData),
  difficulty: getBigInt,
  gasLimit: getBigInt,
  gasUsed: getBigInt,
  stateRoot: allowNull(formatHash, null),
  receiptsRoot: allowNull(formatHash, null),
  blobGasUsed: allowNull(getBigInt, null),
  excessBlobGas: allowNull(getBigInt, null),
  miner: allowNull(getAddress),
  prevRandao: allowNull(formatHash, null),
  extraData: formatData,
  baseFeePerGas: allowNull(getBigInt)
}, {
  prevRandao: ["mixHash"]
});
function formatBlock(value) {
  const result = _formatBlock(value);
  result.transactions = value.transactions.map((tx) => {
    if (typeof tx === "string") {
      return tx;
    }
    return formatTransactionResponse(tx);
  });
  return result;
}
var _formatReceiptLog = object({
  transactionIndex: getNumber,
  blockNumber: getNumber,
  transactionHash: formatHash,
  address: getAddress,
  topics: arrayOf(formatHash),
  data: formatData,
  index: getNumber,
  blockHash: formatHash
}, {
  index: ["logIndex"]
});
function formatReceiptLog(value) {
  return _formatReceiptLog(value);
}
var _formatTransactionReceipt = object({
  to: allowNull(getAddress, null),
  from: allowNull(getAddress, null),
  contractAddress: allowNull(getAddress, null),
  // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
  index: getNumber,
  root: allowNull(hexlify),
  gasUsed: getBigInt,
  blobGasUsed: allowNull(getBigInt, null),
  logsBloom: allowNull(formatData),
  blockHash: formatHash,
  hash: formatHash,
  logs: arrayOf(formatReceiptLog),
  blockNumber: getNumber,
  //confirmations: allowNull(getNumber, null),
  cumulativeGasUsed: getBigInt,
  effectiveGasPrice: allowNull(getBigInt),
  blobGasPrice: allowNull(getBigInt, null),
  status: allowNull(getNumber),
  type: allowNull(getNumber, 0)
}, {
  effectiveGasPrice: ["gasPrice"],
  hash: ["transactionHash"],
  index: ["transactionIndex"]
});
function formatTransactionReceipt(value) {
  return _formatTransactionReceipt(value);
}
function formatTransactionResponse(value) {
  if (value.to && getBigInt(value.to) === BN_011) {
    value.to = "0x0000000000000000000000000000000000000000";
  }
  const result = object({
    hash: formatHash,
    // Some nodes do not return this, usually test nodes (like Ganache)
    index: allowNull(getNumber, void 0),
    type: (value2) => {
      if (value2 === "0x" || value2 == null) {
        return 0;
      }
      return getNumber(value2);
    },
    accessList: allowNull(accessListify, null),
    blobVersionedHashes: allowNull(arrayOf(formatHash, true), null),
    blockHash: allowNull(formatHash, null),
    blockNumber: allowNull(getNumber, null),
    transactionIndex: allowNull(getNumber, null),
    from: getAddress,
    // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set
    gasPrice: allowNull(getBigInt),
    maxPriorityFeePerGas: allowNull(getBigInt),
    maxFeePerGas: allowNull(getBigInt),
    maxFeePerBlobGas: allowNull(getBigInt, null),
    gasLimit: getBigInt,
    to: allowNull(getAddress, null),
    value: getBigInt,
    nonce: getNumber,
    data: formatData,
    creates: allowNull(getAddress, null),
    chainId: allowNull(getBigInt, null)
  }, {
    data: ["input"],
    gasLimit: ["gas"],
    index: ["transactionIndex"]
  })(value);
  if (result.to == null && result.creates == null) {
    result.creates = getCreateAddress(result);
  }
  if ((value.type === 1 || value.type === 2) && value.accessList == null) {
    result.accessList = [];
  }
  if (value.signature) {
    result.signature = Signature.from(value.signature);
  } else {
    result.signature = Signature.from(value);
  }
  if (result.chainId == null) {
    const chainId = result.signature.legacyChainId;
    if (chainId != null) {
      result.chainId = chainId;
    }
  }
  if (result.blockHash && getBigInt(result.blockHash) === BN_011) {
    result.blockHash = null;
  }
  return result;
}

// node_modules/ethers/lib.esm/providers/plugins-network.js
var EnsAddress = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
var NetworkPlugin = class _NetworkPlugin {
  /**
   *  Creates a new **NetworkPlugin**.
   */
  constructor(name) {
    /**
     *  The name of the plugin.
     *
     *  It is recommended to use reverse-domain-notation, which permits
     *  unique names with a known authority as well as hierarchal entries.
     */
    __publicField(this, "name");
    defineProperties(this, { name });
  }
  /**
   *  Creates a copy of this plugin.
   */
  clone() {
    return new _NetworkPlugin(this.name);
  }
};
var GasCostPlugin = class _GasCostPlugin extends NetworkPlugin {
  /**
   *  Creates a new GasCostPlugin from %%effectiveBlock%% until the
   *  latest block or another GasCostPlugin supercedes that block number,
   *  with the associated %%costs%%.
   */
  constructor(effectiveBlock, costs) {
    if (effectiveBlock == null) {
      effectiveBlock = 0;
    }
    super(`org.ethers.network.plugins.GasCost#${effectiveBlock || 0}`);
    /**
     *  The block number to treat these values as valid from.
     *
     *  This allows a hardfork to have updated values included as well as
     *  mulutiple hardforks to be supported.
     */
    __publicField(this, "effectiveBlock");
    /**
     *  The transactions base fee.
     */
    __publicField(this, "txBase");
    /**
     *  The fee for creating a new account.
     */
    __publicField(this, "txCreate");
    /**
     *  The fee per zero-byte in the data.
     */
    __publicField(this, "txDataZero");
    /**
     *  The fee per non-zero-byte in the data.
     */
    __publicField(this, "txDataNonzero");
    /**
     *  The fee per storage key in the [[link-eip-2930]] access list.
     */
    __publicField(this, "txAccessListStorageKey");
    /**
     *  The fee per address in the [[link-eip-2930]] access list.
     */
    __publicField(this, "txAccessListAddress");
    const props = { effectiveBlock };
    function set(name, nullish) {
      let value = (costs || {})[name];
      if (value == null) {
        value = nullish;
      }
      assertArgument(typeof value === "number", `invalud value for ${name}`, "costs", costs);
      props[name] = value;
    }
    set("txBase", 21e3);
    set("txCreate", 32e3);
    set("txDataZero", 4);
    set("txDataNonzero", 16);
    set("txAccessListStorageKey", 1900);
    set("txAccessListAddress", 2400);
    defineProperties(this, props);
  }
  clone() {
    return new _GasCostPlugin(this.effectiveBlock, this);
  }
};
var EnsPlugin = class _EnsPlugin extends NetworkPlugin {
  /**
   *  Creates a new **EnsPlugin** connected to %%address%% on the
   *  %%targetNetwork%%. The default ENS address and mainnet is used
   *  if unspecified.
   */
  constructor(address, targetNetwork) {
    super("org.ethers.plugins.network.Ens");
    /**
     *  The ENS Registrty Contract address.
     */
    __publicField(this, "address");
    /**
     *  The chain ID that the ENS contract lives on.
     */
    __publicField(this, "targetNetwork");
    defineProperties(this, {
      address: address || EnsAddress,
      targetNetwork: targetNetwork == null ? 1 : targetNetwork
    });
  }
  clone() {
    return new _EnsPlugin(this.address, this.targetNetwork);
  }
};
var _feeDataFunc;
var _FeeDataNetworkPlugin = class _FeeDataNetworkPlugin extends NetworkPlugin {
  /**
   *  Creates a new **FeeDataNetworkPlugin**.
   */
  constructor(feeDataFunc) {
    super("org.ethers.plugins.network.FeeData");
    __privateAdd(this, _feeDataFunc);
    __privateSet(this, _feeDataFunc, feeDataFunc);
  }
  /**
   *  The fee data function provided to the constructor.
   */
  get feeDataFunc() {
    return __privateGet(this, _feeDataFunc);
  }
  /**
   *  Resolves to the fee data.
   */
  async getFeeData(provider) {
    return await __privateGet(this, _feeDataFunc).call(this, provider);
  }
  clone() {
    return new _FeeDataNetworkPlugin(__privateGet(this, _feeDataFunc));
  }
};
_feeDataFunc = new WeakMap();
var FeeDataNetworkPlugin = _FeeDataNetworkPlugin;
var _url2, _processFunc;
var FetchUrlFeeDataNetworkPlugin = class extends NetworkPlugin {
  /**
   *  Creates a new **FetchUrlFeeDataNetworkPlugin** which will
   *  be used when computing the fee data for the network.
   */
  constructor(url, processFunc) {
    super("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
    __privateAdd(this, _url2);
    __privateAdd(this, _processFunc);
    __privateSet(this, _url2, url);
    __privateSet(this, _processFunc, processFunc);
  }
  /**
   *  The URL to initialize the FetchRequest with in %%processFunc%%.
   */
  get url() {
    return __privateGet(this, _url2);
  }
  /**
   *  The callback to use when computing the FeeData.
   */
  get processFunc() {
    return __privateGet(this, _processFunc);
  }
  // We are immutable, so we can serve as our own clone
  clone() {
    return this;
  }
};
_url2 = new WeakMap();
_processFunc = new WeakMap();

// node_modules/ethers/lib.esm/providers/network.js
var Networks = /* @__PURE__ */ new Map();
var _name, _chainId2, _plugins;
var _Network = class _Network {
  /**
   *  Creates a new **Network** for %%name%% and %%chainId%%.
   */
  constructor(name, chainId) {
    __privateAdd(this, _name);
    __privateAdd(this, _chainId2);
    __privateAdd(this, _plugins);
    __privateSet(this, _name, name);
    __privateSet(this, _chainId2, getBigInt(chainId));
    __privateSet(this, _plugins, /* @__PURE__ */ new Map());
  }
  /**
   *  Returns a JSON-compatible representation of a Network.
   */
  toJSON() {
    return { name: this.name, chainId: String(this.chainId) };
  }
  /**
   *  The network common name.
   *
   *  This is the canonical name, as networks migh have multiple
   *  names.
   */
  get name() {
    return __privateGet(this, _name);
  }
  set name(value) {
    __privateSet(this, _name, value);
  }
  /**
   *  The network chain ID.
   */
  get chainId() {
    return __privateGet(this, _chainId2);
  }
  set chainId(value) {
    __privateSet(this, _chainId2, getBigInt(value, "chainId"));
  }
  /**
   *  Returns true if %%other%% matches this network. Any chain ID
   *  must match, and if no chain ID is present, the name must match.
   *
   *  This method does not currently check for additional properties,
   *  such as ENS address or plug-in compatibility.
   */
  matches(other) {
    if (other == null) {
      return false;
    }
    if (typeof other === "string") {
      try {
        return this.chainId === getBigInt(other);
      } catch (error) {
      }
      return this.name === other;
    }
    if (typeof other === "number" || typeof other === "bigint") {
      try {
        return this.chainId === getBigInt(other);
      } catch (error) {
      }
      return false;
    }
    if (typeof other === "object") {
      if (other.chainId != null) {
        try {
          return this.chainId === getBigInt(other.chainId);
        } catch (error) {
        }
        return false;
      }
      if (other.name != null) {
        return this.name === other.name;
      }
      return false;
    }
    return false;
  }
  /**
   *  Returns the list of plugins currently attached to this Network.
   */
  get plugins() {
    return Array.from(__privateGet(this, _plugins).values());
  }
  /**
   *  Attach a new %%plugin%% to this Network. The network name
   *  must be unique, excluding any fragment.
   */
  attachPlugin(plugin) {
    if (__privateGet(this, _plugins).get(plugin.name)) {
      throw new Error(`cannot replace existing plugin: ${plugin.name} `);
    }
    __privateGet(this, _plugins).set(plugin.name, plugin.clone());
    return this;
  }
  /**
   *  Return the plugin, if any, matching %%name%% exactly. Plugins
   *  with fragments will not be returned unless %%name%% includes
   *  a fragment.
   */
  getPlugin(name) {
    return __privateGet(this, _plugins).get(name) || null;
  }
  /**
   *  Gets a list of all plugins that match %%name%%, with otr without
   *  a fragment.
   */
  getPlugins(basename) {
    return this.plugins.filter((p) => p.name.split("#")[0] === basename);
  }
  /**
   *  Create a copy of this Network.
   */
  clone() {
    const clone = new _Network(this.name, this.chainId);
    this.plugins.forEach((plugin) => {
      clone.attachPlugin(plugin.clone());
    });
    return clone;
  }
  /**
   *  Compute the intrinsic gas required for a transaction.
   *
   *  A GasCostPlugin can be attached to override the default
   *  values.
   */
  computeIntrinsicGas(tx) {
    const costs = this.getPlugin("org.ethers.plugins.network.GasCost") || new GasCostPlugin();
    let gas = costs.txBase;
    if (tx.to == null) {
      gas += costs.txCreate;
    }
    if (tx.data) {
      for (let i = 2; i < tx.data.length; i += 2) {
        if (tx.data.substring(i, i + 2) === "00") {
          gas += costs.txDataZero;
        } else {
          gas += costs.txDataNonzero;
        }
      }
    }
    if (tx.accessList) {
      const accessList = accessListify(tx.accessList);
      for (const addr in accessList) {
        gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;
      }
    }
    return gas;
  }
  /**
   *  Returns a new Network for the %%network%% name or chainId.
   */
  static from(network) {
    injectCommonNetworks();
    if (network == null) {
      return _Network.from("mainnet");
    }
    if (typeof network === "number") {
      network = BigInt(network);
    }
    if (typeof network === "string" || typeof network === "bigint") {
      const networkFunc = Networks.get(network);
      if (networkFunc) {
        return networkFunc();
      }
      if (typeof network === "bigint") {
        return new _Network("unknown", network);
      }
      assertArgument(false, "unknown network", "network", network);
    }
    if (typeof network.clone === "function") {
      const clone = network.clone();
      return clone;
    }
    if (typeof network === "object") {
      assertArgument(typeof network.name === "string" && typeof network.chainId === "number", "invalid network object name or chainId", "network", network);
      const custom = new _Network(network.name, network.chainId);
      if (network.ensAddress || network.ensNetwork != null) {
        custom.attachPlugin(new EnsPlugin(network.ensAddress, network.ensNetwork));
      }
      return custom;
    }
    assertArgument(false, "invalid network", "network", network);
  }
  /**
   *  Register %%nameOrChainId%% with a function which returns
   *  an instance of a Network representing that chain.
   */
  static register(nameOrChainId, networkFunc) {
    if (typeof nameOrChainId === "number") {
      nameOrChainId = BigInt(nameOrChainId);
    }
    const existing = Networks.get(nameOrChainId);
    if (existing) {
      assertArgument(false, `conflicting network for ${JSON.stringify(existing.name)}`, "nameOrChainId", nameOrChainId);
    }
    Networks.set(nameOrChainId, networkFunc);
  }
};
_name = new WeakMap();
_chainId2 = new WeakMap();
_plugins = new WeakMap();
var Network = _Network;
function parseUnits2(_value2, decimals) {
  const value = String(_value2);
  if (!value.match(/^[0-9.]+$/)) {
    throw new Error(`invalid gwei value: ${_value2}`);
  }
  const comps = value.split(".");
  if (comps.length === 1) {
    comps.push("");
  }
  if (comps.length !== 2) {
    throw new Error(`invalid gwei value: ${_value2}`);
  }
  while (comps[1].length < decimals) {
    comps[1] += "0";
  }
  if (comps[1].length > 9) {
    let frac = BigInt(comps[1].substring(0, 9));
    if (!comps[1].substring(9).match(/^0+$/)) {
      frac++;
    }
    comps[1] = frac.toString();
  }
  return BigInt(comps[0] + comps[1]);
}
function getGasStationPlugin(url) {
  return new FetchUrlFeeDataNetworkPlugin(url, async (fetchFeeData, provider, request) => {
    request.setHeader("User-Agent", "ethers");
    let response;
    try {
      const [_response, _feeData] = await Promise.all([
        request.send(),
        fetchFeeData()
      ]);
      response = _response;
      const payload = response.bodyJson.standard;
      const feeData = {
        gasPrice: _feeData.gasPrice,
        maxFeePerGas: parseUnits2(payload.maxFee, 9),
        maxPriorityFeePerGas: parseUnits2(payload.maxPriorityFee, 9)
      };
      return feeData;
    } catch (error) {
      assert(false, `error encountered with polygon gas station (${JSON.stringify(request.url)})`, "SERVER_ERROR", { request, response, error });
    }
  });
}
var injected = false;
function injectCommonNetworks() {
  if (injected) {
    return;
  }
  injected = true;
  function registerEth(name, chainId, options) {
    const func = function() {
      const network = new Network(name, chainId);
      if (options.ensNetwork != null) {
        network.attachPlugin(new EnsPlugin(null, options.ensNetwork));
      }
      network.attachPlugin(new GasCostPlugin());
      (options.plugins || []).forEach((plugin) => {
        network.attachPlugin(plugin);
      });
      return network;
    };
    Network.register(name, func);
    Network.register(chainId, func);
    if (options.altNames) {
      options.altNames.forEach((name2) => {
        Network.register(name2, func);
      });
    }
  }
  registerEth("mainnet", 1, { ensNetwork: 1, altNames: ["homestead"] });
  registerEth("ropsten", 3, { ensNetwork: 3 });
  registerEth("rinkeby", 4, { ensNetwork: 4 });
  registerEth("goerli", 5, { ensNetwork: 5 });
  registerEth("kovan", 42, { ensNetwork: 42 });
  registerEth("sepolia", 11155111, { ensNetwork: 11155111 });
  registerEth("holesky", 17e3, { ensNetwork: 17e3 });
  registerEth("classic", 61, {});
  registerEth("classicKotti", 6, {});
  registerEth("arbitrum", 42161, {
    ensNetwork: 1
  });
  registerEth("arbitrum-goerli", 421613, {});
  registerEth("arbitrum-sepolia", 421614, {});
  registerEth("base", 8453, { ensNetwork: 1 });
  registerEth("base-goerli", 84531, {});
  registerEth("base-sepolia", 84532, {});
  registerEth("bnb", 56, { ensNetwork: 1 });
  registerEth("bnbt", 97, {});
  registerEth("linea", 59144, { ensNetwork: 1 });
  registerEth("linea-goerli", 59140, {});
  registerEth("linea-sepolia", 59141, {});
  registerEth("matic", 137, {
    ensNetwork: 1,
    plugins: [
      getGasStationPlugin("https://gasstation.polygon.technology/v2")
    ]
  });
  registerEth("matic-amoy", 80002, {});
  registerEth("matic-mumbai", 80001, {
    altNames: ["maticMumbai", "maticmum"],
    plugins: [
      getGasStationPlugin("https://gasstation-testnet.polygon.technology/v2")
    ]
  });
  registerEth("optimism", 10, {
    ensNetwork: 1,
    plugins: []
  });
  registerEth("optimism-goerli", 420, {});
  registerEth("optimism-sepolia", 11155420, {});
  registerEth("xdai", 100, { ensNetwork: 1 });
}

// node_modules/ethers/lib.esm/providers/subscriber-polling.js
function copy(obj) {
  return JSON.parse(JSON.stringify(obj));
}
var _provider, _poller, _interval, _blockNumber, _PollingBlockSubscriber_instances, poll_fn;
var PollingBlockSubscriber = class {
  /**
   *  Create a new **PollingBlockSubscriber** attached to %%provider%%.
   */
  constructor(provider) {
    __privateAdd(this, _PollingBlockSubscriber_instances);
    __privateAdd(this, _provider);
    __privateAdd(this, _poller);
    __privateAdd(this, _interval);
    // The most recent block we have scanned for events. The value -2
    // indicates we still need to fetch an initial block number
    __privateAdd(this, _blockNumber);
    __privateSet(this, _provider, provider);
    __privateSet(this, _poller, null);
    __privateSet(this, _interval, 4e3);
    __privateSet(this, _blockNumber, -2);
  }
  /**
   *  The polling interval.
   */
  get pollingInterval() {
    return __privateGet(this, _interval);
  }
  set pollingInterval(value) {
    __privateSet(this, _interval, value);
  }
  start() {
    if (__privateGet(this, _poller)) {
      return;
    }
    __privateSet(this, _poller, __privateGet(this, _provider)._setTimeout(__privateMethod(this, _PollingBlockSubscriber_instances, poll_fn).bind(this), __privateGet(this, _interval)));
    __privateMethod(this, _PollingBlockSubscriber_instances, poll_fn).call(this);
  }
  stop() {
    if (!__privateGet(this, _poller)) {
      return;
    }
    __privateGet(this, _provider)._clearTimeout(__privateGet(this, _poller));
    __privateSet(this, _poller, null);
  }
  pause(dropWhilePaused) {
    this.stop();
    if (dropWhilePaused) {
      __privateSet(this, _blockNumber, -2);
    }
  }
  resume() {
    this.start();
  }
};
_provider = new WeakMap();
_poller = new WeakMap();
_interval = new WeakMap();
_blockNumber = new WeakMap();
_PollingBlockSubscriber_instances = new WeakSet();
poll_fn = async function() {
  try {
    const blockNumber = await __privateGet(this, _provider).getBlockNumber();
    if (__privateGet(this, _blockNumber) === -2) {
      __privateSet(this, _blockNumber, blockNumber);
      return;
    }
    if (blockNumber !== __privateGet(this, _blockNumber)) {
      for (let b2 = __privateGet(this, _blockNumber) + 1; b2 <= blockNumber; b2++) {
        if (__privateGet(this, _poller) == null) {
          return;
        }
        await __privateGet(this, _provider).emit("block", b2);
      }
      __privateSet(this, _blockNumber, blockNumber);
    }
  } catch (error) {
  }
  if (__privateGet(this, _poller) == null) {
    return;
  }
  __privateSet(this, _poller, __privateGet(this, _provider)._setTimeout(__privateMethod(this, _PollingBlockSubscriber_instances, poll_fn).bind(this), __privateGet(this, _interval)));
};
var _provider2, _poll, _running;
var OnBlockSubscriber = class {
  /**
   *  Create a new **OnBlockSubscriber** attached to %%provider%%.
   */
  constructor(provider) {
    __privateAdd(this, _provider2);
    __privateAdd(this, _poll);
    __privateAdd(this, _running);
    __privateSet(this, _provider2, provider);
    __privateSet(this, _running, false);
    __privateSet(this, _poll, (blockNumber) => {
      this._poll(blockNumber, __privateGet(this, _provider2));
    });
  }
  /**
   *  Called on every new block.
   */
  async _poll(blockNumber, provider) {
    throw new Error("sub-classes must override this");
  }
  start() {
    if (__privateGet(this, _running)) {
      return;
    }
    __privateSet(this, _running, true);
    __privateGet(this, _poll).call(this, -2);
    __privateGet(this, _provider2).on("block", __privateGet(this, _poll));
  }
  stop() {
    if (!__privateGet(this, _running)) {
      return;
    }
    __privateSet(this, _running, false);
    __privateGet(this, _provider2).off("block", __privateGet(this, _poll));
  }
  pause(dropWhilePaused) {
    this.stop();
  }
  resume() {
    this.start();
  }
};
_provider2 = new WeakMap();
_poll = new WeakMap();
_running = new WeakMap();
var _tag, _lastBlock;
var PollingBlockTagSubscriber = class extends OnBlockSubscriber {
  constructor(provider, tag) {
    super(provider);
    __privateAdd(this, _tag);
    __privateAdd(this, _lastBlock);
    __privateSet(this, _tag, tag);
    __privateSet(this, _lastBlock, -2);
  }
  pause(dropWhilePaused) {
    if (dropWhilePaused) {
      __privateSet(this, _lastBlock, -2);
    }
    super.pause(dropWhilePaused);
  }
  async _poll(blockNumber, provider) {
    const block = await provider.getBlock(__privateGet(this, _tag));
    if (block == null) {
      return;
    }
    if (__privateGet(this, _lastBlock) === -2) {
      __privateSet(this, _lastBlock, block.number);
    } else if (block.number > __privateGet(this, _lastBlock)) {
      provider.emit(__privateGet(this, _tag), block.number);
      __privateSet(this, _lastBlock, block.number);
    }
  }
};
_tag = new WeakMap();
_lastBlock = new WeakMap();
var _filter2;
var PollingOrphanSubscriber = class extends OnBlockSubscriber {
  constructor(provider, filter) {
    super(provider);
    __privateAdd(this, _filter2);
    __privateSet(this, _filter2, copy(filter));
  }
  async _poll(blockNumber, provider) {
    throw new Error("@TODO");
    console.log(__privateGet(this, _filter2));
  }
};
_filter2 = new WeakMap();
var _hash;
var PollingTransactionSubscriber = class extends OnBlockSubscriber {
  /**
   *  Create a new **PollingTransactionSubscriber** attached to
   *  %%provider%%, listening for %%hash%%.
   */
  constructor(provider, hash2) {
    super(provider);
    __privateAdd(this, _hash);
    __privateSet(this, _hash, hash2);
  }
  async _poll(blockNumber, provider) {
    const tx = await provider.getTransactionReceipt(__privateGet(this, _hash));
    if (tx) {
      provider.emit(__privateGet(this, _hash), tx);
    }
  }
};
_hash = new WeakMap();
var _provider3, _filter3, _poller2, _running2, _blockNumber2, _PollingEventSubscriber_instances, poll_fn2;
var PollingEventSubscriber = class {
  /**
   *  Create a new **PollingTransactionSubscriber** attached to
   *  %%provider%%, listening for %%filter%%.
   */
  constructor(provider, filter) {
    __privateAdd(this, _PollingEventSubscriber_instances);
    __privateAdd(this, _provider3);
    __privateAdd(this, _filter3);
    __privateAdd(this, _poller2);
    __privateAdd(this, _running2);
    // The most recent block we have scanned for events. The value -2
    // indicates we still need to fetch an initial block number
    __privateAdd(this, _blockNumber2);
    __privateSet(this, _provider3, provider);
    __privateSet(this, _filter3, copy(filter));
    __privateSet(this, _poller2, __privateMethod(this, _PollingEventSubscriber_instances, poll_fn2).bind(this));
    __privateSet(this, _running2, false);
    __privateSet(this, _blockNumber2, -2);
  }
  start() {
    if (__privateGet(this, _running2)) {
      return;
    }
    __privateSet(this, _running2, true);
    if (__privateGet(this, _blockNumber2) === -2) {
      __privateGet(this, _provider3).getBlockNumber().then((blockNumber) => {
        __privateSet(this, _blockNumber2, blockNumber);
      });
    }
    __privateGet(this, _provider3).on("block", __privateGet(this, _poller2));
  }
  stop() {
    if (!__privateGet(this, _running2)) {
      return;
    }
    __privateSet(this, _running2, false);
    __privateGet(this, _provider3).off("block", __privateGet(this, _poller2));
  }
  pause(dropWhilePaused) {
    this.stop();
    if (dropWhilePaused) {
      __privateSet(this, _blockNumber2, -2);
    }
  }
  resume() {
    this.start();
  }
};
_provider3 = new WeakMap();
_filter3 = new WeakMap();
_poller2 = new WeakMap();
_running2 = new WeakMap();
_blockNumber2 = new WeakMap();
_PollingEventSubscriber_instances = new WeakSet();
poll_fn2 = async function(blockNumber) {
  if (__privateGet(this, _blockNumber2) === -2) {
    return;
  }
  const filter = copy(__privateGet(this, _filter3));
  filter.fromBlock = __privateGet(this, _blockNumber2) + 1;
  filter.toBlock = blockNumber;
  const logs = await __privateGet(this, _provider3).getLogs(filter);
  if (logs.length === 0) {
    if (__privateGet(this, _blockNumber2) < blockNumber - 60) {
      __privateSet(this, _blockNumber2, blockNumber - 60);
    }
    return;
  }
  for (const log of logs) {
    __privateGet(this, _provider3).emit(__privateGet(this, _filter3), log);
    __privateSet(this, _blockNumber2, log.blockNumber);
  }
};

// node_modules/ethers/lib.esm/providers/abstract-provider.js
var BN_23 = BigInt(2);
var MAX_CCIP_REDIRECTS = 10;
function isPromise(value) {
  return value && typeof value.then === "function";
}
function getTag(prefix, value) {
  return prefix + ":" + JSON.stringify(value, (k, v) => {
    if (v == null) {
      return "null";
    }
    if (typeof v === "bigint") {
      return `bigint:${v.toString()}`;
    }
    if (typeof v === "string") {
      return v.toLowerCase();
    }
    if (typeof v === "object" && !Array.isArray(v)) {
      const keys = Object.keys(v);
      keys.sort();
      return keys.reduce((accum, key) => {
        accum[key] = v[key];
        return accum;
      }, {});
    }
    return v;
  });
}
var UnmanagedSubscriber = class {
  /**
   *  Create a new UnmanagedSubscriber with %%name%%.
   */
  constructor(name) {
    /**
     *  The name fof the event.
     */
    __publicField(this, "name");
    defineProperties(this, { name });
  }
  start() {
  }
  stop() {
  }
  pause(dropWhilePaused) {
  }
  resume() {
  }
};
function copy2(value) {
  return JSON.parse(JSON.stringify(value));
}
function concisify(items) {
  items = Array.from(new Set(items).values());
  items.sort();
  return items;
}
async function getSubscription(_event2, provider) {
  if (_event2 == null) {
    throw new Error("invalid event");
  }
  if (Array.isArray(_event2)) {
    _event2 = { topics: _event2 };
  }
  if (typeof _event2 === "string") {
    switch (_event2) {
      case "block":
      case "debug":
      case "error":
      case "finalized":
      case "network":
      case "pending":
      case "safe": {
        return { type: _event2, tag: _event2 };
      }
    }
  }
  if (isHexString(_event2, 32)) {
    const hash2 = _event2.toLowerCase();
    return { type: "transaction", tag: getTag("tx", { hash: hash2 }), hash: hash2 };
  }
  if (_event2.orphan) {
    const event = _event2;
    return { type: "orphan", tag: getTag("orphan", event), filter: copy2(event) };
  }
  if (_event2.address || _event2.topics) {
    const event = _event2;
    const filter = {
      topics: (event.topics || []).map((t) => {
        if (t == null) {
          return null;
        }
        if (Array.isArray(t)) {
          return concisify(t.map((t2) => t2.toLowerCase()));
        }
        return t.toLowerCase();
      })
    };
    if (event.address) {
      const addresses = [];
      const promises = [];
      const addAddress = (addr) => {
        if (isHexString(addr)) {
          addresses.push(addr);
        } else {
          promises.push((async () => {
            addresses.push(await resolveAddress(addr, provider));
          })());
        }
      };
      if (Array.isArray(event.address)) {
        event.address.forEach(addAddress);
      } else {
        addAddress(event.address);
      }
      if (promises.length) {
        await Promise.all(promises);
      }
      filter.address = concisify(addresses.map((a) => a.toLowerCase()));
    }
    return { filter, tag: getTag("event", filter), type: "event" };
  }
  assertArgument(false, "unknown ProviderEvent", "event", _event2);
}
function getTime2() {
  return (/* @__PURE__ */ new Date()).getTime();
}
var defaultOptions = {
  cacheTimeout: 250,
  pollingInterval: 4e3
};
var _subs, _plugins2, _pausedState, _destroyed, _networkPromise, _anyNetwork, _performCache, _lastBlockNumber, _nextTimer, _timers, _disableCcipRead, _options2, _AbstractProvider_instances, perform_fn, call_fn, checkNetwork_fn, getAccountValue_fn, getBlock_fn, hasSub_fn, getSub_fn;
var AbstractProvider = class {
  /**
   *  Create a new **AbstractProvider** connected to %%network%%, or
   *  use the various network detection capabilities to discover the
   *  [[Network]] if necessary.
   */
  constructor(_network3, options) {
    __privateAdd(this, _AbstractProvider_instances);
    __privateAdd(this, _subs);
    __privateAdd(this, _plugins2);
    // null=unpaused, true=paused+dropWhilePaused, false=paused
    __privateAdd(this, _pausedState);
    __privateAdd(this, _destroyed);
    __privateAdd(this, _networkPromise);
    __privateAdd(this, _anyNetwork);
    __privateAdd(this, _performCache);
    // The most recent block number if running an event or -1 if no "block" event
    __privateAdd(this, _lastBlockNumber);
    __privateAdd(this, _nextTimer);
    __privateAdd(this, _timers);
    __privateAdd(this, _disableCcipRead);
    __privateAdd(this, _options2);
    __privateSet(this, _options2, Object.assign({}, defaultOptions, options || {}));
    if (_network3 === "any") {
      __privateSet(this, _anyNetwork, true);
      __privateSet(this, _networkPromise, null);
    } else if (_network3) {
      const network = Network.from(_network3);
      __privateSet(this, _anyNetwork, false);
      __privateSet(this, _networkPromise, Promise.resolve(network));
      setTimeout(() => {
        this.emit("network", network, null);
      }, 0);
    } else {
      __privateSet(this, _anyNetwork, false);
      __privateSet(this, _networkPromise, null);
    }
    __privateSet(this, _lastBlockNumber, -1);
    __privateSet(this, _performCache, /* @__PURE__ */ new Map());
    __privateSet(this, _subs, /* @__PURE__ */ new Map());
    __privateSet(this, _plugins2, /* @__PURE__ */ new Map());
    __privateSet(this, _pausedState, null);
    __privateSet(this, _destroyed, false);
    __privateSet(this, _nextTimer, 1);
    __privateSet(this, _timers, /* @__PURE__ */ new Map());
    __privateSet(this, _disableCcipRead, false);
  }
  get pollingInterval() {
    return __privateGet(this, _options2).pollingInterval;
  }
  /**
   *  Returns ``this``, to allow an **AbstractProvider** to implement
   *  the [[ContractRunner]] interface.
   */
  get provider() {
    return this;
  }
  /**
   *  Returns all the registered plug-ins.
   */
  get plugins() {
    return Array.from(__privateGet(this, _plugins2).values());
  }
  /**
   *  Attach a new plug-in.
   */
  attachPlugin(plugin) {
    if (__privateGet(this, _plugins2).get(plugin.name)) {
      throw new Error(`cannot replace existing plugin: ${plugin.name} `);
    }
    __privateGet(this, _plugins2).set(plugin.name, plugin.connect(this));
    return this;
  }
  /**
   *  Get a plugin by name.
   */
  getPlugin(name) {
    return __privateGet(this, _plugins2).get(name) || null;
  }
  /**
   *  Prevent any CCIP-read operation, regardless of whether requested
   *  in a [[call]] using ``enableCcipRead``.
   */
  get disableCcipRead() {
    return __privateGet(this, _disableCcipRead);
  }
  set disableCcipRead(value) {
    __privateSet(this, _disableCcipRead, !!value);
  }
  /**
   *  Resolves to the data for executing the CCIP-read operations.
   */
  async ccipReadFetch(tx, calldata, urls) {
    if (this.disableCcipRead || urls.length === 0 || tx.to == null) {
      return null;
    }
    const sender = tx.to.toLowerCase();
    const data = calldata.toLowerCase();
    const errorMessages = [];
    for (let i = 0; i < urls.length; i++) {
      const url = urls[i];
      const href = url.replace("{sender}", sender).replace("{data}", data);
      const request = new FetchRequest(href);
      if (url.indexOf("{data}") === -1) {
        request.body = { data, sender };
      }
      this.emit("debug", { action: "sendCcipReadFetchRequest", request, index: i, urls });
      let errorMessage = "unknown error";
      let resp;
      try {
        resp = await request.send();
      } catch (error) {
        errorMessages.push(error.message);
        this.emit("debug", { action: "receiveCcipReadFetchError", request, result: { error } });
        continue;
      }
      try {
        const result = resp.bodyJson;
        if (result.data) {
          this.emit("debug", { action: "receiveCcipReadFetchResult", request, result });
          return result.data;
        }
        if (result.message) {
          errorMessage = result.message;
        }
        this.emit("debug", { action: "receiveCcipReadFetchError", request, result });
      } catch (error) {
      }
      assert(resp.statusCode < 400 || resp.statusCode >= 500, `response not found during CCIP fetch: ${errorMessage}`, "OFFCHAIN_FAULT", { reason: "404_MISSING_RESOURCE", transaction: tx, info: { url, errorMessage } });
      errorMessages.push(errorMessage);
    }
    assert(false, `error encountered during CCIP fetch: ${errorMessages.map((m) => JSON.stringify(m)).join(", ")}`, "OFFCHAIN_FAULT", {
      reason: "500_SERVER_ERROR",
      transaction: tx,
      info: { urls, errorMessages }
    });
  }
  /**
   *  Provides the opportunity for a sub-class to wrap a block before
   *  returning it, to add additional properties or an alternate
   *  sub-class of [[Block]].
   */
  _wrapBlock(value, network) {
    return new Block(formatBlock(value), this);
  }
  /**
   *  Provides the opportunity for a sub-class to wrap a log before
   *  returning it, to add additional properties or an alternate
   *  sub-class of [[Log]].
   */
  _wrapLog(value, network) {
    return new Log(formatLog(value), this);
  }
  /**
   *  Provides the opportunity for a sub-class to wrap a transaction
   *  receipt before returning it, to add additional properties or an
   *  alternate sub-class of [[TransactionReceipt]].
   */
  _wrapTransactionReceipt(value, network) {
    return new TransactionReceipt(formatTransactionReceipt(value), this);
  }
  /**
   *  Provides the opportunity for a sub-class to wrap a transaction
   *  response before returning it, to add additional properties or an
   *  alternate sub-class of [[TransactionResponse]].
   */
  _wrapTransactionResponse(tx, network) {
    return new TransactionResponse(formatTransactionResponse(tx), this);
  }
  /**
   *  Resolves to the Network, forcing a network detection using whatever
   *  technique the sub-class requires.
   *
   *  Sub-classes **must** override this.
   */
  _detectNetwork() {
    assert(false, "sub-classes must implement this", "UNSUPPORTED_OPERATION", {
      operation: "_detectNetwork"
    });
  }
  /**
   *  Sub-classes should use this to perform all built-in operations. All
   *  methods sanitizes and normalizes the values passed into this.
   *
   *  Sub-classes **must** override this.
   */
  async _perform(req) {
    assert(false, `unsupported method: ${req.method}`, "UNSUPPORTED_OPERATION", {
      operation: req.method,
      info: req
    });
  }
  // State
  async getBlockNumber() {
    const blockNumber = getNumber(await __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getBlockNumber" }), "%response");
    if (__privateGet(this, _lastBlockNumber) >= 0) {
      __privateSet(this, _lastBlockNumber, blockNumber);
    }
    return blockNumber;
  }
  /**
   *  Returns or resolves to the address for %%address%%, resolving ENS
   *  names and [[Addressable]] objects and returning if already an
   *  address.
   */
  _getAddress(address) {
    return resolveAddress(address, this);
  }
  /**
   *  Returns or resolves to a valid block tag for %%blockTag%%, resolving
   *  negative values and returning if already a valid block tag.
   */
  _getBlockTag(blockTag) {
    if (blockTag == null) {
      return "latest";
    }
    switch (blockTag) {
      case "earliest":
        return "0x0";
      case "finalized":
      case "latest":
      case "pending":
      case "safe":
        return blockTag;
    }
    if (isHexString(blockTag)) {
      if (isHexString(blockTag, 32)) {
        return blockTag;
      }
      return toQuantity(blockTag);
    }
    if (typeof blockTag === "bigint") {
      blockTag = getNumber(blockTag, "blockTag");
    }
    if (typeof blockTag === "number") {
      if (blockTag >= 0) {
        return toQuantity(blockTag);
      }
      if (__privateGet(this, _lastBlockNumber) >= 0) {
        return toQuantity(__privateGet(this, _lastBlockNumber) + blockTag);
      }
      return this.getBlockNumber().then((b2) => toQuantity(b2 + blockTag));
    }
    assertArgument(false, "invalid blockTag", "blockTag", blockTag);
  }
  /**
   *  Returns or resolves to a filter for %%filter%%, resolving any ENS
   *  names or [[Addressable]] object and returning if already a valid
   *  filter.
   */
  _getFilter(filter) {
    const topics = (filter.topics || []).map((t) => {
      if (t == null) {
        return null;
      }
      if (Array.isArray(t)) {
        return concisify(t.map((t2) => t2.toLowerCase()));
      }
      return t.toLowerCase();
    });
    const blockHash = "blockHash" in filter ? filter.blockHash : void 0;
    const resolve = (_address, fromBlock2, toBlock2) => {
      let address2 = void 0;
      switch (_address.length) {
        case 0:
          break;
        case 1:
          address2 = _address[0];
          break;
        default:
          _address.sort();
          address2 = _address;
      }
      if (blockHash) {
        if (fromBlock2 != null || toBlock2 != null) {
          throw new Error("invalid filter");
        }
      }
      const filter2 = {};
      if (address2) {
        filter2.address = address2;
      }
      if (topics.length) {
        filter2.topics = topics;
      }
      if (fromBlock2) {
        filter2.fromBlock = fromBlock2;
      }
      if (toBlock2) {
        filter2.toBlock = toBlock2;
      }
      if (blockHash) {
        filter2.blockHash = blockHash;
      }
      return filter2;
    };
    let address = [];
    if (filter.address) {
      if (Array.isArray(filter.address)) {
        for (const addr of filter.address) {
          address.push(this._getAddress(addr));
        }
      } else {
        address.push(this._getAddress(filter.address));
      }
    }
    let fromBlock = void 0;
    if ("fromBlock" in filter) {
      fromBlock = this._getBlockTag(filter.fromBlock);
    }
    let toBlock = void 0;
    if ("toBlock" in filter) {
      toBlock = this._getBlockTag(filter.toBlock);
    }
    if (address.filter((a) => typeof a !== "string").length || fromBlock != null && typeof fromBlock !== "string" || toBlock != null && typeof toBlock !== "string") {
      return Promise.all([Promise.all(address), fromBlock, toBlock]).then((result) => {
        return resolve(result[0], result[1], result[2]);
      });
    }
    return resolve(address, fromBlock, toBlock);
  }
  /**
   *  Returns or resolves to a transaction for %%request%%, resolving
   *  any ENS names or [[Addressable]] and returning if already a valid
   *  transaction.
   */
  _getTransactionRequest(_request3) {
    const request = copyRequest(_request3);
    const promises = [];
    ["to", "from"].forEach((key) => {
      if (request[key] == null) {
        return;
      }
      const addr = resolveAddress(request[key], this);
      if (isPromise(addr)) {
        promises.push(async function() {
          request[key] = await addr;
        }());
      } else {
        request[key] = addr;
      }
    });
    if (request.blockTag != null) {
      const blockTag = this._getBlockTag(request.blockTag);
      if (isPromise(blockTag)) {
        promises.push(async function() {
          request.blockTag = await blockTag;
        }());
      } else {
        request.blockTag = blockTag;
      }
    }
    if (promises.length) {
      return async function() {
        await Promise.all(promises);
        return request;
      }();
    }
    return request;
  }
  async getNetwork() {
    if (__privateGet(this, _networkPromise) == null) {
      const detectNetwork = (async () => {
        try {
          const network = await this._detectNetwork();
          this.emit("network", network, null);
          return network;
        } catch (error) {
          if (__privateGet(this, _networkPromise) === detectNetwork) {
            __privateSet(this, _networkPromise, null);
          }
          throw error;
        }
      })();
      __privateSet(this, _networkPromise, detectNetwork);
      return (await detectNetwork).clone();
    }
    const networkPromise = __privateGet(this, _networkPromise);
    const [expected, actual] = await Promise.all([
      networkPromise,
      this._detectNetwork()
      // The actual connected network
    ]);
    if (expected.chainId !== actual.chainId) {
      if (__privateGet(this, _anyNetwork)) {
        this.emit("network", actual, expected);
        if (__privateGet(this, _networkPromise) === networkPromise) {
          __privateSet(this, _networkPromise, Promise.resolve(actual));
        }
      } else {
        assert(false, `network changed: ${expected.chainId} => ${actual.chainId} `, "NETWORK_ERROR", {
          event: "changed"
        });
      }
    }
    return expected.clone();
  }
  async getFeeData() {
    const network = await this.getNetwork();
    const getFeeDataFunc = async () => {
      const { _block, gasPrice, priorityFee } = await resolveProperties({
        _block: __privateMethod(this, _AbstractProvider_instances, getBlock_fn).call(this, "latest", false),
        gasPrice: (async () => {
          try {
            const value = await __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getGasPrice" });
            return getBigInt(value, "%response");
          } catch (error) {
          }
          return null;
        })(),
        priorityFee: (async () => {
          try {
            const value = await __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getPriorityFee" });
            return getBigInt(value, "%response");
          } catch (error) {
          }
          return null;
        })()
      });
      let maxFeePerGas = null;
      let maxPriorityFeePerGas = null;
      const block = this._wrapBlock(_block, network);
      if (block && block.baseFeePerGas) {
        maxPriorityFeePerGas = priorityFee != null ? priorityFee : BigInt("1000000000");
        maxFeePerGas = block.baseFeePerGas * BN_23 + maxPriorityFeePerGas;
      }
      return new FeeData(gasPrice, maxFeePerGas, maxPriorityFeePerGas);
    };
    const plugin = network.getPlugin("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
    if (plugin) {
      const req = new FetchRequest(plugin.url);
      const feeData = await plugin.processFunc(getFeeDataFunc, this, req);
      return new FeeData(feeData.gasPrice, feeData.maxFeePerGas, feeData.maxPriorityFeePerGas);
    }
    return await getFeeDataFunc();
  }
  async estimateGas(_tx) {
    let tx = this._getTransactionRequest(_tx);
    if (isPromise(tx)) {
      tx = await tx;
    }
    return getBigInt(await __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, {
      method: "estimateGas",
      transaction: tx
    }), "%response");
  }
  async call(_tx) {
    const { tx, blockTag } = await resolveProperties({
      tx: this._getTransactionRequest(_tx),
      blockTag: this._getBlockTag(_tx.blockTag)
    });
    return await __privateMethod(this, _AbstractProvider_instances, checkNetwork_fn).call(this, __privateMethod(this, _AbstractProvider_instances, call_fn).call(this, tx, blockTag, _tx.enableCcipRead ? 0 : -1));
  }
  async getBalance(address, blockTag) {
    return getBigInt(await __privateMethod(this, _AbstractProvider_instances, getAccountValue_fn).call(this, { method: "getBalance" }, address, blockTag), "%response");
  }
  async getTransactionCount(address, blockTag) {
    return getNumber(await __privateMethod(this, _AbstractProvider_instances, getAccountValue_fn).call(this, { method: "getTransactionCount" }, address, blockTag), "%response");
  }
  async getCode(address, blockTag) {
    return hexlify(await __privateMethod(this, _AbstractProvider_instances, getAccountValue_fn).call(this, { method: "getCode" }, address, blockTag));
  }
  async getStorage(address, _position, blockTag) {
    const position = getBigInt(_position, "position");
    return hexlify(await __privateMethod(this, _AbstractProvider_instances, getAccountValue_fn).call(this, { method: "getStorage", position }, address, blockTag));
  }
  // Write
  async broadcastTransaction(signedTx) {
    const { blockNumber, hash: hash2, network } = await resolveProperties({
      blockNumber: this.getBlockNumber(),
      hash: this._perform({
        method: "broadcastTransaction",
        signedTransaction: signedTx
      }),
      network: this.getNetwork()
    });
    const tx = Transaction.from(signedTx);
    if (tx.hash !== hash2) {
      throw new Error("@TODO: the returned hash did not match");
    }
    return this._wrapTransactionResponse(tx, network).replaceableTransaction(blockNumber);
  }
  // Queries
  async getBlock(block, prefetchTxs) {
    const { network, params } = await resolveProperties({
      network: this.getNetwork(),
      params: __privateMethod(this, _AbstractProvider_instances, getBlock_fn).call(this, block, !!prefetchTxs)
    });
    if (params == null) {
      return null;
    }
    return this._wrapBlock(params, network);
  }
  async getTransaction(hash2) {
    const { network, params } = await resolveProperties({
      network: this.getNetwork(),
      params: __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getTransaction", hash: hash2 })
    });
    if (params == null) {
      return null;
    }
    return this._wrapTransactionResponse(params, network);
  }
  async getTransactionReceipt(hash2) {
    const { network, params } = await resolveProperties({
      network: this.getNetwork(),
      params: __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getTransactionReceipt", hash: hash2 })
    });
    if (params == null) {
      return null;
    }
    if (params.gasPrice == null && params.effectiveGasPrice == null) {
      const tx = await __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getTransaction", hash: hash2 });
      if (tx == null) {
        throw new Error("report this; could not find tx or effectiveGasPrice");
      }
      params.effectiveGasPrice = tx.gasPrice;
    }
    return this._wrapTransactionReceipt(params, network);
  }
  async getTransactionResult(hash2) {
    const { result } = await resolveProperties({
      network: this.getNetwork(),
      result: __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getTransactionResult", hash: hash2 })
    });
    if (result == null) {
      return null;
    }
    return hexlify(result);
  }
  // Bloom-filter Queries
  async getLogs(_filter5) {
    let filter = this._getFilter(_filter5);
    if (isPromise(filter)) {
      filter = await filter;
    }
    const { network, params } = await resolveProperties({
      network: this.getNetwork(),
      params: __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getLogs", filter })
    });
    return params.map((p) => this._wrapLog(p, network));
  }
  // ENS
  _getProvider(chainId) {
    assert(false, "provider cannot connect to target network", "UNSUPPORTED_OPERATION", {
      operation: "_getProvider()"
    });
  }
  async getResolver(name) {
    return await EnsResolver.fromName(this, name);
  }
  async getAvatar(name) {
    const resolver = await this.getResolver(name);
    if (resolver) {
      return await resolver.getAvatar();
    }
    return null;
  }
  async resolveName(name) {
    const resolver = await this.getResolver(name);
    if (resolver) {
      return await resolver.getAddress();
    }
    return null;
  }
  async lookupAddress(address) {
    address = getAddress(address);
    const node = namehash(address.substring(2).toLowerCase() + ".addr.reverse");
    try {
      const ensAddr = await EnsResolver.getEnsAddress(this);
      const ensContract = new Contract(ensAddr, [
        "function resolver(bytes32) view returns (address)"
      ], this);
      const resolver = await ensContract.resolver(node);
      if (resolver == null || resolver === ZeroAddress) {
        return null;
      }
      const resolverContract = new Contract(resolver, [
        "function name(bytes32) view returns (string)"
      ], this);
      const name = await resolverContract.name(node);
      const check = await this.resolveName(name);
      if (check !== address) {
        return null;
      }
      return name;
    } catch (error) {
      if (isError(error, "BAD_DATA") && error.value === "0x") {
        return null;
      }
      if (isError(error, "CALL_EXCEPTION")) {
        return null;
      }
      throw error;
    }
    return null;
  }
  async waitForTransaction(hash2, _confirms, timeout) {
    const confirms = _confirms != null ? _confirms : 1;
    if (confirms === 0) {
      return this.getTransactionReceipt(hash2);
    }
    return new Promise(async (resolve, reject) => {
      let timer = null;
      const listener = async (blockNumber) => {
        try {
          const receipt = await this.getTransactionReceipt(hash2);
          if (receipt != null) {
            if (blockNumber - receipt.blockNumber + 1 >= confirms) {
              resolve(receipt);
              if (timer) {
                clearTimeout(timer);
                timer = null;
              }
              return;
            }
          }
        } catch (error) {
          console.log("EEE", error);
        }
        this.once("block", listener);
      };
      if (timeout != null) {
        timer = setTimeout(() => {
          if (timer == null) {
            return;
          }
          timer = null;
          this.off("block", listener);
          reject(makeError("timeout", "TIMEOUT", { reason: "timeout" }));
        }, timeout);
      }
      listener(await this.getBlockNumber());
    });
  }
  async waitForBlock(blockTag) {
    assert(false, "not implemented yet", "NOT_IMPLEMENTED", {
      operation: "waitForBlock"
    });
  }
  /**
   *  Clear a timer created using the [[_setTimeout]] method.
   */
  _clearTimeout(timerId) {
    const timer = __privateGet(this, _timers).get(timerId);
    if (!timer) {
      return;
    }
    if (timer.timer) {
      clearTimeout(timer.timer);
    }
    __privateGet(this, _timers).delete(timerId);
  }
  /**
   *  Create a timer that will execute %%func%% after at least %%timeout%%
   *  (in ms). If %%timeout%% is unspecified, then %%func%% will execute
   *  in the next event loop.
   *
   *  [Pausing](AbstractProvider-paused) the provider will pause any
   *  associated timers.
   */
  _setTimeout(_func, timeout) {
    if (timeout == null) {
      timeout = 0;
    }
    const timerId = __privateWrapper(this, _nextTimer)._++;
    const func = () => {
      __privateGet(this, _timers).delete(timerId);
      _func();
    };
    if (this.paused) {
      __privateGet(this, _timers).set(timerId, { timer: null, func, time: timeout });
    } else {
      const timer = setTimeout(func, timeout);
      __privateGet(this, _timers).set(timerId, { timer, func, time: getTime2() });
    }
    return timerId;
  }
  /**
   *  Perform %%func%% on each subscriber.
   */
  _forEachSubscriber(func) {
    for (const sub of __privateGet(this, _subs).values()) {
      func(sub.subscriber);
    }
  }
  /**
   *  Sub-classes may override this to customize subscription
   *  implementations.
   */
  _getSubscriber(sub) {
    switch (sub.type) {
      case "debug":
      case "error":
      case "network":
        return new UnmanagedSubscriber(sub.type);
      case "block": {
        const subscriber = new PollingBlockSubscriber(this);
        subscriber.pollingInterval = this.pollingInterval;
        return subscriber;
      }
      case "safe":
      case "finalized":
        return new PollingBlockTagSubscriber(this, sub.type);
      case "event":
        return new PollingEventSubscriber(this, sub.filter);
      case "transaction":
        return new PollingTransactionSubscriber(this, sub.hash);
      case "orphan":
        return new PollingOrphanSubscriber(this, sub.filter);
    }
    throw new Error(`unsupported event: ${sub.type}`);
  }
  /**
   *  If a [[Subscriber]] fails and needs to replace itself, this
   *  method may be used.
   *
   *  For example, this is used for providers when using the
   *  ``eth_getFilterChanges`` method, which can return null if state
   *  filters are not supported by the backend, allowing the Subscriber
   *  to swap in a [[PollingEventSubscriber]].
   */
  _recoverSubscriber(oldSub, newSub) {
    for (const sub of __privateGet(this, _subs).values()) {
      if (sub.subscriber === oldSub) {
        if (sub.started) {
          sub.subscriber.stop();
        }
        sub.subscriber = newSub;
        if (sub.started) {
          newSub.start();
        }
        if (__privateGet(this, _pausedState) != null) {
          newSub.pause(__privateGet(this, _pausedState));
        }
        break;
      }
    }
  }
  async on(event, listener) {
    const sub = await __privateMethod(this, _AbstractProvider_instances, getSub_fn).call(this, event);
    sub.listeners.push({ listener, once: false });
    if (!sub.started) {
      sub.subscriber.start();
      sub.started = true;
      if (__privateGet(this, _pausedState) != null) {
        sub.subscriber.pause(__privateGet(this, _pausedState));
      }
    }
    return this;
  }
  async once(event, listener) {
    const sub = await __privateMethod(this, _AbstractProvider_instances, getSub_fn).call(this, event);
    sub.listeners.push({ listener, once: true });
    if (!sub.started) {
      sub.subscriber.start();
      sub.started = true;
      if (__privateGet(this, _pausedState) != null) {
        sub.subscriber.pause(__privateGet(this, _pausedState));
      }
    }
    return this;
  }
  async emit(event, ...args) {
    const sub = await __privateMethod(this, _AbstractProvider_instances, hasSub_fn).call(this, event, args);
    if (!sub || sub.listeners.length === 0) {
      return false;
    }
    ;
    const count = sub.listeners.length;
    sub.listeners = sub.listeners.filter(({ listener, once }) => {
      const payload = new EventPayload(this, once ? null : listener, event);
      try {
        listener.call(this, ...args, payload);
      } catch (error) {
      }
      return !once;
    });
    if (sub.listeners.length === 0) {
      if (sub.started) {
        sub.subscriber.stop();
      }
      __privateGet(this, _subs).delete(sub.tag);
    }
    return count > 0;
  }
  async listenerCount(event) {
    if (event) {
      const sub = await __privateMethod(this, _AbstractProvider_instances, hasSub_fn).call(this, event);
      if (!sub) {
        return 0;
      }
      return sub.listeners.length;
    }
    let total = 0;
    for (const { listeners } of __privateGet(this, _subs).values()) {
      total += listeners.length;
    }
    return total;
  }
  async listeners(event) {
    if (event) {
      const sub = await __privateMethod(this, _AbstractProvider_instances, hasSub_fn).call(this, event);
      if (!sub) {
        return [];
      }
      return sub.listeners.map(({ listener }) => listener);
    }
    let result = [];
    for (const { listeners } of __privateGet(this, _subs).values()) {
      result = result.concat(listeners.map(({ listener }) => listener));
    }
    return result;
  }
  async off(event, listener) {
    const sub = await __privateMethod(this, _AbstractProvider_instances, hasSub_fn).call(this, event);
    if (!sub) {
      return this;
    }
    if (listener) {
      const index = sub.listeners.map(({ listener: listener2 }) => listener2).indexOf(listener);
      if (index >= 0) {
        sub.listeners.splice(index, 1);
      }
    }
    if (!listener || sub.listeners.length === 0) {
      if (sub.started) {
        sub.subscriber.stop();
      }
      __privateGet(this, _subs).delete(sub.tag);
    }
    return this;
  }
  async removeAllListeners(event) {
    if (event) {
      const { tag, started, subscriber } = await __privateMethod(this, _AbstractProvider_instances, getSub_fn).call(this, event);
      if (started) {
        subscriber.stop();
      }
      __privateGet(this, _subs).delete(tag);
    } else {
      for (const [tag, { started, subscriber }] of __privateGet(this, _subs)) {
        if (started) {
          subscriber.stop();
        }
        __privateGet(this, _subs).delete(tag);
      }
    }
    return this;
  }
  // Alias for "on"
  async addListener(event, listener) {
    return await this.on(event, listener);
  }
  // Alias for "off"
  async removeListener(event, listener) {
    return this.off(event, listener);
  }
  /**
   *  If this provider has been destroyed using the [[destroy]] method.
   *
   *  Once destroyed, all resources are reclaimed, internal event loops
   *  and timers are cleaned up and no further requests may be sent to
   *  the provider.
   */
  get destroyed() {
    return __privateGet(this, _destroyed);
  }
  /**
   *  Sub-classes may use this to shutdown any sockets or release their
   *  resources and reject any pending requests.
   *
   *  Sub-classes **must** call ``super.destroy()``.
   */
  destroy() {
    this.removeAllListeners();
    for (const timerId of __privateGet(this, _timers).keys()) {
      this._clearTimeout(timerId);
    }
    __privateSet(this, _destroyed, true);
  }
  /**
   *  Whether the provider is currently paused.
   *
   *  A paused provider will not emit any events, and generally should
   *  not make any requests to the network, but that is up to sub-classes
   *  to manage.
   *
   *  Setting ``paused = true`` is identical to calling ``.pause(false)``,
   *  which will buffer any events that occur while paused until the
   *  provider is unpaused.
   */
  get paused() {
    return __privateGet(this, _pausedState) != null;
  }
  set paused(pause) {
    if (!!pause === this.paused) {
      return;
    }
    if (this.paused) {
      this.resume();
    } else {
      this.pause(false);
    }
  }
  /**
   *  Pause the provider. If %%dropWhilePaused%%, any events that occur
   *  while paused are dropped, otherwise all events will be emitted once
   *  the provider is unpaused.
   */
  pause(dropWhilePaused) {
    __privateSet(this, _lastBlockNumber, -1);
    if (__privateGet(this, _pausedState) != null) {
      if (__privateGet(this, _pausedState) == !!dropWhilePaused) {
        return;
      }
      assert(false, "cannot change pause type; resume first", "UNSUPPORTED_OPERATION", {
        operation: "pause"
      });
    }
    this._forEachSubscriber((s) => s.pause(dropWhilePaused));
    __privateSet(this, _pausedState, !!dropWhilePaused);
    for (const timer of __privateGet(this, _timers).values()) {
      if (timer.timer) {
        clearTimeout(timer.timer);
      }
      timer.time = getTime2() - timer.time;
    }
  }
  /**
   *  Resume the provider.
   */
  resume() {
    if (__privateGet(this, _pausedState) == null) {
      return;
    }
    this._forEachSubscriber((s) => s.resume());
    __privateSet(this, _pausedState, null);
    for (const timer of __privateGet(this, _timers).values()) {
      let timeout = timer.time;
      if (timeout < 0) {
        timeout = 0;
      }
      timer.time = getTime2();
      setTimeout(timer.func, timeout);
    }
  }
};
_subs = new WeakMap();
_plugins2 = new WeakMap();
_pausedState = new WeakMap();
_destroyed = new WeakMap();
_networkPromise = new WeakMap();
_anyNetwork = new WeakMap();
_performCache = new WeakMap();
_lastBlockNumber = new WeakMap();
_nextTimer = new WeakMap();
_timers = new WeakMap();
_disableCcipRead = new WeakMap();
_options2 = new WeakMap();
_AbstractProvider_instances = new WeakSet();
perform_fn = async function(req) {
  const timeout = __privateGet(this, _options2).cacheTimeout;
  if (timeout < 0) {
    return await this._perform(req);
  }
  const tag = getTag(req.method, req);
  let perform = __privateGet(this, _performCache).get(tag);
  if (!perform) {
    perform = this._perform(req);
    __privateGet(this, _performCache).set(tag, perform);
    setTimeout(() => {
      if (__privateGet(this, _performCache).get(tag) === perform) {
        __privateGet(this, _performCache).delete(tag);
      }
    }, timeout);
  }
  return await perform;
};
call_fn = async function(tx, blockTag, attempt) {
  assert(attempt < MAX_CCIP_REDIRECTS, "CCIP read exceeded maximum redirections", "OFFCHAIN_FAULT", {
    reason: "TOO_MANY_REDIRECTS",
    transaction: Object.assign({}, tx, { blockTag, enableCcipRead: true })
  });
  const transaction = copyRequest(tx);
  try {
    return hexlify(await this._perform({ method: "call", transaction, blockTag }));
  } catch (error) {
    if (!this.disableCcipRead && isCallException(error) && error.data && attempt >= 0 && blockTag === "latest" && transaction.to != null && dataSlice(error.data, 0, 4) === "0x556f1830") {
      const data = error.data;
      const txSender = await resolveAddress(transaction.to, this);
      let ccipArgs;
      try {
        ccipArgs = parseOffchainLookup(dataSlice(error.data, 4));
      } catch (error2) {
        assert(false, error2.message, "OFFCHAIN_FAULT", {
          reason: "BAD_DATA",
          transaction,
          info: { data }
        });
      }
      assert(ccipArgs.sender.toLowerCase() === txSender.toLowerCase(), "CCIP Read sender mismatch", "CALL_EXCEPTION", {
        action: "call",
        data,
        reason: "OffchainLookup",
        transaction,
        invocation: null,
        revert: {
          signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
          name: "OffchainLookup",
          args: ccipArgs.errorArgs
        }
      });
      const ccipResult = await this.ccipReadFetch(transaction, ccipArgs.calldata, ccipArgs.urls);
      assert(ccipResult != null, "CCIP Read failed to fetch data", "OFFCHAIN_FAULT", {
        reason: "FETCH_FAILED",
        transaction,
        info: { data: error.data, errorArgs: ccipArgs.errorArgs }
      });
      const tx2 = {
        to: txSender,
        data: concat([ccipArgs.selector, encodeBytes([ccipResult, ccipArgs.extraData])])
      };
      this.emit("debug", { action: "sendCcipReadCall", transaction: tx2 });
      try {
        const result = await __privateMethod(this, _AbstractProvider_instances, call_fn).call(this, tx2, blockTag, attempt + 1);
        this.emit("debug", { action: "receiveCcipReadCallResult", transaction: Object.assign({}, tx2), result });
        return result;
      } catch (error2) {
        this.emit("debug", { action: "receiveCcipReadCallError", transaction: Object.assign({}, tx2), error: error2 });
        throw error2;
      }
    }
    throw error;
  }
};
checkNetwork_fn = async function(promise) {
  const { value } = await resolveProperties({
    network: this.getNetwork(),
    value: promise
  });
  return value;
};
getAccountValue_fn = async function(request, _address, _blockTag) {
  let address = this._getAddress(_address);
  let blockTag = this._getBlockTag(_blockTag);
  if (typeof address !== "string" || typeof blockTag !== "string") {
    [address, blockTag] = await Promise.all([address, blockTag]);
  }
  return await __privateMethod(this, _AbstractProvider_instances, checkNetwork_fn).call(this, __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, Object.assign(request, { address, blockTag })));
};
getBlock_fn = async function(block, includeTransactions) {
  if (isHexString(block, 32)) {
    return await __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, {
      method: "getBlock",
      blockHash: block,
      includeTransactions
    });
  }
  let blockTag = this._getBlockTag(block);
  if (typeof blockTag !== "string") {
    blockTag = await blockTag;
  }
  return await __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, {
    method: "getBlock",
    blockTag,
    includeTransactions
  });
};
hasSub_fn = async function(event, emitArgs) {
  let sub = await getSubscription(event, this);
  if (sub.type === "event" && emitArgs && emitArgs.length > 0 && emitArgs[0].removed === true) {
    sub = await getSubscription({ orphan: "drop-log", log: emitArgs[0] }, this);
  }
  return __privateGet(this, _subs).get(sub.tag) || null;
};
getSub_fn = async function(event) {
  const subscription = await getSubscription(event, this);
  const tag = subscription.tag;
  let sub = __privateGet(this, _subs).get(tag);
  if (!sub) {
    const subscriber = this._getSubscriber(subscription);
    const addressableMap = /* @__PURE__ */ new WeakMap();
    const nameMap = /* @__PURE__ */ new Map();
    sub = { subscriber, tag, addressableMap, nameMap, started: false, listeners: [] };
    __privateGet(this, _subs).set(tag, sub);
  }
  return sub;
};
function _parseString(result, start) {
  try {
    const bytes2 = _parseBytes(result, start);
    if (bytes2) {
      return toUtf8String(bytes2);
    }
  } catch (error) {
  }
  return null;
}
function _parseBytes(result, start) {
  if (result === "0x") {
    return null;
  }
  try {
    const offset = getNumber(dataSlice(result, start, start + 32));
    const length = getNumber(dataSlice(result, offset, offset + 32));
    return dataSlice(result, offset + 32, offset + 32 + length);
  } catch (error) {
  }
  return null;
}
function numPad(value) {
  const result = toBeArray(value);
  if (result.length > 32) {
    throw new Error("internal; should not happen");
  }
  const padded = new Uint8Array(32);
  padded.set(result, 32 - result.length);
  return padded;
}
function bytesPad(value) {
  if (value.length % 32 === 0) {
    return value;
  }
  const result = new Uint8Array(Math.ceil(value.length / 32) * 32);
  result.set(value);
  return result;
}
var empty = new Uint8Array([]);
function encodeBytes(datas) {
  const result = [];
  let byteCount = 0;
  for (let i = 0; i < datas.length; i++) {
    result.push(empty);
    byteCount += 32;
  }
  for (let i = 0; i < datas.length; i++) {
    const data = getBytes(datas[i]);
    result[i] = numPad(byteCount);
    result.push(numPad(data.length));
    result.push(bytesPad(data));
    byteCount += 32 + Math.ceil(data.length / 32) * 32;
  }
  return concat(result);
}
var zeros = "0x0000000000000000000000000000000000000000000000000000000000000000";
function parseOffchainLookup(data) {
  const result = {
    sender: "",
    urls: [],
    calldata: "",
    selector: "",
    extraData: "",
    errorArgs: []
  };
  assert(dataLength(data) >= 5 * 32, "insufficient OffchainLookup data", "OFFCHAIN_FAULT", {
    reason: "insufficient OffchainLookup data"
  });
  const sender = dataSlice(data, 0, 32);
  assert(dataSlice(sender, 0, 12) === dataSlice(zeros, 0, 12), "corrupt OffchainLookup sender", "OFFCHAIN_FAULT", {
    reason: "corrupt OffchainLookup sender"
  });
  result.sender = dataSlice(sender, 12);
  try {
    const urls = [];
    const urlsOffset = getNumber(dataSlice(data, 32, 64));
    const urlsLength = getNumber(dataSlice(data, urlsOffset, urlsOffset + 32));
    const urlsData = dataSlice(data, urlsOffset + 32);
    for (let u = 0; u < urlsLength; u++) {
      const url = _parseString(urlsData, u * 32);
      if (url == null) {
        throw new Error("abort");
      }
      urls.push(url);
    }
    result.urls = urls;
  } catch (error) {
    assert(false, "corrupt OffchainLookup urls", "OFFCHAIN_FAULT", {
      reason: "corrupt OffchainLookup urls"
    });
  }
  try {
    const calldata = _parseBytes(data, 64);
    if (calldata == null) {
      throw new Error("abort");
    }
    result.calldata = calldata;
  } catch (error) {
    assert(false, "corrupt OffchainLookup calldata", "OFFCHAIN_FAULT", {
      reason: "corrupt OffchainLookup calldata"
    });
  }
  assert(dataSlice(data, 100, 128) === dataSlice(zeros, 0, 28), "corrupt OffchainLookup callbaackSelector", "OFFCHAIN_FAULT", {
    reason: "corrupt OffchainLookup callbaackSelector"
  });
  result.selector = dataSlice(data, 96, 100);
  try {
    const extraData = _parseBytes(data, 128);
    if (extraData == null) {
      throw new Error("abort");
    }
    result.extraData = extraData;
  } catch (error) {
    assert(false, "corrupt OffchainLookup extraData", "OFFCHAIN_FAULT", {
      reason: "corrupt OffchainLookup extraData"
    });
  }
  result.errorArgs = "sender,urls,calldata,selector,extraData".split(/,/).map((k) => result[k]);
  return result;
}

// node_modules/ethers/lib.esm/providers/abstract-signer.js
function checkProvider(signer, operation) {
  if (signer.provider) {
    return signer.provider;
  }
  assert(false, "missing provider", "UNSUPPORTED_OPERATION", { operation });
}
async function populate(signer, tx) {
  let pop = copyRequest(tx);
  if (pop.to != null) {
    pop.to = resolveAddress(pop.to, signer);
  }
  if (pop.from != null) {
    const from = pop.from;
    pop.from = Promise.all([
      signer.getAddress(),
      resolveAddress(from, signer)
    ]).then(([address, from2]) => {
      assertArgument(address.toLowerCase() === from2.toLowerCase(), "transaction from mismatch", "tx.from", from2);
      return address;
    });
  } else {
    pop.from = signer.getAddress();
  }
  return await resolveProperties(pop);
}
var AbstractSigner = class {
  /**
   *  Creates a new Signer connected to %%provider%%.
   */
  constructor(provider) {
    /**
     *  The provider this signer is connected to.
     */
    __publicField(this, "provider");
    defineProperties(this, { provider: provider || null });
  }
  async getNonce(blockTag) {
    return checkProvider(this, "getTransactionCount").getTransactionCount(await this.getAddress(), blockTag);
  }
  async populateCall(tx) {
    const pop = await populate(this, tx);
    return pop;
  }
  async populateTransaction(tx) {
    const provider = checkProvider(this, "populateTransaction");
    const pop = await populate(this, tx);
    if (pop.nonce == null) {
      pop.nonce = await this.getNonce("pending");
    }
    if (pop.gasLimit == null) {
      pop.gasLimit = await this.estimateGas(pop);
    }
    const network = await this.provider.getNetwork();
    if (pop.chainId != null) {
      const chainId = getBigInt(pop.chainId);
      assertArgument(chainId === network.chainId, "transaction chainId mismatch", "tx.chainId", tx.chainId);
    } else {
      pop.chainId = network.chainId;
    }
    const hasEip1559 = pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null;
    if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {
      assertArgument(false, "eip-1559 transaction do not support gasPrice", "tx", tx);
    } else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {
      assertArgument(false, "pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "tx", tx);
    }
    if ((pop.type === 2 || pop.type == null) && (pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null)) {
      pop.type = 2;
    } else if (pop.type === 0 || pop.type === 1) {
      const feeData = await provider.getFeeData();
      assert(feeData.gasPrice != null, "network does not support gasPrice", "UNSUPPORTED_OPERATION", {
        operation: "getGasPrice"
      });
      if (pop.gasPrice == null) {
        pop.gasPrice = feeData.gasPrice;
      }
    } else {
      const feeData = await provider.getFeeData();
      if (pop.type == null) {
        if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
          pop.type = 2;
          if (pop.gasPrice != null) {
            const gasPrice = pop.gasPrice;
            delete pop.gasPrice;
            pop.maxFeePerGas = gasPrice;
            pop.maxPriorityFeePerGas = gasPrice;
          } else {
            if (pop.maxFeePerGas == null) {
              pop.maxFeePerGas = feeData.maxFeePerGas;
            }
            if (pop.maxPriorityFeePerGas == null) {
              pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
            }
          }
        } else if (feeData.gasPrice != null) {
          assert(!hasEip1559, "network does not support EIP-1559", "UNSUPPORTED_OPERATION", {
            operation: "populateTransaction"
          });
          if (pop.gasPrice == null) {
            pop.gasPrice = feeData.gasPrice;
          }
          pop.type = 0;
        } else {
          assert(false, "failed to get consistent fee data", "UNSUPPORTED_OPERATION", {
            operation: "signer.getFeeData"
          });
        }
      } else if (pop.type === 2 || pop.type === 3) {
        if (pop.maxFeePerGas == null) {
          pop.maxFeePerGas = feeData.maxFeePerGas;
        }
        if (pop.maxPriorityFeePerGas == null) {
          pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
        }
      }
    }
    return await resolveProperties(pop);
  }
  async estimateGas(tx) {
    return checkProvider(this, "estimateGas").estimateGas(await this.populateCall(tx));
  }
  async call(tx) {
    return checkProvider(this, "call").call(await this.populateCall(tx));
  }
  async resolveName(name) {
    const provider = checkProvider(this, "resolveName");
    return await provider.resolveName(name);
  }
  async sendTransaction(tx) {
    const provider = checkProvider(this, "sendTransaction");
    const pop = await this.populateTransaction(tx);
    delete pop.from;
    const txObj = Transaction.from(pop);
    return await provider.broadcastTransaction(await this.signTransaction(txObj));
  }
};
var _VoidSigner_instances, throwUnsupported_fn;
var _VoidSigner = class _VoidSigner extends AbstractSigner {
  /**
   *  Creates a new **VoidSigner** with %%address%% attached to
   *  %%provider%%.
   */
  constructor(address, provider) {
    super(provider);
    __privateAdd(this, _VoidSigner_instances);
    /**
     *  The signer address.
     */
    __publicField(this, "address");
    defineProperties(this, { address });
  }
  async getAddress() {
    return this.address;
  }
  connect(provider) {
    return new _VoidSigner(this.address, provider);
  }
  async signTransaction(tx) {
    __privateMethod(this, _VoidSigner_instances, throwUnsupported_fn).call(this, "transactions", "signTransaction");
  }
  async signMessage(message) {
    __privateMethod(this, _VoidSigner_instances, throwUnsupported_fn).call(this, "messages", "signMessage");
  }
  async signTypedData(domain, types, value) {
    __privateMethod(this, _VoidSigner_instances, throwUnsupported_fn).call(this, "typed-data", "signTypedData");
  }
};
_VoidSigner_instances = new WeakSet();
throwUnsupported_fn = function(suffix, operation) {
  assert(false, `VoidSigner cannot sign ${suffix}`, "UNSUPPORTED_OPERATION", { operation });
};
var VoidSigner = _VoidSigner;

// node_modules/ethers/lib.esm/providers/community.js
var shown = /* @__PURE__ */ new Set();
function showThrottleMessage(service) {
  if (shown.has(service)) {
    return;
  }
  shown.add(service);
  console.log("========= NOTICE =========");
  console.log(`Request-Rate Exceeded for ${service} (this message will not be repeated)`);
  console.log("");
  console.log("The default API keys for each service are provided as a highly-throttled,");
  console.log("community resource for low-traffic projects and early prototyping.");
  console.log("");
  console.log("While your application will continue to function, we highly recommended");
  console.log("signing up for your own API keys to improve performance, increase your");
  console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
  console.log("");
  console.log("For more details: https://docs.ethers.org/api-keys/");
  console.log("==========================");
}

// node_modules/ethers/lib.esm/providers/subscriber-filterid.js
function copy3(obj) {
  return JSON.parse(JSON.stringify(obj));
}
var _provider4, _filterIdPromise, _poller3, _running3, _network, _hault, _FilterIdSubscriber_instances, poll_fn3, teardown_fn;
var FilterIdSubscriber = class {
  /**
   *  Creates a new **FilterIdSubscriber** which will used [[_subscribe]]
   *  and [[_emitResults]] to setup the subscription and provide the event
   *  to the %%provider%%.
   */
  constructor(provider) {
    __privateAdd(this, _FilterIdSubscriber_instances);
    __privateAdd(this, _provider4);
    __privateAdd(this, _filterIdPromise);
    __privateAdd(this, _poller3);
    __privateAdd(this, _running3);
    __privateAdd(this, _network);
    __privateAdd(this, _hault);
    __privateSet(this, _provider4, provider);
    __privateSet(this, _filterIdPromise, null);
    __privateSet(this, _poller3, __privateMethod(this, _FilterIdSubscriber_instances, poll_fn3).bind(this));
    __privateSet(this, _running3, false);
    __privateSet(this, _network, null);
    __privateSet(this, _hault, false);
  }
  /**
   *  Sub-classes **must** override this to begin the subscription.
   */
  _subscribe(provider) {
    throw new Error("subclasses must override this");
  }
  /**
   *  Sub-classes **must** override this handle the events.
   */
  _emitResults(provider, result) {
    throw new Error("subclasses must override this");
  }
  /**
   *  Sub-classes **must** override this handle recovery on errors.
   */
  _recover(provider) {
    throw new Error("subclasses must override this");
  }
  start() {
    if (__privateGet(this, _running3)) {
      return;
    }
    __privateSet(this, _running3, true);
    __privateMethod(this, _FilterIdSubscriber_instances, poll_fn3).call(this, -2);
  }
  stop() {
    if (!__privateGet(this, _running3)) {
      return;
    }
    __privateSet(this, _running3, false);
    __privateSet(this, _hault, true);
    __privateMethod(this, _FilterIdSubscriber_instances, teardown_fn).call(this);
    __privateGet(this, _provider4).off("block", __privateGet(this, _poller3));
  }
  pause(dropWhilePaused) {
    if (dropWhilePaused) {
      __privateMethod(this, _FilterIdSubscriber_instances, teardown_fn).call(this);
    }
    __privateGet(this, _provider4).off("block", __privateGet(this, _poller3));
  }
  resume() {
    this.start();
  }
};
_provider4 = new WeakMap();
_filterIdPromise = new WeakMap();
_poller3 = new WeakMap();
_running3 = new WeakMap();
_network = new WeakMap();
_hault = new WeakMap();
_FilterIdSubscriber_instances = new WeakSet();
poll_fn3 = async function(blockNumber) {
  try {
    if (__privateGet(this, _filterIdPromise) == null) {
      __privateSet(this, _filterIdPromise, this._subscribe(__privateGet(this, _provider4)));
    }
    let filterId = null;
    try {
      filterId = await __privateGet(this, _filterIdPromise);
    } catch (error) {
      if (!isError(error, "UNSUPPORTED_OPERATION") || error.operation !== "eth_newFilter") {
        throw error;
      }
    }
    if (filterId == null) {
      __privateSet(this, _filterIdPromise, null);
      __privateGet(this, _provider4)._recoverSubscriber(this, this._recover(__privateGet(this, _provider4)));
      return;
    }
    const network = await __privateGet(this, _provider4).getNetwork();
    if (!__privateGet(this, _network)) {
      __privateSet(this, _network, network);
    }
    if (__privateGet(this, _network).chainId !== network.chainId) {
      throw new Error("chaid changed");
    }
    if (__privateGet(this, _hault)) {
      return;
    }
    const result = await __privateGet(this, _provider4).send("eth_getFilterChanges", [filterId]);
    await this._emitResults(__privateGet(this, _provider4), result);
  } catch (error) {
    console.log("@TODO", error);
  }
  __privateGet(this, _provider4).once("block", __privateGet(this, _poller3));
};
teardown_fn = function() {
  const filterIdPromise = __privateGet(this, _filterIdPromise);
  if (filterIdPromise) {
    __privateSet(this, _filterIdPromise, null);
    filterIdPromise.then((filterId) => {
      if (__privateGet(this, _provider4).destroyed) {
        return;
      }
      __privateGet(this, _provider4).send("eth_uninstallFilter", [filterId]);
    });
  }
};
var _event;
var FilterIdEventSubscriber = class extends FilterIdSubscriber {
  /**
   *  Creates a new **FilterIdEventSubscriber** attached to %%provider%%
   *  listening for %%filter%%.
   */
  constructor(provider, filter) {
    super(provider);
    __privateAdd(this, _event);
    __privateSet(this, _event, copy3(filter));
  }
  _recover(provider) {
    return new PollingEventSubscriber(provider, __privateGet(this, _event));
  }
  async _subscribe(provider) {
    const filterId = await provider.send("eth_newFilter", [__privateGet(this, _event)]);
    return filterId;
  }
  async _emitResults(provider, results) {
    for (const result of results) {
      provider.emit(__privateGet(this, _event), provider._wrapLog(result, provider._network));
    }
  }
};
_event = new WeakMap();
var FilterIdPendingSubscriber = class extends FilterIdSubscriber {
  async _subscribe(provider) {
    return await provider.send("eth_newPendingTransactionFilter", []);
  }
  async _emitResults(provider, results) {
    for (const result of results) {
      provider.emit("pending", result);
    }
  }
};

// node_modules/ethers/lib.esm/providers/provider-jsonrpc.js
var Primitive = "bigint,boolean,function,number,string,symbol".split(/,/g);
function deepCopy(value) {
  if (value == null || Primitive.indexOf(typeof value) >= 0) {
    return value;
  }
  if (typeof value.getAddress === "function") {
    return value;
  }
  if (Array.isArray(value)) {
    return value.map(deepCopy);
  }
  if (typeof value === "object") {
    return Object.keys(value).reduce((accum, key) => {
      accum[key] = value[key];
      return accum;
    }, {});
  }
  throw new Error(`should not happen: ${value} (${typeof value})`);
}
function stall(duration) {
  return new Promise((resolve) => {
    setTimeout(resolve, duration);
  });
}
function getLowerCase(value) {
  if (value) {
    return value.toLowerCase();
  }
  return value;
}
function isPollable(value) {
  return value && typeof value.pollingInterval === "number";
}
var defaultOptions2 = {
  polling: false,
  staticNetwork: null,
  batchStallTime: 10,
  batchMaxSize: 1 << 20,
  batchMaxCount: 100,
  cacheTimeout: 250,
  pollingInterval: 4e3
};
var JsonRpcSigner = class extends AbstractSigner {
  constructor(provider, address) {
    super(provider);
    __publicField(this, "address");
    address = getAddress(address);
    defineProperties(this, { address });
  }
  connect(provider) {
    assert(false, "cannot reconnect JsonRpcSigner", "UNSUPPORTED_OPERATION", {
      operation: "signer.connect"
    });
  }
  async getAddress() {
    return this.address;
  }
  // JSON-RPC will automatially fill in nonce, etc. so we just check from
  async populateTransaction(tx) {
    return await this.populateCall(tx);
  }
  // Returns just the hash of the transaction after sent, which is what
  // the bare JSON-RPC API does;
  async sendUncheckedTransaction(_tx) {
    const tx = deepCopy(_tx);
    const promises = [];
    if (tx.from) {
      const _from = tx.from;
      promises.push((async () => {
        const from = await resolveAddress(_from, this.provider);
        assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", _tx);
        tx.from = from;
      })());
    } else {
      tx.from = this.address;
    }
    if (tx.gasLimit == null) {
      promises.push((async () => {
        tx.gasLimit = await this.provider.estimateGas({ ...tx, from: this.address });
      })());
    }
    if (tx.to != null) {
      const _to2 = tx.to;
      promises.push((async () => {
        tx.to = await resolveAddress(_to2, this.provider);
      })());
    }
    if (promises.length) {
      await Promise.all(promises);
    }
    const hexTx = this.provider.getRpcTransaction(tx);
    return this.provider.send("eth_sendTransaction", [hexTx]);
  }
  async sendTransaction(tx) {
    const blockNumber = await this.provider.getBlockNumber();
    const hash2 = await this.sendUncheckedTransaction(tx);
    return await new Promise((resolve, reject) => {
      const timeouts = [1e3, 100];
      let invalids = 0;
      const checkTx = async () => {
        try {
          const tx2 = await this.provider.getTransaction(hash2);
          if (tx2 != null) {
            resolve(tx2.replaceableTransaction(blockNumber));
            return;
          }
        } catch (error) {
          if (isError(error, "CANCELLED") || isError(error, "BAD_DATA") || isError(error, "NETWORK_ERROR") || isError(error, "UNSUPPORTED_OPERATION")) {
            if (error.info == null) {
              error.info = {};
            }
            error.info.sendTransactionHash = hash2;
            reject(error);
            return;
          }
          if (isError(error, "INVALID_ARGUMENT")) {
            invalids++;
            if (error.info == null) {
              error.info = {};
            }
            error.info.sendTransactionHash = hash2;
            if (invalids > 10) {
              reject(error);
              return;
            }
          }
          this.provider.emit("error", makeError("failed to fetch transation after sending (will try again)", "UNKNOWN_ERROR", { error }));
        }
        this.provider._setTimeout(() => {
          checkTx();
        }, timeouts.pop() || 4e3);
      };
      checkTx();
    });
  }
  async signTransaction(_tx) {
    const tx = deepCopy(_tx);
    if (tx.from) {
      const from = await resolveAddress(tx.from, this.provider);
      assertArgument(from != null && from.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", _tx);
      tx.from = from;
    } else {
      tx.from = this.address;
    }
    const hexTx = this.provider.getRpcTransaction(tx);
    return await this.provider.send("eth_signTransaction", [hexTx]);
  }
  async signMessage(_message) {
    const message = typeof _message === "string" ? toUtf8Bytes(_message) : _message;
    return await this.provider.send("personal_sign", [
      hexlify(message),
      this.address.toLowerCase()
    ]);
  }
  async signTypedData(domain, types, _value2) {
    const value = deepCopy(_value2);
    const populated = await TypedDataEncoder.resolveNames(domain, types, value, async (value2) => {
      const address = await resolveAddress(value2);
      assertArgument(address != null, "TypedData does not support null address", "value", value2);
      return address;
    });
    return await this.provider.send("eth_signTypedData_v4", [
      this.address.toLowerCase(),
      JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))
    ]);
  }
  async unlock(password) {
    return this.provider.send("personal_unlockAccount", [
      this.address.toLowerCase(),
      password,
      null
    ]);
  }
  // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
  async _legacySignMessage(_message) {
    const message = typeof _message === "string" ? toUtf8Bytes(_message) : _message;
    return await this.provider.send("eth_sign", [
      this.address.toLowerCase(),
      hexlify(message)
    ]);
  }
};
var _options3, _nextId, _payloads, _drainTimer, _notReady, _network2, _pendingDetectNetwork, _JsonRpcApiProvider_instances, scheduleDrain_fn;
var JsonRpcApiProvider = class extends AbstractProvider {
  constructor(network, options) {
    super(network, options);
    __privateAdd(this, _JsonRpcApiProvider_instances);
    __privateAdd(this, _options3);
    // The next ID to use for the JSON-RPC ID field
    __privateAdd(this, _nextId);
    // Payloads are queued and triggered in batches using the drainTimer
    __privateAdd(this, _payloads);
    __privateAdd(this, _drainTimer);
    __privateAdd(this, _notReady);
    __privateAdd(this, _network2);
    __privateAdd(this, _pendingDetectNetwork);
    __privateSet(this, _nextId, 1);
    __privateSet(this, _options3, Object.assign({}, defaultOptions2, options || {}));
    __privateSet(this, _payloads, []);
    __privateSet(this, _drainTimer, null);
    __privateSet(this, _network2, null);
    __privateSet(this, _pendingDetectNetwork, null);
    {
      let resolve = null;
      const promise = new Promise((_resolve) => {
        resolve = _resolve;
      });
      __privateSet(this, _notReady, { promise, resolve });
    }
    const staticNetwork = this._getOption("staticNetwork");
    if (typeof staticNetwork === "boolean") {
      assertArgument(!staticNetwork || network !== "any", "staticNetwork cannot be used on special network 'any'", "options", options);
      if (staticNetwork && network != null) {
        __privateSet(this, _network2, Network.from(network));
      }
    } else if (staticNetwork) {
      assertArgument(network == null || staticNetwork.matches(network), "staticNetwork MUST match network object", "options", options);
      __privateSet(this, _network2, staticNetwork);
    }
  }
  /**
   *  Returns the value associated with the option %%key%%.
   *
   *  Sub-classes can use this to inquire about configuration options.
   */
  _getOption(key) {
    return __privateGet(this, _options3)[key];
  }
  /**
   *  Gets the [[Network]] this provider has committed to. On each call, the network
   *  is detected, and if it has changed, the call will reject.
   */
  get _network() {
    assert(__privateGet(this, _network2), "network is not available yet", "NETWORK_ERROR");
    return __privateGet(this, _network2);
  }
  /**
   *  Resolves to the non-normalized value by performing %%req%%.
   *
   *  Sub-classes may override this to modify behavior of actions,
   *  and should generally call ``super._perform`` as a fallback.
   */
  async _perform(req) {
    if (req.method === "call" || req.method === "estimateGas") {
      let tx = req.transaction;
      if (tx && tx.type != null && getBigInt(tx.type)) {
        if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
          const feeData = await this.getFeeData();
          if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
            req = Object.assign({}, req, {
              transaction: Object.assign({}, tx, { type: void 0 })
            });
          }
        }
      }
    }
    const request = this.getRpcRequest(req);
    if (request != null) {
      return await this.send(request.method, request.args);
    }
    return super._perform(req);
  }
  /**
   *  Sub-classes may override this; it detects the *actual* network that
   *  we are **currently** connected to.
   *
   *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the
   *  _send primitive must be used instead.
   */
  async _detectNetwork() {
    const network = this._getOption("staticNetwork");
    if (network) {
      if (network === true) {
        if (__privateGet(this, _network2)) {
          return __privateGet(this, _network2);
        }
      } else {
        return network;
      }
    }
    if (__privateGet(this, _pendingDetectNetwork)) {
      return await __privateGet(this, _pendingDetectNetwork);
    }
    if (this.ready) {
      __privateSet(this, _pendingDetectNetwork, (async () => {
        try {
          const result = Network.from(getBigInt(await this.send("eth_chainId", [])));
          __privateSet(this, _pendingDetectNetwork, null);
          return result;
        } catch (error) {
          __privateSet(this, _pendingDetectNetwork, null);
          throw error;
        }
      })());
      return await __privateGet(this, _pendingDetectNetwork);
    }
    __privateSet(this, _pendingDetectNetwork, (async () => {
      const payload = {
        id: __privateWrapper(this, _nextId)._++,
        method: "eth_chainId",
        params: [],
        jsonrpc: "2.0"
      };
      this.emit("debug", { action: "sendRpcPayload", payload });
      let result;
      try {
        result = (await this._send(payload))[0];
        __privateSet(this, _pendingDetectNetwork, null);
      } catch (error) {
        __privateSet(this, _pendingDetectNetwork, null);
        this.emit("debug", { action: "receiveRpcError", error });
        throw error;
      }
      this.emit("debug", { action: "receiveRpcResult", result });
      if ("result" in result) {
        return Network.from(getBigInt(result.result));
      }
      throw this.getRpcError(payload, result);
    })());
    return await __privateGet(this, _pendingDetectNetwork);
  }
  /**
   *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls
   *  will be passed to [[_send]] from [[send]]. If it is overridden, then
   *  ``super._start()`` **MUST** be called.
   *
   *  Calling it multiple times is safe and has no effect.
   */
  _start() {
    if (__privateGet(this, _notReady) == null || __privateGet(this, _notReady).resolve == null) {
      return;
    }
    __privateGet(this, _notReady).resolve();
    __privateSet(this, _notReady, null);
    (async () => {
      while (__privateGet(this, _network2) == null && !this.destroyed) {
        try {
          __privateSet(this, _network2, await this._detectNetwork());
        } catch (error) {
          if (this.destroyed) {
            break;
          }
          console.log("JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)");
          this.emit("error", makeError("failed to bootstrap network detection", "NETWORK_ERROR", { event: "initial-network-discovery", info: { error } }));
          await stall(1e3);
        }
      }
      __privateMethod(this, _JsonRpcApiProvider_instances, scheduleDrain_fn).call(this);
    })();
  }
  /**
   *  Resolves once the [[_start]] has been called. This can be used in
   *  sub-classes to defer sending data until the connection has been
   *  established.
   */
  async _waitUntilReady() {
    if (__privateGet(this, _notReady) == null) {
      return;
    }
    return await __privateGet(this, _notReady).promise;
  }
  /**
   *  Return a Subscriber that will manage the %%sub%%.
   *
   *  Sub-classes may override this to modify the behavior of
   *  subscription management.
   */
  _getSubscriber(sub) {
    if (sub.type === "pending") {
      return new FilterIdPendingSubscriber(this);
    }
    if (sub.type === "event") {
      if (this._getOption("polling")) {
        return new PollingEventSubscriber(this, sub.filter);
      }
      return new FilterIdEventSubscriber(this, sub.filter);
    }
    if (sub.type === "orphan" && sub.filter.orphan === "drop-log") {
      return new UnmanagedSubscriber("orphan");
    }
    return super._getSubscriber(sub);
  }
  /**
   *  Returns true only if the [[_start]] has been called.
   */
  get ready() {
    return __privateGet(this, _notReady) == null;
  }
  /**
   *  Returns %%tx%% as a normalized JSON-RPC transaction request,
   *  which has all values hexlified and any numeric values converted
   *  to Quantity values.
   */
  getRpcTransaction(tx) {
    const result = {};
    ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach((key) => {
      if (tx[key] == null) {
        return;
      }
      let dstKey = key;
      if (key === "gasLimit") {
        dstKey = "gas";
      }
      result[dstKey] = toQuantity(getBigInt(tx[key], `tx.${key}`));
    });
    ["from", "to", "data"].forEach((key) => {
      if (tx[key] == null) {
        return;
      }
      result[key] = hexlify(tx[key]);
    });
    if (tx.accessList) {
      result["accessList"] = accessListify(tx.accessList);
    }
    if (tx.blobVersionedHashes) {
      result["blobVersionedHashes"] = tx.blobVersionedHashes.map((h) => h.toLowerCase());
    }
    return result;
  }
  /**
   *  Returns the request method and arguments required to perform
   *  %%req%%.
   */
  getRpcRequest(req) {
    switch (req.method) {
      case "chainId":
        return { method: "eth_chainId", args: [] };
      case "getBlockNumber":
        return { method: "eth_blockNumber", args: [] };
      case "getGasPrice":
        return { method: "eth_gasPrice", args: [] };
      case "getPriorityFee":
        return { method: "eth_maxPriorityFeePerGas", args: [] };
      case "getBalance":
        return {
          method: "eth_getBalance",
          args: [getLowerCase(req.address), req.blockTag]
        };
      case "getTransactionCount":
        return {
          method: "eth_getTransactionCount",
          args: [getLowerCase(req.address), req.blockTag]
        };
      case "getCode":
        return {
          method: "eth_getCode",
          args: [getLowerCase(req.address), req.blockTag]
        };
      case "getStorage":
        return {
          method: "eth_getStorageAt",
          args: [
            getLowerCase(req.address),
            "0x" + req.position.toString(16),
            req.blockTag
          ]
        };
      case "broadcastTransaction":
        return {
          method: "eth_sendRawTransaction",
          args: [req.signedTransaction]
        };
      case "getBlock":
        if ("blockTag" in req) {
          return {
            method: "eth_getBlockByNumber",
            args: [req.blockTag, !!req.includeTransactions]
          };
        } else if ("blockHash" in req) {
          return {
            method: "eth_getBlockByHash",
            args: [req.blockHash, !!req.includeTransactions]
          };
        }
        break;
      case "getTransaction":
        return {
          method: "eth_getTransactionByHash",
          args: [req.hash]
        };
      case "getTransactionReceipt":
        return {
          method: "eth_getTransactionReceipt",
          args: [req.hash]
        };
      case "call":
        return {
          method: "eth_call",
          args: [this.getRpcTransaction(req.transaction), req.blockTag]
        };
      case "estimateGas": {
        return {
          method: "eth_estimateGas",
          args: [this.getRpcTransaction(req.transaction)]
        };
      }
      case "getLogs":
        if (req.filter && req.filter.address != null) {
          if (Array.isArray(req.filter.address)) {
            req.filter.address = req.filter.address.map(getLowerCase);
          } else {
            req.filter.address = getLowerCase(req.filter.address);
          }
        }
        return { method: "eth_getLogs", args: [req.filter] };
    }
    return null;
  }
  /**
   *  Returns an ethers-style Error for the given JSON-RPC error
   *  %%payload%%, coalescing the various strings and error shapes
   *  that different nodes return, coercing them into a machine-readable
   *  standardized error.
   */
  getRpcError(payload, _error2) {
    const { method } = payload;
    const { error } = _error2;
    if (method === "eth_estimateGas" && error.message) {
      const msg = error.message;
      if (!msg.match(/revert/i) && msg.match(/insufficient funds/i)) {
        return makeError("insufficient funds", "INSUFFICIENT_FUNDS", {
          transaction: payload.params[0],
          info: { payload, error }
        });
      }
    }
    if (method === "eth_call" || method === "eth_estimateGas") {
      const result = spelunkData(error);
      const e = AbiCoder.getBuiltinCallException(method === "eth_call" ? "call" : "estimateGas", payload.params[0], result ? result.data : null);
      e.info = { error, payload };
      return e;
    }
    const message = JSON.stringify(spelunkMessage(error));
    if (typeof error.message === "string" && error.message.match(/user denied|ethers-user-denied/i)) {
      const actionMap = {
        eth_sign: "signMessage",
        personal_sign: "signMessage",
        eth_signTypedData_v4: "signTypedData",
        eth_signTransaction: "signTransaction",
        eth_sendTransaction: "sendTransaction",
        eth_requestAccounts: "requestAccess",
        wallet_requestAccounts: "requestAccess"
      };
      return makeError(`user rejected action`, "ACTION_REJECTED", {
        action: actionMap[method] || "unknown",
        reason: "rejected",
        info: { payload, error }
      });
    }
    if (method === "eth_sendRawTransaction" || method === "eth_sendTransaction") {
      const transaction = payload.params[0];
      if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {
        return makeError("insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
          transaction,
          info: { error }
        });
      }
      if (message.match(/nonce/i) && message.match(/too low/i)) {
        return makeError("nonce has already been used", "NONCE_EXPIRED", { transaction, info: { error } });
      }
      if (message.match(/replacement transaction/i) && message.match(/underpriced/i)) {
        return makeError("replacement fee too low", "REPLACEMENT_UNDERPRICED", { transaction, info: { error } });
      }
      if (message.match(/only replay-protected/i)) {
        return makeError("legacy pre-eip-155 transactions not supported", "UNSUPPORTED_OPERATION", {
          operation: method,
          info: { transaction, info: { error } }
        });
      }
    }
    let unsupported = !!message.match(/the method .* does not exist/i);
    if (!unsupported) {
      if (error && error.details && error.details.startsWith("Unauthorized method:")) {
        unsupported = true;
      }
    }
    if (unsupported) {
      return makeError("unsupported operation", "UNSUPPORTED_OPERATION", {
        operation: payload.method,
        info: { error, payload }
      });
    }
    return makeError("could not coalesce error", "UNKNOWN_ERROR", { error, payload });
  }
  /**
   *  Requests the %%method%% with %%params%% via the JSON-RPC protocol
   *  over the underlying channel. This can be used to call methods
   *  on the backend that do not have a high-level API within the Provider
   *  API.
   *
   *  This method queues requests according to the batch constraints
   *  in the options, assigns the request a unique ID.
   *
   *  **Do NOT override** this method in sub-classes; instead
   *  override [[_send]] or force the options values in the
   *  call to the constructor to modify this method's behavior.
   */
  send(method, params) {
    if (this.destroyed) {
      return Promise.reject(makeError("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: method }));
    }
    const id2 = __privateWrapper(this, _nextId)._++;
    const promise = new Promise((resolve, reject) => {
      __privateGet(this, _payloads).push({
        resolve,
        reject,
        payload: { method, params, id: id2, jsonrpc: "2.0" }
      });
    });
    __privateMethod(this, _JsonRpcApiProvider_instances, scheduleDrain_fn).call(this);
    return promise;
  }
  /**
   *  Resolves to the [[Signer]] account for  %%address%% managed by
   *  the client.
   *
   *  If the %%address%% is a number, it is used as an index in the
   *  the accounts from [[listAccounts]].
   *
   *  This can only be used on clients which manage accounts (such as
   *  Geth with imported account or MetaMask).
   *
   *  Throws if the account doesn't exist.
   */
  async getSigner(address) {
    if (address == null) {
      address = 0;
    }
    const accountsPromise = this.send("eth_accounts", []);
    if (typeof address === "number") {
      const accounts2 = await accountsPromise;
      if (address >= accounts2.length) {
        throw new Error("no such account");
      }
      return new JsonRpcSigner(this, accounts2[address]);
    }
    const { accounts } = await resolveProperties({
      network: this.getNetwork(),
      accounts: accountsPromise
    });
    address = getAddress(address);
    for (const account of accounts) {
      if (getAddress(account) === address) {
        return new JsonRpcSigner(this, address);
      }
    }
    throw new Error("invalid account");
  }
  async listAccounts() {
    const accounts = await this.send("eth_accounts", []);
    return accounts.map((a) => new JsonRpcSigner(this, a));
  }
  destroy() {
    if (__privateGet(this, _drainTimer)) {
      clearTimeout(__privateGet(this, _drainTimer));
      __privateSet(this, _drainTimer, null);
    }
    for (const { payload, reject } of __privateGet(this, _payloads)) {
      reject(makeError("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: payload.method }));
    }
    __privateSet(this, _payloads, []);
    super.destroy();
  }
};
_options3 = new WeakMap();
_nextId = new WeakMap();
_payloads = new WeakMap();
_drainTimer = new WeakMap();
_notReady = new WeakMap();
_network2 = new WeakMap();
_pendingDetectNetwork = new WeakMap();
_JsonRpcApiProvider_instances = new WeakSet();
scheduleDrain_fn = function() {
  if (__privateGet(this, _drainTimer)) {
    return;
  }
  const stallTime = this._getOption("batchMaxCount") === 1 ? 0 : this._getOption("batchStallTime");
  __privateSet(this, _drainTimer, setTimeout(() => {
    __privateSet(this, _drainTimer, null);
    const payloads = __privateGet(this, _payloads);
    __privateSet(this, _payloads, []);
    while (payloads.length) {
      const batch = [payloads.shift()];
      while (payloads.length) {
        if (batch.length === __privateGet(this, _options3).batchMaxCount) {
          break;
        }
        batch.push(payloads.shift());
        const bytes2 = JSON.stringify(batch.map((p) => p.payload));
        if (bytes2.length > __privateGet(this, _options3).batchMaxSize) {
          payloads.unshift(batch.pop());
          break;
        }
      }
      (async () => {
        const payload = batch.length === 1 ? batch[0].payload : batch.map((p) => p.payload);
        this.emit("debug", { action: "sendRpcPayload", payload });
        try {
          const result = await this._send(payload);
          this.emit("debug", { action: "receiveRpcResult", result });
          for (const { resolve, reject, payload: payload2 } of batch) {
            if (this.destroyed) {
              reject(makeError("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: payload2.method }));
              continue;
            }
            const resp = result.filter((r) => r.id === payload2.id)[0];
            if (resp == null) {
              const error = makeError("missing response for request", "BAD_DATA", {
                value: result,
                info: { payload: payload2 }
              });
              this.emit("error", error);
              reject(error);
              continue;
            }
            if ("error" in resp) {
              reject(this.getRpcError(payload2, resp));
              continue;
            }
            resolve(resp.result);
          }
        } catch (error) {
          this.emit("debug", { action: "receiveRpcError", error });
          for (const { reject } of batch) {
            reject(error);
          }
        }
      })();
    }
  }, stallTime));
};
var _pollingInterval;
var JsonRpcApiPollingProvider = class extends JsonRpcApiProvider {
  constructor(network, options) {
    super(network, options);
    __privateAdd(this, _pollingInterval);
    let pollingInterval = this._getOption("pollingInterval");
    if (pollingInterval == null) {
      pollingInterval = defaultOptions2.pollingInterval;
    }
    __privateSet(this, _pollingInterval, pollingInterval);
  }
  _getSubscriber(sub) {
    const subscriber = super._getSubscriber(sub);
    if (isPollable(subscriber)) {
      subscriber.pollingInterval = __privateGet(this, _pollingInterval);
    }
    return subscriber;
  }
  /**
   *  The polling interval (default: 4000 ms)
   */
  get pollingInterval() {
    return __privateGet(this, _pollingInterval);
  }
  set pollingInterval(value) {
    if (!Number.isInteger(value) || value < 0) {
      throw new Error("invalid interval");
    }
    __privateSet(this, _pollingInterval, value);
    this._forEachSubscriber((sub) => {
      if (isPollable(sub)) {
        sub.pollingInterval = __privateGet(this, _pollingInterval);
      }
    });
  }
};
_pollingInterval = new WeakMap();
var _connect;
var JsonRpcProvider = class extends JsonRpcApiPollingProvider {
  constructor(url, network, options) {
    if (url == null) {
      url = "http://localhost:8545";
    }
    super(network, options);
    __privateAdd(this, _connect);
    if (typeof url === "string") {
      __privateSet(this, _connect, new FetchRequest(url));
    } else {
      __privateSet(this, _connect, url.clone());
    }
  }
  _getConnection() {
    return __privateGet(this, _connect).clone();
  }
  async send(method, params) {
    await this._start();
    return await super.send(method, params);
  }
  async _send(payload) {
    const request = this._getConnection();
    request.body = JSON.stringify(payload);
    request.setHeader("content-type", "application/json");
    const response = await request.send();
    response.assertOk();
    let resp = response.bodyJson;
    if (!Array.isArray(resp)) {
      resp = [resp];
    }
    return resp;
  }
};
_connect = new WeakMap();
function spelunkData(value) {
  if (value == null) {
    return null;
  }
  if (typeof value.message === "string" && value.message.match(/revert/i) && isHexString(value.data)) {
    return { message: value.message, data: value.data };
  }
  if (typeof value === "object") {
    for (const key in value) {
      const result = spelunkData(value[key]);
      if (result) {
        return result;
      }
    }
    return null;
  }
  if (typeof value === "string") {
    try {
      return spelunkData(JSON.parse(value));
    } catch (error) {
    }
  }
  return null;
}
function _spelunkMessage(value, result) {
  if (value == null) {
    return;
  }
  if (typeof value.message === "string") {
    result.push(value.message);
  }
  if (typeof value === "object") {
    for (const key in value) {
      _spelunkMessage(value[key], result);
    }
  }
  if (typeof value === "string") {
    try {
      return _spelunkMessage(JSON.parse(value), result);
    } catch (error) {
    }
  }
}
function spelunkMessage(value) {
  const result = [];
  _spelunkMessage(value, result);
  return result;
}

// node_modules/ethers/lib.esm/providers/provider-ankr.js
var defaultApiKey = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";
function getHost(name) {
  switch (name) {
    case "mainnet":
      return "rpc.ankr.com/eth";
    case "goerli":
      return "rpc.ankr.com/eth_goerli";
    case "sepolia":
      return "rpc.ankr.com/eth_sepolia";
    case "arbitrum":
      return "rpc.ankr.com/arbitrum";
    case "base":
      return "rpc.ankr.com/base";
    case "base-goerli":
      return "rpc.ankr.com/base_goerli";
    case "base-sepolia":
      return "rpc.ankr.com/base_sepolia";
    case "bnb":
      return "rpc.ankr.com/bsc";
    case "bnbt":
      return "rpc.ankr.com/bsc_testnet_chapel";
    case "matic":
      return "rpc.ankr.com/polygon";
    case "matic-mumbai":
      return "rpc.ankr.com/polygon_mumbai";
    case "optimism":
      return "rpc.ankr.com/optimism";
    case "optimism-goerli":
      return "rpc.ankr.com/optimism_testnet";
    case "optimism-sepolia":
      return "rpc.ankr.com/optimism_sepolia";
  }
  assertArgument(false, "unsupported network", "network", name);
}
var AnkrProvider = class _AnkrProvider extends JsonRpcProvider {
  /**
   *  Create a new **AnkrProvider**.
   *
   *  By default connecting to ``mainnet`` with a highly throttled
   *  API key.
   */
  constructor(_network3, apiKey) {
    if (_network3 == null) {
      _network3 = "mainnet";
    }
    const network = Network.from(_network3);
    if (apiKey == null) {
      apiKey = defaultApiKey;
    }
    const options = { polling: true, staticNetwork: network };
    const request = _AnkrProvider.getRequest(network, apiKey);
    super(request, network, options);
    /**
     *  The API key for the Ankr connection.
     */
    __publicField(this, "apiKey");
    defineProperties(this, { apiKey });
  }
  _getProvider(chainId) {
    try {
      return new _AnkrProvider(chainId, this.apiKey);
    } catch (error) {
    }
    return super._getProvider(chainId);
  }
  /**
   *  Returns a prepared request for connecting to %%network%% with
   *  %%apiKey%%.
   */
  static getRequest(network, apiKey) {
    if (apiKey == null) {
      apiKey = defaultApiKey;
    }
    const request = new FetchRequest(`https://${getHost(network.name)}/${apiKey}`);
    request.allowGzip = true;
    if (apiKey === defaultApiKey) {
      request.retryFunc = async (request2, response, attempt) => {
        showThrottleMessage("AnkrProvider");
        return true;
      };
    }
    return request;
  }
  getRpcError(payload, error) {
    if (payload.method === "eth_sendRawTransaction") {
      if (error && error.error && error.error.message === "INTERNAL_ERROR: could not replace existing tx") {
        error.error.message = "replacement transaction underpriced";
      }
    }
    return super.getRpcError(payload, error);
  }
  isCommunityResource() {
    return this.apiKey === defaultApiKey;
  }
};

// node_modules/ethers/lib.esm/providers/provider-alchemy.js
var defaultApiKey2 = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
function getHost2(name) {
  switch (name) {
    case "mainnet":
      return "eth-mainnet.alchemyapi.io";
    case "goerli":
      return "eth-goerli.g.alchemy.com";
    case "sepolia":
      return "eth-sepolia.g.alchemy.com";
    case "arbitrum":
      return "arb-mainnet.g.alchemy.com";
    case "arbitrum-goerli":
      return "arb-goerli.g.alchemy.com";
    case "arbitrum-sepolia":
      return "arb-sepolia.g.alchemy.com";
    case "base":
      return "base-mainnet.g.alchemy.com";
    case "base-goerli":
      return "base-goerli.g.alchemy.com";
    case "base-sepolia":
      return "base-sepolia.g.alchemy.com";
    case "matic":
      return "polygon-mainnet.g.alchemy.com";
    case "matic-amoy":
      return "polygon-amoy.g.alchemy.com";
    case "matic-mumbai":
      return "polygon-mumbai.g.alchemy.com";
    case "optimism":
      return "opt-mainnet.g.alchemy.com";
    case "optimism-goerli":
      return "opt-goerli.g.alchemy.com";
    case "optimism-sepolia":
      return "opt-sepolia.g.alchemy.com";
  }
  assertArgument(false, "unsupported network", "network", name);
}
var AlchemyProvider = class _AlchemyProvider extends JsonRpcProvider {
  constructor(_network3, apiKey) {
    if (_network3 == null) {
      _network3 = "mainnet";
    }
    const network = Network.from(_network3);
    if (apiKey == null) {
      apiKey = defaultApiKey2;
    }
    const request = _AlchemyProvider.getRequest(network, apiKey);
    super(request, network, { staticNetwork: network });
    __publicField(this, "apiKey");
    defineProperties(this, { apiKey });
  }
  _getProvider(chainId) {
    try {
      return new _AlchemyProvider(chainId, this.apiKey);
    } catch (error) {
    }
    return super._getProvider(chainId);
  }
  async _perform(req) {
    if (req.method === "getTransactionResult") {
      const { trace, tx } = await resolveProperties({
        trace: this.send("trace_transaction", [req.hash]),
        tx: this.getTransaction(req.hash)
      });
      if (trace == null || tx == null) {
        return null;
      }
      let data;
      let error = false;
      try {
        data = trace[0].result.output;
        error = trace[0].error === "Reverted";
      } catch (error2) {
      }
      if (data) {
        assert(!error, "an error occurred during transaction executions", "CALL_EXCEPTION", {
          action: "getTransactionResult",
          data,
          reason: null,
          transaction: tx,
          invocation: null,
          revert: null
          // @TODO
        });
        return data;
      }
      assert(false, "could not parse trace result", "BAD_DATA", { value: trace });
    }
    return await super._perform(req);
  }
  isCommunityResource() {
    return this.apiKey === defaultApiKey2;
  }
  static getRequest(network, apiKey) {
    if (apiKey == null) {
      apiKey = defaultApiKey2;
    }
    const request = new FetchRequest(`https://${getHost2(network.name)}/v2/${apiKey}`);
    request.allowGzip = true;
    if (apiKey === defaultApiKey2) {
      request.retryFunc = async (request2, response, attempt) => {
        showThrottleMessage("alchemy");
        return true;
      };
    }
    return request;
  }
};

// node_modules/ethers/lib.esm/providers/provider-chainstack.js
function getApiKey(name) {
  switch (name) {
    case "mainnet":
      return "39f1d67cedf8b7831010a665328c9197";
    case "arbitrum":
      return "0550c209db33c3abf4cc927e1e18cea1";
    case "bnb":
      return "98b5a77e531614387366f6fc5da097f8";
    case "matic":
      return "cd9d4d70377471aa7c142ec4a4205249";
  }
  assertArgument(false, "unsupported network", "network", name);
}
function getHost3(name) {
  switch (name) {
    case "mainnet":
      return "ethereum-mainnet.core.chainstack.com";
    case "arbitrum":
      return "arbitrum-mainnet.core.chainstack.com";
    case "bnb":
      return "bsc-mainnet.core.chainstack.com";
    case "matic":
      return "polygon-mainnet.core.chainstack.com";
  }
  assertArgument(false, "unsupported network", "network", name);
}
var ChainstackProvider = class _ChainstackProvider extends JsonRpcProvider {
  /**
   *  Creates a new **ChainstackProvider**.
   */
  constructor(_network3, apiKey) {
    if (_network3 == null) {
      _network3 = "mainnet";
    }
    const network = Network.from(_network3);
    if (apiKey == null) {
      apiKey = getApiKey(network.name);
    }
    const request = _ChainstackProvider.getRequest(network, apiKey);
    super(request, network, { staticNetwork: network });
    /**
     *  The API key for the Chainstack connection.
     */
    __publicField(this, "apiKey");
    defineProperties(this, { apiKey });
  }
  _getProvider(chainId) {
    try {
      return new _ChainstackProvider(chainId, this.apiKey);
    } catch (error) {
    }
    return super._getProvider(chainId);
  }
  isCommunityResource() {
    return this.apiKey === getApiKey(this._network.name);
  }
  /**
   *  Returns a prepared request for connecting to %%network%%
   *  with %%apiKey%% and %%projectSecret%%.
   */
  static getRequest(network, apiKey) {
    if (apiKey == null) {
      apiKey = getApiKey(network.name);
    }
    const request = new FetchRequest(`https://${getHost3(network.name)}/${apiKey}`);
    request.allowGzip = true;
    if (apiKey === getApiKey(network.name)) {
      request.retryFunc = async (request2, response, attempt) => {
        showThrottleMessage("ChainstackProvider");
        return true;
      };
    }
    return request;
  }
};

// node_modules/ethers/lib.esm/providers/provider-cloudflare.js
var CloudflareProvider = class extends JsonRpcProvider {
  constructor(_network3) {
    if (_network3 == null) {
      _network3 = "mainnet";
    }
    const network = Network.from(_network3);
    assertArgument(network.name === "mainnet", "unsupported network", "network", _network3);
    super("https://cloudflare-eth.com/", network, { staticNetwork: network });
  }
};

// node_modules/ethers/lib.esm/providers/provider-etherscan.js
var THROTTLE = 2e3;
function isPromise2(value) {
  return value && typeof value.then === "function";
}
var EtherscanPluginId = "org.ethers.plugins.provider.Etherscan";
var EtherscanPlugin = class _EtherscanPlugin extends NetworkPlugin {
  /**
   *  Creates a new **EtherscanProvider** which will use
   *  %%baseUrl%%.
   */
  constructor(baseUrl) {
    super(EtherscanPluginId);
    /**
     *  The Etherscan API base URL.
     */
    __publicField(this, "baseUrl");
    defineProperties(this, { baseUrl });
  }
  clone() {
    return new _EtherscanPlugin(this.baseUrl);
  }
};
var skipKeys = ["enableCcipRead"];
var nextId = 1;
var _plugin;
var EtherscanProvider = class extends AbstractProvider {
  /**
   *  Creates a new **EtherscanBaseProvider**.
   */
  constructor(_network3, _apiKey) {
    const apiKey = _apiKey != null ? _apiKey : null;
    super();
    /**
     *  The connected network.
     */
    __publicField(this, "network");
    /**
     *  The API key or null if using the community provided bandwidth.
     */
    __publicField(this, "apiKey");
    __privateAdd(this, _plugin);
    const network = Network.from(_network3);
    __privateSet(this, _plugin, network.getPlugin(EtherscanPluginId));
    defineProperties(this, { apiKey, network });
    this.getBaseUrl();
  }
  /**
   *  Returns the base URL.
   *
   *  If an [[EtherscanPlugin]] is configured on the
   *  [[EtherscanBaseProvider_network]], returns the plugin's
   *  baseUrl.
   */
  getBaseUrl() {
    if (__privateGet(this, _plugin)) {
      return __privateGet(this, _plugin).baseUrl;
    }
    switch (this.network.name) {
      case "mainnet":
        return "https://api.etherscan.io";
      case "goerli":
        return "https://api-goerli.etherscan.io";
      case "sepolia":
        return "https://api-sepolia.etherscan.io";
      case "holesky":
        return "https://api-holesky.etherscan.io";
      case "arbitrum":
        return "https://api.arbiscan.io";
      case "arbitrum-goerli":
        return "https://api-goerli.arbiscan.io";
      case "base":
        return "https://api.basescan.org";
      case "base-sepolia":
        return "https://api-sepolia.basescan.org";
      case "bnb":
        return "https://api.bscscan.com";
      case "bnbt":
        return "https://api-testnet.bscscan.com";
      case "matic":
        return "https://api.polygonscan.com";
      case "matic-amoy":
        return "https://api-amoy.polygonscan.com";
      case "matic-mumbai":
        return "https://api-testnet.polygonscan.com";
      case "optimism":
        return "https://api-optimistic.etherscan.io";
      case "optimism-goerli":
        return "https://api-goerli-optimistic.etherscan.io";
      default:
    }
    assertArgument(false, "unsupported network", "network", this.network);
  }
  /**
   *  Returns the URL for the %%module%% and %%params%%.
   */
  getUrl(module, params) {
    const query = Object.keys(params).reduce((accum, key) => {
      const value = params[key];
      if (value != null) {
        accum += `&${key}=${value}`;
      }
      return accum;
    }, "");
    const apiKey = this.apiKey ? `&apikey=${this.apiKey}` : "";
    return `${this.getBaseUrl()}/api?module=${module}${query}${apiKey}`;
  }
  /**
   *  Returns the URL for using POST requests.
   */
  getPostUrl() {
    return `${this.getBaseUrl()}/api`;
  }
  /**
   *  Returns the parameters for using POST requests.
   */
  getPostData(module, params) {
    params.module = module;
    params.apikey = this.apiKey;
    return params;
  }
  async detectNetwork() {
    return this.network;
  }
  /**
   *  Resolves to the result of calling %%module%% with %%params%%.
   *
   *  If %%post%%, the request is made as a POST request.
   */
  async fetch(module, params, post) {
    const id2 = nextId++;
    const url = post ? this.getPostUrl() : this.getUrl(module, params);
    const payload = post ? this.getPostData(module, params) : null;
    this.emit("debug", { action: "sendRequest", id: id2, url, payload });
    const request = new FetchRequest(url);
    request.setThrottleParams({ slotInterval: 1e3 });
    request.retryFunc = (req, resp, attempt) => {
      if (this.isCommunityResource()) {
        showThrottleMessage("Etherscan");
      }
      return Promise.resolve(true);
    };
    request.processFunc = async (request2, response2) => {
      const result2 = response2.hasBody() ? JSON.parse(toUtf8String(response2.body)) : {};
      const throttle = (typeof result2.result === "string" ? result2.result : "").toLowerCase().indexOf("rate limit") >= 0;
      if (module === "proxy") {
        if (result2 && result2.status == 0 && result2.message == "NOTOK" && throttle) {
          this.emit("debug", { action: "receiveError", id: id2, reason: "proxy-NOTOK", error: result2 });
          response2.throwThrottleError(result2.result, THROTTLE);
        }
      } else {
        if (throttle) {
          this.emit("debug", { action: "receiveError", id: id2, reason: "null result", error: result2.result });
          response2.throwThrottleError(result2.result, THROTTLE);
        }
      }
      return response2;
    };
    if (payload) {
      request.setHeader("content-type", "application/x-www-form-urlencoded; charset=UTF-8");
      request.body = Object.keys(payload).map((k) => `${k}=${payload[k]}`).join("&");
    }
    const response = await request.send();
    try {
      response.assertOk();
    } catch (error) {
      this.emit("debug", { action: "receiveError", id: id2, error, reason: "assertOk" });
      assert(false, "response error", "SERVER_ERROR", { request, response });
    }
    if (!response.hasBody()) {
      this.emit("debug", { action: "receiveError", id: id2, error: "missing body", reason: "null body" });
      assert(false, "missing response", "SERVER_ERROR", { request, response });
    }
    const result = JSON.parse(toUtf8String(response.body));
    if (module === "proxy") {
      if (result.jsonrpc != "2.0") {
        this.emit("debug", { action: "receiveError", id: id2, result, reason: "invalid JSON-RPC" });
        assert(false, "invalid JSON-RPC response (missing jsonrpc='2.0')", "SERVER_ERROR", { request, response, info: { result } });
      }
      if (result.error) {
        this.emit("debug", { action: "receiveError", id: id2, result, reason: "JSON-RPC error" });
        assert(false, "error response", "SERVER_ERROR", { request, response, info: { result } });
      }
      this.emit("debug", { action: "receiveRequest", id: id2, result });
      return result.result;
    } else {
      if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
        this.emit("debug", { action: "receiveRequest", id: id2, result });
        return result.result;
      }
      if (result.status != 1 || typeof result.message === "string" && !result.message.match(/^OK/)) {
        this.emit("debug", { action: "receiveError", id: id2, result });
        assert(false, "error response", "SERVER_ERROR", { request, response, info: { result } });
      }
      this.emit("debug", { action: "receiveRequest", id: id2, result });
      return result.result;
    }
  }
  /**
   *  Returns %%transaction%% normalized for the Etherscan API.
   */
  _getTransactionPostData(transaction) {
    const result = {};
    for (let key in transaction) {
      if (skipKeys.indexOf(key) >= 0) {
        continue;
      }
      if (transaction[key] == null) {
        continue;
      }
      let value = transaction[key];
      if (key === "type" && value === 0) {
        continue;
      }
      if (key === "blockTag" && value === "latest") {
        continue;
      }
      if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {
        value = toQuantity(value);
      } else if (key === "accessList") {
        value = "[" + accessListify(value).map((set) => {
          return `{address:"${set.address}",storageKeys:["${set.storageKeys.join('","')}"]}`;
        }).join(",") + "]";
      } else if (key === "blobVersionedHashes") {
        if (value.length === 0) {
          continue;
        }
        assert(false, "Etherscan API does not support blobVersionedHashes", "UNSUPPORTED_OPERATION", {
          operation: "_getTransactionPostData",
          info: { transaction }
        });
      } else {
        value = hexlify(value);
      }
      result[key] = value;
    }
    return result;
  }
  /**
   *  Throws the normalized Etherscan error.
   */
  _checkError(req, error, transaction) {
    let message = "";
    if (isError(error, "SERVER_ERROR")) {
      try {
        message = error.info.result.error.message;
      } catch (e) {
      }
      if (!message) {
        try {
          message = error.info.message;
        } catch (e) {
        }
      }
    }
    if (req.method === "estimateGas") {
      if (!message.match(/revert/i) && message.match(/insufficient funds/i)) {
        assert(false, "insufficient funds", "INSUFFICIENT_FUNDS", {
          transaction: req.transaction
        });
      }
    }
    if (req.method === "call" || req.method === "estimateGas") {
      if (message.match(/execution reverted/i)) {
        let data = "";
        try {
          data = error.info.result.error.data;
        } catch (error2) {
        }
        const e = AbiCoder.getBuiltinCallException(req.method, req.transaction, data);
        e.info = { request: req, error };
        throw e;
      }
    }
    if (message) {
      if (req.method === "broadcastTransaction") {
        const transaction2 = Transaction.from(req.signedTransaction);
        if (message.match(/replacement/i) && message.match(/underpriced/i)) {
          assert(false, "replacement fee too low", "REPLACEMENT_UNDERPRICED", {
            transaction: transaction2
          });
        }
        if (message.match(/insufficient funds/)) {
          assert(false, "insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
            transaction: transaction2
          });
        }
        if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
          assert(false, "nonce has already been used", "NONCE_EXPIRED", {
            transaction: transaction2
          });
        }
      }
    }
    throw error;
  }
  async _detectNetwork() {
    return this.network;
  }
  async _perform(req) {
    switch (req.method) {
      case "chainId":
        return this.network.chainId;
      case "getBlockNumber":
        return this.fetch("proxy", { action: "eth_blockNumber" });
      case "getGasPrice":
        return this.fetch("proxy", { action: "eth_gasPrice" });
      case "getPriorityFee":
        if (this.network.name === "mainnet") {
          return "1000000000";
        } else if (this.network.name === "optimism") {
          return "1000000";
        } else {
          throw new Error("fallback onto the AbstractProvider default");
        }
      /* Working with Etherscan to get this added:
      try {
          const test = await this.fetch("proxy", {
              action: "eth_maxPriorityFeePerGas"
          });
          console.log(test);
          return test;
      } catch (e) {
          console.log("DEBUG", e);
          throw e;
      }
      */
      /* This might be safe; but due to rounding neither myself
         or Etherscan are necessarily comfortable with this. :)
      try {
          const result = await this.fetch("gastracker", { action: "gasoracle" });
          console.log(result);
          const gasPrice = parseUnits(result.SafeGasPrice, "gwei");
          const baseFee = parseUnits(result.suggestBaseFee, "gwei");
          const priorityFee = gasPrice - baseFee;
          if (priorityFee < 0) { throw new Error("negative priority fee; defer to abstract provider default"); }
          return priorityFee;
      } catch (error) {
          console.log("DEBUG", error);
          throw error;
      }
      */
      case "getBalance":
        return this.fetch("account", {
          action: "balance",
          address: req.address,
          tag: req.blockTag
        });
      case "getTransactionCount":
        return this.fetch("proxy", {
          action: "eth_getTransactionCount",
          address: req.address,
          tag: req.blockTag
        });
      case "getCode":
        return this.fetch("proxy", {
          action: "eth_getCode",
          address: req.address,
          tag: req.blockTag
        });
      case "getStorage":
        return this.fetch("proxy", {
          action: "eth_getStorageAt",
          address: req.address,
          position: req.position,
          tag: req.blockTag
        });
      case "broadcastTransaction":
        return this.fetch("proxy", {
          action: "eth_sendRawTransaction",
          hex: req.signedTransaction
        }, true).catch((error) => {
          return this._checkError(req, error, req.signedTransaction);
        });
      case "getBlock":
        if ("blockTag" in req) {
          return this.fetch("proxy", {
            action: "eth_getBlockByNumber",
            tag: req.blockTag,
            boolean: req.includeTransactions ? "true" : "false"
          });
        }
        assert(false, "getBlock by blockHash not supported by Etherscan", "UNSUPPORTED_OPERATION", {
          operation: "getBlock(blockHash)"
        });
      case "getTransaction":
        return this.fetch("proxy", {
          action: "eth_getTransactionByHash",
          txhash: req.hash
        });
      case "getTransactionReceipt":
        return this.fetch("proxy", {
          action: "eth_getTransactionReceipt",
          txhash: req.hash
        });
      case "call": {
        if (req.blockTag !== "latest") {
          throw new Error("EtherscanProvider does not support blockTag for call");
        }
        const postData = this._getTransactionPostData(req.transaction);
        postData.module = "proxy";
        postData.action = "eth_call";
        try {
          return await this.fetch("proxy", postData, true);
        } catch (error) {
          return this._checkError(req, error, req.transaction);
        }
      }
      case "estimateGas": {
        const postData = this._getTransactionPostData(req.transaction);
        postData.module = "proxy";
        postData.action = "eth_estimateGas";
        try {
          return await this.fetch("proxy", postData, true);
        } catch (error) {
          return this._checkError(req, error, req.transaction);
        }
      }
      /*
                  case "getLogs": {
                      // Needs to complain if more than one address is passed in
                      const args: Record<string, any> = { action: "getLogs" }
      
                      if (params.filter.fromBlock) {
                          args.fromBlock = checkLogTag(params.filter.fromBlock);
                      }
      
                      if (params.filter.toBlock) {
                          args.toBlock = checkLogTag(params.filter.toBlock);
                      }
      
                      if (params.filter.address) {
                          args.address = params.filter.address;
                      }
      
                      // @TODO: We can handle slightly more complicated logs using the logs API
                      if (params.filter.topics && params.filter.topics.length > 0) {
                          if (params.filter.topics.length > 1) {
                              logger.throwError("unsupported topic count", Logger.Errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });
                          }
                          if (params.filter.topics.length === 1) {
                              const topic0 = params.filter.topics[0];
                              if (typeof(topic0) !== "string" || topic0.length !== 66) {
                                  logger.throwError("unsupported topic format", Logger.Errors.UNSUPPORTED_OPERATION, { topic0: topic0 });
                              }
                              args.topic0 = topic0;
                          }
                      }
      
                      const logs: Array<any> = await this.fetch("logs", args);
      
                      // Cache txHash => blockHash
                      let blocks: { [tag: string]: string } = {};
      
                      // Add any missing blockHash to the logs
                      for (let i = 0; i < logs.length; i++) {
                          const log = logs[i];
                          if (log.blockHash != null) { continue; }
                          if (blocks[log.blockNumber] == null) {
                              const block = await this.getBlock(log.blockNumber);
                              if (block) {
                                  blocks[log.blockNumber] = block.hash;
                              }
                          }
      
                          log.blockHash = blocks[log.blockNumber];
                      }
      
                      return logs;
                  }
      */
      default:
        break;
    }
    return super._perform(req);
  }
  async getNetwork() {
    return this.network;
  }
  /**
   *  Resolves to the current price of ether.
   *
   *  This returns ``0`` on any network other than ``mainnet``.
   */
  async getEtherPrice() {
    if (this.network.name !== "mainnet") {
      return 0;
    }
    return parseFloat((await this.fetch("stats", { action: "ethprice" })).ethusd);
  }
  /**
   *  Resolves to a [Contract]] for %%address%%, using the
   *  Etherscan API to retreive the Contract ABI.
   */
  async getContract(_address) {
    let address = this._getAddress(_address);
    if (isPromise2(address)) {
      address = await address;
    }
    try {
      const resp = await this.fetch("contract", {
        action: "getabi",
        address
      });
      const abi = JSON.parse(resp);
      return new Contract(address, abi, this);
    } catch (error) {
      return null;
    }
  }
  isCommunityResource() {
    return this.apiKey == null;
  }
};
_plugin = new WeakMap();

// node_modules/ethers/lib.esm/providers/ws-browser.js
function getGlobal2() {
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw new Error("unable to locate global object");
}
var _WebSocket = getGlobal2().WebSocket;

// node_modules/ethers/lib.esm/providers/provider-socket.js
var _provider5, _filter4, _filterId, _paused, _emitPromise;
var SocketSubscriber = class {
  /**
   *  Creates a new **SocketSubscriber** attached to %%provider%% listening
   *  to %%filter%%.
   */
  constructor(provider, filter) {
    __privateAdd(this, _provider5);
    __privateAdd(this, _filter4);
    __privateAdd(this, _filterId);
    __privateAdd(this, _paused);
    __privateAdd(this, _emitPromise);
    __privateSet(this, _provider5, provider);
    __privateSet(this, _filter4, JSON.stringify(filter));
    __privateSet(this, _filterId, null);
    __privateSet(this, _paused, null);
    __privateSet(this, _emitPromise, null);
  }
  /**
   *  The filter.
   */
  get filter() {
    return JSON.parse(__privateGet(this, _filter4));
  }
  start() {
    __privateSet(this, _filterId, __privateGet(this, _provider5).send("eth_subscribe", this.filter).then((filterId) => {
      ;
      __privateGet(this, _provider5)._register(filterId, this);
      return filterId;
    }));
  }
  stop() {
    __privateGet(this, _filterId).then((filterId) => {
      if (__privateGet(this, _provider5).destroyed) {
        return;
      }
      __privateGet(this, _provider5).send("eth_unsubscribe", [filterId]);
    });
    __privateSet(this, _filterId, null);
  }
  // @TODO: pause should trap the current blockNumber, unsub, and on resume use getLogs
  //        and resume
  pause(dropWhilePaused) {
    assert(dropWhilePaused, "preserve logs while paused not supported by SocketSubscriber yet", "UNSUPPORTED_OPERATION", { operation: "pause(false)" });
    __privateSet(this, _paused, !!dropWhilePaused);
  }
  resume() {
    __privateSet(this, _paused, null);
  }
  /**
   *  @_ignore:
   */
  _handleMessage(message) {
    if (__privateGet(this, _filterId) == null) {
      return;
    }
    if (__privateGet(this, _paused) === null) {
      let emitPromise = __privateGet(this, _emitPromise);
      if (emitPromise == null) {
        emitPromise = this._emit(__privateGet(this, _provider5), message);
      } else {
        emitPromise = emitPromise.then(async () => {
          await this._emit(__privateGet(this, _provider5), message);
        });
      }
      __privateSet(this, _emitPromise, emitPromise.then(() => {
        if (__privateGet(this, _emitPromise) === emitPromise) {
          __privateSet(this, _emitPromise, null);
        }
      }));
    }
  }
  /**
   *  Sub-classes **must** override this to emit the events on the
   *  provider.
   */
  async _emit(provider, message) {
    throw new Error("sub-classes must implemente this; _emit");
  }
};
_provider5 = new WeakMap();
_filter4 = new WeakMap();
_filterId = new WeakMap();
_paused = new WeakMap();
_emitPromise = new WeakMap();
var SocketBlockSubscriber = class extends SocketSubscriber {
  /**
   *  @_ignore:
   */
  constructor(provider) {
    super(provider, ["newHeads"]);
  }
  async _emit(provider, message) {
    provider.emit("block", parseInt(message.number));
  }
};
var SocketPendingSubscriber = class extends SocketSubscriber {
  /**
   *  @_ignore:
   */
  constructor(provider) {
    super(provider, ["newPendingTransactions"]);
  }
  async _emit(provider, message) {
    provider.emit("pending", message);
  }
};
var _logFilter;
var SocketEventSubscriber = class extends SocketSubscriber {
  /**
   *  @_ignore:
   */
  constructor(provider, filter) {
    super(provider, ["logs", filter]);
    __privateAdd(this, _logFilter);
    __privateSet(this, _logFilter, JSON.stringify(filter));
  }
  /**
   *  The filter.
   */
  get logFilter() {
    return JSON.parse(__privateGet(this, _logFilter));
  }
  async _emit(provider, message) {
    provider.emit(this.logFilter, provider._wrapLog(message, provider._network));
  }
};
_logFilter = new WeakMap();
var _callbacks, _subs2, _pending;
var SocketProvider = class extends JsonRpcApiProvider {
  /**
   *  Creates a new **SocketProvider** connected to %%network%%.
   *
   *  If unspecified, the network will be discovered.
   */
  constructor(network, _options4) {
    const options = Object.assign({}, _options4 != null ? _options4 : {});
    assertArgument(options.batchMaxCount == null || options.batchMaxCount === 1, "sockets-based providers do not support batches", "options.batchMaxCount", _options4);
    options.batchMaxCount = 1;
    if (options.staticNetwork == null) {
      options.staticNetwork = true;
    }
    super(network, options);
    __privateAdd(this, _callbacks);
    // Maps each filterId to its subscriber
    __privateAdd(this, _subs2);
    // If any events come in before a subscriber has finished
    // registering, queue them
    __privateAdd(this, _pending);
    __privateSet(this, _callbacks, /* @__PURE__ */ new Map());
    __privateSet(this, _subs2, /* @__PURE__ */ new Map());
    __privateSet(this, _pending, /* @__PURE__ */ new Map());
  }
  // This value is only valid after _start has been called
  /*
  get _network(): Network {
      if (this.#network == null) {
          throw new Error("this shouldn't happen");
      }
      return this.#network.clone();
  }
  */
  _getSubscriber(sub) {
    switch (sub.type) {
      case "close":
        return new UnmanagedSubscriber("close");
      case "block":
        return new SocketBlockSubscriber(this);
      case "pending":
        return new SocketPendingSubscriber(this);
      case "event":
        return new SocketEventSubscriber(this, sub.filter);
      case "orphan":
        if (sub.filter.orphan === "drop-log") {
          return new UnmanagedSubscriber("drop-log");
        }
    }
    return super._getSubscriber(sub);
  }
  /**
   *  Register a new subscriber. This is used internalled by Subscribers
   *  and generally is unecessary unless extending capabilities.
   */
  _register(filterId, subscriber) {
    __privateGet(this, _subs2).set(filterId, subscriber);
    const pending = __privateGet(this, _pending).get(filterId);
    if (pending) {
      for (const message of pending) {
        subscriber._handleMessage(message);
      }
      __privateGet(this, _pending).delete(filterId);
    }
  }
  async _send(payload) {
    assertArgument(!Array.isArray(payload), "WebSocket does not support batch send", "payload", payload);
    const promise = new Promise((resolve, reject) => {
      __privateGet(this, _callbacks).set(payload.id, { payload, resolve, reject });
    });
    await this._waitUntilReady();
    await this._write(JSON.stringify(payload));
    return [await promise];
  }
  // Sub-classes must call this once they are connected
  /*
      async _start(): Promise<void> {
          if (this.#ready) { return; }
  
          for (const { payload } of this.#callbacks.values()) {
              await this._write(JSON.stringify(payload));
          }
  
          this.#ready = (async function() {
              await super._start();
          })();
      }
      */
  /**
   *  Sub-classes **must** call this with messages received over their
   *  transport to be processed and dispatched.
   */
  async _processMessage(message) {
    const result = JSON.parse(message);
    if (result && typeof result === "object" && "id" in result) {
      const callback = __privateGet(this, _callbacks).get(result.id);
      if (callback == null) {
        this.emit("error", makeError("received result for unknown id", "UNKNOWN_ERROR", {
          reasonCode: "UNKNOWN_ID",
          result
        }));
        return;
      }
      __privateGet(this, _callbacks).delete(result.id);
      callback.resolve(result);
    } else if (result && result.method === "eth_subscription") {
      const filterId = result.params.subscription;
      const subscriber = __privateGet(this, _subs2).get(filterId);
      if (subscriber) {
        subscriber._handleMessage(result.params.result);
      } else {
        let pending = __privateGet(this, _pending).get(filterId);
        if (pending == null) {
          pending = [];
          __privateGet(this, _pending).set(filterId, pending);
        }
        pending.push(result.params.result);
      }
    } else {
      this.emit("error", makeError("received unexpected message", "UNKNOWN_ERROR", {
        reasonCode: "UNEXPECTED_MESSAGE",
        result
      }));
      return;
    }
  }
  /**
   *  Sub-classes **must** override this to send %%message%% over their
   *  transport.
   */
  async _write(message) {
    throw new Error("sub-classes must override this");
  }
};
_callbacks = new WeakMap();
_subs2 = new WeakMap();
_pending = new WeakMap();

// node_modules/ethers/lib.esm/providers/provider-websocket.js
var _connect2, _websocket;
var WebSocketProvider = class extends SocketProvider {
  constructor(url, network, options) {
    super(network, options);
    __privateAdd(this, _connect2);
    __privateAdd(this, _websocket);
    if (typeof url === "string") {
      __privateSet(this, _connect2, () => {
        return new _WebSocket(url);
      });
      __privateSet(this, _websocket, __privateGet(this, _connect2).call(this));
    } else if (typeof url === "function") {
      __privateSet(this, _connect2, url);
      __privateSet(this, _websocket, url());
    } else {
      __privateSet(this, _connect2, null);
      __privateSet(this, _websocket, url);
    }
    this.websocket.onopen = async () => {
      try {
        await this._start();
        this.resume();
      } catch (error) {
        console.log("failed to start WebsocketProvider", error);
      }
    };
    this.websocket.onmessage = (message) => {
      this._processMessage(message.data);
    };
  }
  get websocket() {
    if (__privateGet(this, _websocket) == null) {
      throw new Error("websocket closed");
    }
    return __privateGet(this, _websocket);
  }
  async _write(message) {
    this.websocket.send(message);
  }
  async destroy() {
    if (__privateGet(this, _websocket) != null) {
      __privateGet(this, _websocket).close();
      __privateSet(this, _websocket, null);
    }
    super.destroy();
  }
};
_connect2 = new WeakMap();
_websocket = new WeakMap();

// node_modules/ethers/lib.esm/providers/provider-infura.js
var defaultProjectId = "84842078b09946638c03157f83405213";
function getHost4(name) {
  switch (name) {
    case "mainnet":
      return "mainnet.infura.io";
    case "goerli":
      return "goerli.infura.io";
    case "sepolia":
      return "sepolia.infura.io";
    case "arbitrum":
      return "arbitrum-mainnet.infura.io";
    case "arbitrum-goerli":
      return "arbitrum-goerli.infura.io";
    case "arbitrum-sepolia":
      return "arbitrum-sepolia.infura.io";
    case "base":
      return "base-mainnet.infura.io";
    case "base-goerlia":
      return "base-goerli.infura.io";
    case "base-sepolia":
      return "base-sepolia.infura.io";
    case "bnb":
      return "bnbsmartchain-mainnet.infura.io";
    case "bnbt":
      return "bnbsmartchain-testnet.infura.io";
    case "linea":
      return "linea-mainnet.infura.io";
    case "linea-goerli":
      return "linea-goerli.infura.io";
    case "linea-sepolia":
      return "linea-sepolia.infura.io";
    case "matic":
      return "polygon-mainnet.infura.io";
    case "matic-amoy":
      return "polygon-amoy.infura.io";
    case "matic-mumbai":
      return "polygon-mumbai.infura.io";
    case "optimism":
      return "optimism-mainnet.infura.io";
    case "optimism-goerli":
      return "optimism-goerli.infura.io";
    case "optimism-sepolia":
      return "optimism-sepolia.infura.io";
  }
  assertArgument(false, "unsupported network", "network", name);
}
var InfuraWebSocketProvider = class extends WebSocketProvider {
  /**
   *  Creates a new **InfuraWebSocketProvider**.
   */
  constructor(network, projectId) {
    const provider = new InfuraProvider(network, projectId);
    const req = provider._getConnection();
    assert(!req.credentials, "INFURA WebSocket project secrets unsupported", "UNSUPPORTED_OPERATION", { operation: "InfuraProvider.getWebSocketProvider()" });
    const url = req.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
    super(url, provider._network);
    /**
     *  The Project ID for the INFURA connection.
     */
    __publicField(this, "projectId");
    /**
     *  The Project Secret.
     *
     *  If null, no authenticated requests are made. This should not
     *  be used outside of private contexts.
     */
    __publicField(this, "projectSecret");
    defineProperties(this, {
      projectId: provider.projectId,
      projectSecret: provider.projectSecret
    });
  }
  isCommunityResource() {
    return this.projectId === defaultProjectId;
  }
};
var InfuraProvider = class _InfuraProvider extends JsonRpcProvider {
  /**
   *  Creates a new **InfuraProvider**.
   */
  constructor(_network3, projectId, projectSecret) {
    if (_network3 == null) {
      _network3 = "mainnet";
    }
    const network = Network.from(_network3);
    if (projectId == null) {
      projectId = defaultProjectId;
    }
    if (projectSecret == null) {
      projectSecret = null;
    }
    const request = _InfuraProvider.getRequest(network, projectId, projectSecret);
    super(request, network, { staticNetwork: network });
    /**
     *  The Project ID for the INFURA connection.
     */
    __publicField(this, "projectId");
    /**
     *  The Project Secret.
     *
     *  If null, no authenticated requests are made. This should not
     *  be used outside of private contexts.
     */
    __publicField(this, "projectSecret");
    defineProperties(this, { projectId, projectSecret });
  }
  _getProvider(chainId) {
    try {
      return new _InfuraProvider(chainId, this.projectId, this.projectSecret);
    } catch (error) {
    }
    return super._getProvider(chainId);
  }
  isCommunityResource() {
    return this.projectId === defaultProjectId;
  }
  /**
   *  Creates a new **InfuraWebSocketProvider**.
   */
  static getWebSocketProvider(network, projectId) {
    return new InfuraWebSocketProvider(network, projectId);
  }
  /**
   *  Returns a prepared request for connecting to %%network%%
   *  with %%projectId%% and %%projectSecret%%.
   */
  static getRequest(network, projectId, projectSecret) {
    if (projectId == null) {
      projectId = defaultProjectId;
    }
    if (projectSecret == null) {
      projectSecret = null;
    }
    const request = new FetchRequest(`https://${getHost4(network.name)}/v3/${projectId}`);
    request.allowGzip = true;
    if (projectSecret) {
      request.setCredentials("", projectSecret);
    }
    if (projectId === defaultProjectId) {
      request.retryFunc = async (request2, response, attempt) => {
        showThrottleMessage("InfuraProvider");
        return true;
      };
    }
    return request;
  }
};

// node_modules/ethers/lib.esm/providers/provider-quicknode.js
var defaultToken = "919b412a057b5e9c9b6dce193c5a60242d6efadb";
function getHost5(name) {
  switch (name) {
    case "mainnet":
      return "ethers.quiknode.pro";
    case "goerli":
      return "ethers.ethereum-goerli.quiknode.pro";
    case "sepolia":
      return "ethers.ethereum-sepolia.quiknode.pro";
    case "holesky":
      return "ethers.ethereum-holesky.quiknode.pro";
    case "arbitrum":
      return "ethers.arbitrum-mainnet.quiknode.pro";
    case "arbitrum-goerli":
      return "ethers.arbitrum-goerli.quiknode.pro";
    case "arbitrum-sepolia":
      return "ethers.arbitrum-sepolia.quiknode.pro";
    case "base":
      return "ethers.base-mainnet.quiknode.pro";
    case "base-goerli":
      return "ethers.base-goerli.quiknode.pro";
    case "base-spolia":
      return "ethers.base-sepolia.quiknode.pro";
    case "bnb":
      return "ethers.bsc.quiknode.pro";
    case "bnbt":
      return "ethers.bsc-testnet.quiknode.pro";
    case "matic":
      return "ethers.matic.quiknode.pro";
    case "matic-mumbai":
      return "ethers.matic-testnet.quiknode.pro";
    case "optimism":
      return "ethers.optimism.quiknode.pro";
    case "optimism-goerli":
      return "ethers.optimism-goerli.quiknode.pro";
    case "optimism-sepolia":
      return "ethers.optimism-sepolia.quiknode.pro";
    case "xdai":
      return "ethers.xdai.quiknode.pro";
  }
  assertArgument(false, "unsupported network", "network", name);
}
var QuickNodeProvider = class _QuickNodeProvider extends JsonRpcProvider {
  /**
   *  Creates a new **QuickNodeProvider**.
   */
  constructor(_network3, token) {
    if (_network3 == null) {
      _network3 = "mainnet";
    }
    const network = Network.from(_network3);
    if (token == null) {
      token = defaultToken;
    }
    const request = _QuickNodeProvider.getRequest(network, token);
    super(request, network, { staticNetwork: network });
    /**
     *  The API token.
     */
    __publicField(this, "token");
    defineProperties(this, { token });
  }
  _getProvider(chainId) {
    try {
      return new _QuickNodeProvider(chainId, this.token);
    } catch (error) {
    }
    return super._getProvider(chainId);
  }
  isCommunityResource() {
    return this.token === defaultToken;
  }
  /**
   *  Returns a new request prepared for %%network%% and the
   *  %%token%%.
   */
  static getRequest(network, token) {
    if (token == null) {
      token = defaultToken;
    }
    const request = new FetchRequest(`https://${getHost5(network.name)}/${token}`);
    request.allowGzip = true;
    if (token === defaultToken) {
      request.retryFunc = async (request2, response, attempt) => {
        showThrottleMessage("QuickNodeProvider");
        return true;
      };
    }
    return request;
  }
};

// node_modules/ethers/lib.esm/providers/provider-fallback.js
var BN_16 = BigInt("1");
var BN_24 = BigInt("2");
function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    const tmp = array[i];
    array[i] = array[j];
    array[j] = tmp;
  }
}
function stall2(duration) {
  return new Promise((resolve) => {
    setTimeout(resolve, duration);
  });
}
function getTime3() {
  return (/* @__PURE__ */ new Date()).getTime();
}
function stringify2(value) {
  return JSON.stringify(value, (key, value2) => {
    if (typeof value2 === "bigint") {
      return { type: "bigint", value: value2.toString() };
    }
    return value2;
  });
}
var defaultConfig = { stallTimeout: 400, priority: 1, weight: 1 };
var defaultState = {
  blockNumber: -2,
  requests: 0,
  lateResponses: 0,
  errorResponses: 0,
  outOfSync: -1,
  unsupportedEvents: 0,
  rollingDuration: 0,
  score: 0,
  _network: null,
  _updateNumber: null,
  _totalTime: 0,
  _lastFatalError: null,
  _lastFatalErrorTimestamp: 0
};
async function waitForSync(config, blockNumber) {
  while (config.blockNumber < 0 || config.blockNumber < blockNumber) {
    if (!config._updateNumber) {
      config._updateNumber = (async () => {
        try {
          const blockNumber2 = await config.provider.getBlockNumber();
          if (blockNumber2 > config.blockNumber) {
            config.blockNumber = blockNumber2;
          }
        } catch (error) {
          config.blockNumber = -2;
          config._lastFatalError = error;
          config._lastFatalErrorTimestamp = getTime3();
        }
        config._updateNumber = null;
      })();
    }
    await config._updateNumber;
    config.outOfSync++;
    if (config._lastFatalError) {
      break;
    }
  }
}
function _normalize(value) {
  if (value == null) {
    return "null";
  }
  if (Array.isArray(value)) {
    return "[" + value.map(_normalize).join(",") + "]";
  }
  if (typeof value === "object" && typeof value.toJSON === "function") {
    return _normalize(value.toJSON());
  }
  switch (typeof value) {
    case "boolean":
    case "symbol":
      return value.toString();
    case "bigint":
    case "number":
      return BigInt(value).toString();
    case "string":
      return JSON.stringify(value);
    case "object": {
      const keys = Object.keys(value);
      keys.sort();
      return "{" + keys.map((k) => `${JSON.stringify(k)}:${_normalize(value[k])}`).join(",") + "}";
    }
  }
  console.log("Could not serialize", value);
  throw new Error("Hmm...");
}
function normalizeResult(value) {
  if ("error" in value) {
    const error = value.error;
    return { tag: _normalize(error), value: error };
  }
  const result = value.result;
  return { tag: _normalize(result), value: result };
}
function checkQuorum(quorum, results) {
  const tally = /* @__PURE__ */ new Map();
  for (const { value, tag, weight } of results) {
    const t = tally.get(tag) || { value, weight: 0 };
    t.weight += weight;
    tally.set(tag, t);
  }
  let best = null;
  for (const r of tally.values()) {
    if (r.weight >= quorum && (!best || r.weight > best.weight)) {
      best = r;
    }
  }
  if (best) {
    return best.value;
  }
  return void 0;
}
function getMedian(quorum, results) {
  let resultWeight = 0;
  const errorMap = /* @__PURE__ */ new Map();
  let bestError = null;
  const values = [];
  for (const { value, tag, weight } of results) {
    if (value instanceof Error) {
      const e = errorMap.get(tag) || { value, weight: 0 };
      e.weight += weight;
      errorMap.set(tag, e);
      if (bestError == null || e.weight > bestError.weight) {
        bestError = e;
      }
    } else {
      values.push(BigInt(value));
      resultWeight += weight;
    }
  }
  if (resultWeight < quorum) {
    if (bestError && bestError.weight >= quorum) {
      return bestError.value;
    }
    return void 0;
  }
  values.sort((a, b2) => a < b2 ? -1 : b2 > a ? 1 : 0);
  const mid = Math.floor(values.length / 2);
  if (values.length % 2) {
    return values[mid];
  }
  return (values[mid - 1] + values[mid] + BN_16) / BN_24;
}
function getAnyResult(quorum, results) {
  const result = checkQuorum(quorum, results);
  if (result !== void 0) {
    return result;
  }
  for (const r of results) {
    if (r.value) {
      return r.value;
    }
  }
  return void 0;
}
function getFuzzyMode(quorum, results) {
  if (quorum === 1) {
    return getNumber(getMedian(quorum, results), "%internal");
  }
  const tally = /* @__PURE__ */ new Map();
  const add2 = (result, weight) => {
    const t = tally.get(result) || { result, weight: 0 };
    t.weight += weight;
    tally.set(result, t);
  };
  for (const { weight, value } of results) {
    const r = getNumber(value);
    add2(r - 1, weight);
    add2(r, weight);
    add2(r + 1, weight);
  }
  let bestWeight = 0;
  let bestResult = void 0;
  for (const { weight, result } of tally.values()) {
    if (weight >= quorum && (weight > bestWeight || bestResult != null && weight === bestWeight && result > bestResult)) {
      bestWeight = weight;
      bestResult = result;
    }
  }
  return bestResult;
}
var _configs, _height, _initialSyncPromise, _FallbackProvider_instances, getNextConfig_fn, addRunner_fn, initialSync_fn, checkQuorum_fn, waitForQuorum_fn;
var FallbackProvider = class extends AbstractProvider {
  /**
   *  Creates a new **FallbackProvider** with %%providers%% connected to
   *  %%network%%.
   *
   *  If a [[Provider]] is included in %%providers%%, defaults are used
   *  for the configuration.
   */
  constructor(providers, network, options) {
    super(network, options);
    __privateAdd(this, _FallbackProvider_instances);
    /**
     *  The number of backends that must agree on a value before it is
     *  accpeted.
     */
    __publicField(this, "quorum");
    /**
     *  @_ignore:
     */
    __publicField(this, "eventQuorum");
    /**
     *  @_ignore:
     */
    __publicField(this, "eventWorkers");
    __privateAdd(this, _configs);
    __privateAdd(this, _height);
    __privateAdd(this, _initialSyncPromise);
    __privateSet(this, _configs, providers.map((p) => {
      if (p instanceof AbstractProvider) {
        return Object.assign({ provider: p }, defaultConfig, defaultState);
      } else {
        return Object.assign({}, defaultConfig, p, defaultState);
      }
    }));
    __privateSet(this, _height, -2);
    __privateSet(this, _initialSyncPromise, null);
    if (options && options.quorum != null) {
      this.quorum = options.quorum;
    } else {
      this.quorum = Math.ceil(__privateGet(this, _configs).reduce((accum, config) => {
        accum += config.weight;
        return accum;
      }, 0) / 2);
    }
    this.eventQuorum = 1;
    this.eventWorkers = 1;
    assertArgument(this.quorum <= __privateGet(this, _configs).reduce((a, c) => a + c.weight, 0), "quorum exceed provider weight", "quorum", this.quorum);
  }
  get providerConfigs() {
    return __privateGet(this, _configs).map((c) => {
      const result = Object.assign({}, c);
      for (const key in result) {
        if (key[0] === "_") {
          delete result[key];
        }
      }
      return result;
    });
  }
  async _detectNetwork() {
    return Network.from(getBigInt(await this._perform({ method: "chainId" })));
  }
  // @TODO: Add support to select providers to be the event subscriber
  //_getSubscriber(sub: Subscription): Subscriber {
  //    throw new Error("@TODO");
  //}
  /**
   *  Transforms a %%req%% into the correct method call on %%provider%%.
   */
  async _translatePerform(provider, req) {
    switch (req.method) {
      case "broadcastTransaction":
        return await provider.broadcastTransaction(req.signedTransaction);
      case "call":
        return await provider.call(Object.assign({}, req.transaction, { blockTag: req.blockTag }));
      case "chainId":
        return (await provider.getNetwork()).chainId;
      case "estimateGas":
        return await provider.estimateGas(req.transaction);
      case "getBalance":
        return await provider.getBalance(req.address, req.blockTag);
      case "getBlock": {
        const block = "blockHash" in req ? req.blockHash : req.blockTag;
        return await provider.getBlock(block, req.includeTransactions);
      }
      case "getBlockNumber":
        return await provider.getBlockNumber();
      case "getCode":
        return await provider.getCode(req.address, req.blockTag);
      case "getGasPrice":
        return (await provider.getFeeData()).gasPrice;
      case "getPriorityFee":
        return (await provider.getFeeData()).maxPriorityFeePerGas;
      case "getLogs":
        return await provider.getLogs(req.filter);
      case "getStorage":
        return await provider.getStorage(req.address, req.position, req.blockTag);
      case "getTransaction":
        return await provider.getTransaction(req.hash);
      case "getTransactionCount":
        return await provider.getTransactionCount(req.address, req.blockTag);
      case "getTransactionReceipt":
        return await provider.getTransactionReceipt(req.hash);
      case "getTransactionResult":
        return await provider.getTransactionResult(req.hash);
    }
  }
  async _perform(req) {
    if (req.method === "broadcastTransaction") {
      const results = __privateGet(this, _configs).map((c) => null);
      const broadcasts = __privateGet(this, _configs).map(async ({ provider, weight }, index) => {
        try {
          const result3 = await provider._perform(req);
          results[index] = Object.assign(normalizeResult({ result: result3 }), { weight });
        } catch (error) {
          results[index] = Object.assign(normalizeResult({ error }), { weight });
        }
      });
      while (true) {
        const done = results.filter((r) => r != null);
        for (const { value } of done) {
          if (!(value instanceof Error)) {
            return value;
          }
        }
        const result3 = checkQuorum(this.quorum, results.filter((r) => r != null));
        if (isError(result3, "INSUFFICIENT_FUNDS")) {
          throw result3;
        }
        const waiting = broadcasts.filter((b2, i) => results[i] == null);
        if (waiting.length === 0) {
          break;
        }
        await Promise.race(waiting);
      }
      const result2 = getAnyResult(this.quorum, results);
      assert(result2 !== void 0, "problem multi-broadcasting", "SERVER_ERROR", {
        request: "%sub-requests",
        info: { request: req, results: results.map(stringify2) }
      });
      if (result2 instanceof Error) {
        throw result2;
      }
      return result2;
    }
    await __privateMethod(this, _FallbackProvider_instances, initialSync_fn).call(this);
    const running = /* @__PURE__ */ new Set();
    let inflightQuorum = 0;
    while (true) {
      const runner = __privateMethod(this, _FallbackProvider_instances, addRunner_fn).call(this, running, req);
      if (runner == null) {
        break;
      }
      inflightQuorum += runner.config.weight;
      if (inflightQuorum >= this.quorum) {
        break;
      }
    }
    const result = await __privateMethod(this, _FallbackProvider_instances, waitForQuorum_fn).call(this, running, req);
    for (const runner of running) {
      if (runner.perform && runner.result == null) {
        runner.config.lateResponses++;
      }
    }
    return result;
  }
  async destroy() {
    for (const { provider } of __privateGet(this, _configs)) {
      provider.destroy();
    }
    super.destroy();
  }
};
_configs = new WeakMap();
_height = new WeakMap();
_initialSyncPromise = new WeakMap();
_FallbackProvider_instances = new WeakSet();
// Grab the next (random) config that is not already part of
// the running set
getNextConfig_fn = function(running) {
  const configs = Array.from(running).map((r) => r.config);
  const allConfigs = __privateGet(this, _configs).slice();
  shuffle(allConfigs);
  allConfigs.sort((a, b2) => a.priority - b2.priority);
  for (const config of allConfigs) {
    if (config._lastFatalError) {
      continue;
    }
    if (configs.indexOf(config) === -1) {
      return config;
    }
  }
  return null;
};
// Adds a new runner (if available) to running.
addRunner_fn = function(running, req) {
  const config = __privateMethod(this, _FallbackProvider_instances, getNextConfig_fn).call(this, running);
  if (config == null) {
    return null;
  }
  const runner = {
    config,
    result: null,
    didBump: false,
    perform: null,
    staller: null
  };
  const now = getTime3();
  runner.perform = (async () => {
    try {
      config.requests++;
      const result = await this._translatePerform(config.provider, req);
      runner.result = { result };
    } catch (error) {
      config.errorResponses++;
      runner.result = { error };
    }
    const dt = getTime3() - now;
    config._totalTime += dt;
    config.rollingDuration = 0.95 * config.rollingDuration + 0.05 * dt;
    runner.perform = null;
  })();
  runner.staller = (async () => {
    await stall2(config.stallTimeout);
    runner.staller = null;
  })();
  running.add(runner);
  return runner;
};
initialSync_fn = async function() {
  let initialSync = __privateGet(this, _initialSyncPromise);
  if (!initialSync) {
    const promises = [];
    __privateGet(this, _configs).forEach((config) => {
      promises.push((async () => {
        await waitForSync(config, 0);
        if (!config._lastFatalError) {
          config._network = await config.provider.getNetwork();
        }
      })());
    });
    __privateSet(this, _initialSyncPromise, initialSync = (async () => {
      await Promise.all(promises);
      let chainId = null;
      for (const config of __privateGet(this, _configs)) {
        if (config._lastFatalError) {
          continue;
        }
        const network = config._network;
        if (chainId == null) {
          chainId = network.chainId;
        } else if (network.chainId !== chainId) {
          assert(false, "cannot mix providers on different networks", "UNSUPPORTED_OPERATION", {
            operation: "new FallbackProvider"
          });
        }
      }
    })());
  }
  await initialSync;
};
checkQuorum_fn = async function(running, req) {
  const results = [];
  for (const runner of running) {
    if (runner.result != null) {
      const { tag, value } = normalizeResult(runner.result);
      results.push({ tag, value, weight: runner.config.weight });
    }
  }
  if (results.reduce((a, r) => a + r.weight, 0) < this.quorum) {
    return void 0;
  }
  switch (req.method) {
    case "getBlockNumber": {
      if (__privateGet(this, _height) === -2) {
        __privateSet(this, _height, Math.ceil(getNumber(getMedian(this.quorum, __privateGet(this, _configs).filter((c) => !c._lastFatalError).map((c) => ({
          value: c.blockNumber,
          tag: getNumber(c.blockNumber).toString(),
          weight: c.weight
        }))))));
      }
      const mode = getFuzzyMode(this.quorum, results);
      if (mode === void 0) {
        return void 0;
      }
      if (mode > __privateGet(this, _height)) {
        __privateSet(this, _height, mode);
      }
      return __privateGet(this, _height);
    }
    case "getGasPrice":
    case "getPriorityFee":
    case "estimateGas":
      return getMedian(this.quorum, results);
    case "getBlock":
      if ("blockTag" in req && req.blockTag === "pending") {
        return getAnyResult(this.quorum, results);
      }
      return checkQuorum(this.quorum, results);
    case "call":
    case "chainId":
    case "getBalance":
    case "getTransactionCount":
    case "getCode":
    case "getStorage":
    case "getTransaction":
    case "getTransactionReceipt":
    case "getLogs":
      return checkQuorum(this.quorum, results);
    case "broadcastTransaction":
      return getAnyResult(this.quorum, results);
  }
  assert(false, "unsupported method", "UNSUPPORTED_OPERATION", {
    operation: `_perform(${stringify2(req.method)})`
  });
};
waitForQuorum_fn = async function(running, req) {
  if (running.size === 0) {
    throw new Error("no runners?!");
  }
  const interesting = [];
  let newRunners = 0;
  for (const runner of running) {
    if (runner.perform) {
      interesting.push(runner.perform);
    }
    if (runner.staller) {
      interesting.push(runner.staller);
      continue;
    }
    if (runner.didBump) {
      continue;
    }
    runner.didBump = true;
    newRunners++;
  }
  const value = await __privateMethod(this, _FallbackProvider_instances, checkQuorum_fn).call(this, running, req);
  if (value !== void 0) {
    if (value instanceof Error) {
      throw value;
    }
    return value;
  }
  for (let i = 0; i < newRunners; i++) {
    __privateMethod(this, _FallbackProvider_instances, addRunner_fn).call(this, running, req);
  }
  assert(interesting.length > 0, "quorum not met", "SERVER_ERROR", {
    request: "%sub-requests",
    info: { request: req, results: Array.from(running).map((r) => stringify2(r.result)) }
  });
  await Promise.race(interesting);
  return await __privateMethod(this, _FallbackProvider_instances, waitForQuorum_fn).call(this, running, req);
};

// node_modules/ethers/lib.esm/providers/default-provider.js
function isWebSocketLike(value) {
  return value && typeof value.send === "function" && typeof value.close === "function";
}
var Testnets = "goerli kovan sepolia classicKotti optimism-goerli arbitrum-goerli matic-mumbai bnbt".split(" ");
function getDefaultProvider(network, options) {
  if (options == null) {
    options = {};
  }
  const allowService = (name) => {
    if (options[name] === "-") {
      return false;
    }
    if (typeof options.exclusive === "string") {
      return name === options.exclusive;
    }
    if (Array.isArray(options.exclusive)) {
      return options.exclusive.indexOf(name) !== -1;
    }
    return true;
  };
  if (typeof network === "string" && network.match(/^https?:/)) {
    return new JsonRpcProvider(network);
  }
  if (typeof network === "string" && network.match(/^wss?:/) || isWebSocketLike(network)) {
    return new WebSocketProvider(network);
  }
  let staticNetwork = null;
  try {
    staticNetwork = Network.from(network);
  } catch (error) {
  }
  const providers = [];
  if (allowService("publicPolygon") && staticNetwork) {
    if (staticNetwork.name === "matic") {
      providers.push(new JsonRpcProvider("https://polygon-rpc.com/", staticNetwork, { staticNetwork }));
    } else if (staticNetwork.name === "matic-amoy") {
      providers.push(new JsonRpcProvider("https://rpc-amoy.polygon.technology/", staticNetwork, { staticNetwork }));
    }
  }
  if (allowService("alchemy")) {
    try {
      providers.push(new AlchemyProvider(network, options.alchemy));
    } catch (error) {
    }
  }
  if (allowService("ankr") && options.ankr != null) {
    try {
      providers.push(new AnkrProvider(network, options.ankr));
    } catch (error) {
    }
  }
  if (allowService("chainstack")) {
    try {
      providers.push(new ChainstackProvider(network, options.chainstack));
    } catch (error) {
    }
  }
  if (allowService("cloudflare")) {
    try {
      providers.push(new CloudflareProvider(network));
    } catch (error) {
    }
  }
  if (allowService("etherscan")) {
    try {
      providers.push(new EtherscanProvider(network, options.etherscan));
    } catch (error) {
    }
  }
  if (allowService("infura")) {
    try {
      let projectId = options.infura;
      let projectSecret = void 0;
      if (typeof projectId === "object") {
        projectSecret = projectId.projectSecret;
        projectId = projectId.projectId;
      }
      providers.push(new InfuraProvider(network, projectId, projectSecret));
    } catch (error) {
    }
  }
  if (allowService("quicknode")) {
    try {
      let token = options.quicknode;
      providers.push(new QuickNodeProvider(network, token));
    } catch (error) {
    }
  }
  assert(providers.length, "unsupported default network", "UNSUPPORTED_OPERATION", {
    operation: "getDefaultProvider"
  });
  if (providers.length === 1) {
    return providers[0];
  }
  let quorum = Math.floor(providers.length / 2);
  if (quorum > 2) {
    quorum = 2;
  }
  if (staticNetwork && Testnets.indexOf(staticNetwork.name) !== -1) {
    quorum = 1;
  }
  if (options && options.quorum) {
    quorum = options.quorum;
  }
  return new FallbackProvider(providers, void 0, { quorum });
}

// node_modules/ethers/lib.esm/providers/signer-noncemanager.js
var _noncePromise, _delta;
var _NonceManager = class _NonceManager extends AbstractSigner {
  /**
   *  Creates a new **NonceManager** to manage %%signer%%.
   */
  constructor(signer) {
    super(signer.provider);
    /**
     *  The Signer being managed.
     */
    __publicField(this, "signer");
    __privateAdd(this, _noncePromise);
    __privateAdd(this, _delta);
    defineProperties(this, { signer });
    __privateSet(this, _noncePromise, null);
    __privateSet(this, _delta, 0);
  }
  async getAddress() {
    return this.signer.getAddress();
  }
  connect(provider) {
    return new _NonceManager(this.signer.connect(provider));
  }
  async getNonce(blockTag) {
    if (blockTag === "pending") {
      if (__privateGet(this, _noncePromise) == null) {
        __privateSet(this, _noncePromise, super.getNonce("pending"));
      }
      const delta = __privateGet(this, _delta);
      return await __privateGet(this, _noncePromise) + delta;
    }
    return super.getNonce(blockTag);
  }
  /**
   *  Manually increment the nonce. This may be useful when managng
   *  offline transactions.
   */
  increment() {
    __privateWrapper(this, _delta)._++;
  }
  /**
   *  Resets the nonce, causing the **NonceManager** to reload the current
   *  nonce from the blockchain on the next transaction.
   */
  reset() {
    __privateSet(this, _delta, 0);
    __privateSet(this, _noncePromise, null);
  }
  async sendTransaction(tx) {
    const noncePromise = this.getNonce("pending");
    this.increment();
    tx = await this.signer.populateTransaction(tx);
    tx.nonce = await noncePromise;
    return await this.signer.sendTransaction(tx);
  }
  signTransaction(tx) {
    return this.signer.signTransaction(tx);
  }
  signMessage(message) {
    return this.signer.signMessage(message);
  }
  signTypedData(domain, types, value) {
    return this.signer.signTypedData(domain, types, value);
  }
};
_noncePromise = new WeakMap();
_delta = new WeakMap();
var NonceManager = _NonceManager;

// node_modules/ethers/lib.esm/providers/provider-browser.js
var _request2;
var BrowserProvider = class extends JsonRpcApiPollingProvider {
  /**
   *  Connnect to the %%ethereum%% provider, optionally forcing the
   *  %%network%%.
   */
  constructor(ethereum, network, _options4) {
    const options = Object.assign({}, _options4 != null ? _options4 : {}, { batchMaxCount: 1 });
    assertArgument(ethereum && ethereum.request, "invalid EIP-1193 provider", "ethereum", ethereum);
    super(network, options);
    __privateAdd(this, _request2);
    __privateSet(this, _request2, async (method, params) => {
      const payload = { method, params };
      this.emit("debug", { action: "sendEip1193Request", payload });
      try {
        const result = await ethereum.request(payload);
        this.emit("debug", { action: "receiveEip1193Result", result });
        return result;
      } catch (e) {
        const error = new Error(e.message);
        error.code = e.code;
        error.data = e.data;
        error.payload = payload;
        this.emit("debug", { action: "receiveEip1193Error", error });
        throw error;
      }
    });
  }
  async send(method, params) {
    await this._start();
    return await super.send(method, params);
  }
  async _send(payload) {
    assertArgument(!Array.isArray(payload), "EIP-1193 does not support batch request", "payload", payload);
    try {
      const result = await __privateGet(this, _request2).call(this, payload.method, payload.params || []);
      return [{ id: payload.id, result }];
    } catch (e) {
      return [{
        id: payload.id,
        error: { code: e.code, data: e.data, message: e.message }
      }];
    }
  }
  getRpcError(payload, error) {
    error = JSON.parse(JSON.stringify(error));
    switch (error.error.code || -1) {
      case 4001:
        error.error.message = `ethers-user-denied: ${error.error.message}`;
        break;
      case 4200:
        error.error.message = `ethers-unsupported: ${error.error.message}`;
        break;
    }
    return super.getRpcError(payload, error);
  }
  /**
   *  Resolves to ``true`` if the provider manages the %%address%%.
   */
  async hasSigner(address) {
    if (address == null) {
      address = 0;
    }
    const accounts = await this.send("eth_accounts", []);
    if (typeof address === "number") {
      return accounts.length > address;
    }
    address = address.toLowerCase();
    return accounts.filter((a) => a.toLowerCase() === address).length !== 0;
  }
  async getSigner(address) {
    if (address == null) {
      address = 0;
    }
    if (!await this.hasSigner(address)) {
      try {
        await __privateGet(this, _request2).call(this, "eth_requestAccounts", []);
      } catch (error) {
        const payload = error.payload;
        throw this.getRpcError(payload, { id: payload.id, error });
      }
    }
    return await super.getSigner(address);
  }
};
_request2 = new WeakMap();

// node_modules/ethers/lib.esm/providers/provider-pocket.js
var defaultApplicationId = "62e1ad51b37b8e00394bda3b";
function getHost6(name) {
  switch (name) {
    case "mainnet":
      return "eth-mainnet.gateway.pokt.network";
    case "goerli":
      return "eth-goerli.gateway.pokt.network";
    case "matic":
      return "poly-mainnet.gateway.pokt.network";
    case "matic-mumbai":
      return "polygon-mumbai-rpc.gateway.pokt.network";
  }
  assertArgument(false, "unsupported network", "network", name);
}
var PocketProvider = class _PocketProvider extends JsonRpcProvider {
  /**
   *  Create a new **PocketProvider**.
   *
   *  By default connecting to ``mainnet`` with a highly throttled
   *  API key.
   */
  constructor(_network3, applicationId, applicationSecret) {
    if (_network3 == null) {
      _network3 = "mainnet";
    }
    const network = Network.from(_network3);
    if (applicationId == null) {
      applicationId = defaultApplicationId;
    }
    if (applicationSecret == null) {
      applicationSecret = null;
    }
    const options = { staticNetwork: network };
    const request = _PocketProvider.getRequest(network, applicationId, applicationSecret);
    super(request, network, options);
    /**
     *  The Application ID for the Pocket connection.
     */
    __publicField(this, "applicationId");
    /**
     *  The Application Secret for making authenticated requests
     *  to the Pocket connection.
     */
    __publicField(this, "applicationSecret");
    defineProperties(this, { applicationId, applicationSecret });
  }
  _getProvider(chainId) {
    try {
      return new _PocketProvider(chainId, this.applicationId, this.applicationSecret);
    } catch (error) {
    }
    return super._getProvider(chainId);
  }
  /**
   *  Returns a prepared request for connecting to %%network%% with
   *  %%applicationId%%.
   */
  static getRequest(network, applicationId, applicationSecret) {
    if (applicationId == null) {
      applicationId = defaultApplicationId;
    }
    const request = new FetchRequest(`https://${getHost6(network.name)}/v1/lb/${applicationId}`);
    request.allowGzip = true;
    if (applicationSecret) {
      request.setCredentials("", applicationSecret);
    }
    if (applicationId === defaultApplicationId) {
      request.retryFunc = async (request2, response, attempt) => {
        showThrottleMessage("PocketProvider");
        return true;
      };
    }
    return request;
  }
  isCommunityResource() {
    return this.applicationId === defaultApplicationId;
  }
};

// node_modules/ethers/lib.esm/providers/provider-ipcsocket-browser.js
var IpcSocketProvider = void 0;

// node_modules/ethers/lib.esm/wallet/base-wallet.js
var _signingKey;
var _BaseWallet = class _BaseWallet extends AbstractSigner {
  /**
   *  Creates a new BaseWallet for %%privateKey%%, optionally
   *  connected to %%provider%%.
   *
   *  If %%provider%% is not specified, only offline methods can
   *  be used.
   */
  constructor(privateKey, provider) {
    super(provider);
    /**
     *  The wallet address.
     */
    __publicField(this, "address");
    __privateAdd(this, _signingKey);
    assertArgument(privateKey && typeof privateKey.sign === "function", "invalid private key", "privateKey", "[ REDACTED ]");
    __privateSet(this, _signingKey, privateKey);
    const address = computeAddress(this.signingKey.publicKey);
    defineProperties(this, { address });
  }
  // Store private values behind getters to reduce visibility
  // in console.log
  /**
   *  The [[SigningKey]] used for signing payloads.
   */
  get signingKey() {
    return __privateGet(this, _signingKey);
  }
  /**
   *  The private key for this wallet.
   */
  get privateKey() {
    return this.signingKey.privateKey;
  }
  async getAddress() {
    return this.address;
  }
  connect(provider) {
    return new _BaseWallet(__privateGet(this, _signingKey), provider);
  }
  async signTransaction(tx) {
    tx = copyRequest(tx);
    const { to, from } = await resolveProperties({
      to: tx.to ? resolveAddress(tx.to, this.provider) : void 0,
      from: tx.from ? resolveAddress(tx.from, this.provider) : void 0
    });
    if (to != null) {
      tx.to = to;
    }
    if (from != null) {
      tx.from = from;
    }
    if (tx.from != null) {
      assertArgument(getAddress(tx.from) === this.address, "transaction from address mismatch", "tx.from", tx.from);
      delete tx.from;
    }
    const btx = Transaction.from(tx);
    btx.signature = this.signingKey.sign(btx.unsignedHash);
    return btx.serialized;
  }
  async signMessage(message) {
    return this.signMessageSync(message);
  }
  // @TODO: Add a secialized signTx and signTyped sync that enforces
  // all parameters are known?
  /**
   *  Returns the signature for %%message%% signed with this wallet.
   */
  signMessageSync(message) {
    return this.signingKey.sign(hashMessage(message)).serialized;
  }
  async signTypedData(domain, types, value) {
    const populated = await TypedDataEncoder.resolveNames(domain, types, value, async (name) => {
      assert(this.provider != null, "cannot resolve ENS names without a provider", "UNSUPPORTED_OPERATION", {
        operation: "resolveName",
        info: { name }
      });
      const address = await this.provider.resolveName(name);
      assert(address != null, "unconfigured ENS name", "UNCONFIGURED_NAME", {
        value: name
      });
      return address;
    });
    return this.signingKey.sign(TypedDataEncoder.hash(populated.domain, types, populated.value)).serialized;
  }
};
_signingKey = new WeakMap();
var BaseWallet = _BaseWallet;

// node_modules/ethers/lib.esm/wordlists/decode-owl.js
var subsChrs = " !#$%&'()*+,-./<=>?@[]^_`{|}~";
var Word = /^[a-z]*$/i;
function unfold(words2, sep) {
  let initial = 97;
  return words2.reduce((accum, word) => {
    if (word === sep) {
      initial++;
    } else if (word.match(Word)) {
      accum.push(String.fromCharCode(initial) + word);
    } else {
      initial = 97;
      accum.push(word);
    }
    return accum;
  }, []);
}
function decode(data, subs) {
  for (let i = subsChrs.length - 1; i >= 0; i--) {
    data = data.split(subsChrs[i]).join(subs.substring(2 * i, 2 * i + 2));
  }
  const clumps = [];
  const leftover = data.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (all, item, semi, word) => {
    if (semi) {
      for (let i = parseInt(semi); i >= 0; i--) {
        clumps.push(";");
      }
    } else {
      clumps.push(item.toLowerCase());
    }
    return "";
  });
  if (leftover) {
    throw new Error(`leftovers: ${JSON.stringify(leftover)}`);
  }
  return unfold(unfold(clumps, ";"), ":");
}
function decodeOwl(data) {
  assertArgument(data[0] === "0", "unsupported auwl data", "data", data);
  return decode(data.substring(1 + 2 * subsChrs.length), data.substring(1, 1 + 2 * subsChrs.length));
}

// node_modules/ethers/lib.esm/wordlists/wordlist.js
var Wordlist = class {
  /**
   *  Creates a new Wordlist instance.
   *
   *  Sub-classes MUST call this if they provide their own constructor,
   *  passing in the locale string of the language.
   *
   *  Generally there is no need to create instances of a Wordlist,
   *  since each language-specific Wordlist creates an instance and
   *  there is no state kept internally, so they are safe to share.
   */
  constructor(locale) {
    __publicField(this, "locale");
    defineProperties(this, { locale });
  }
  /**
   *  Sub-classes may override this to provide a language-specific
   *  method for spliting %%phrase%% into individual words.
   *
   *  By default, %%phrase%% is split using any sequences of
   *  white-space as defined by regular expressions (i.e. ``/\s+/``).
   */
  split(phrase) {
    return phrase.toLowerCase().split(/\s+/g);
  }
  /**
   *  Sub-classes may override this to provider a language-specific
   *  method for joining %%words%% into a phrase.
   *
   *  By default, %%words%% are joined by a single space.
   */
  join(words2) {
    return words2.join(" ");
  }
};

// node_modules/ethers/lib.esm/wordlists/wordlist-owl.js
var _data4, _checksum, _words, _WordlistOwl_instances, loadWords_fn;
var WordlistOwl = class extends Wordlist {
  /**
   *  Creates a new Wordlist for %%locale%% using the OWL %%data%%
   *  and validated against the %%checksum%%.
   */
  constructor(locale, data, checksum2) {
    super(locale);
    __privateAdd(this, _WordlistOwl_instances);
    __privateAdd(this, _data4);
    __privateAdd(this, _checksum);
    __privateAdd(this, _words);
    __privateSet(this, _data4, data);
    __privateSet(this, _checksum, checksum2);
    __privateSet(this, _words, null);
  }
  /**
   *  The OWL-encoded data.
   */
  get _data() {
    return __privateGet(this, _data4);
  }
  /**
   *  Decode all the words for the wordlist.
   */
  _decodeWords() {
    return decodeOwl(__privateGet(this, _data4));
  }
  getWord(index) {
    const words2 = __privateMethod(this, _WordlistOwl_instances, loadWords_fn).call(this);
    assertArgument(index >= 0 && index < words2.length, `invalid word index: ${index}`, "index", index);
    return words2[index];
  }
  getWordIndex(word) {
    return __privateMethod(this, _WordlistOwl_instances, loadWords_fn).call(this).indexOf(word);
  }
};
_data4 = new WeakMap();
_checksum = new WeakMap();
_words = new WeakMap();
_WordlistOwl_instances = new WeakSet();
loadWords_fn = function() {
  if (__privateGet(this, _words) == null) {
    const words2 = this._decodeWords();
    const checksum2 = id(words2.join("\n") + "\n");
    if (checksum2 !== __privateGet(this, _checksum)) {
      throw new Error(`BIP39 Wordlist for ${this.locale} FAILED`);
    }
    __privateSet(this, _words, words2);
  }
  return __privateGet(this, _words);
};

// node_modules/ethers/lib.esm/wordlists/lang-en.js
var words = "0erleonalorenseinceregesticitStanvetearctssi#ch2Athck&tneLl0And#Il.yLeOutO=S|S%b/ra@SurdU'0Ce[Cid|CountCu'Hie=IdOu,-Qui*Ro[TT]T%T*[Tu$0AptDD-tD*[Ju,M.UltV<)Vi)0Rob-0FairF%dRaid0A(EEntRee0Ead0MRRp%tS!_rmBumCoholErtI&LLeyLowMo,O}PhaReadySoT Ways0A>urAz(gOngOuntU'd0Aly,Ch%Ci|G G!GryIm$K!Noun)Nu$O` Sw T&naTiqueXietyY1ArtOlogyPe?P!Pro=Ril1ChCt-EaEnaGueMMedM%MyOundR<+Re,Ri=RowTTefa@Ti,Tw%k0KPe@SaultSetSi,SumeThma0H!>OmTa{T&dT.udeTra@0Ct]D.Gu,NtTh%ToTumn0Era+OcadoOid0AkeA*AyEsomeFulKw?d0Is:ByChel%C#D+GL<)Lc#y~MbooN<aNn RRelyRga(R*lSeS-SketTt!3A^AnAutyCau'ComeEfF%eG(Ha=H(dLie=LowLtN^Nef./TrayTt Twe&Y#d3Cyc!DKeNdOlogyRdR`Tt _{AdeAmeAnketA,EakE[IndOodO[omOu'UeUrUsh_rdAtDyIlMbNeNusOkO,Rd R(gRrowSsTtomUn)XY_{etA(AndA[A=EadEezeI{Id+IefIghtIngIskOccoliOk&OnzeOomO` OwnUsh2Bb!DdyD+tFf$oIldLbLkL!tNd!Nk Rd&Rg R,SS(e[SyTt Y Zz:Bba+B(B!CtusGeKe~LmM aMpNN$N)lNdyNn#NoeNvasNy#Pab!P.$Pta(RRb#RdRgoRpetRryRtSeShS(o/!Su$TT$ogT^Teg%yTt!UghtU'Ut]Ve3Il(gL yM|NsusNturyRe$Rta(_irAlkAmp]An+AosApt Ar+A'AtEapE{Ee'EfErryE,I{&IefIldIm}yOi)Oo'R#-U{!UnkUrn0G?Nnam#Rc!Tiz&TyVil_imApArifyAwAyE<ErkEv I{I|IffImbIn-IpO{OgO'O`OudOwnUbUmpU, Ut^_^A,C#utDeFfeeIlInL!@L%LumnMb(eMeMf%tM-Mm#Mp<yNc tNdu@NfirmNg*[N}@Nsid NtrolNv()OkOlPp PyR$ReRnR*@/Tt#U^UntryUp!Ur'Us(V Yo>_{Ad!AftAmA}AshAt AwlAzyEamEd.EekEwI{etImeIspIt-OpO[Ou^OwdUci$UelUi'Umb!Un^UshYY,$2BeLtu*PPbo?dRiousRr|Rta(R=Sh]/omTe3C!:DMa+MpN)Ng R(gShUght WnY3AlBa>BrisCadeCemb CideCl(eC%a>C*a'ErF&'F(eFyG*eLayLiv M<dMi'Ni$Nti,NyP?tP&dPos.P`PutyRi=ScribeS tSignSkSpair/royTailTe@VelopVi)Vo>3AgramAlAm#dAryCeE'lEtFf G.$Gn.yLemmaNn NosaurRe@RtSag*eScov Sea'ShSmi[S%d Splay/<)V tVideV%)Zzy5Ct%Cum|G~Lph(Ma(Na>NkeyN%OrSeUb!Ve_ftAg#AmaA,-AwEamE[IftIllInkIpI=OpUmY2CkMbNeR(g/T^Ty1Arf1Nam-:G G!RlyRnR`Sily/Sy1HoOlogyOnomy0GeItUca>1F%t0G1GhtTh 2BowD E@r-Eg<tEm|Eph<tEvat%I>Se0B?kBodyBra)Er+Ot]PloyPow Pty0Ab!A@DD![D%'EmyErgyF%)Ga+G(eH<)JoyLi,OughR-hRollSu*T Ti*TryVelope1Isode0U$Uip0AA'OdeOs]R%Upt0CapeSayS&)Ta>0Ern$H-s1Id&)IlOkeOl=1A@Amp!Ce[Ch<+C.eCludeCu'Ecu>Erci'Hau,Hib.I!I,ItOt-P<dPe@Pi*Pla(Po'P*[T&dTra0EEbrow:Br-CeCultyDeIntI`~L'MeMilyMousNNcyNtasyRmSh]TT$Th TigueUltV%.e3Atu*Bru?yD $EEdElMa!N)/iv$T^V W3B Ct]EldGu*LeLmLt N$NdNeNg NishReRmR,Sc$ShTT}[X_gAmeAshAtAv%EeIghtIpOatO{O%Ow UidUshY_mCusGIlLd~owOdOtR)Re,R+tRkRtu}RumRw?dSsil/ UndX_gi!AmeEqu|EshI&dIn+OgOntO,OwnOz&U.2ElNNnyRna)RyTu*:D+tInLaxy~ yMePRa+Rba+Rd&Rl-Rm|SSpTeTh U+Ze3N $NiusN*Nt!Nu(e/u*2O,0AntFtGg!Ng RaffeRlVe_dAn)A*A[IdeImp'ObeOomOryO=OwUe_tDde[LdOdO'RillaSpelSsipV nWn_bA)A(AntApeA[Av.yEatE&IdIefItOc yOupOwUnt_rdE[IdeIltIt?N3M:B.IrLfMm M, NdPpyRb%RdRshR=,TVeWkZ?d3AdAl`ArtAvyD+hogIght~oLmetLpNRo3Dd&Gh~NtPRe/%y5BbyCkeyLdLeLiday~owMeNeyOdPeRnRr%R'Sp.$/TelUrV 5BGeM<Mb!M%Nd*dNgryNtRd!RryRtSb<d3Brid:1EOn0EaEntifyLe2N%e4LLeg$L}[0A+Ita>M&'Mu}Pa@Po'Pro=Pul'0ChCludeComeC*a'DexD-a>Do%Du,ryF<tFl-tF%mHa!H .Iti$Je@JuryMa>N Noc|PutQuiryS<eSe@SideSpi*/$lTa@T e,ToVe,V.eVol=3On0L<dOla>Sue0Em1Ory:CketGu?RZz3AlousAns~yWel9BInKeUr}yY5D+I)MpNg!Ni%Nk/:Ng?oo3EnEpT^upY3CkDD}yNdNgdomSsTT^&TeTt&Wi4EeIfeO{Ow:BBelB%Dd DyKeMpNgua+PtopR+T T(UghUndryVaWWnWsu.Y Zy3Ad AfArnA=Ctu*FtGG$G&dIsu*M#NdNg`NsOp?dSs#Tt Vel3ArB tyBr?yC&'FeFtGhtKeMbM.NkOnQuid/Tt!VeZ?d5AdAnB, C$CkG-NelyNgOpTt yUdUn+VeY$5CkyGga+Mb N?N^Xury3R-s:Ch(eDG-G}tIdIlInJ%KeMm$NNa+Nda>NgoNs]Nu$P!Rb!R^Rg(R(eRketRria+SkSs/ T^T i$ThTrixTt XimumZe3AdowAnAsu*AtCh<-D$DiaLodyLtMb M%yNt]NuRcyR+R.RryShSsa+T$Thod3Dd!DnightLk~]M-NdNimumN%Nu>Rac!Rr%S ySs/akeXXedXtu*5Bi!DelDifyMM|N.%NkeyN, N`OnR$ReRn(gSqu.oTh T]T%Unta(U'VeVie5ChFf(LeLtiplySc!SeumShroomS-/Tu$3Self/ yTh:I=MePk(Rrow/yT]Tu*3ArCkEdGati=G!@I` PhewR=/TTw%kUtr$V WsXt3CeGht5B!I'M(eeOd!Rm$R`SeTab!TeTh(gTi)VelW5C!?Mb R'T:K0EyJe@Li+Scu*S =Ta(Vious0CurE<Tob 0Or1FF Fi)T&2L1Ay0DI=Ymp-0It0CeEI#L(eLy1EnEraIn]Po'T]1An+B.Ch?dD D(?yG<I|Ig($Ph<0Tr-h0H 0Tdo%T TputTside0AlEnEr0NN 0Yg&0/ 0O}:CtDd!GeIrLa)LmNdaNelN-N` P RadeR|RkRrotRtySsT^ThTi|TrolTt nU'VeYm|3A)AnutArAs<tL-<NN$tyNcilOp!Pp Rfe@Rm.Rs#T2O}OtoRa'Ys-$0AnoCn-Ctu*E)GGe#~LotNkO} Pe/olT^Zza_)A}tA,-A>AyEa'Ed+U{UgUn+2EmEtIntL?LeLi)NdNyOlPul?Rt]S.]Ssib!/TatoTt yV tyWd W _@i)Ai'Ed-tEf Epa*Es|EttyEv|I)IdeIm?yIntI%.yIs#Iva>IzeOb!mO)[Odu)Of.OgramOje@Omo>OofOp tyOsp O>@OudOvide2Bl-Dd(g~LpL'Mpk(N^PilPpyR^a'R.yRpo'R'ShTZz!3Ramid:99Al.yAntumArt E,]I{ItIzO>:Bb.Cco#CeCkD?DioIlInI'~yMpN^NdomN+PidReTeTh V&WZ%3AdyAlAs#BelBuildC$lCei=CipeC%dCyc!Du)F!@F%mFu'G]G*tGul?Je@LaxLea'LiefLyMa(Memb M(dMo=Nd NewNtOp&PairPeatPla)P%tQui*ScueSemb!Si,Sour)Sp#'SultTi*T*atTurnUn]Ve$ViewW?d2Y`m0BBb#CeChDeD+F!GhtGidNgOtPp!SkTu$V$V 5AdA,BotBu,CketM<)OfOkieOmSeTa>UghUndU>Y$5Bb DeGLeNNwayR$:DDd!D}[FeIlLadLm#L#LtLu>MeMp!NdTisfyToshiU)Usa+VeY1A!AnA*Att E}HemeHoolI&)I[%sOrp]OutRapRe&RiptRub1AAr^As#AtC#dC*tCt]Cur.yEdEkGm|Le@~M(?Ni%N'Nt&)RiesRvi)Ss]Tt!TupV&_dowAftAllowA*EdEllEriffIeldIftI}IpIv O{OeOotOpOrtOuld O=RimpRugUff!Y0Bl(gCkDeE+GhtGnL|Lk~yLv Mil?Mp!N)NgR&/ Tua>XZe1A>Et^IIllInIrtUll0AbAmEepEnd I)IdeIghtImOg<OtOwUsh0AllArtI!OkeOo`0A{AkeApIffOw0ApCc Ci$CkDaFtL?Ldi LidLut]L=Me#eNgOnRryRtUlUndUpUr)U`0A)A*Ati$AwnEakEci$EedEllEndH eI)Id IkeInIr.L.OilOns%O#OrtOtRayReadR(gY0Ua*UeezeUir*l_b!AdiumAffA+AirsAmpAndArtA>AyEakEelEmEpE*oI{IllIngO{Oma^O}OolOryO=Ra>gyReetRikeR#gRugg!Ud|UffUmb!Y!0Bje@Bm.BwayC)[ChDd&Ff G?G+,ItMm NNnyN'tP PplyP*meReRfa)R+Rpri'RroundR=ySpe@/a(1AllowAmpApArmE?EetIftImIngIt^Ord1MbolMptomRup/em:B!Ck!GIlL|LkNkPeR+tSk/eTtooXi3A^Am~NN<tNnisNtRm/Xt_nkAtEmeEnE%yE*EyIngIsOughtReeRi=RowUmbUnd 0CketDeG LtMb MeNyPRedSsueT!5A,BaccoDayDdl EGe` I!tK&MatoM%rowNeNgueNightOlO`PP-Pp!R^RnadoRtoi'SsT$Uri,W?dW WnY_{AdeAff-Ag-A(Ansf ApAshA=lAyEatEeEndI$IbeI{Igg ImIpOphyOub!U{UeUlyUmpetU,U`Y2BeIt]Mb!NaN}lRkeyRnRt!1El=EntyI)InI,O1PeP-$:5Ly5B*lla0Ab!Awa*C!Cov D DoFairFoldHappyIf%mIqueItIv 'KnownLo{TilUsu$Veil1Da>GradeHoldOnP Set1B<Ge0A+EEdEfulE![U$0Il.y:C<tCuumGueLidL!yL=NNishP%Rious/Ult3H-!L=tNd%Ntu*NueRbRifyRs]RyS'lT <3Ab!Br<tCiousCt%yDeoEw~a+Nta+Ol(Rtu$RusSaS.Su$T$Vid5C$I)IdLc<oLumeTeYa+:GeG#ItLk~LnutNtRfa*RmRri%ShSp/eT VeY3Al`Ap#ArA'lA` BDd(gEk&dIrdLcome/T_!AtEatEelEnE*IpIsp 0DeD`FeLd~NNdowNeNgNkNn Nt ReSdomSeShT}[5LfM<Nd OdOlRdRkRldRryR`_pE{E,!I,I>Ong::Rd3Ar~ow9UUngU`:3BraRo9NeO";
var checksum = "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60";
var wordlist = null;
var LangEn = class _LangEn extends WordlistOwl {
  /**
   *  Creates a new instance of the English language Wordlist.
   *
   *  This should be unnecessary most of the time as the exported
   *  [[langEn]] should suffice.
   *
   *  @_ignore:
   */
  constructor() {
    super("en", words, checksum);
  }
  /**
   *  Returns a singleton instance of a ``LangEn``, creating it
   *  if this is the first time being called.
   */
  static wordlist() {
    if (wordlist == null) {
      wordlist = new _LangEn();
    }
    return wordlist;
  }
};

// node_modules/ethers/lib.esm/wallet/mnemonic.js
function getUpperMask(bits) {
  return (1 << bits) - 1 << 8 - bits & 255;
}
function getLowerMask(bits) {
  return (1 << bits) - 1 & 255;
}
function mnemonicToEntropy(mnemonic, wordlist2) {
  assertNormalize("NFKD");
  if (wordlist2 == null) {
    wordlist2 = LangEn.wordlist();
  }
  const words2 = wordlist2.split(mnemonic);
  assertArgument(words2.length % 3 === 0 && words2.length >= 12 && words2.length <= 24, "invalid mnemonic length", "mnemonic", "[ REDACTED ]");
  const entropy = new Uint8Array(Math.ceil(11 * words2.length / 8));
  let offset = 0;
  for (let i = 0; i < words2.length; i++) {
    let index = wordlist2.getWordIndex(words2[i].normalize("NFKD"));
    assertArgument(index >= 0, `invalid mnemonic word at index ${i}`, "mnemonic", "[ REDACTED ]");
    for (let bit = 0; bit < 11; bit++) {
      if (index & 1 << 10 - bit) {
        entropy[offset >> 3] |= 1 << 7 - offset % 8;
      }
      offset++;
    }
  }
  const entropyBits = 32 * words2.length / 3;
  const checksumBits = words2.length / 3;
  const checksumMask = getUpperMask(checksumBits);
  const checksum2 = getBytes(sha2562(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
  assertArgument(checksum2 === (entropy[entropy.length - 1] & checksumMask), "invalid mnemonic checksum", "mnemonic", "[ REDACTED ]");
  return hexlify(entropy.slice(0, entropyBits / 8));
}
function entropyToMnemonic(entropy, wordlist2) {
  assertArgument(entropy.length % 4 === 0 && entropy.length >= 16 && entropy.length <= 32, "invalid entropy size", "entropy", "[ REDACTED ]");
  if (wordlist2 == null) {
    wordlist2 = LangEn.wordlist();
  }
  const indices = [0];
  let remainingBits = 11;
  for (let i = 0; i < entropy.length; i++) {
    if (remainingBits > 8) {
      indices[indices.length - 1] <<= 8;
      indices[indices.length - 1] |= entropy[i];
      remainingBits -= 8;
    } else {
      indices[indices.length - 1] <<= remainingBits;
      indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;
      indices.push(entropy[i] & getLowerMask(8 - remainingBits));
      remainingBits += 3;
    }
  }
  const checksumBits = entropy.length / 4;
  const checksum2 = parseInt(sha2562(entropy).substring(2, 4), 16) & getUpperMask(checksumBits);
  indices[indices.length - 1] <<= checksumBits;
  indices[indices.length - 1] |= checksum2 >> 8 - checksumBits;
  return wordlist2.join(indices.map((index) => wordlist2.getWord(index)));
}
var _guard5 = {};
var Mnemonic = class _Mnemonic {
  /**
   *  @private
   */
  constructor(guard, entropy, phrase, password, wordlist2) {
    /**
     *  The mnemonic phrase of 12, 15, 18, 21 or 24 words.
     *
     *  Use the [[wordlist]] ``split`` method to get the individual words.
     */
    __publicField(this, "phrase");
    /**
     *  The password used for this mnemonic. If no password is used this
     *  is the empty string (i.e. ``""``) as per the specification.
     */
    __publicField(this, "password");
    /**
     *  The wordlist for this mnemonic.
     */
    __publicField(this, "wordlist");
    /**
     *  The underlying entropy which the mnemonic encodes.
     */
    __publicField(this, "entropy");
    if (password == null) {
      password = "";
    }
    if (wordlist2 == null) {
      wordlist2 = LangEn.wordlist();
    }
    assertPrivate(guard, _guard5, "Mnemonic");
    defineProperties(this, { phrase, password, wordlist: wordlist2, entropy });
  }
  /**
   *  Returns the seed for the mnemonic.
   */
  computeSeed() {
    const salt = toUtf8Bytes("mnemonic" + this.password, "NFKD");
    return pbkdf22(toUtf8Bytes(this.phrase, "NFKD"), salt, 2048, 64, "sha512");
  }
  /**
   *  Creates a new Mnemonic for the %%phrase%%.
   *
   *  The default %%password%% is the empty string and the default
   *  wordlist is the [English wordlists](LangEn).
   */
  static fromPhrase(phrase, password, wordlist2) {
    const entropy = mnemonicToEntropy(phrase, wordlist2);
    phrase = entropyToMnemonic(getBytes(entropy), wordlist2);
    return new _Mnemonic(_guard5, entropy, phrase, password, wordlist2);
  }
  /**
   *  Create a new **Mnemonic** from the %%entropy%%.
   *
   *  The default %%password%% is the empty string and the default
   *  wordlist is the [English wordlists](LangEn).
   */
  static fromEntropy(_entropy, password, wordlist2) {
    const entropy = getBytes(_entropy, "entropy");
    const phrase = entropyToMnemonic(entropy, wordlist2);
    return new _Mnemonic(_guard5, hexlify(entropy), phrase, password, wordlist2);
  }
  /**
   *  Returns the phrase for %%mnemonic%%.
   */
  static entropyToPhrase(_entropy, wordlist2) {
    const entropy = getBytes(_entropy, "entropy");
    return entropyToMnemonic(entropy, wordlist2);
  }
  /**
   *  Returns the entropy for %%phrase%%.
   */
  static phraseToEntropy(phrase, wordlist2) {
    return mnemonicToEntropy(phrase, wordlist2);
  }
  /**
   *  Returns true if %%phrase%% is a valid [[link-bip-39]] phrase.
   *
   *  This checks all the provided words belong to the %%wordlist%%,
   *  that the length is valid and the checksum is correct.
   */
  static isValidMnemonic(phrase, wordlist2) {
    try {
      mnemonicToEntropy(phrase, wordlist2);
      return true;
    } catch (error) {
    }
    return false;
  }
};

// node_modules/aes-js/lib.esm/aes.js
var __classPrivateFieldGet = function(receiver, state, kind, f2) {
  if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
};
var __classPrivateFieldSet = function(receiver, state, value, kind, f2) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
};
var _AES_key;
var _AES_Kd;
var _AES_Ke;
var numberOfRounds = { 16: 10, 24: 12, 32: 14 };
var rcon = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145];
var S = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22];
var Si = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125];
var T12 = [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986];
var T2 = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766];
var T3 = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126];
var T4 = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436];
var T5 = [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890];
var T6 = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935];
var T7 = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600];
var T8 = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480];
var U1 = [0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795];
var U2 = [0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855];
var U3 = [0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150];
var U4 = [0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925];
function convertToInt32(bytes2) {
  const result = [];
  for (let i = 0; i < bytes2.length; i += 4) {
    result.push(bytes2[i] << 24 | bytes2[i + 1] << 16 | bytes2[i + 2] << 8 | bytes2[i + 3]);
  }
  return result;
}
var AES = class _AES {
  get key() {
    return __classPrivateFieldGet(this, _AES_key, "f").slice();
  }
  constructor(key) {
    _AES_key.set(this, void 0);
    _AES_Kd.set(this, void 0);
    _AES_Ke.set(this, void 0);
    if (!(this instanceof _AES)) {
      throw Error("AES must be instanitated with `new`");
    }
    __classPrivateFieldSet(this, _AES_key, new Uint8Array(key), "f");
    const rounds = numberOfRounds[this.key.length];
    if (rounds == null) {
      throw new TypeError("invalid key size (must be 16, 24 or 32 bytes)");
    }
    __classPrivateFieldSet(this, _AES_Ke, [], "f");
    __classPrivateFieldSet(this, _AES_Kd, [], "f");
    for (let i = 0; i <= rounds; i++) {
      __classPrivateFieldGet(this, _AES_Ke, "f").push([0, 0, 0, 0]);
      __classPrivateFieldGet(this, _AES_Kd, "f").push([0, 0, 0, 0]);
    }
    const roundKeyCount = (rounds + 1) * 4;
    const KC = this.key.length / 4;
    const tk = convertToInt32(this.key);
    let index;
    for (let i = 0; i < KC; i++) {
      index = i >> 2;
      __classPrivateFieldGet(this, _AES_Ke, "f")[index][i % 4] = tk[i];
      __classPrivateFieldGet(this, _AES_Kd, "f")[rounds - index][i % 4] = tk[i];
    }
    let rconpointer = 0;
    let t = KC, tt;
    while (t < roundKeyCount) {
      tt = tk[KC - 1];
      tk[0] ^= S[tt >> 16 & 255] << 24 ^ S[tt >> 8 & 255] << 16 ^ S[tt & 255] << 8 ^ S[tt >> 24 & 255] ^ rcon[rconpointer] << 24;
      rconpointer += 1;
      if (KC != 8) {
        for (let i2 = 1; i2 < KC; i2++) {
          tk[i2] ^= tk[i2 - 1];
        }
      } else {
        for (let i2 = 1; i2 < KC / 2; i2++) {
          tk[i2] ^= tk[i2 - 1];
        }
        tt = tk[KC / 2 - 1];
        tk[KC / 2] ^= S[tt & 255] ^ S[tt >> 8 & 255] << 8 ^ S[tt >> 16 & 255] << 16 ^ S[tt >> 24 & 255] << 24;
        for (let i2 = KC / 2 + 1; i2 < KC; i2++) {
          tk[i2] ^= tk[i2 - 1];
        }
      }
      let i = 0, r, c;
      while (i < KC && t < roundKeyCount) {
        r = t >> 2;
        c = t % 4;
        __classPrivateFieldGet(this, _AES_Ke, "f")[r][c] = tk[i];
        __classPrivateFieldGet(this, _AES_Kd, "f")[rounds - r][c] = tk[i++];
        t++;
      }
    }
    for (let r = 1; r < rounds; r++) {
      for (let c = 0; c < 4; c++) {
        tt = __classPrivateFieldGet(this, _AES_Kd, "f")[r][c];
        __classPrivateFieldGet(this, _AES_Kd, "f")[r][c] = U1[tt >> 24 & 255] ^ U2[tt >> 16 & 255] ^ U3[tt >> 8 & 255] ^ U4[tt & 255];
      }
    }
  }
  encrypt(plaintext) {
    if (plaintext.length != 16) {
      throw new TypeError("invalid plaintext size (must be 16 bytes)");
    }
    const rounds = __classPrivateFieldGet(this, _AES_Ke, "f").length - 1;
    const a = [0, 0, 0, 0];
    let t = convertToInt32(plaintext);
    for (let i = 0; i < 4; i++) {
      t[i] ^= __classPrivateFieldGet(this, _AES_Ke, "f")[0][i];
    }
    for (let r = 1; r < rounds; r++) {
      for (let i = 0; i < 4; i++) {
        a[i] = T12[t[i] >> 24 & 255] ^ T2[t[(i + 1) % 4] >> 16 & 255] ^ T3[t[(i + 2) % 4] >> 8 & 255] ^ T4[t[(i + 3) % 4] & 255] ^ __classPrivateFieldGet(this, _AES_Ke, "f")[r][i];
      }
      t = a.slice();
    }
    const result = new Uint8Array(16);
    let tt = 0;
    for (let i = 0; i < 4; i++) {
      tt = __classPrivateFieldGet(this, _AES_Ke, "f")[rounds][i];
      result[4 * i] = (S[t[i] >> 24 & 255] ^ tt >> 24) & 255;
      result[4 * i + 1] = (S[t[(i + 1) % 4] >> 16 & 255] ^ tt >> 16) & 255;
      result[4 * i + 2] = (S[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
      result[4 * i + 3] = (S[t[(i + 3) % 4] & 255] ^ tt) & 255;
    }
    return result;
  }
  decrypt(ciphertext) {
    if (ciphertext.length != 16) {
      throw new TypeError("invalid ciphertext size (must be 16 bytes)");
    }
    const rounds = __classPrivateFieldGet(this, _AES_Kd, "f").length - 1;
    const a = [0, 0, 0, 0];
    let t = convertToInt32(ciphertext);
    for (let i = 0; i < 4; i++) {
      t[i] ^= __classPrivateFieldGet(this, _AES_Kd, "f")[0][i];
    }
    for (let r = 1; r < rounds; r++) {
      for (let i = 0; i < 4; i++) {
        a[i] = T5[t[i] >> 24 & 255] ^ T6[t[(i + 3) % 4] >> 16 & 255] ^ T7[t[(i + 2) % 4] >> 8 & 255] ^ T8[t[(i + 1) % 4] & 255] ^ __classPrivateFieldGet(this, _AES_Kd, "f")[r][i];
      }
      t = a.slice();
    }
    const result = new Uint8Array(16);
    let tt = 0;
    for (let i = 0; i < 4; i++) {
      tt = __classPrivateFieldGet(this, _AES_Kd, "f")[rounds][i];
      result[4 * i] = (Si[t[i] >> 24 & 255] ^ tt >> 24) & 255;
      result[4 * i + 1] = (Si[t[(i + 3) % 4] >> 16 & 255] ^ tt >> 16) & 255;
      result[4 * i + 2] = (Si[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
      result[4 * i + 3] = (Si[t[(i + 1) % 4] & 255] ^ tt) & 255;
    }
    return result;
  }
};
_AES_key = /* @__PURE__ */ new WeakMap(), _AES_Kd = /* @__PURE__ */ new WeakMap(), _AES_Ke = /* @__PURE__ */ new WeakMap();

// node_modules/aes-js/lib.esm/mode.js
var ModeOfOperation = class {
  constructor(name, key, cls) {
    if (cls && !(this instanceof cls)) {
      throw new Error(`${name} must be instantiated with "new"`);
    }
    Object.defineProperties(this, {
      aes: { enumerable: true, value: new AES(key) },
      name: { enumerable: true, value: name }
    });
  }
};

// node_modules/aes-js/lib.esm/mode-cbc.js
var __classPrivateFieldSet2 = function(receiver, state, value, kind, f2) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet2 = function(receiver, state, kind, f2) {
  if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
};
var _CBC_iv;
var _CBC_lastBlock;
var CBC = class _CBC extends ModeOfOperation {
  constructor(key, iv) {
    super("ECC", key, _CBC);
    _CBC_iv.set(this, void 0);
    _CBC_lastBlock.set(this, void 0);
    if (iv) {
      if (iv.length % 16) {
        throw new TypeError("invalid iv size (must be 16 bytes)");
      }
      __classPrivateFieldSet2(this, _CBC_iv, new Uint8Array(iv), "f");
    } else {
      __classPrivateFieldSet2(this, _CBC_iv, new Uint8Array(16), "f");
    }
    __classPrivateFieldSet2(this, _CBC_lastBlock, this.iv, "f");
  }
  get iv() {
    return new Uint8Array(__classPrivateFieldGet2(this, _CBC_iv, "f"));
  }
  encrypt(plaintext) {
    if (plaintext.length % 16) {
      throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
    }
    const ciphertext = new Uint8Array(plaintext.length);
    for (let i = 0; i < plaintext.length; i += 16) {
      for (let j = 0; j < 16; j++) {
        __classPrivateFieldGet2(this, _CBC_lastBlock, "f")[j] ^= plaintext[i + j];
      }
      __classPrivateFieldSet2(this, _CBC_lastBlock, this.aes.encrypt(__classPrivateFieldGet2(this, _CBC_lastBlock, "f")), "f");
      ciphertext.set(__classPrivateFieldGet2(this, _CBC_lastBlock, "f"), i);
    }
    return ciphertext;
  }
  decrypt(ciphertext) {
    if (ciphertext.length % 16) {
      throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
    }
    const plaintext = new Uint8Array(ciphertext.length);
    for (let i = 0; i < ciphertext.length; i += 16) {
      const block = this.aes.decrypt(ciphertext.subarray(i, i + 16));
      for (let j = 0; j < 16; j++) {
        plaintext[i + j] = block[j] ^ __classPrivateFieldGet2(this, _CBC_lastBlock, "f")[j];
        __classPrivateFieldGet2(this, _CBC_lastBlock, "f")[j] = ciphertext[i + j];
      }
    }
    return plaintext;
  }
};
_CBC_iv = /* @__PURE__ */ new WeakMap(), _CBC_lastBlock = /* @__PURE__ */ new WeakMap();

// node_modules/aes-js/lib.esm/mode-cfb.js
var __classPrivateFieldGet3 = function(receiver, state, kind, f2) {
  if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
};
var _CFB_instances;
var _CFB_iv;
var _CFB_shiftRegister;
var _CFB_shift;
_CFB_iv = /* @__PURE__ */ new WeakMap(), _CFB_shiftRegister = /* @__PURE__ */ new WeakMap(), _CFB_instances = /* @__PURE__ */ new WeakSet(), _CFB_shift = function _CFB_shift2(data) {
  const segmentSize = this.segmentSize / 8;
  __classPrivateFieldGet3(this, _CFB_shiftRegister, "f").set(__classPrivateFieldGet3(this, _CFB_shiftRegister, "f").subarray(segmentSize));
  __classPrivateFieldGet3(this, _CFB_shiftRegister, "f").set(data.subarray(0, segmentSize), 16 - segmentSize);
};

// node_modules/aes-js/lib.esm/mode-ctr.js
var __classPrivateFieldSet3 = function(receiver, state, value, kind, f2) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet4 = function(receiver, state, kind, f2) {
  if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
};
var _CTR_remaining;
var _CTR_remainingIndex;
var _CTR_counter;
var CTR = class _CTR extends ModeOfOperation {
  constructor(key, initialValue) {
    super("CTR", key, _CTR);
    _CTR_remaining.set(this, void 0);
    _CTR_remainingIndex.set(this, void 0);
    _CTR_counter.set(this, void 0);
    __classPrivateFieldSet3(this, _CTR_counter, new Uint8Array(16), "f");
    __classPrivateFieldGet4(this, _CTR_counter, "f").fill(0);
    __classPrivateFieldSet3(this, _CTR_remaining, __classPrivateFieldGet4(this, _CTR_counter, "f"), "f");
    __classPrivateFieldSet3(this, _CTR_remainingIndex, 16, "f");
    if (initialValue == null) {
      initialValue = 1;
    }
    if (typeof initialValue === "number") {
      this.setCounterValue(initialValue);
    } else {
      this.setCounterBytes(initialValue);
    }
  }
  get counter() {
    return new Uint8Array(__classPrivateFieldGet4(this, _CTR_counter, "f"));
  }
  setCounterValue(value) {
    if (!Number.isInteger(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {
      throw new TypeError("invalid counter initial integer value");
    }
    for (let index = 15; index >= 0; --index) {
      __classPrivateFieldGet4(this, _CTR_counter, "f")[index] = value % 256;
      value = Math.floor(value / 256);
    }
  }
  setCounterBytes(value) {
    if (value.length !== 16) {
      throw new TypeError("invalid counter initial Uint8Array value length");
    }
    __classPrivateFieldGet4(this, _CTR_counter, "f").set(value);
  }
  increment() {
    for (let i = 15; i >= 0; i--) {
      if (__classPrivateFieldGet4(this, _CTR_counter, "f")[i] === 255) {
        __classPrivateFieldGet4(this, _CTR_counter, "f")[i] = 0;
      } else {
        __classPrivateFieldGet4(this, _CTR_counter, "f")[i]++;
        break;
      }
    }
  }
  encrypt(plaintext) {
    var _a2, _b;
    const crypttext = new Uint8Array(plaintext);
    for (let i = 0; i < crypttext.length; i++) {
      if (__classPrivateFieldGet4(this, _CTR_remainingIndex, "f") === 16) {
        __classPrivateFieldSet3(this, _CTR_remaining, this.aes.encrypt(__classPrivateFieldGet4(this, _CTR_counter, "f")), "f");
        __classPrivateFieldSet3(this, _CTR_remainingIndex, 0, "f");
        this.increment();
      }
      crypttext[i] ^= __classPrivateFieldGet4(this, _CTR_remaining, "f")[__classPrivateFieldSet3(this, _CTR_remainingIndex, (_b = __classPrivateFieldGet4(this, _CTR_remainingIndex, "f"), _a2 = _b++, _b), "f"), _a2];
    }
    return crypttext;
  }
  decrypt(ciphertext) {
    return this.encrypt(ciphertext);
  }
};
_CTR_remaining = /* @__PURE__ */ new WeakMap(), _CTR_remainingIndex = /* @__PURE__ */ new WeakMap(), _CTR_counter = /* @__PURE__ */ new WeakMap();

// node_modules/aes-js/lib.esm/mode-ofb.js
var _OFB_iv;
var _OFB_lastPrecipher;
var _OFB_lastPrecipherIndex;
_OFB_iv = /* @__PURE__ */ new WeakMap(), _OFB_lastPrecipher = /* @__PURE__ */ new WeakMap(), _OFB_lastPrecipherIndex = /* @__PURE__ */ new WeakMap();

// node_modules/aes-js/lib.esm/padding.js
function pkcs7Strip(data) {
  if (data.length < 16) {
    throw new TypeError("PKCS#7 invalid length");
  }
  const padder = data[data.length - 1];
  if (padder > 16) {
    throw new TypeError("PKCS#7 padding byte out of range");
  }
  const length = data.length - padder;
  for (let i = 0; i < padder; i++) {
    if (data[length + i] !== padder) {
      throw new TypeError("PKCS#7 invalid padding byte");
    }
  }
  return new Uint8Array(data.subarray(0, length));
}

// node_modules/ethers/lib.esm/wallet/utils.js
function looseArrayify(hexString) {
  if (typeof hexString === "string" && !hexString.startsWith("0x")) {
    hexString = "0x" + hexString;
  }
  return getBytesCopy(hexString);
}
function zpad(value, length) {
  value = String(value);
  while (value.length < length) {
    value = "0" + value;
  }
  return value;
}
function getPassword(password) {
  if (typeof password === "string") {
    return toUtf8Bytes(password, "NFKC");
  }
  return getBytesCopy(password);
}
function spelunk(object2, _path) {
  const match = _path.match(/^([a-z0-9$_.-]*)(:([a-z]+))?(!)?$/i);
  assertArgument(match != null, "invalid path", "path", _path);
  const path = match[1];
  const type = match[3];
  const reqd = match[4] === "!";
  let cur = object2;
  for (const comp of path.toLowerCase().split(".")) {
    if (Array.isArray(cur)) {
      if (!comp.match(/^[0-9]+$/)) {
        break;
      }
      cur = cur[parseInt(comp)];
    } else if (typeof cur === "object") {
      let found = null;
      for (const key in cur) {
        if (key.toLowerCase() === comp) {
          found = cur[key];
          break;
        }
      }
      cur = found;
    } else {
      cur = null;
    }
    if (cur == null) {
      break;
    }
  }
  assertArgument(!reqd || cur != null, "missing required value", "path", path);
  if (type && cur != null) {
    if (type === "int") {
      if (typeof cur === "string" && cur.match(/^-?[0-9]+$/)) {
        return parseInt(cur);
      } else if (Number.isSafeInteger(cur)) {
        return cur;
      }
    }
    if (type === "number") {
      if (typeof cur === "string" && cur.match(/^-?[0-9.]*$/)) {
        return parseFloat(cur);
      }
    }
    if (type === "data") {
      if (typeof cur === "string") {
        return looseArrayify(cur);
      }
    }
    if (type === "array" && Array.isArray(cur)) {
      return cur;
    }
    if (type === typeof cur) {
      return cur;
    }
    assertArgument(false, `wrong type found for ${type} `, "path", path);
  }
  return cur;
}

// node_modules/ethers/lib.esm/wallet/json-keystore.js
var defaultPath = "m/44'/60'/0'/0/0";
function isKeystoreJson(json) {
  try {
    const data = JSON.parse(json);
    const version2 = data.version != null ? parseInt(data.version) : 0;
    if (version2 === 3) {
      return true;
    }
  } catch (error) {
  }
  return false;
}
function decrypt(data, key, ciphertext) {
  const cipher = spelunk(data, "crypto.cipher:string");
  if (cipher === "aes-128-ctr") {
    const iv = spelunk(data, "crypto.cipherparams.iv:data!");
    const aesCtr = new CTR(key, iv);
    return hexlify(aesCtr.decrypt(ciphertext));
  }
  assert(false, "unsupported cipher", "UNSUPPORTED_OPERATION", {
    operation: "decrypt"
  });
}
function getAccount(data, _key) {
  const key = getBytes(_key);
  const ciphertext = spelunk(data, "crypto.ciphertext:data!");
  const computedMAC = hexlify(keccak256(concat([key.slice(16, 32), ciphertext]))).substring(2);
  assertArgument(computedMAC === spelunk(data, "crypto.mac:string!").toLowerCase(), "incorrect password", "password", "[ REDACTED ]");
  const privateKey = decrypt(data, key.slice(0, 16), ciphertext);
  const address = computeAddress(privateKey);
  if (data.address) {
    let check = data.address.toLowerCase();
    if (!check.startsWith("0x")) {
      check = "0x" + check;
    }
    assertArgument(getAddress(check) === address, "keystore address/privateKey mismatch", "address", data.address);
  }
  const account = { address, privateKey };
  const version2 = spelunk(data, "x-ethers.version:string");
  if (version2 === "0.1") {
    const mnemonicKey = key.slice(32, 64);
    const mnemonicCiphertext = spelunk(data, "x-ethers.mnemonicCiphertext:data!");
    const mnemonicIv = spelunk(data, "x-ethers.mnemonicCounter:data!");
    const mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);
    account.mnemonic = {
      path: spelunk(data, "x-ethers.path:string") || defaultPath,
      locale: spelunk(data, "x-ethers.locale:string") || "en",
      entropy: hexlify(getBytes(mnemonicAesCtr.decrypt(mnemonicCiphertext)))
    };
  }
  return account;
}
function getDecryptKdfParams(data) {
  const kdf = spelunk(data, "crypto.kdf:string");
  if (kdf && typeof kdf === "string") {
    if (kdf.toLowerCase() === "scrypt") {
      const salt = spelunk(data, "crypto.kdfparams.salt:data!");
      const N3 = spelunk(data, "crypto.kdfparams.n:int!");
      const r = spelunk(data, "crypto.kdfparams.r:int!");
      const p = spelunk(data, "crypto.kdfparams.p:int!");
      assertArgument(N3 > 0 && (N3 & N3 - 1) === 0, "invalid kdf.N", "kdf.N", N3);
      assertArgument(r > 0 && p > 0, "invalid kdf", "kdf", kdf);
      const dkLen = spelunk(data, "crypto.kdfparams.dklen:int!");
      assertArgument(dkLen === 32, "invalid kdf.dklen", "kdf.dflen", dkLen);
      return { name: "scrypt", salt, N: N3, r, p, dkLen: 64 };
    } else if (kdf.toLowerCase() === "pbkdf2") {
      const salt = spelunk(data, "crypto.kdfparams.salt:data!");
      const prf = spelunk(data, "crypto.kdfparams.prf:string!");
      const algorithm = prf.split("-").pop();
      assertArgument(algorithm === "sha256" || algorithm === "sha512", "invalid kdf.pdf", "kdf.pdf", prf);
      const count = spelunk(data, "crypto.kdfparams.c:int!");
      const dkLen = spelunk(data, "crypto.kdfparams.dklen:int!");
      assertArgument(dkLen === 32, "invalid kdf.dklen", "kdf.dklen", dkLen);
      return { name: "pbkdf2", salt, count, dkLen, algorithm };
    }
  }
  assertArgument(false, "unsupported key-derivation function", "kdf", kdf);
}
function decryptKeystoreJsonSync(json, _password) {
  const data = JSON.parse(json);
  const password = getPassword(_password);
  const params = getDecryptKdfParams(data);
  if (params.name === "pbkdf2") {
    const { salt: salt2, count, dkLen: dkLen2, algorithm } = params;
    const key2 = pbkdf22(password, salt2, count, dkLen2, algorithm);
    return getAccount(data, key2);
  }
  assert(params.name === "scrypt", "cannot be reached", "UNKNOWN_ERROR", { params });
  const { salt, N: N3, r, p, dkLen } = params;
  const key = scryptSync(password, salt, N3, r, p, dkLen);
  return getAccount(data, key);
}
function stall3(duration) {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve();
    }, duration);
  });
}
async function decryptKeystoreJson(json, _password, progress) {
  const data = JSON.parse(json);
  const password = getPassword(_password);
  const params = getDecryptKdfParams(data);
  if (params.name === "pbkdf2") {
    if (progress) {
      progress(0);
      await stall3(0);
    }
    const { salt: salt2, count, dkLen: dkLen2, algorithm } = params;
    const key2 = pbkdf22(password, salt2, count, dkLen2, algorithm);
    if (progress) {
      progress(1);
      await stall3(0);
    }
    return getAccount(data, key2);
  }
  assert(params.name === "scrypt", "cannot be reached", "UNKNOWN_ERROR", { params });
  const { salt, N: N3, r, p, dkLen } = params;
  const key = await scrypt2(password, salt, N3, r, p, dkLen, progress);
  return getAccount(data, key);
}
function getEncryptKdfParams(options) {
  const salt = options.salt != null ? getBytes(options.salt, "options.salt") : randomBytes3(32);
  let N3 = 1 << 17, r = 8, p = 1;
  if (options.scrypt) {
    if (options.scrypt.N) {
      N3 = options.scrypt.N;
    }
    if (options.scrypt.r) {
      r = options.scrypt.r;
    }
    if (options.scrypt.p) {
      p = options.scrypt.p;
    }
  }
  assertArgument(typeof N3 === "number" && N3 > 0 && Number.isSafeInteger(N3) && (BigInt(N3) & BigInt(N3 - 1)) === BigInt(0), "invalid scrypt N parameter", "options.N", N3);
  assertArgument(typeof r === "number" && r > 0 && Number.isSafeInteger(r), "invalid scrypt r parameter", "options.r", r);
  assertArgument(typeof p === "number" && p > 0 && Number.isSafeInteger(p), "invalid scrypt p parameter", "options.p", p);
  return { name: "scrypt", dkLen: 32, salt, N: N3, r, p };
}
function _encryptKeystore(key, kdf, account, options) {
  const privateKey = getBytes(account.privateKey, "privateKey");
  const iv = options.iv != null ? getBytes(options.iv, "options.iv") : randomBytes3(16);
  assertArgument(iv.length === 16, "invalid options.iv length", "options.iv", options.iv);
  const uuidRandom = options.uuid != null ? getBytes(options.uuid, "options.uuid") : randomBytes3(16);
  assertArgument(uuidRandom.length === 16, "invalid options.uuid length", "options.uuid", options.iv);
  const derivedKey = key.slice(0, 16);
  const macPrefix = key.slice(16, 32);
  const aesCtr = new CTR(derivedKey, iv);
  const ciphertext = getBytes(aesCtr.encrypt(privateKey));
  const mac = keccak256(concat([macPrefix, ciphertext]));
  const data = {
    address: account.address.substring(2).toLowerCase(),
    id: uuidV4(uuidRandom),
    version: 3,
    Crypto: {
      cipher: "aes-128-ctr",
      cipherparams: {
        iv: hexlify(iv).substring(2)
      },
      ciphertext: hexlify(ciphertext).substring(2),
      kdf: "scrypt",
      kdfparams: {
        salt: hexlify(kdf.salt).substring(2),
        n: kdf.N,
        dklen: 32,
        p: kdf.p,
        r: kdf.r
      },
      mac: mac.substring(2)
    }
  };
  if (account.mnemonic) {
    const client = options.client != null ? options.client : `ethers/${version}`;
    const path = account.mnemonic.path || defaultPath;
    const locale = account.mnemonic.locale || "en";
    const mnemonicKey = key.slice(32, 64);
    const entropy = getBytes(account.mnemonic.entropy, "account.mnemonic.entropy");
    const mnemonicIv = randomBytes3(16);
    const mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);
    const mnemonicCiphertext = getBytes(mnemonicAesCtr.encrypt(entropy));
    const now = /* @__PURE__ */ new Date();
    const timestamp = now.getUTCFullYear() + "-" + zpad(now.getUTCMonth() + 1, 2) + "-" + zpad(now.getUTCDate(), 2) + "T" + zpad(now.getUTCHours(), 2) + "-" + zpad(now.getUTCMinutes(), 2) + "-" + zpad(now.getUTCSeconds(), 2) + ".0Z";
    const gethFilename = "UTC--" + timestamp + "--" + data.address;
    data["x-ethers"] = {
      client,
      gethFilename,
      path,
      locale,
      mnemonicCounter: hexlify(mnemonicIv).substring(2),
      mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),
      version: "0.1"
    };
  }
  return JSON.stringify(data);
}
function encryptKeystoreJsonSync(account, password, options) {
  if (options == null) {
    options = {};
  }
  const passwordBytes = getPassword(password);
  const kdf = getEncryptKdfParams(options);
  const key = scryptSync(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64);
  return _encryptKeystore(getBytes(key), kdf, account, options);
}
async function encryptKeystoreJson(account, password, options) {
  if (options == null) {
    options = {};
  }
  const passwordBytes = getPassword(password);
  const kdf = getEncryptKdfParams(options);
  const key = await scrypt2(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64, options.progressCallback);
  return _encryptKeystore(getBytes(key), kdf, account, options);
}

// node_modules/ethers/lib.esm/wallet/hdwallet.js
var defaultPath2 = "m/44'/60'/0'/0/0";
var MasterSecret = new Uint8Array([66, 105, 116, 99, 111, 105, 110, 32, 115, 101, 101, 100]);
var HardenedBit = 2147483648;
var N2 = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
var Nibbles2 = "0123456789abcdef";
function zpad2(value, length) {
  let result = "";
  while (value) {
    result = Nibbles2[value % 16] + result;
    value = Math.trunc(value / 16);
  }
  while (result.length < length * 2) {
    result = "0" + result;
  }
  return "0x" + result;
}
function encodeBase58Check(_value2) {
  const value = getBytes(_value2);
  const check = dataSlice(sha2562(sha2562(value)), 0, 4);
  const bytes2 = concat([value, check]);
  return encodeBase58(bytes2);
}
var _guard6 = {};
function ser_I(index, chainCode, publicKey, privateKey) {
  const data = new Uint8Array(37);
  if (index & HardenedBit) {
    assert(privateKey != null, "cannot derive child of neutered node", "UNSUPPORTED_OPERATION", {
      operation: "deriveChild"
    });
    data.set(getBytes(privateKey), 1);
  } else {
    data.set(getBytes(publicKey));
  }
  for (let i = 24; i >= 0; i -= 8) {
    data[33 + (i >> 3)] = index >> 24 - i & 255;
  }
  const I = getBytes(computeHmac("sha512", chainCode, data));
  return { IL: I.slice(0, 32), IR: I.slice(32) };
}
function derivePath(node, path) {
  const components = path.split("/");
  assertArgument(components.length > 0, "invalid path", "path", path);
  if (components[0] === "m") {
    assertArgument(node.depth === 0, `cannot derive root path (i.e. path starting with "m/") for a node at non-zero depth ${node.depth}`, "path", path);
    components.shift();
  }
  let result = node;
  for (let i = 0; i < components.length; i++) {
    const component = components[i];
    if (component.match(/^[0-9]+'$/)) {
      const index = parseInt(component.substring(0, component.length - 1));
      assertArgument(index < HardenedBit, "invalid path index", `path[${i}]`, component);
      result = result.deriveChild(HardenedBit + index);
    } else if (component.match(/^[0-9]+$/)) {
      const index = parseInt(component);
      assertArgument(index < HardenedBit, "invalid path index", `path[${i}]`, component);
      result = result.deriveChild(index);
    } else {
      assertArgument(false, "invalid path component", `path[${i}]`, component);
    }
  }
  return result;
}
var _HDNodeWallet_instances, account_fn, _HDNodeWallet_static, fromSeed_fn;
var _HDNodeWallet = class _HDNodeWallet extends BaseWallet {
  /**
   *  @private
   */
  constructor(guard, signingKey, parentFingerprint, chainCode, path, index, depth, mnemonic, provider) {
    super(signingKey, provider);
    __privateAdd(this, _HDNodeWallet_instances);
    /**
     *  The compressed public key.
     */
    __publicField(this, "publicKey");
    /**
     *  The fingerprint.
     *
     *  A fingerprint allows quick qay to detect parent and child nodes,
     *  but developers should be prepared to deal with collisions as it
     *  is only 4 bytes.
     */
    __publicField(this, "fingerprint");
    /**
     *  The parent fingerprint.
     */
    __publicField(this, "parentFingerprint");
    /**
     *  The mnemonic used to create this HD Node, if available.
     *
     *  Sources such as extended keys do not encode the mnemonic, in
     *  which case this will be ``null``.
     */
    __publicField(this, "mnemonic");
    /**
     *  The chaincode, which is effectively a public key used
     *  to derive children.
     */
    __publicField(this, "chainCode");
    /**
     *  The derivation path of this wallet.
     *
     *  Since extended keys do not provide full path details, this
     *  may be ``null``, if instantiated from a source that does not
     *  encode it.
     */
    __publicField(this, "path");
    /**
     *  The child index of this wallet. Values over ``2 *\* 31`` indicate
     *  the node is hardened.
     */
    __publicField(this, "index");
    /**
     *  The depth of this wallet, which is the number of components
     *  in its path.
     */
    __publicField(this, "depth");
    assertPrivate(guard, _guard6, "HDNodeWallet");
    defineProperties(this, { publicKey: signingKey.compressedPublicKey });
    const fingerprint = dataSlice(ripemd1602(sha2562(this.publicKey)), 0, 4);
    defineProperties(this, {
      parentFingerprint,
      fingerprint,
      chainCode,
      path,
      index,
      depth
    });
    defineProperties(this, { mnemonic });
  }
  connect(provider) {
    return new _HDNodeWallet(_guard6, this.signingKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.mnemonic, provider);
  }
  /**
   *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with
   *  %%password%%.
   *
   *  If %%progressCallback%% is specified, it will receive periodic
   *  updates as the encryption process progreses.
   */
  async encrypt(password, progressCallback) {
    return await encryptKeystoreJson(__privateMethod(this, _HDNodeWallet_instances, account_fn).call(this), password, { progressCallback });
  }
  /**
   *  Returns a [JSON Keystore Wallet](json-wallets) encryped with
   *  %%password%%.
   *
   *  It is preferred to use the [async version](encrypt) instead,
   *  which allows a [[ProgressCallback]] to keep the user informed.
   *
   *  This method will block the event loop (freezing all UI) until
   *  it is complete, which may be a non-trivial duration.
   */
  encryptSync(password) {
    return encryptKeystoreJsonSync(__privateMethod(this, _HDNodeWallet_instances, account_fn).call(this), password);
  }
  /**
   *  The extended key.
   *
   *  This key will begin with the prefix ``xpriv`` and can be used to
   *  reconstruct this HD Node to derive its children.
   */
  get extendedKey() {
    assert(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", { operation: "extendedKey" });
    return encodeBase58Check(concat([
      "0x0488ADE4",
      zpad2(this.depth, 1),
      this.parentFingerprint,
      zpad2(this.index, 4),
      this.chainCode,
      concat(["0x00", this.privateKey])
    ]));
  }
  /**
   *  Returns true if this wallet has a path, providing a Type Guard
   *  that the path is non-null.
   */
  hasPath() {
    return this.path != null;
  }
  /**
   *  Returns a neutered HD Node, which removes the private details
   *  of an HD Node.
   *
   *  A neutered node has no private key, but can be used to derive
   *  child addresses and other public data about the HD Node.
   */
  neuter() {
    return new HDNodeVoidWallet(_guard6, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.provider);
  }
  /**
   *  Return the child for %%index%%.
   */
  deriveChild(_index) {
    const index = getNumber(_index, "index");
    assertArgument(index <= 4294967295, "invalid index", "index", index);
    let path = this.path;
    if (path) {
      path += "/" + (index & ~HardenedBit);
      if (index & HardenedBit) {
        path += "'";
      }
    }
    const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, this.privateKey);
    const ki = new SigningKey(toBeHex((toBigInt(IL) + BigInt(this.privateKey)) % N2, 32));
    return new _HDNodeWallet(_guard6, ki, this.fingerprint, hexlify(IR), path, index, this.depth + 1, this.mnemonic, this.provider);
  }
  /**
   *  Return the HDNode for %%path%% from this node.
   */
  derivePath(path) {
    return derivePath(this, path);
  }
  /**
   *  Creates a new HD Node from %%extendedKey%%.
   *
   *  If the %%extendedKey%% will either have a prefix or ``xpub`` or
   *  ``xpriv``, returning a neutered HD Node ([[HDNodeVoidWallet]])
   *  or full HD Node ([[HDNodeWallet) respectively.
   */
  static fromExtendedKey(extendedKey) {
    const bytes2 = toBeArray(decodeBase58(extendedKey));
    assertArgument(bytes2.length === 82 || encodeBase58Check(bytes2.slice(0, 78)) === extendedKey, "invalid extended key", "extendedKey", "[ REDACTED ]");
    const depth = bytes2[4];
    const parentFingerprint = hexlify(bytes2.slice(5, 9));
    const index = parseInt(hexlify(bytes2.slice(9, 13)).substring(2), 16);
    const chainCode = hexlify(bytes2.slice(13, 45));
    const key = bytes2.slice(45, 78);
    switch (hexlify(bytes2.slice(0, 4))) {
      // Public Key
      case "0x0488b21e":
      case "0x043587cf": {
        const publicKey = hexlify(key);
        return new HDNodeVoidWallet(_guard6, computeAddress(publicKey), publicKey, parentFingerprint, chainCode, null, index, depth, null);
      }
      // Private Key
      case "0x0488ade4":
      case "0x04358394 ":
        if (key[0] !== 0) {
          break;
        }
        return new _HDNodeWallet(_guard6, new SigningKey(key.slice(1)), parentFingerprint, chainCode, null, index, depth, null, null);
    }
    assertArgument(false, "invalid extended key prefix", "extendedKey", "[ REDACTED ]");
  }
  /**
   *  Creates a new random HDNode.
   */
  static createRandom(password, path, wordlist2) {
    var _a2;
    if (password == null) {
      password = "";
    }
    if (path == null) {
      path = defaultPath2;
    }
    if (wordlist2 == null) {
      wordlist2 = LangEn.wordlist();
    }
    const mnemonic = Mnemonic.fromEntropy(randomBytes3(16), password, wordlist2);
    return __privateMethod(_a2 = _HDNodeWallet, _HDNodeWallet_static, fromSeed_fn).call(_a2, mnemonic.computeSeed(), mnemonic).derivePath(path);
  }
  /**
   *  Create an HD Node from %%mnemonic%%.
   */
  static fromMnemonic(mnemonic, path) {
    var _a2;
    if (!path) {
      path = defaultPath2;
    }
    return __privateMethod(_a2 = _HDNodeWallet, _HDNodeWallet_static, fromSeed_fn).call(_a2, mnemonic.computeSeed(), mnemonic).derivePath(path);
  }
  /**
   *  Creates an HD Node from a mnemonic %%phrase%%.
   */
  static fromPhrase(phrase, password, path, wordlist2) {
    var _a2;
    if (password == null) {
      password = "";
    }
    if (path == null) {
      path = defaultPath2;
    }
    if (wordlist2 == null) {
      wordlist2 = LangEn.wordlist();
    }
    const mnemonic = Mnemonic.fromPhrase(phrase, password, wordlist2);
    return __privateMethod(_a2 = _HDNodeWallet, _HDNodeWallet_static, fromSeed_fn).call(_a2, mnemonic.computeSeed(), mnemonic).derivePath(path);
  }
  /**
   *  Creates an HD Node from a %%seed%%.
   */
  static fromSeed(seed) {
    var _a2;
    return __privateMethod(_a2 = _HDNodeWallet, _HDNodeWallet_static, fromSeed_fn).call(_a2, seed, null);
  }
};
_HDNodeWallet_instances = new WeakSet();
account_fn = function() {
  const account = { address: this.address, privateKey: this.privateKey };
  const m = this.mnemonic;
  if (this.path && m && m.wordlist.locale === "en" && m.password === "") {
    account.mnemonic = {
      path: this.path,
      locale: "en",
      entropy: m.entropy
    };
  }
  return account;
};
_HDNodeWallet_static = new WeakSet();
fromSeed_fn = function(_seed, mnemonic) {
  assertArgument(isBytesLike(_seed), "invalid seed", "seed", "[REDACTED]");
  const seed = getBytes(_seed, "seed");
  assertArgument(seed.length >= 16 && seed.length <= 64, "invalid seed", "seed", "[REDACTED]");
  const I = getBytes(computeHmac("sha512", MasterSecret, seed));
  const signingKey = new SigningKey(hexlify(I.slice(0, 32)));
  return new _HDNodeWallet(_guard6, signingKey, "0x00000000", hexlify(I.slice(32)), "m", 0, 0, mnemonic, null);
};
__privateAdd(_HDNodeWallet, _HDNodeWallet_static);
var HDNodeWallet = _HDNodeWallet;
var HDNodeVoidWallet = class _HDNodeVoidWallet extends VoidSigner {
  /**
   *  @private
   */
  constructor(guard, address, publicKey, parentFingerprint, chainCode, path, index, depth, provider) {
    super(address, provider);
    /**
     *  The compressed public key.
     */
    __publicField(this, "publicKey");
    /**
     *  The fingerprint.
     *
     *  A fingerprint allows quick qay to detect parent and child nodes,
     *  but developers should be prepared to deal with collisions as it
     *  is only 4 bytes.
     */
    __publicField(this, "fingerprint");
    /**
     *  The parent node fingerprint.
     */
    __publicField(this, "parentFingerprint");
    /**
     *  The chaincode, which is effectively a public key used
     *  to derive children.
     */
    __publicField(this, "chainCode");
    /**
     *  The derivation path of this wallet.
     *
     *  Since extended keys do not provider full path details, this
     *  may be ``null``, if instantiated from a source that does not
     *  enocde it.
     */
    __publicField(this, "path");
    /**
     *  The child index of this wallet. Values over ``2 *\* 31`` indicate
     *  the node is hardened.
     */
    __publicField(this, "index");
    /**
     *  The depth of this wallet, which is the number of components
     *  in its path.
     */
    __publicField(this, "depth");
    assertPrivate(guard, _guard6, "HDNodeVoidWallet");
    defineProperties(this, { publicKey });
    const fingerprint = dataSlice(ripemd1602(sha2562(publicKey)), 0, 4);
    defineProperties(this, {
      publicKey,
      fingerprint,
      parentFingerprint,
      chainCode,
      path,
      index,
      depth
    });
  }
  connect(provider) {
    return new _HDNodeVoidWallet(_guard6, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, provider);
  }
  /**
   *  The extended key.
   *
   *  This key will begin with the prefix ``xpub`` and can be used to
   *  reconstruct this neutered key to derive its children addresses.
   */
  get extendedKey() {
    assert(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", { operation: "extendedKey" });
    return encodeBase58Check(concat([
      "0x0488B21E",
      zpad2(this.depth, 1),
      this.parentFingerprint,
      zpad2(this.index, 4),
      this.chainCode,
      this.publicKey
    ]));
  }
  /**
   *  Returns true if this wallet has a path, providing a Type Guard
   *  that the path is non-null.
   */
  hasPath() {
    return this.path != null;
  }
  /**
   *  Return the child for %%index%%.
   */
  deriveChild(_index) {
    const index = getNumber(_index, "index");
    assertArgument(index <= 4294967295, "invalid index", "index", index);
    let path = this.path;
    if (path) {
      path += "/" + (index & ~HardenedBit);
      if (index & HardenedBit) {
        path += "'";
      }
    }
    const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, null);
    const Ki = SigningKey.addPoints(IL, this.publicKey, true);
    const address = computeAddress(Ki);
    return new _HDNodeVoidWallet(_guard6, address, Ki, this.fingerprint, hexlify(IR), path, index, this.depth + 1, this.provider);
  }
  /**
   *  Return the signer for %%path%% from this node.
   */
  derivePath(path) {
    return derivePath(this, path);
  }
};
function getAccountPath(_index) {
  const index = getNumber(_index, "index");
  assertArgument(index >= 0 && index < HardenedBit, "invalid account index", "index", index);
  return `m/44'/60'/${index}'/0/0`;
}
function getIndexedAccountPath(_index) {
  const index = getNumber(_index, "index");
  assertArgument(index >= 0 && index < HardenedBit, "invalid account index", "index", index);
  return `m/44'/60'/0'/0/${index}`;
}

// node_modules/ethers/lib.esm/wallet/json-crowdsale.js
function isCrowdsaleJson(json) {
  try {
    const data = JSON.parse(json);
    if (data.encseed) {
      return true;
    }
  } catch (error) {
  }
  return false;
}
function decryptCrowdsaleJson(json, _password) {
  const data = JSON.parse(json);
  const password = getPassword(_password);
  const address = getAddress(spelunk(data, "ethaddr:string!"));
  const encseed = looseArrayify(spelunk(data, "encseed:string!"));
  assertArgument(encseed && encseed.length % 16 === 0, "invalid encseed", "json", json);
  const key = getBytes(pbkdf22(password, password, 2e3, 32, "sha256")).slice(0, 16);
  const iv = encseed.slice(0, 16);
  const encryptedSeed = encseed.slice(16);
  const aesCbc = new CBC(key, iv);
  const seed = pkcs7Strip(getBytes(aesCbc.decrypt(encryptedSeed)));
  let seedHex = "";
  for (let i = 0; i < seed.length; i++) {
    seedHex += String.fromCharCode(seed[i]);
  }
  return { address, privateKey: id(seedHex) };
}

// node_modules/ethers/lib.esm/wallet/wallet.js
function stall4(duration) {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve();
    }, duration);
  });
}
var _Wallet_static, fromAccount_fn;
var _Wallet = class _Wallet extends BaseWallet {
  /**
   *  Create a new wallet for the private %%key%%, optionally connected
   *  to %%provider%%.
   */
  constructor(key, provider) {
    if (typeof key === "string" && !key.startsWith("0x")) {
      key = "0x" + key;
    }
    let signingKey = typeof key === "string" ? new SigningKey(key) : key;
    super(signingKey, provider);
  }
  connect(provider) {
    return new _Wallet(this.signingKey, provider);
  }
  /**
   *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with
   *  %%password%%.
   *
   *  If %%progressCallback%% is specified, it will receive periodic
   *  updates as the encryption process progreses.
   */
  async encrypt(password, progressCallback) {
    const account = { address: this.address, privateKey: this.privateKey };
    return await encryptKeystoreJson(account, password, { progressCallback });
  }
  /**
   *  Returns a [JSON Keystore Wallet](json-wallets) encryped with
   *  %%password%%.
   *
   *  It is preferred to use the [async version](encrypt) instead,
   *  which allows a [[ProgressCallback]] to keep the user informed.
   *
   *  This method will block the event loop (freezing all UI) until
   *  it is complete, which may be a non-trivial duration.
   */
  encryptSync(password) {
    const account = { address: this.address, privateKey: this.privateKey };
    return encryptKeystoreJsonSync(account, password);
  }
  /**
   *  Creates (asynchronously) a **Wallet** by decrypting the %%json%%
   *  with %%password%%.
   *
   *  If %%progress%% is provided, it is called periodically during
   *  decryption so that any UI can be updated.
   */
  static async fromEncryptedJson(json, password, progress) {
    var _a2;
    let account = null;
    if (isKeystoreJson(json)) {
      account = await decryptKeystoreJson(json, password, progress);
    } else if (isCrowdsaleJson(json)) {
      if (progress) {
        progress(0);
        await stall4(0);
      }
      account = decryptCrowdsaleJson(json, password);
      if (progress) {
        progress(1);
        await stall4(0);
      }
    }
    return __privateMethod(_a2 = _Wallet, _Wallet_static, fromAccount_fn).call(_a2, account);
  }
  /**
   *  Creates a **Wallet** by decrypting the %%json%% with %%password%%.
   *
   *  The [[fromEncryptedJson]] method is preferred, as this method
   *  will lock up and freeze the UI during decryption, which may take
   *  some time.
   */
  static fromEncryptedJsonSync(json, password) {
    var _a2;
    let account = null;
    if (isKeystoreJson(json)) {
      account = decryptKeystoreJsonSync(json, password);
    } else if (isCrowdsaleJson(json)) {
      account = decryptCrowdsaleJson(json, password);
    } else {
      assertArgument(false, "invalid JSON wallet", "json", "[ REDACTED ]");
    }
    return __privateMethod(_a2 = _Wallet, _Wallet_static, fromAccount_fn).call(_a2, account);
  }
  /**
   *  Creates a new random [[HDNodeWallet]] using the available
   *  [cryptographic random source](randomBytes).
   *
   *  If there is no crytographic random source, this will throw.
   */
  static createRandom(provider) {
    const wallet = HDNodeWallet.createRandom();
    if (provider) {
      return wallet.connect(provider);
    }
    return wallet;
  }
  /**
   *  Creates a [[HDNodeWallet]] for %%phrase%%.
   */
  static fromPhrase(phrase, provider) {
    const wallet = HDNodeWallet.fromPhrase(phrase);
    if (provider) {
      return wallet.connect(provider);
    }
    return wallet;
  }
};
_Wallet_static = new WeakSet();
fromAccount_fn = function(account) {
  assertArgument(account, "invalid JSON wallet", "json", "[ REDACTED ]");
  if ("mnemonic" in account && account.mnemonic && account.mnemonic.locale === "en") {
    const mnemonic = Mnemonic.fromEntropy(account.mnemonic.entropy);
    const wallet2 = HDNodeWallet.fromMnemonic(mnemonic, account.mnemonic.path);
    if (wallet2.address === account.address && wallet2.privateKey === account.privateKey) {
      return wallet2;
    }
    console.log("WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key");
  }
  const wallet = new _Wallet(account.privateKey);
  assertArgument(wallet.address === account.address, "address/privateKey mismatch", "json", "[ REDACTED ]");
  return wallet;
};
__privateAdd(_Wallet, _Wallet_static);
var Wallet = _Wallet;

// node_modules/ethers/lib.esm/wordlists/bit-reader.js
var Base64 = ")!@#$%^&*(ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_";
function decodeBits(width, data) {
  const maxValue2 = (1 << width) - 1;
  const result = [];
  let accum = 0, bits = 0, flood = 0;
  for (let i = 0; i < data.length; i++) {
    accum = accum << 6 | Base64.indexOf(data[i]);
    bits += 6;
    while (bits >= width) {
      const value = accum >> bits - width;
      accum &= (1 << bits - width) - 1;
      bits -= width;
      if (value === 0) {
        flood += maxValue2;
      } else {
        result.push(value + flood);
        flood = 0;
      }
    }
  }
  return result;
}

// node_modules/ethers/lib.esm/wordlists/decode-owla.js
function decodeOwlA(data, accents) {
  let words2 = decodeOwl(data).join(",");
  accents.split(/,/g).forEach((accent) => {
    const match = accent.match(/^([a-z]*)([0-9]+)([0-9])(.*)$/);
    assertArgument(match !== null, "internal error parsing accents", "accents", accents);
    let posOffset = 0;
    const positions = decodeBits(parseInt(match[3]), match[4]);
    const charCode = parseInt(match[2]);
    const regex = new RegExp(`([${match[1]}])`, "g");
    words2 = words2.replace(regex, (all, letter) => {
      const rem = --positions[posOffset];
      if (rem === 0) {
        letter = String.fromCharCode(letter.charCodeAt(0), charCode);
        posOffset++;
      }
      return letter;
    });
  });
  return words2.split(",");
}

// node_modules/ethers/lib.esm/wordlists/wordlist-owla.js
var _accent;
var WordlistOwlA = class extends WordlistOwl {
  /**
   *  Creates a new Wordlist for %%locale%% using the OWLA %%data%%
   *  and %%accent%% data and validated against the %%checksum%%.
   */
  constructor(locale, data, accent, checksum2) {
    super(locale, data, checksum2);
    __privateAdd(this, _accent);
    __privateSet(this, _accent, accent);
  }
  /**
   *  The OWLA-encoded accent data.
   */
  get _accent() {
    return __privateGet(this, _accent);
  }
  /**
   *  Decode all the words for the wordlist.
   */
  _decodeWords() {
    return decodeOwlA(this._data, this._accent);
  }
};
_accent = new WeakMap();

// node_modules/ethers/lib.esm/wordlists/wordlists-browser.js
var wordlists = {
  en: LangEn.wordlist()
};

// src/index.ts
var import_noble_bn254_drand2 = __toESM(require_src());

// node_modules/@noble/curves/esm/abstract/utils.js
function equalBytes2(a, b2) {
  if (a.length !== b2.length)
    return false;
  let diff = 0;
  for (let i = 0; i < a.length; i++)
    diff |= a[i] ^ b2[i];
  return diff === 0;
}

// src/ethers-helpers.ts
function extractLogs(iface2, receipt, contractAddress, event) {
  return receipt.logs.filter((log) => log.address.toLowerCase() === contractAddress.toLowerCase()).map((log) => iface2.decodeEventLog(event, log.data, log.topics));
}
function extractSingleLog(iface2, receipt, contractAddress, event) {
  const events = extractLogs(iface2, receipt, contractAddress, event);
  if (events.length === 0) {
    throw Error(`contract at ${contractAddress} didn't emit the ${event.name} event`);
  }
  return events[0];
}
var encodeParams = (dataTypes, data) => {
  const abiCoder = AbiCoder.defaultAbiCoder();
  return abiCoder.encode(dataTypes, data);
};

// src/generated/factories/Base.t.sol/Base__factory.ts
var _abi = [
  {
    type: "function",
    name: "IS_TEST",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeArtifacts",
    inputs: [],
    outputs: [
      {
        name: "excludedArtifacts_",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeContracts",
    inputs: [],
    outputs: [
      {
        name: "excludedContracts_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeSelectors",
    inputs: [],
    outputs: [
      {
        name: "excludedSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeSenders",
    inputs: [],
    outputs: [
      {
        name: "excludedSenders_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "failed",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "setUp",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "targetArtifactSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifactSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzArtifactSelector[]",
        components: [
          {
            name: "artifact",
            type: "string",
            internalType: "string"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetArtifacts",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifacts_",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetContracts",
    inputs: [],
    outputs: [
      {
        name: "targetedContracts_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetInterfaces",
    inputs: [],
    outputs: [
      {
        name: "targetedInterfaces_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzInterface[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "artifacts",
            type: "string[]",
            internalType: "string[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetSenders",
    inputs: [],
    outputs: [
      {
        name: "targetedSenders_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "event",
    name: "log",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_address",
    inputs: [
      {
        name: "",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_bytes",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_bytes32",
    inputs: [
      {
        name: "",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_int",
    inputs: [
      {
        name: "",
        type: "int256",
        indexed: false,
        internalType: "int256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_address",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_bytes",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_bytes32",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_decimal_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_decimal_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_string",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_string",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_uint",
    inputs: [
      {
        name: "",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "logs",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  }
];
var Base__factory = class {
  static createInterface() {
    return new Interface(_abi);
  }
  static connect(address, runner) {
    return new Contract(address, _abi, runner);
  }
};
Base__factory.abi = _abi;

// src/generated/factories/ChainlinkVRFV2_5Integration_DirectFunding.t.sol/ChainlinkVRFV2_5Integration_DirectFundingTest__factory.ts
var _abi2 = [
  {
    type: "function",
    name: "IS_TEST",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeArtifacts",
    inputs: [],
    outputs: [
      {
        name: "excludedArtifacts_",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeContracts",
    inputs: [],
    outputs: [
      {
        name: "excludedContracts_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeSelectors",
    inputs: [],
    outputs: [
      {
        name: "excludedSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeSenders",
    inputs: [],
    outputs: [
      {
        name: "excludedSenders_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "failed",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "setUp",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "targetArtifactSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifactSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzArtifactSelector[]",
        components: [
          {
            name: "artifact",
            type: "string",
            internalType: "string"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetArtifacts",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifacts_",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetContracts",
    inputs: [],
    outputs: [
      {
        name: "targetedContracts_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetInterfaces",
    inputs: [],
    outputs: [
      {
        name: "targetedInterfaces_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzInterface[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "artifacts",
            type: "string[]",
            internalType: "string[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetSenders",
    inputs: [],
    outputs: [
      {
        name: "targetedSenders_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "test_chainlinkFulfillSignatureRequest_WithDirectFunding_Successfully",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "event",
    name: "RandomnessRequested",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "nonce",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "requester",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "requestedAt",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "WrapperGasOverheadUpdated",
    inputs: [
      {
        name: "newWrapperGasOverhead",
        type: "uint32",
        indexed: false,
        internalType: "uint32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_address",
    inputs: [
      {
        name: "",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_bytes",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_bytes32",
    inputs: [
      {
        name: "",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_int",
    inputs: [
      {
        name: "",
        type: "int256",
        indexed: false,
        internalType: "int256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_address",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_bytes",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_bytes32",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_decimal_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_decimal_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_string",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_string",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_uint",
    inputs: [
      {
        name: "",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "logs",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  }
];
var _bytecode = "";
var isSuperArgs = (xs) => xs.length > 1;
var ChainlinkVRFV2_5Integration_DirectFundingTest__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi2, _bytecode, args[0]);
    }
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  connect(runner) {
    return super.connect(
      runner
    );
  }
  static createInterface() {
    return new Interface(
      _abi2
    );
  }
  static connect(address, runner) {
    return new Contract(
      address,
      _abi2,
      runner
    );
  }
};
ChainlinkVRFV2_5Integration_DirectFundingTest__factory.bytecode = _bytecode;
ChainlinkVRFV2_5Integration_DirectFundingTest__factory.abi = _abi2;

// src/generated/factories/ChainlinkVRFV2_5Integration_Subscription.t.sol/ChainlinkVRFV2_5Integration_SubscriptionTest__factory.ts
var _abi3 = [
  {
    type: "function",
    name: "IS_TEST",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeArtifacts",
    inputs: [],
    outputs: [
      {
        name: "excludedArtifacts_",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeContracts",
    inputs: [],
    outputs: [
      {
        name: "excludedContracts_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeSelectors",
    inputs: [],
    outputs: [
      {
        name: "excludedSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeSenders",
    inputs: [],
    outputs: [
      {
        name: "excludedSenders_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "failed",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "setUp",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "targetArtifactSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifactSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzArtifactSelector[]",
        components: [
          {
            name: "artifact",
            type: "string",
            internalType: "string"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetArtifacts",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifacts_",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetContracts",
    inputs: [],
    outputs: [
      {
        name: "targetedContracts_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetInterfaces",
    inputs: [],
    outputs: [
      {
        name: "targetedInterfaces_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzInterface[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "artifacts",
            type: "string[]",
            internalType: "string[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetSenders",
    inputs: [],
    outputs: [
      {
        name: "targetedSenders_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "test_chainlinkFulfillSignatureRequest_WithSubscription_Successfully",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "event",
    name: "RandomnessRequested",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "nonce",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "requester",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "requestedAt",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "WrapperGasOverheadUpdated",
    inputs: [
      {
        name: "newWrapperGasOverhead",
        type: "uint32",
        indexed: false,
        internalType: "uint32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_address",
    inputs: [
      {
        name: "",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_bytes",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_bytes32",
    inputs: [
      {
        name: "",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_int",
    inputs: [
      {
        name: "",
        type: "int256",
        indexed: false,
        internalType: "int256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_address",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_bytes",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_bytes32",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_decimal_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_decimal_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_string",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_string",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_uint",
    inputs: [
      {
        name: "",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "logs",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  }
];
var _bytecode2 = "0x600c8054600160ff199182168117909255601f8054909116909117905561012060405260808080528062013f6d60a03960229061003c908261012a565b5060405180606001604052806040815260200162013f2d60409139602390610064908261012a565b5060408051602081019091525f8152602490610080908261012a565b5034801561008c575f5ffd5b506101e4565b634e487b7160e01b5f52604160045260245ffd5b600181811c908216806100ba57607f821691505b6020821081036100d857634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561012557805f5260205f20601f840160051c810160208510156101035750805b601f840160051c820191505b81811015610122575f815560010161010f565b50505b505050565b81516001600160401b0381111561014357610143610092565b6101578161015184546100a6565b846100de565b6020601f821160018114610189575f83156101725750848201515b5f19600385901b1c1916600184901b178455610122565b5f84815260208120601f198516915b828110156101b85787850151825560209485019460019092019101610198565b50848210156101d557868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b62013d3a80620001f35f395ff3fe608060405234801561000f575f5ffd5b50600436106100e5575f3560e01c806385226c8111610088578063b5508aa911610063578063b5508aa914610185578063ba414fa61461018d578063e20c9f71146101a5578063fa7626d4146101ad575f5ffd5b806385226c8114610153578063916a17c614610168578063b0464fdc1461017d575f5ffd5b80632ade3880116100c35780632ade3880146101195780633e5e3c231461012e5780633f7286f41461013657806366d9a9a01461013e575f5ffd5b80630a9254e4146100e95780631ed7831c146100f357806327f7e56f14610111575b5f5ffd5b6100f16101ba565b005b6100fb610241565b6040516101089190612ac0565b60405180910390f35b6100f16102ae565b610121611484565b6040516101089190612b64565b6100fb6115cd565b6100fb611638565b6101466116a3565b6040516101089190612cd2565b61015b61181c565b6040516101089190612d6e565b6101706118e7565b6040516101089190612de3565b6101706119ea565b61015b611aed565b610195611bb8565b6040519015158152602001610108565b6100fb611c88565b601f546101959060ff1681565b6101c2611cf3565b6101ca611cfd565b602780547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff9384161790915560288054821693831693909317909255602680548316938216939093179092556025805490911692909116919091179055565b606060168054806020026020016040519081016040528092919081815260200182805480156102a457602002820191905f5260205f20905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610279575b5050505050905090565b6028546040805180820190915260208082527f52616e646f6d6e65737353656e646572206973206e6f74206465706c6f796564908201526103079173ffffffffffffffffffffffffffffffffffffffff16151590612317565b601f5460285460405161010090920473ffffffffffffffffffffffffffffffffffffffff90811692911690620186a0905f908490849061034690612a5e565b73ffffffffffffffffffffffffffffffffffffffff928316815291166020820152604001604051809103905ff080158015610383573d5f5f3e3d5ffd5b506040517fca669fa700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b1580156103ff575f5ffd5b505af1158015610411573d5f5f3e3d5ffd5b50506040517f86b9620d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d92506386b9620d91506024015f604051808303815f87803b15801561048d575f5ffd5b505af115801561049f573d5f5f3e3d5ffd5b505060405163ffffffff851681527f06072508f4be461bb306c2111807a859ab85e8ae617fbb868cb18a078665072d9250602001905060405180910390a16040517fc40684f000000000000000000000000000000000000000000000000000000000815263ffffffff8316600482015273ffffffffffffffffffffffffffffffffffffffff82169063c40684f0906024015f604051808303815f87803b158015610547575f5ffd5b505af1158015610559573d5f5f3e3d5ffd5b50506020546040517fca669fa700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063ca669fa791506024015f604051808303815f87803b1580156105d9575f5ffd5b505af11580156105eb573d5f5f3e3d5ffd5b505050505f5f826040516105fe90612a6c565b91825273ffffffffffffffffffffffffffffffffffffffff166020820152604001604051809103905ff080158015610638573d5f5f3e3d5ffd5b5090505f8173ffffffffffffffffffffffffffffffffffffffff1663a21a23e46040518163ffffffff1660e01b81526004016020604051808303815f875af1158015610686573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106aa9190612e85565b6040517f13c34b7f00000000000000000000000000000000000000000000000000000000815262061a8060048201819052600160248301529192505f9073ffffffffffffffffffffffffffffffffffffffff8616906313c34b7f90604401602060405180830381865afa158015610723573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107479190612e85565b9050670de0b6b3a764000073ffffffffffffffffffffffffffffffffffffffff85166395b55cfc6107788385612e9c565b866040518363ffffffff1660e01b815260040161079791815260200190565b5f604051808303818588803b1580156107ae575f5ffd5b505af11580156107c0573d5f5f3e3d5ffd5b50506020546040517fca669fa700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d935063ca669fa7925060240190505f604051808303815f87803b158015610842575f5ffd5b505af1158015610854573d5f5f3e3d5ffd5b505050508473ffffffffffffffffffffffffffffffffffffffff1663bec4c08c856108b36040518060400160405280600c81526020017f6e65772d636f6e73756d65720000000000000000000000000000000000000000815250612399565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b168152600481019290925273ffffffffffffffffffffffffffffffffffffffff1660248201526044015f604051808303815f87803b15801561091c575f5ffd5b505af115801561092e573d5f5f3e3d5ffd5b505050505f5f5f8873ffffffffffffffffffffffffffffffffffffffff1663dc311dd3886040518263ffffffff1660e01b815260040161097091815260200190565b5f60405180830381865afa15801561098a573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526109cf9190810190612fe5565b9450945050935050610a288973ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161460405180608001604052806041815260200162013c2e60419139612317565b610a4f815160021460405180606001604052806040815260200162013cc560409139612317565b610a8b610a5c8587612e9c565b846bffffffffffffffffffffffff161460405180606001604052806028815260200162013af760289139612317565b610b1b8873ffffffffffffffffffffffffffffffffffffffff16626d6cae6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ad6573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610afa9190612e85565b5f1460405180606001604052806028815260200162013b1f60289139612317565b6020546040517fca669fa700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201526001908190737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b158015610b9c575f5ffd5b505af1158015610bae573d5f5f3e3d5ffd5b50506040517f491cc7c2000000000000000000000000000000000000000000000000000000008152600160048201819052602482018190525f60448301526064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063491cc7c291506084015f604051808303815f87803b158015610c29575f5ffd5b505af1158015610c3b573d5f5f3e3d5ffd5b505050508a73ffffffffffffffffffffffffffffffffffffffff1681837feee7195b6cee0fa7044c3af0b86fe2febb1d2703d71191f44052ba0d60ffda6442604051610c8991815260200190565b60405180910390a46040517fe726f2e100000000000000000000000000000000000000000000000000000000815263ffffffff8916600482015273ffffffffffffffffffffffffffffffffffffffff8b169063e726f2e1906024016020604051808303815f875af1158015610d00573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d249190612e85565b50610db5828b73ffffffffffffffffffffffffffffffffffffffff16626d6cae6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d71573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d959190612e85565b1460405180606001604052806029815260200162013c6f60299139612317565b6040517f4b3c08f300000000000000000000000000000000000000000000000000000000815260048101839052610e889073ffffffffffffffffffffffffffffffffffffffff8c1690634b3c08f3906024015f60405180830381865afa158015610e21573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610e6691908101906130d3565b515f146040518060800160405280604a815260200162013b81604a9139612317565b6040517f48f50c0f000000000000000000000000000000000000000000000000000000008152620186a06004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906348f50c0f906024015f604051808303815f87803b158015610eed575f5ffd5b505af1158015610eff573d5f5f3e3d5ffd5b50506027546040517fda82811600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116925063da8281169150610f5c9085906023906004016131b5565b5f604051808303815f87803b158015610f73575f5ffd5b505af1158015610f85573d5f5f3e3d5ffd5b5050505061104960285f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633bc32c756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ff6573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061101a919061329e565b6bffffffffffffffffffffffff165f146040518060600160405280603a815260200162013b47603a9139612317565b6111b25f60285f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663995cb36e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110b7573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110db919061329e565b6bffffffffffffffffffffffff161180156111935750602854604080517f995cb36e00000000000000000000000000000000000000000000000000000000815290518a9273ffffffffffffffffffffffffffffffffffffffff169163995cb36e9160048083019260209291908290030181865afa15801561115e573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611182919061329e565b6bffffffffffffffffffffffff1611155b60405180606001604052806040815260200162013bcb60409139612317565b6040517f4b3c08f3000000000000000000000000000000000000000000000000000000008152600481018390526112869073ffffffffffffffffffffffffffffffffffffffff8c1690634b3c08f3906024015f60405180830381865afa15801561121e573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261126391908101906130d3565b5160011460405180606001604052806036815260200162013a9360369139612317565b6040517f4b3c08f3000000000000000000000000000000000000000000000000000000008152600481018390526113729073ffffffffffffffffffffffffffffffffffffffff8c1690634b3c08f3906024015f60405180830381865afa1580156112f2573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261133791908101906130d3565b5f81518110611348576113486132be565b60200260200101515f141560405180606001604052806023815260200162013c0b60239139612317565b604080518082018252601381527f72656365697665642072616e646f6d6e65737300000000000000000000000000602082015290517f4b3c08f300000000000000000000000000000000000000000000000000000000815260048101849052611474919073ffffffffffffffffffffffffffffffffffffffff8d1690634b3c08f3906024015f60405180830381865afa158015611411573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261145691908101906130d3565b5f81518110611467576114676132be565b60200260200101516123aa565b5050505050505050505050505050565b6060601e805480602002602001604051908101604052809291908181526020015f905b828210156115c4575f848152602080822060408051808201825260028702909201805473ffffffffffffffffffffffffffffffffffffffff168352600181018054835181870281018701909452808452939591948681019491929084015b828210156115ad578382905f5260205f2001805461152290613164565b80601f016020809104026020016040519081016040528092919081815260200182805461154e90613164565b80156115995780601f1061157057610100808354040283529160200191611599565b820191905f5260205f20905b81548152906001019060200180831161157c57829003601f168201915b505050505081526020019060010190611505565b5050505081525050815260200190600101906114a7565b50505050905090565b606060188054806020026020016040519081016040528092919081815260200182805480156102a457602002820191905f5260205f2090815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610279575050505050905090565b606060178054806020026020016040519081016040528092919081815260200182805480156102a457602002820191905f5260205f2090815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610279575050505050905090565b6060601b805480602002602001604051908101604052809291908181526020015f905b828210156115c4578382905f5260205f2090600202016040518060400160405290815f820180546116f690613164565b80601f016020809104026020016040519081016040528092919081815260200182805461172290613164565b801561176d5780601f106117445761010080835404028352916020019161176d565b820191905f5260205f20905b81548152906001019060200180831161175057829003601f168201915b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561180457602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116117b15790505b505050505081525050815260200190600101906116c6565b6060601a805480602002602001604051908101604052809291908181526020015f905b828210156115c4578382905f5260205f2001805461185c90613164565b80601f016020809104026020016040519081016040528092919081815260200182805461188890613164565b80156118d35780601f106118aa576101008083540402835291602001916118d3565b820191905f5260205f20905b8154815290600101906020018083116118b657829003601f168201915b50505050508152602001906001019061183f565b6060601d805480602002602001604051908101604052809291908181526020015f905b828210156115c4575f84815260209081902060408051808201825260028602909201805473ffffffffffffffffffffffffffffffffffffffff1683526001810180548351818702810187019094528084529394919385830193928301828280156119d257602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161197f5790505b5050505050815250508152602001906001019061190a565b6060601c805480602002602001604051908101604052809291908181526020015f905b828210156115c4575f84815260209081902060408051808201825260028602909201805473ffffffffffffffffffffffffffffffffffffffff168352600181018054835181870281018701909452808452939491938583019392830182828015611ad557602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019060040190602082600301049283019260010382029150808411611a825790505b50505050508152505081526020019060010190611a0d565b60606019805480602002602001604051908101604052809291908181526020015f905b828210156115c4578382905f5260205f20018054611b2d90613164565b80601f0160208091040260200160405190810160405280929190818152602001828054611b5990613164565b8015611ba45780601f10611b7b57610100808354040283529160200191611ba4565b820191905f5260205f20905b815481529060010190602001808311611b8757829003601f168201915b505050505081526020019060010190611b10565b6008545f9060ff1615611bcf575060085460ff1690565b6040517f667f9d70000000000000000000000000000000000000000000000000000000008152737109709ecfa91a80626ff3989d68f67f5b1dd12d600482018190527f6661696c6564000000000000000000000000000000000000000000000000000060248301525f9163667f9d7090604401602060405180830381865afa158015611c5d573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c819190612e85565b1415905090565b606060158054806020026020016040519081016040528092919081815260200182805480156102a457602002820191905f5260205f2090815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610279575050505050905090565b611cfb61243f565b565b601f546040517f06447d5600000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff1660048201525f90819081908190737109709ecfa91a80626ff3989d68f67f5b1dd12d906306447d56906024015f604051808303815f87803b158015611d85575f5ffd5b505af1158015611d97573d5f5f3e3d5ffd5b505050505f60228054611da990613164565b80601f0160208091040260200160405190810160405280929190818152602001828054611dd590613164565b8015611e205780601f10611df757610100808354040283529160200191611e20565b820191905f5260205f20905b815481529060010190602001808311611e0357829003601f168201915b5050505050806020019051810190611e38919061332d565b90505f604051611e4790612a7a565b73ffffffffffffffffffffffffffffffffffffffff9091168152602001604051809103905ff080158015611e7d573d5f5f3e3d5ffd5b5094506040518060400160405280825f0151600160028110611ea157611ea16132be565b60200201518152602001825f01515f60028110611ec057611ec06132be565b602002015181525060405180604001604052808360200151600160028110611eea57611eea6132be565b6020020151815260200183602001515f60028110611f0a57611f0a6132be565b60200201519052604051611f1d90612a88565b611f2892919061338e565b604051809103905ff080158015611f41573d5f5f3e3d5ffd5b50604080518082018252600581527f424e323534000000000000000000000000000000000000000000000000000000602082015290517fbab867da00000000000000000000000000000000000000000000000000000000815291955073ffffffffffffffffffffffffffffffffffffffff87169163bab867da91611fc99188906004016133a9565b5f604051808303815f87803b158015611fe0575f5ffd5b505af1158015611ff2573d5f5f3e3d5ffd5b505050505f60405161200390612a96565b604051809103905ff08015801561201c573d5f5f3e3d5ffd5b5090505f60405161202c90612aa4565b604051809103905ff080158015612045573d5f5f3e3d5ffd5b5090505f8260405161205690612ab2565b73ffffffffffffffffffffffffffffffffffffffff90911681526040602082018190525f90820152606001604051809103905ff08015801561209a573d5f5f3e3d5ffd5b5090506120c06040518060600160405280602d815260200162013c98602d91398261278c565b5f826040516120ce90612ab2565b73ffffffffffffffffffffffffffffffffffffffff90911681526040602082018190525f90820152606001604051809103905ff080158015612112573d5f5f3e3d5ffd5b5090506121386040518060600160405280602e815260200162013ac9602e91398261278c565b601f546040517f485cc95500000000000000000000000000000000000000000000000000000000815261010090910473ffffffffffffffffffffffffffffffffffffffff90811660048301528a811660248301529197509195508591879183169063485cc955906044015f604051808303815f87803b1580156121b9575f5ffd5b505af11580156121cb573d5f5f3e3d5ffd5b5050601f546040517f485cc95500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a8116600483015261010090920482166024820152908a16925063485cc95591506044015f604051808303815f87803b158015612246575f5ffd5b505af1158015612258573d5f5f3e3d5ffd5b506207a120925062061a809150620f42409050622dc6c0620c3500600a6113886122888e8888888888888861281d565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c73ffffffffffffffffffffffffffffffffffffffff166390c5013b6040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156122ef575f5ffd5b505af1158015612301573d5f5f3e3d5ffd5b5050505050505050505050505050505090919293565b6040517fa34edc03000000000000000000000000000000000000000000000000000000008152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063a34edc039061236990859085906004016133e0565b5f6040518083038186803b15801561237f575f5ffd5b505afa158015612391573d5f5f3e3d5ffd5b505050505050565b5f6123a3826128d8565b5092915050565b61243b82826040516024016123c0929190613402565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb60e72cc00000000000000000000000000000000000000000000000000000000179052612a33565b5050565b61247d6040518060400160405280600581526020017f61646d696e000000000000000000000000000000000000000000000000000000815250612399565b601f60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506124fb6040518060400160405280600581526020017f616c696365000000000000000000000000000000000000000000000000000000815250612399565b60205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506125786040518060400160405280600381526020017f626f620000000000000000000000000000000000000000000000000000000000815250612399565b602180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff928316179055601f546040517fc88a5e6d0000000000000000000000000000000000000000000000000000000081526101009091049091166004820152678ac7230489e800006024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c88a5e6d906044015f604051808303815f87803b158015612634575f5ffd5b505af1158015612646573d5f5f3e3d5ffd5b50506020546040517fc88a5e6d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091166004820152678ac7230489e800006024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c88a5e6d91506044015f604051808303815f87803b1580156126d4575f5ffd5b505af11580156126e6573d5f5f3e3d5ffd5b50506021546040517fc88a5e6d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091166004820152678ac7230489e800006024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063c88a5e6d91506044015f604051808303815f87803b158015612774575f5ffd5b505af1158015612786573d5f5f3e3d5ffd5b50505050565b61243b82826040516024016127a29291906133a9565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f319af33300000000000000000000000000000000000000000000000000000000179052612a33565b6040517f45fa435400000000000000000000000000000000000000000000000000000000815263ffffffff8089166004830152808816602483015280871660448301528086166064830152808516608483015260ff841660a4830152821660c482015273ffffffffffffffffffffffffffffffffffffffff8916906345fa43549060e4015f604051808303815f87803b1580156128b8575f5ffd5b505af11580156128ca573d5f5f3e3d5ffd5b505050505050505050505050565b5f5f826040516020016128eb9190613423565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529082905280516020909101207fffa18649000000000000000000000000000000000000000000000000000000008252600482018190529150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa1864990602401602060405180830381865afa158015612988573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906129ac9190613439565b6040517fc657c718000000000000000000000000000000000000000000000000000000008152909250737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c657c71890612a019085908790600401613452565b5f604051808303815f87803b158015612a18575f5ffd5b505af1158015612a2a573d5f5f3e3d5ffd5b50505050915091565b612a3c81612a3f565b50565b5f6a636f6e736f6c652e6c6f6790505f5f835160208501845afa505050565b612195806200348183390190565b610ffd806200561683390190565b610cb6806200661383390190565b612d5280620072c983390190565b613bca806200a01b83390190565b615a68806200dbe583390190565b610446806201364d83390190565b602080825282518282018190525f918401906040840190835b81811015612b0d57835173ffffffffffffffffffffffffffffffffffffffff16835260209384019390920191600101612ad9565b509095945050505050565b5f81518084528060208401602086015e5f6020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b82811015612c6a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08786030184528151805173ffffffffffffffffffffffffffffffffffffffff168652602090810151604082880181905281519088018190529101906060600582901b8801810191908801905f5b81811015612c50577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08a8503018352612c3a848651612b18565b6020958601959094509290920191600101612c00565b509197505050602094850194929092019150600101612b8a565b50929695505050505050565b5f8151808452602084019350602083015f5b82811015612cc85781517fffffffff0000000000000000000000000000000000000000000000000000000016865260209586019590910190600101612c88565b5093949350505050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b82811015612c6a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08786030184528151805160408752612d3c6040880182612b18565b9050602082015191508681036020880152612d578183612c76565b965050506020938401939190910190600101612cf8565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b82811015612c6a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0878603018452612dce858351612b18565b94506020938401939190910190600101612d94565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b82811015612c6a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0878603018452815173ffffffffffffffffffffffffffffffffffffffff81511686526020810151905060406020870152612e6f6040870182612c76565b9550506020938401939190910190600101612e09565b5f60208284031215612e95575f5ffd5b5051919050565b80820180821115612ed4577f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b92915050565b80516bffffffffffffffffffffffff81168114612ef5575f5ffd5b919050565b805173ffffffffffffffffffffffffffffffffffffffff81168114612ef5575f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6040805190810167ffffffffffffffff81118282101715612f6d57612f6d612f1d565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612fba57612fba612f1d565b604052919050565b5f67ffffffffffffffff821115612fdb57612fdb612f1d565b5060051b60200190565b5f5f5f5f5f60a08688031215612ff9575f5ffd5b61300286612eda565b945061301060208701612eda565b9350604086015167ffffffffffffffff8116811461302c575f5ffd5b925061303a60608701612efa565b9150608086015167ffffffffffffffff811115613055575f5ffd5b8601601f81018813613065575f5ffd5b805161307861307382612fc2565b612f73565b8082825260208201915060208360051b85010192508a831115613099575f5ffd5b6020840193505b828410156130c2576130b184612efa565b8252602093840193909101906130a0565b809450505050509295509295909350565b5f602082840312156130e3575f5ffd5b815167ffffffffffffffff8111156130f9575f5ffd5b8201601f81018413613109575f5ffd5b805161311761307382612fc2565b8082825260208201915060208360051b850101925086831115613138575f5ffd5b6020840193505b8284101561315a57835182526020938401939091019061313f565b9695505050505050565b600181811c9082168061317857607f821691505b6020821081036131af577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b828152604060208201525f5f83545f8160011c905060018216806131da57607f821691505b602082108103613211577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b6040860182905260608601818015613230576001811461326457613290565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008516825283151560051b82019550613290565b5f898152602090205f5b8581101561328a5781548482015260019091019060200161326e565b83019650505b509398975050505050505050565b5f602082840312156132ae575f5ffd5b6132b782612eda565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f82601f8301126132fa575f5ffd5b613302612f4a565b806040840185811115613313575f5ffd5b845b81811015612b0d578051845260209384019301613315565b5f608082840312801561333e575f5ffd5b50613347612f4a565b61335184846132eb565b815261336084604085016132eb565b60208201529392505050565b805f5b600281101561278657815184526020938401939091019060010161336f565b6080810161339c828561336c565b6132b7604083018461336c565b604081525f6133bb6040830185612b18565b905073ffffffffffffffffffffffffffffffffffffffff831660208301529392505050565b8215158152604060208201525f6133fa6040830184612b18565b949350505050565b604081525f6134146040830185612b18565b90508260208301529392505050565b5f82518060208501845e5f920191825250919050565b5f60208284031215613449575f5ffd5b6132b782612efa565b73ffffffffffffffffffffffffffffffffffffffff83168152604060208201525f6133fa6040830184612b1856fe60806040526003805463ffffffff60a01b1916610c3560a51b179055348015610026575f5ffd5b50604051612195380380612195833981016040819052610045916101c9565b60015f908155829081906001600160a01b0382166100aa5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600180546001600160a01b0319166001600160a01b03848116919091179091558116156100da576100da81610105565b5050600380546001600160a01b0319166001600160a01b039390931692909217909155506101fa9050565b336001600160a01b0382160361015d5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016100a1565b600280546001600160a01b0319166001600160a01b03838116918217909255600154604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278905f90a350565b80516001600160a01b03811681146101c4575f5ffd5b919050565b5f5f604083850312156101da575f5ffd5b6101e3836101ae565b91506101f1602084016101ae565b90509250929050565b611f8e806102075f395ff3fe60806040526004361061016d575f3560e01c8063aefb212f116100c6578063dac83d291161007c578063e1cab74511610057578063e1cab745146104cc578063f2fde38b146104eb578063fc2a88c31461050a575f5ffd5b8063dac83d2914610451578063dc311dd314610470578063df3fafe8146104a0575f5ffd5b8063bec4c08c116100ac578063bec4c08c146103f4578063c40684f014610413578063cb63179714610432575f5ffd5b8063aefb212f146103a9578063b2a7cac5146103d5575f5ffd5b806348baa1c51161012657806395b55cfc1161010157806395b55cfc146103635780639b1c385e14610376578063a21a23e414610395575f5ffd5b806348baa1c51461023b57806379ba5097146103045780638da5cb5b14610318575f5ffd5b806340d6bb821161015657806340d6bb82146101c457806341af6c87146101ed578063431ac6571461021c575f5ffd5b80630ae095401461017157806313c34b7f14610192575b5f5ffd5b34801561017c575f5ffd5b5061019061018b366004611a0c565b61051f565b005b34801561019d575f5ffd5b506101b16101ac366004611a4d565b61063f565b6040519081526020015b60405180910390f35b3480156101cf575f5ffd5b506101d8600181565b60405163ffffffff90911681526020016101bb565b3480156101f8575f5ffd5b5061020c610207366004611a7e565b61070f565b60405190151581526020016101bb565b348015610227575f5ffd5b50610190610236366004611a95565b6107a0565b348015610246575f5ffd5b506102c3610255366004611a7e565b60066020525f908152604090205473ffffffffffffffffffffffffffffffffffffffff81169074010000000000000000000000000000000000000000810463ffffffff16907801000000000000000000000000000000000000000000000000900467ffffffffffffffff1683565b6040805173ffffffffffffffffffffffffffffffffffffffff909416845263ffffffff909216602084015267ffffffffffffffff16908201526060016101bb565b34801561030f575f5ffd5b50610190610839565b348015610323575f5ffd5b5060015473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101bb565b610190610371366004611a7e565b610939565b348015610381575f5ffd5b506101b1610390366004611ab5565b6109be565b3480156103a0575f5ffd5b506101b1610d50565b3480156103b4575f5ffd5b506103c86103c3366004611a95565b610ea1565b6040516101bb9190611b2d565b3480156103e0575f5ffd5b506101906103ef366004611a7e565b610f5a565b3480156103ff575f5ffd5b5061019061040e366004611a0c565b611052565b34801561041e575f5ffd5b5061019061042d366004611b3f565b61113f565b34801561043d575f5ffd5b5061019061044c366004611a0c565b6111cd565b34801561045c575f5ffd5b5061019061046b366004611a0c565b6112ba565b34801561047b575f5ffd5b5061048f61048a366004611a7e565b611319565b6040516101bb959493929190611b58565b3480156104ab575f5ffd5b5060035461033e9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156104d7575f5ffd5b506101b16104e6366004611c0c565b6113f0565b3480156104f6575f5ffd5b50610190610505366004611c46565b6114c6565b348015610515575f5ffd5b506101b160045481565b5f82815260056020526040902054829073ffffffffffffffffffffffffffffffffffffffff1633146105b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f43616c6c6572206973206e6f7420737562736372697074696f6e206f776e657260448201526064015b60405180910390fd5b6003546040517f0ae095400000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff848116602483015290911690630ae09540906044015b5f604051808303815f87803b158015610624575f5ffd5b505af1158015610636573d5f5f3e3d5ffd5b50505050505050565b6003545f9073ffffffffffffffffffffffffffffffffffffffff811690634b1609359061068a9074010000000000000000000000000000000000000000900463ffffffff1686611c61565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815263ffffffff919091166004820152602401602060405180830381865afa1580156106e2573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107069190611ca2565b90505b92915050565b6003546040517f41af6c87000000000000000000000000000000000000000000000000000000008152600481018390525f9173ffffffffffffffffffffffffffffffffffffffff16906341af6c8790602401602060405180830381865afa15801561077c573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107099190611cb9565b60035473ffffffffffffffffffffffffffffffffffffffff163314610821576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4f6e6c792072616e646f6d6e65737353656e6465722063616e2063616c6c000060448201526064016105a9565b610835826108308360016114da565b611585565b5050565b60025473ffffffffffffffffffffffffffffffffffffffff1633146108ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064016105a9565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000008082163390811790935560028054909116905560405173ffffffffffffffffffffffffffffffffffffffff909116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a350565b6003546040517f95b55cfc0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff909116906395b55cfc9034906024015f604051808303818588803b1580156109a4575f5ffd5b505af11580156109b6573d5f5f3e3d5ffd5b505050505050565b5f6109c76117bf565b6003546040517fdc311dd3000000000000000000000000000000000000000000000000000000008152602084013560048201819052915f9173ffffffffffffffffffffffffffffffffffffffff9091169063dc311dd3906024015f60405180830381865afa158015610a3b573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a809190810190611d77565b5f8681526005602052604090205490945073ffffffffffffffffffffffffffffffffffffffff1633149250829150610abf90505750610abf3382611800565b610b4b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f43616c6c6572206973206e6f7420737562736372697074696f6e206f776e657260448201527f206f7220617070726f76656420636f6e73756d6572000000000000000000000060648201526084016105a9565b60035473ffffffffffffffffffffffffffffffffffffffff811690631da53c9f9074010000000000000000000000000000000000000000900463ffffffff16610b9a6080880160608901611b3f565b610ba49190611c61565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815263ffffffff919091166004820152602087013560248201526044016020604051808303815f875af1158015610c07573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c2b9190611ca2565b925060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001856060016020810190610c679190611b3f565b63ffffffff908116825267ffffffffffffffff3a81166020938401525f878152600684526040908190208551815495870151969092015190921678010000000000000000000000000000000000000000000000000277ffffffffffffffffffffffffffffffffffffffffffffffff9590931674010000000000000000000000000000000000000000027fffffffffffffffff00000000000000000000000000000000000000000000000090941673ffffffffffffffffffffffffffffffffffffffff90911617929092179290921691909117905560048390555050610d4b60015f55565b919050565b600354604080517fa21a23e400000000000000000000000000000000000000000000000000000000815290515f9273ffffffffffffffffffffffffffffffffffffffff169163a21a23e4916004808301926020929190829003018187875af1158015610dbe573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610de29190611ca2565b5f818152600560205260409081902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000163317905560035490517fbec4c08c0000000000000000000000000000000000000000000000000000000081526004810183905230602482015291925073ffffffffffffffffffffffffffffffffffffffff169063bec4c08c906044015f604051808303815f87803b158015610e88575f5ffd5b505af1158015610e9a573d5f5f3e3d5ffd5b5050505090565b6003546040517faefb212f000000000000000000000000000000000000000000000000000000008152600481018490526024810183905260609173ffffffffffffffffffffffffffffffffffffffff169063aefb212f906044015f60405180830381865afa158015610f15573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526107069190810190611e6c565b5f81815260056020526040902054819073ffffffffffffffffffffffffffffffffffffffff163314610fe8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f43616c6c6572206973206e6f7420737562736372697074696f6e206f776e657260448201526064016105a9565b6003546040517fb2a7cac50000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff9091169063b2a7cac5906024015b5f604051808303815f87803b1580156109a4575f5ffd5b5f82815260056020526040902054829073ffffffffffffffffffffffffffffffffffffffff1633146110e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f43616c6c6572206973206e6f7420737562736372697074696f6e206f776e657260448201526064016105a9565b6003546040517fbec4c08c0000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff84811660248301529091169063bec4c08c9060440161060d565b611147611873565b600380547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000063ffffffff8481168202929092179283905560405192041681527f06072508f4be461bb306c2111807a859ab85e8ae617fbb868cb18a078665072d9060200160405180910390a150565b5f82815260056020526040902054829073ffffffffffffffffffffffffffffffffffffffff16331461125b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f43616c6c6572206973206e6f7420737562736372697074696f6e206f776e657260448201526064016105a9565b6003546040517fcb6317970000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff84811660248301529091169063cb6317979060440161060d565b6003546040517fdac83d290000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff83811660248301529091169063dac83d299060440161103b565b6003546040517fdc311dd3000000000000000000000000000000000000000000000000000000008152600481018390525f91829182918291606091839182918291829173ffffffffffffffffffffffffffffffffffffffff169063dc311dd3906024015f60405180830381865afa158015611396573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526113db9190810190611d77565b5f9e939d50919b509950975095505050505050565b6003545f9073ffffffffffffffffffffffffffffffffffffffff811690633255c4569061143b9074010000000000000000000000000000000000000000900463ffffffff1687611c61565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815263ffffffff91909116600482015260248101859052604401602060405180830381865afa15801561149a573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114be9190611ca2565b949350505050565b6114ce611873565b6114d7816118f6565b50565b60605f8267ffffffffffffffff8111156114f6576114f6611cd8565b60405190808252806020026020018201604052801561151f578160200160208202803683370190505b5090505f5b8381101561157d576040805160208101879052908101829052606001604051602081830303815290604052805190602001205f1c82828151811061156a5761156a611efd565b6020908102919091010152600101611524565b509392505050565b5f8281526006602081815260408084208151606081018352815473ffffffffffffffffffffffffffffffffffffffff808216835274010000000000000000000000000000000000000000820463ffffffff1683870152780100000000000000000000000000000000000000000000000090910467ffffffffffffffff16938201939093528786529390925292905580519091811661167f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f72657175657374206e6f7420666f756e6400000000000000000000000000000060448201526064016105a9565b5f5f631fe543e360e01b868660405160240161169c929190611f2a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090505f8373ffffffffffffffffffffffffffffffffffffffff16856020015163ffffffff168360405161172c9190611f42565b5f604051808303815f8787f1925050503d805f8114611766576040519150601f19603f3d011682016040523d82523d5f602084013e61176b565b606091505b50509050806106365760405173ffffffffffffffffffffffffffffffffffffffff85169088907fc551b83c151f2d1c7eeb938ac59008e0409f1c1dc1e2f112449d4d79b4589022905f90a350505050505050565b60025f54036117fa576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025f55565b5f805b825181101561186a578373ffffffffffffffffffffffffffffffffffffffff1683828151811061183557611835611efd565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603611862576001915050610709565b600101611803565b505f9392505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146118f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016105a9565b565b3373ffffffffffffffffffffffffffffffffffffffff821603611975576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016105a9565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff838116918217909255600154604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278905f90a350565b73ffffffffffffffffffffffffffffffffffffffff811681146114d7575f5ffd5b5f5f60408385031215611a1d575f5ffd5b823591506020830135611a2f816119eb565b809150509250929050565b803563ffffffff81168114610d4b575f5ffd5b5f5f60408385031215611a5e575f5ffd5b611a6783611a3a565b9150611a7560208401611a3a565b90509250929050565b5f60208284031215611a8e575f5ffd5b5035919050565b5f5f60408385031215611aa6575f5ffd5b50508035926020909101359150565b5f60208284031215611ac5575f5ffd5b813567ffffffffffffffff811115611adb575f5ffd5b820160c08185031215611aec575f5ffd5b9392505050565b5f8151808452602084019350602083015f5b82811015611b23578151865260209586019590910190600101611b05565b5093949350505050565b602081525f6107066020830184611af3565b5f60208284031215611b4f575f5ffd5b61070682611a3a565b5f60a082016bffffffffffffffffffffffff881683526bffffffffffffffffffffffff8716602084015267ffffffffffffffff8616604084015273ffffffffffffffffffffffffffffffffffffffff8516606084015260a0608084015280845180835260c0850191506020860192505f5b81811015611bfd57835173ffffffffffffffffffffffffffffffffffffffff16835260209384019390920191600101611bc9565b50909998505050505050505050565b5f5f5f60608486031215611c1e575f5ffd5b611c2784611a3a565b9250611c3560208501611a3a565b929592945050506040919091013590565b5f60208284031215611c56575f5ffd5b8135611aec816119eb565b63ffffffff8181168382160190811115610709577f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f60208284031215611cb2575f5ffd5b5051919050565b5f60208284031215611cc9575f5ffd5b81518015158114611aec575f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611d4c57611d4c611cd8565b604052919050565b5f67ffffffffffffffff821115611d6d57611d6d611cd8565b5060051b60200190565b5f5f5f5f60808587031215611d8a575f5ffd5b84516bffffffffffffffffffffffff81168114611da5575f5ffd5b602086015190945067ffffffffffffffff81168114611dc2575f5ffd5b6040860151909350611dd3816119eb565b606086015190925067ffffffffffffffff811115611def575f5ffd5b8501601f81018713611dff575f5ffd5b8051611e12611e0d82611d54565b611d05565b8082825260208201915060208360051b850101925089831115611e33575f5ffd5b6020840193505b82841015611e5e578351611e4d816119eb565b825260209384019390910190611e3a565b969995985093965050505050565b5f60208284031215611e7c575f5ffd5b815167ffffffffffffffff811115611e92575f5ffd5b8201601f81018413611ea2575f5ffd5b8051611eb0611e0d82611d54565b8082825260208201915060208360051b850101925086831115611ed1575f5ffd5b6020840193505b82841015611ef3578351825260209384019390910190611ed8565b9695505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b828152604060208201525f6114be6040830184611af3565b5f82518060208501845e5f92019182525091905056fea2646970667358221220a8ac9a21208416d556424d3fd9cb5fe0fa2bc028c32368330767c267a1913a1064736f6c634300081c0033608060405234801561000f575f5ffd5b50604051610ffd380380610ffd83398101604081905261002e916101ae565b8033805f816100845760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b5f80546001600160a01b0319166001600160a01b03848116919091179091558116156100b3576100b381610106565b5050506001600160a01b0381166100dd5760405163d92e233d60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055506005556101e8565b336001600160a01b0382160361015e5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640161007b565b600180546001600160a01b0319166001600160a01b038381169182179092555f8054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b5f5f604083850312156101bf575f5ffd5b825160208401519092506001600160a01b03811681146101dd575f5ffd5b809150509250929050565b610e08806101f55f395ff3fe6080604052600436106100d8575f3560e01c80638ea981171161007c578063a21a23e411610057578063a21a23e41461024b578063bec4c08c1461025f578063e726f2e11461027e578063f2fde38b1461029d575f5ffd5b80638ea98117146101ed57806395b55cfc1461020c5780639eccacf61461021f575f5ffd5b80634b3c08f3116100b75780634b3c08f31461014457806379ba50971461017057806388b660a6146101845780638da5cb5b146101a3575f5ffd5b80626d6cae146100dc578063064e96a0146101045780631fe543e314610125575b5f5ffd5b3480156100e7575f5ffd5b506100f160035481565b6040519081526020015b60405180910390f35b34801561010f575f5ffd5b5061012361011e366004610b92565b600555565b005b348015610130575f5ffd5b5061012361013f366004610ba9565b6102bc565b34801561014f575f5ffd5b5061016361015e366004610b92565b610344565b6040516100fb9190610c23565b34801561017b575f5ffd5b506101236103a3565b34801561018f575f5ffd5b506100f161019e366004610c65565b61049f565b3480156101ae575f5ffd5b505f5473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100fb565b3480156101f8575f5ffd5b50610123610207366004610cad565b6104ca565b61012361021a366004610b92565b610652565b34801561022a575f5ffd5b506002546101c89073ffffffffffffffffffffffffffffffffffffffff1681565b348015610256575f5ffd5b506100f16106d7565b34801561026a575f5ffd5b50610123610279366004610ccd565b610773565b348015610289575f5ffd5b506100f1610298366004610cf7565b6107ec565b3480156102a8575f5ffd5b506101236102b7366004610cad565b6108d1565b60025473ffffffffffffffffffffffffffffffffffffffff163314610334576002546040517f1cf993f400000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff90911660248201526044015b60405180910390fd5b61033f8383836108e5565b505050565b5f8181526004602090815260409182902080548351818402810184019094528084526060939283018282801561039757602002820191905f5260205f20905b815481526020019060010190808311610383575b50505050509050919050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610424576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e657200000000000000000000604482015260640161032b565b5f8054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6004602052815f5260405f2081815481106104b8575f80fd5b905f5260205f20015f91509150505481565b5f5473ffffffffffffffffffffffffffffffffffffffff163314801590610509575060025473ffffffffffffffffffffffffffffffffffffffff163314155b1561058c573361052d5f5473ffffffffffffffffffffffffffffffffffffffff1690565b6002546040517f061db9c100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9384166004820152918316602483015291909116604482015260640161032b565b73ffffffffffffffffffffffffffffffffffffffff81166105d9576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fd1a6a14209a385a964d036e404cb5cfb71f4000cdb03c9366292430787261be69060200160405180910390a150565b6002546040517f95b55cfc0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff909116906395b55cfc9034906024015f604051808303818588803b1580156106bd575f5ffd5b505af11580156106cf573d5f5f3e3d5ffd5b505050505050565b600254604080517fa21a23e400000000000000000000000000000000000000000000000000000000815290515f9273ffffffffffffffffffffffffffffffffffffffff169163a21a23e4916004808301926020929190829003018187875af1158015610745573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107699190610d1a565b6005819055919050565b61077b610903565b6002546040517fbec4c08c0000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff83811660248301529091169063bec4c08c906044015f604051808303815f87803b1580156106bd575f5ffd5b5f6107f5610903565b6002546040805160c0810182525f8152600554602080830191909152600382840181905263ffffffff8716606084015260016080840181905284519283019094528382529373ffffffffffffffffffffffffffffffffffffffff1691639b1c385e9160a082019061086590610985565b8152506040518263ffffffff1660e01b81526004016108849190610d31565b6020604051808303815f875af11580156108a0573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108c49190610d1a565b6003819055949350505050565b6108d9610903565b6108e281610a41565b50565b5f8381526004602052604090206108fd908383610b35565b50505050565b5f5473ffffffffffffffffffffffffffffffffffffffff163314610983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015260640161032b565b565b60607f92fd13387c7fe7befbc38d303d6468778fb9731bc4583f17d92989c6fcfdeaaa826040516024016109be91511515815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915292915050565b3373ffffffffffffffffffffffffffffffffffffffff821603610ac0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640161032b565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182179092555f8054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b828054828255905f5260205f20908101928215610b6e579160200282015b82811115610b6e578235825591602001919060010190610b53565b50610b7a929150610b7e565b5090565b5b80821115610b7a575f8155600101610b7f565b5f60208284031215610ba2575f5ffd5b5035919050565b5f5f5f60408486031215610bbb575f5ffd5b83359250602084013567ffffffffffffffff811115610bd8575f5ffd5b8401601f81018613610be8575f5ffd5b803567ffffffffffffffff811115610bfe575f5ffd5b8660208260051b8401011115610c12575f5ffd5b939660209190910195509293505050565b602080825282518282018190525f918401906040840190835b81811015610c5a578351835260209384019390920191600101610c3c565b509095945050505050565b5f5f60408385031215610c76575f5ffd5b50508035926020909101359150565b803573ffffffffffffffffffffffffffffffffffffffff81168114610ca8575f5ffd5b919050565b5f60208284031215610cbd575f5ffd5b610cc682610c85565b9392505050565b5f5f60408385031215610cde575f5ffd5b82359150610cee60208401610c85565b90509250929050565b5f60208284031215610d07575f5ffd5b813563ffffffff81168114610cc6575f5ffd5b5f60208284031215610d2a575f5ffd5b5051919050565b60208152815160208201526020820151604082015261ffff604083015116606082015263ffffffff606083015116608082015263ffffffff60808301511660a08201525f60a083015160c08084015280518060e0850152806020830161010086015e5f61010082860101526101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116850101925050509291505056fea2646970667358221220b371f1d9e18829e41d1e00e5faeb7b80c17d346a187a975c52545a1c3810df5c64736f6c634300081c0033608060405234801561000f575f5ffd5b50604051610cb6380380610cb683398101604081905261002e916101a7565b6001600160a01b03811661003f5750335b6100495f826100fe565b61008e5760405162461bcd60e51b815260206004820152601160248201527011dc985b9d081c9bdb194819985a5b1959607a1b60448201526064015b60405180910390fd5b6100b87fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775826100fe565b6100f85760405162461bcd60e51b815260206004820152601160248201527011dc985b9d081c9bdb194819985a5b1959607a1b6044820152606401610085565b506101d4565b5f828152602081815260408083206001600160a01b038516845290915281205460ff1661019e575f838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556101563390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016101a1565b505f5b92915050565b5f602082840312156101b7575f5ffd5b81516001600160a01b03811681146101cd575f5ffd5b9392505050565b610ad5806101e15f395ff3fe608060405234801561000f575f5ffd5b50600436106100c4575f3560e01c80635bb09cf81161007d578063a217fddf11610058578063a217fddf146101fd578063bab867da14610204578063d547741f14610217575f5ffd5b80635bb09cf81461015b57806375b238fc1461019357806391d14854146101ba575f5ffd5b80632f2ff15d116100ad5780632f2ff15d146101205780632fc9fa331461013557806336568abe14610148575f5ffd5b806301ffc9a7146100c8578063248a9ca3146100f0575b5f5ffd5b6100db6100d636600461090d565b61022a565b60405190151581526020015b60405180910390f35b6101126100fe366004610953565b5f9081526020819052604090206001015490565b6040519081526020016100e7565b61013361012e366004610992565b6102c2565b005b6100db610143366004610a01565b6102ec565b610133610156366004610992565b610346565b61016e610169366004610a01565b6103a4565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e7565b6101127fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b6100db6101c8366004610992565b5f9182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b6101125f81565b610133610212366004610a40565b6103e5565b610133610225366004610992565b6106a1565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806102bc57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b5f828152602081905260409020600101546102dc816106c5565b6102e683836106d2565b50505050565b5f5f73ffffffffffffffffffffffffffffffffffffffff1660018484604051610316929190610a90565b9081526040519081900360200190205473ffffffffffffffffffffffffffffffffffffffff161415905092915050565b73ffffffffffffffffffffffffffffffffffffffff81163314610395576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61039f82826107cb565b505050565b5f600183836040516103b7929190610a90565b9081526040519081900360200190205473ffffffffffffffffffffffffffffffffffffffff16905092915050565b61040e7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756106c5565b73ffffffffffffffffffffffffffffffffffffffff811615801590610449575073ffffffffffffffffffffffffffffffffffffffff81163b15155b6104da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f496e76616c696420636f6e7472616374206164647265737320666f722073636860448201527f656d65416464726573730000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff1660018484604051610503929190610a90565b9081526040519081900360200190205473ffffffffffffffffffffffffffffffffffffffff16146105b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f536368656d6520616c726561647920616464656420666f7220736368656d654960448201527f440000000000000000000000000000000000000000000000000000000000000060648201526084016104d1565b80600184846040516105c9929190610a90565b908152604051908190036020018120805473ffffffffffffffffffffffffffffffffffffffff939093167fffffffffffffffffffffffff00000000000000000000000000000000000000009093169290921790915560019061062e9085908590610a90565b9081526040519081900360200181205473ffffffffffffffffffffffffffffffffffffffff16906106629085908590610a90565b604051908190038120428252907f0a1cd6a1e0a7b200d28ead555f3cee96e0d2def049535fbcfdc2926bc4cec5049060200160405180910390a3505050565b5f828152602081905260409020600101546106bb816106c5565b6102e683836107cb565b6106cf8133610884565b50565b5f8281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915281205460ff166107c4575f8381526020818152604080832073ffffffffffffffffffffffffffffffffffffffff86168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556107623390565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016102bc565b505f6102bc565b5f8281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915281205460ff16156107c4575f8381526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8616808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016102bc565b5f8281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610909576040517fe2517d3f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602481018390526044016104d1565b5050565b5f6020828403121561091d575f5ffd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461094c575f5ffd5b9392505050565b5f60208284031215610963575f5ffd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461098d575f5ffd5b919050565b5f5f604083850312156109a3575f5ffd5b823591506109b36020840161096a565b90509250929050565b5f5f83601f8401126109cc575f5ffd5b50813567ffffffffffffffff8111156109e3575f5ffd5b6020830191508360208285010111156109fa575f5ffd5b9250929050565b5f5f60208385031215610a12575f5ffd5b823567ffffffffffffffff811115610a28575f5ffd5b610a34858286016109bc565b90969095509350505050565b5f5f5f60408486031215610a52575f5ffd5b833567ffffffffffffffff811115610a68575f5ffd5b610a74868287016109bc565b9094509250610a8790506020850161096a565b90509250925092565b818382375f910190815291905056fea2646970667358221220494820d46e1f78bcf8e52638cf1f300983bdb28b1178bafc45528216306e873064736f6c634300081c00335f60c081815260e0829052608081815261014060405261010083815261012084905260a052919061003390829060026102cd565b50602082015161004990600280840191906102cd565b505050348015610057575f5ffd5b50604051612d52380380612d528339810160408190526100769161039f565b6040805180820190915282815260208101829052829082905f61009b818560026102cd565b5060208201516100b190600280840191906102cd565b5090505050506100cd6100c861010260201b60201c565b610106565b6040516020016100dd91906103d2565b604051602081830303815290604052600490816100fa91906104c4565b5050506105d6565b4690565b604080518082018252601081526f181899199a1a9b1b9c1cb0b131b232b360811b602082015281516042808252608082019093526060925f9190602082018180368337019050509050600360fc1b815f815181106101665761016661057e565b60200101906001600160f81b03191690815f1a905350600f60fb1b816001815181106101945761019461057e565b60200101906001600160f81b03191690815f1a9053505f5b60208110156102c5578260048683602081106101ca576101ca61057e565b1a60f81b6001600160f81b031916901c60f81c60ff16815181106101f0576101f061057e565b01602001516001600160f81b0319168261020b8360026105a6565b6102169060026105c3565b815181106102265761022661057e565b60200101906001600160f81b03191690815f1a9053508285826020811061024f5761024f61057e565b825191901a600f169081106102665761026661057e565b01602001516001600160f81b031916826102818360026105a6565b61028c9060026105c3565b6102979060016105c3565b815181106102a7576102a761057e565b60200101906001600160f81b03191690815f1a9053506001016101ac565b509392505050565b82600281019282156102fb579160200282015b828111156102fb5782518255916020019190600101906102e0565b5061030792915061030b565b5090565b5b80821115610307575f815560010161030c565b634e487b7160e01b5f52604160045260245ffd5b5f82601f830112610342575f5ffd5b604080519081016001600160401b03811182821017156103645761036461031f565b806040525080604084018581111561037a575f5ffd5b845b8181101561039457805183526020928301920161037c565b509195945050505050565b5f5f608083850312156103b0575f5ffd5b6103ba8484610333565b91506103c98460408501610333565b90509250929050565b7f646369706865722d72616e646f6d6e6573732d7630312d424e32353447315f5881527f4d443a4b454343414b2d3235365f535644575f524f5f0000000000000000000060208201525f82518060208501603685015e605f60f81b6036939091019283015250603701919050565b600181811c9082168061045457607f821691505b60208210810361047257634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156104bf57805f5260205f20601f840160051c8101602085101561049d5750805b601f840160051c820191505b818110156104bc575f81556001016104a9565b50505b505050565b81516001600160401b038111156104dd576104dd61031f565b6104f1816104eb8454610440565b84610478565b6020601f821160018114610523575f831561050c5750848201515b5f19600385901b1c1916600184901b1784556104bc565b5f84815260208120601f198516915b828110156105525787850151825560209485019460019092019101610532565b508482101561056f57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b80820281158282048414176105bd576105bd610592565b92915050565b808201808211156105bd576105bd610592565b61276f806105e35f395ff3fe608060405234801561000f575f5ffd5b5060043610610085575f3560e01c80638a1f165a116100585780638a1f165a146100f3578063acae9fee1461012f578063eae1e15b14610137578063f6e548e91461014a575f5ffd5b80632e334452146100895780633033cc51146100a85780633408e470146100d05780635f7c7522146100de575b5f5ffd5b61009161016d565b60405161009f929190612300565b60405180910390f35b6100bb6100b6366004612360565b6101e6565b6040805192835260208301919091520161009f565b60405146815260200161009f565b6100e66102c6565b60405161009f91906123eb565b6100e66040518060400160405280600581526020017f424e32353400000000000000000000000000000000000000000000000000000081525081565b6100e6610352565b6100e6610145366004612360565b6103d1565b61015d6101583660046123fd565b61040b565b604051901515815260200161009f565b610175612259565b61017d612259565b60408051808201918290525f91600291908390839082845b815481526020019060010190808311610195575050604080518082019182905294965085935060029250905082845b8154815260200190600101908083116101c45750505050509050915091509091565b5f5f5f6102b0600480546101f99061249c565b80601f01602080910402602001604051908101604052809291908181526020018280546102259061249c565b80156102705780601f1061024757610100808354040283529160200191610270565b820191905f5260205f20905b81548152906001019060200180831161025357829003601f168201915b505050505086868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506104fa92505050565b80516020909101519093509150505b9250929050565b600480546102d39061249c565b80601f01602080910402602001604051908101604052809291908181526020018280546102ff9061249c565b801561034a5780601f106103215761010080835404028352916020019161034a565b820191905f5260205f20905b81548152906001019060200180831161032d57829003601f168201915b505050505081565b60408051608081018083526060926103cc92915f91839190820190839060029082845b81548152602001906001019080831161037557505050918352505060408051808201918290526020909201919060028481019182845b8154815260200190600101908083116103ab575050505050815250506105df565b905090565b60605f5f6103df85856101e6565b9150915061040060405180604001604052808481526020018381525061063b565b925050505b92915050565b5f5f61044b88888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061067492505050565b90505f61048c87878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061067492505050565b90505f6104cd86868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061071192505050565b90505f5f6104dc8484876107cc565b915091508180156104ea5750805b9c9b505050505050505050505050565b604080518082019091525f80825260208201525f610518848461093f565b90505f61052b82825b6020020151610a8a565b90505f610539836001610521565b9050610543612277565b825181526020808401518282015282516040808401919091529083015160608301525f908460808460066107d05a03fa9050806105b757816040517f128e3f080000000000000000000000000000000000000000000000000000000081526004016105ae919061251a565b60405180910390fd5b6040805180820190915284518152602081018560016020020151905298975050505050505050565b60408051608080825260a082019092526060915f91906020820181803683375050845180516020918201519682015180519083015192850191909152604084019690965260608301959095525060808101939093525090919050565b6040805181815260608181018352915f919060208201818036833750508451602095860151958301525060408101939093525090919050565b604080518082019091525f808252602082015281516040146106f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c6964204731206279746573206c656e67746800000000000000000060448201526064016105ae565b5060208181015160409283015183518085019094529083529082015290565b610719612295565b8151608014610784576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c6964204732206279746573206c656e67746800000000000000000060448201526064016105ae565b50602081810151604080840151606080860151608096870151845197880185528785019586529187019290925292855281518083019092528152808301919091529082015290565b5f5f5f604051806101800160405280875f01518152602001876020015181526020017f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d8152602001855f0151815260200185602001518152602001865f01516001600281106108af576108af6124ed565b60200201518152602001865f01515f600281106108ce576108ce6124ed565b6020020151815260200186602001516001600281106108ef576108ef6124ed565b6020020151815260200186602001515f6002811061090f5761090f6124ed565b6020020151905290506109206122ba565b6020816101808460086107d05a03fa9051151597909650945050505050565b610947612259565b5f6109528484610f32565b90505f5f5f5f6018850177ffffffffffffffffffffffffffffffffffffffffffffffff815116935060308601905077ffffffffffffffffffffffffffffffffffffffffffffffff81511694507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47857f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4778010000000000000000000000000000000000000000000000008709086048870151606088015177ffffffffffffffffffffffffffffffffffffffffffffffff908116975016945092507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905084817801000000000000000000000000000000000000000000000000860908604080518082019091529283526020830152509695505050505050565b610a92612259565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478210610aee576040517fd53e9415000000000000000000000000000000000000000000000000000000008152600481018390526024016105ae565b5f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760047f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478586090990505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478260010890507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610bac837f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612577565b60010891505f610bde7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783850961111c565b90505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4778016789af3a83522eb353c98fc6b36d713d5d8d1cc5dffffffa7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47847f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47888b09090990505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610cb2837f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612577565b7f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea30890505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47837f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea30890505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4786870990505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4786830990505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478485097f10216f7ba065e00de81ac1e7808072c9dd2b2385cd7b438469602eb24829a9bd0960010890505f5f610dec610de788611126565b611198565b5f0b600103610e5557868c52610e0187611126565b9050610e0c81611248565b60208e0191909152915081610e50576040517f396ec771000000000000000000000000000000000000000000000000000000008152600481018290526024016105ae565b610ed1565b610e61610de787611126565b5f0b600103610e7657858c52610e0186611126565b828c52610e8283611126565b9050610e8d81611248565b60208e0191909152915081610ed1576040517f396ec771000000000000000000000000000000000000000000000000000000008152600481018290526024016105ae565b60208c0151610edf90611282565b610ee88e611282565b14610f225760208c0151610f1c907f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612577565b60208d01525b5050505050505050505050919050565b815160609060ff811115610f7457836040517f26e4f9ba0000000000000000000000000000000000000000000000000000000081526004016105ae91906123eb565b60408051608880825260c082019092525f916020820181803683370190505090505f81855f60605f8a88604051602001610fb497969594939291906125a1565b60405160208183030381529060405290505f818051906020012090505f8160018987604051602001610fe9949392919061267c565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001815282825280516020820120606080855260808501909352909350915f91602082018180368337019050509050600360015b818110156110e05785841861105a8260016126ee565b8d8b60405160200161106f949392919061267c565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001815291905260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff830181028501810195909552805194810194909420939450600101611044565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016020908102820101919091529550505050505092915050565b5f6104058261128e565b5f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47847f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47868709090892915050565b5f5f6111a3836119e6565b90506111d060017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612577565b81036111fe57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff92915050565b801580159061120e575080600114155b15610405576040517f396ec771000000000000000000000000000000000000000000000000000000008152600481018490526024016105ae565b5f5f61125383611b13565b9150827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47838409149050915091565b5f610405600283612701565b5f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab6040805160c080825260e082019092525f918291906020820181803683370190505060208082018181526040830182905260608301829052608083018690527f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea360a08401527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760c0808501919091529293505f92839160055afa90505f51925080611b0c576040517fc6daf7ab000000000000000000000000000000000000000000000000000000008152600481018590527f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea360248201527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760448201526064016105ae565b5050919050565b5f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab60405180604001604052806002906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180604001604052806122a8612259565b81526020016122b5612259565b905290565b60405180602001604052806001906020820280368337509192915050565b805f5b60028110156122fa5781518452602093840193909101906001016122db565b50505050565b6080810161230e82856122d8565b61231b60408301846122d8565b9392505050565b5f5f83601f840112612332575f5ffd5b50813567ffffffffffffffff811115612349575f5ffd5b6020830191508360208285010111156102bf575f5ffd5b5f5f60208385031215612371575f5ffd5b823567ffffffffffffffff811115612387575f5ffd5b61239385828601612322565b90969095509350505050565b5f81518084528060208401602086015e5f6020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b602081525f61231b602083018461239f565b5f5f5f5f5f5f60608789031215612412575f5ffd5b863567ffffffffffffffff811115612428575f5ffd5b61243489828a01612322565b909750955050602087013567ffffffffffffffff811115612453575f5ffd5b61245f89828a01612322565b909550935050604087013567ffffffffffffffff81111561247e575f5ffd5b61248a89828a01612322565b979a9699509497509295939492505050565b600181811c908216806124b057607f821691505b6020821081036124e7577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b6080810181835f5b6004811015612541578151835260209283019290910190600101612522565b50505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b818103818111156104055761040561254a565b5f81518060208401855e5f93019283525090919050565b5f6125b56125af838b61258a565b8961258a565b7fff000000000000000000000000000000000000000000000000000000000000008860f81b1681527fff000000000000000000000000000000000000000000000000000000000000008760f81b1660018201527fff000000000000000000000000000000000000000000000000000000000000008660f81b166002820152612640600382018661258a565b60f89490941b7fff0000000000000000000000000000000000000000000000000000000000000016845250506001909101979650505050505050565b8481527fff000000000000000000000000000000000000000000000000000000000000008460f81b1660208201525f6126b8602183018561258a565b60f89390931b7fff0000000000000000000000000000000000000000000000000000000000000016835250506001019392505050565b808201808211156104055761040561254a565b5f82612734577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b50069056fea264697066735822122028d20a5d414f9aeeef1fff1ecfa26af3f5e307f772c317fd3dad1f62e0eaf87164736f6c634300081c003360a0604052306080525f8055348015610016575f5ffd5b5061001f610024565b6100d6565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156100745760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146100d35780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b608051613ace6100fc5f395f81816123f50152818161241e015261263d0152613ace5ff3fe6080604052600436106101c5575f3560e01c80639010d07c116100f2578063b094728911610092578063d547741f11610062578063d547741f1461061c578063da8281161461063b578063e63b5d581461065a578063e6b3ca711461066e575f5ffd5b8063b094728914610593578063c58343ef146105b2578063ca15c873146105de578063cd802c91146105fd575f5ffd5b8063a217fddf116100cd578063a217fddf146104e0578063a3246ad3146104f3578063ac9650d81461051f578063ad3cb1cc1461054b575f5ffd5b80639010d07c1461040d57806391d148541461045157806395b8d073146104c1575f5ffd5b80634b96e16611610168578063571d708711610138578063571d7087146103805780636f421ea91461039457806375b238fc146103a857806381d12c58146103db575f5ffd5b80634b96e166146102ea5780634f1ef2861461030b57806352d1902d1461031e57806354fd4d5014610332575f5ffd5b80632f2ff15d116101a35780632f2ff15d1461027957806336568abe1461029857806347c03186146102b7578063485cc955146102cb575f5ffd5b806301ffc9a7146101c957806316cc9a98146101fd578063248a9ca31461021e575b5f5ffd5b3480156101d4575f5ffd5b506101e86101e3366004612f81565b61069a565b60405190151581526020015b60405180910390f35b348015610208575f5ffd5b5061021c610217366004612fe1565b6106f5565b005b348015610229575f5ffd5b5061026b610238366004612ffc565b5f9081527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052604090206001015490565b6040519081526020016101f4565b348015610284575f5ffd5b5061021c610293366004613013565b61078c565b3480156102a3575f5ffd5b5061021c6102b2366004613013565b6107d5565b3480156102c2575f5ffd5b5061026b5f5481565b3480156102d6575f5ffd5b5061021c6102e5366004613041565b610833565b3480156102f5575f5ffd5b506102fe610afe565b6040516101f4919061306d565b61021c610319366004613134565b610b0f565b348015610329575f5ffd5b5061026b610b2e565b34801561033d575f5ffd5b5060408051808201909152600581527f302e302e3100000000000000000000000000000000000000000000000000000060208201525b6040516101f491906131ef565b34801561038b575f5ffd5b506102fe610b5c565b34801561039f575f5ffd5b506102fe610b68565b3480156103b3575f5ffd5b5061026b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b3480156103e6575f5ffd5b506103fa6103f5366004612ffc565b610b74565b6040516101f49796959493929190613201565b348015610418575f5ffd5b5061042c610427366004613294565b610e6a565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101f4565b34801561045c575f5ffd5b506101e861046b366004613013565b5f9182527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b3480156104cc575f5ffd5b5061026b6104db3660046132f9565b610eaa565b3480156104eb575f5ffd5b5061026b5f81565b3480156104fe575f5ffd5b5061051261050d366004612ffc565b6115af565b6040516101f49190613398565b34801561052a575f5ffd5b5061053e6105393660046133e5565b6115f2565b6040516101f49190613456565b348015610556575f5ffd5b506103736040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b34801561059e575f5ffd5b506101e86105ad366004612ffc565b6116d8565b3480156105bd575f5ffd5b506105d16105cc366004612ffc565b6116e4565b6040516101f491906134d7565b3480156105e9575f5ffd5b5061026b6105f8366004612ffc565b611a5c565b348015610608575f5ffd5b506101e8610617366004612ffc565b611a93565b348015610627575f5ffd5b5061021c610636366004613013565b611ab0565b348015610646575f5ffd5b5061021c6106553660046135a8565b611af3565b348015610665575f5ffd5b5061026b612278565b348015610679575f5ffd5b5060025461042c9073ffffffffffffffffffffffffffffffffffffffff1681565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f0000000000000000000000000000000000000000000000000000000014806106ef57506106ef82612283565b92915050565b61071e7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775612319565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f7724bcb43a09ae6582affdee2f0ace931e26f2ffa8b5c334baf0a39e9dc03426905f90a250565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260409020600101546107c581612319565b6107cf8383612326565b50505050565b73ffffffffffffffffffffffffffffffffffffffff81163314610824576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61082e828261237b565b505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff165f8115801561087d5750825b90505f8267ffffffffffffffff1660011480156108995750303b155b9050811580156108a7575080155b156108de576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000166001178555831561093f5784547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff16680100000000000000001785555b6109476123c7565b61094f6123c7565b6109797fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177588612326565b6109e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4772616e7420726f6c65206661696c656400000000000000000000000000000060448201526064015b60405180910390fd5b6109ee5f88612326565b610a54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4772616e7420726f6c652072657665727473000000000000000000000000000060448201526064016109db565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff88161790558315610af55784547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b6060610b0a60056123d1565b905090565b610b176123dd565b610b20826124e1565b610b2a828261250a565b5050565b5f610b37612625565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6060610b0a60036123d1565b6060610b0a60076123d1565b60016020525f9081526040902080548190610b8e906135f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610bba906135f0565b8015610c055780601f10610bdc57610100808354040283529160200191610c05565b820191905f5260205f20905b815481529060010190602001808311610be857829003601f168201915b505050505090806001018054610c1a906135f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610c46906135f0565b8015610c915780601f10610c6857610100808354040283529160200191610c91565b820191905f5260205f20905b815481529060010190602001808311610c7457829003601f168201915b505050505090806002018054610ca6906135f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd2906135f0565b8015610d1d5780601f10610cf457610100808354040283529160200191610d1d565b820191905f5260205f20905b815481529060010190602001808311610d0057829003601f168201915b505050505090806003018054610d32906135f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5e906135f0565b8015610da95780601f10610d8057610100808354040283529160200191610da9565b820191905f5260205f20905b815481529060010190602001808311610d8c57829003601f168201915b5050506004840154600585018054949573ffffffffffffffffffffffffffffffffffffffff909216949193509150610de0906135f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610e0c906135f0565b8015610e575780601f10610e2e57610100808354040283529160200191610e57565b820191905f5260205f20905b815481529060010190602001808311610e3a57829003601f168201915b5050506006909301549192505060ff1687565b5f8281527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e82371705932000602081905260408220610ea29084612694565b949350505050565b5f60015f5f828254610ebc919061366e565b90915550506002546040517f2fc9fa3300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632fc9fa3390610f19908a908a906004016136aa565b602060405180830381865afa158015610f34573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f5891906136bd565b610fbe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5369676e617475726520736368656d65206e6f7420737570706f72746564000060448201526064016109db565b611005600161100087878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525092949392505061269f9050565b611091576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4d657373616765206661696c6564206c656e67746820626f756e64732063686560448201527f636b00000000000000000000000000000000000000000000000000000000000060648201526084016109db565b6110d75f61100085858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525092949392505061269f9050565b611162576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f436f6e646974696f6e206661696c6564206c656e67746820626f756e6473206360448201527f6865636b0000000000000000000000000000000000000000000000000000000060648201526084016109db565b818015611234576111a784848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061274b92505050565b15611234576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f436f6e646974696f6e2062797465732063616e6e6f7420626520616c6c207a6560448201527f726f73000000000000000000000000000000000000000000000000000000000060648201526084016109db565b6002546040517f5bb09cf80000000000000000000000000000000000000000000000000000000081525f9173ffffffffffffffffffffffffffffffffffffffff1690635bb09cf89061128c908c908c906004016136aa565b602060405180830381865afa1580156112a7573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112cb91906136dc565b6040517feae1e15b00000000000000000000000000000000000000000000000000000000815290915081905f9073ffffffffffffffffffffffffffffffffffffffff83169063eae1e15b90611326908c908c906004016136aa565b5f60405180830381865afa158015611340573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261136791908101906136f7565b604080516101006020601f8d01819004028201810190925260e081018b81529293509182918c908c90819085018382808284375f92019190915250505090825250602080820184905260408051601f8b0183900483028101830182528a8152920191908a908a90819084018382808284375f92019190915250505090825250604080516020601f8f018190048102820181019092528d815291810191908e908e90819084018382808284375f920182905250938552505033602080850191909152604080518083018252848152818601526060909401839052825483526001905250208151819061145890826137b7565b506020820151600182019061146d90826137b7565b506040820151600282019061148290826137b7565b506060820151600382019061149790826137b7565b5060808201516004820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905560a082015160058201906114f790826137b7565b5060c09190910151600690910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790555f5461153f906005906127ae565b503373ffffffffffffffffffffffffffffffffffffffff165f547ff0a5ef4bc87d6534674b1469f4b31d03c6510d0f7ab353f3e53f9d1d87ead02b8d8d8d8d878e8e426040516115969897969594939291906138b0565b60405180910390a350505f549998505050505050505050565b5f8181527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e8237170593200060208190526040909120606091906115eb906123d1565b9392505050565b604080515f8152602081019091526060908267ffffffffffffffff81111561161c5761161c6130af565b60405190808252806020026020018201604052801561164f57816020015b606081526020019060019003908161163a5790505b5091505f5b838110156116d0576116ab3086868481811061167257611672613928565b90506020028101906116849190613955565b85604051602001611697939291906139cd565b6040516020818303038152906040526127b9565b8382815181106116bd576116bd613928565b6020908102919091010152600101611654565b505092915050565b5f6106ef60078361282f565b61173a6040518060e00160405280606081526020016060815260200160608152602001606081526020015f73ffffffffffffffffffffffffffffffffffffffff168152602001606081526020015f151581525090565b5f8281526001602052604090819020815160e08101909252805482908290611761906135f0565b80601f016020809104026020016040519081016040528092919081815260200182805461178d906135f0565b80156117d85780601f106117af576101008083540402835291602001916117d8565b820191905f5260205f20905b8154815290600101906020018083116117bb57829003601f168201915b505050505081526020016001820180546117f1906135f0565b80601f016020809104026020016040519081016040528092919081815260200182805461181d906135f0565b80156118685780601f1061183f57610100808354040283529160200191611868565b820191905f5260205f20905b81548152906001019060200180831161184b57829003601f168201915b50505050508152602001600282018054611881906135f0565b80601f01602080910402602001604051908101604052809291908181526020018280546118ad906135f0565b80156118f85780601f106118cf576101008083540402835291602001916118f8565b820191905f5260205f20905b8154815290600101906020018083116118db57829003601f168201915b50505050508152602001600382018054611911906135f0565b80601f016020809104026020016040519081016040528092919081815260200182805461193d906135f0565b80156119885780601f1061195f57610100808354040283529160200191611988565b820191905f5260205f20905b81548152906001019060200180831161196b57829003601f168201915b5050509183525050600482015473ffffffffffffffffffffffffffffffffffffffff1660208201526005820180546040909201916119c5906135f0565b80601f01602080910402602001604051908101604052809291908181526020018280546119f1906135f0565b8015611a3c5780601f10611a1357610100808354040283529160200191611a3c565b820191905f5260205f20905b815481529060010190602001808311611a1f57829003601f168201915b50505091835250506006919091015460ff16151560209091015292915050565b5f8181527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e823717059320006020819052604082206115eb90612846565b5f611a9f60058361282f565b806106ef57506106ef60078361282f565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526040902060010154611ae981612319565b6107cf838361237b565b611afc83611a93565b611b88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f4e6f20726571756573742077697468207370656369666965642072657175657360448201527f744944000000000000000000000000000000000000000000000000000000000060648201526084016109db565b5f83815260016020526040808220815160e08101909252805482908290611bae906135f0565b80601f0160208091040260200160405190810160405280929190818152602001828054611bda906135f0565b8015611c255780601f10611bfc57610100808354040283529160200191611c25565b820191905f5260205f20905b815481529060010190602001808311611c0857829003601f168201915b50505050508152602001600182018054611c3e906135f0565b80601f0160208091040260200160405190810160405280929190818152602001828054611c6a906135f0565b8015611cb55780601f10611c8c57610100808354040283529160200191611cb5565b820191905f5260205f20905b815481529060010190602001808311611c9857829003601f168201915b50505050508152602001600282018054611cce906135f0565b80601f0160208091040260200160405190810160405280929190818152602001828054611cfa906135f0565b8015611d455780601f10611d1c57610100808354040283529160200191611d45565b820191905f5260205f20905b815481529060010190602001808311611d2857829003601f168201915b50505050508152602001600382018054611d5e906135f0565b80601f0160208091040260200160405190810160405280929190818152602001828054611d8a906135f0565b8015611dd55780601f10611dac57610100808354040283529160200191611dd5565b820191905f5260205f20905b815481529060010190602001808311611db857829003601f168201915b5050509183525050600482015473ffffffffffffffffffffffffffffffffffffffff166020820152600582018054604090920191611e12906135f0565b80601f0160208091040260200160405190810160405280929190818152602001828054611e3e906135f0565b8015611e895780601f10611e6057610100808354040283529160200191611e89565b820191905f5260205f20905b815481529060010190602001808311611e6c57829003601f168201915b50505091835250506006919091015460ff16151560209091015260608101516002546040517f5bb09cf800000000000000000000000000000000000000000000000000000000815292935090915f9173ffffffffffffffffffffffffffffffffffffffff1690635bb09cf890611f039085906004016131ef565b602060405180830381865afa158015611f1e573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f4291906136dc565b90505f8190508073ffffffffffffffffffffffffffffffffffffffff1663f6e548e9856020015188888573ffffffffffffffffffffffffffffffffffffffff1663acae9fee6040518163ffffffff1660e01b81526004015f60405180830381865afa158015611fb3573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611fda91908101906136f7565b6040518563ffffffff1660e01b8152600401611ff994939291906139ec565b602060405180830381865afa158015612014573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061203891906136bd565b61209e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5369676e617475726520766572696669636174696f6e206661696c656400000060448201526064016109db565b5f846080015173ffffffffffffffffffffffffffffffffffffffff1663c8db658260e01b8989896040516024016120d793929190613a30565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516121429190613a49565b5f604051808303815f865af19150503d805f811461217b576040519150601f19603f3d011682016040523d82523d5f602084013e612180565b606091505b50505f89815260016020819052604090912060060180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016909117905590506121cb60058961284f565b508061220c576121dc6007896127ae565b5060405188907fb447474448cd6fcec713160a7af96335b628994d6abcc074f215b856ccde3167905f90a261226e565b612215886116d8565b156122275761222560078961284f565b505b6122326003896127ae565b50877f9a03aa0053cbc9522f2f584b8e74ba5478cadd5f83b136eaf2d4338795b3695588886040516122659291906136aa565b60405180910390a25b5050505050505050565b5f610b0a6005612846565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806106ef57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146106ef565b612323813361285a565b50565b5f7fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e82371705932000816123538585612900565b90508015610ea2575f8581526020839052604090206123729085612a1e565b50949350505050565b5f7fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e82371705932000816123a88585612a3f565b90508015610ea2575f8581526020839052604090206123729085612b1b565b6123cf612b3c565b565b60605f6115eb83612ba3565b3073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614806124aa57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166124917f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614155b156123cf576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6123237fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775612319565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612571575060408051601f3d908101601f1916820190925261256e91810190613a54565b60015b6125bf576040517f4c9c8ce300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024016109db565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc811461261b576040517faa1d49a4000000000000000000000000000000000000000000000000000000008152600481018290526024016109db565b61082e8383612bfc565b3073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146123cf576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6115eb8383612c5e565b5f81831115612730576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f496e76616c696420626f756e64733a206d696e4c656e6774682063616e6e6f7460448201527f2062652067726561746572207468616e206d61784c656e67746800000000000060648201526084016109db565b83518381108015906127425750828111155b95945050505050565b5f805b82518110156127a55782818151811061276957612769613928565b01602001517fff00000000000000000000000000000000000000000000000000000000000000161561279d57505f92915050565b60010161274e565b50600192915050565b5f6115eb8383612c84565b60605f5f8473ffffffffffffffffffffffffffffffffffffffff16846040516127e29190613a49565b5f60405180830381855af49150503d805f811461281a576040519150601f19603f3d011682016040523d82523d5f602084013e61281f565b606091505b5091509150612742858383612cd0565b5f81815260018301602052604081205415156115eb565b5f6106ef825490565b5f6115eb8383612d5f565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610b2a576040517fe2517d3f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602481018390526044016109db565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020818152604080842073ffffffffffffffffffffffffffffffffffffffff8616855290915282205460ff16612a15575f8481526020828152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556129b13390565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019150506106ef565b5f9150506106ef565b5f6115eb8373ffffffffffffffffffffffffffffffffffffffff8416612c84565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020818152604080842073ffffffffffffffffffffffffffffffffffffffff8616855290915282205460ff1615612a15575f8481526020828152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a460019150506106ef565b5f6115eb8373ffffffffffffffffffffffffffffffffffffffff8416612d5f565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff166123cf576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6060815f01805480602002602001604051908101604052809291908181526020018280548015612bf057602002820191905f5260205f20905b815481526020019060010190808311612bdc575b50505050509050919050565b612c0582612e39565b60405173ffffffffffffffffffffffffffffffffffffffff8316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a2805115612c565761082e82826127b9565b610b2a612f07565b5f825f018281548110612c7357612c73613928565b905f5260205f200154905092915050565b5f818152600183016020526040812054612cc957508154600181810184555f8481526020808220909301849055845484825282860190935260409020919091556106ef565b505f6106ef565b606082612ce557612ce082612f3f565b6115eb565b8151158015612d09575073ffffffffffffffffffffffffffffffffffffffff84163b155b15612d58576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851660048201526024016109db565b50806115eb565b5f8181526001830160205260408120548015612a15575f612d81600183613915565b85549091505f90612d9490600190613915565b9050808214612df3575f865f018281548110612db257612db2613928565b905f5260205f200154905080875f018481548110612dd257612dd2613928565b5f918252602080832090910192909255918252600188019052604090208390555b8554869080612e0457612e04613a6b565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f9055600193505050506106ef565b8073ffffffffffffffffffffffffffffffffffffffff163b5f03612ea1576040517f4c9c8ce300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016109db565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b34156123cf576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805115612f4f5780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60208284031215612f91575f5ffd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146115eb575f5ffd5b73ffffffffffffffffffffffffffffffffffffffff81168114612323575f5ffd5b5f60208284031215612ff1575f5ffd5b81356115eb81612fc0565b5f6020828403121561300c575f5ffd5b5035919050565b5f5f60408385031215613024575f5ffd5b82359150602083013561303681612fc0565b809150509250929050565b5f5f60408385031215613052575f5ffd5b823561305d81612fc0565b9150602083013561303681612fc0565b602080825282518282018190525f918401906040840190835b818110156130a4578351835260209384019390920191600101613086565b509095945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613105576131056130af565b604052919050565b5f67ffffffffffffffff821115613126576131266130af565b50601f01601f191660200190565b5f5f60408385031215613145575f5ffd5b823561315081612fc0565b9150602083013567ffffffffffffffff81111561316b575f5ffd5b8301601f8101851361317b575f5ffd5b803561318e6131898261310d565b6130dc565b8181528660208385010111156131a2575f5ffd5b816020840160208301375f602083830101528093505050509250929050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f6115eb60208301846131c1565b60e081525f61321360e083018a6131c1565b8281036020840152613225818a6131c1565b9050828103604084015261323981896131c1565b9050828103606084015261324d81886131c1565b905073ffffffffffffffffffffffffffffffffffffffff8616608084015282810360a084015261327d81866131c1565b91505082151560c083015298975050505050505050565b5f5f604083850312156132a5575f5ffd5b50508035926020909101359150565b5f5f83601f8401126132c4575f5ffd5b50813567ffffffffffffffff8111156132db575f5ffd5b6020830191508360208285010111156132f2575f5ffd5b9250929050565b5f5f5f5f5f5f6060878903121561330e575f5ffd5b863567ffffffffffffffff811115613324575f5ffd5b61333089828a016132b4565b909750955050602087013567ffffffffffffffff81111561334f575f5ffd5b61335b89828a016132b4565b909550935050604087013567ffffffffffffffff81111561337a575f5ffd5b61338689828a016132b4565b979a9699509497509295939492505050565b602080825282518282018190525f918401906040840190835b818110156130a457835173ffffffffffffffffffffffffffffffffffffffff168352602093840193909201916001016133b1565b5f5f602083850312156133f6575f5ffd5b823567ffffffffffffffff81111561340c575f5ffd5b8301601f8101851361341c575f5ffd5b803567ffffffffffffffff811115613432575f5ffd5b8560208260051b8401011115613446575f5ffd5b6020919091019590945092505050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b828110156134cb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08786030184526134b68583516131c1565b9450602093840193919091019060010161347c565b50929695505050505050565b602081525f825160e060208401526134f36101008401826131c1565b90506020840151601f1984830301604085015261351082826131c1565b9150506040840151601f1984830301606085015261352e82826131c1565b9150506060840151601f1984830301608085015261354c82826131c1565b91505073ffffffffffffffffffffffffffffffffffffffff60808501511660a084015260a0840151601f198483030160c085015261358a82826131c1565b91505060c08401516135a060e085018215159052565b509392505050565b5f5f5f604084860312156135ba575f5ffd5b83359250602084013567ffffffffffffffff8111156135d7575f5ffd5b6135e3868287016132b4565b9497909650939450505050565b600181811c9082168061360457607f821691505b60208210810361363b577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b808201808211156106ef576106ef613641565b81835281816020850137505f602082840101525f6020601f19601f840116840101905092915050565b602081525f610ea2602083018486613681565b5f602082840312156136cd575f5ffd5b815180151581146115eb575f5ffd5b5f602082840312156136ec575f5ffd5b81516115eb81612fc0565b5f60208284031215613707575f5ffd5b815167ffffffffffffffff81111561371d575f5ffd5b8201601f8101841361372d575f5ffd5b805161373b6131898261310d565b81815285602083850101111561374f575f5ffd5b8160208401602083015e5f91810160200191909152949350505050565b601f82111561082e57805f5260205f20601f840160051c810160208510156137915750805b601f840160051c820191505b818110156137b0575f815560010161379d565b5050505050565b815167ffffffffffffffff8111156137d1576137d16130af565b6137e5816137df84546135f0565b8461376c565b6020601f821160018114613836575f83156138005750848201515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600385901b1c1916600184901b1784556137b0565b5f84815260208120601f198516915b828110156138655787850151825560209485019460019092019101613845565b50848210156138a157868401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b60f8161c191681555b50505050600190811b01905550565b60a081525f6138c360a083018a8c613681565b82810360208401526138d681898b613681565b905082810360408401526138ea81886131c1565b905082810360608401526138ff818688613681565b9150508260808301529998505050505050505050565b818103818111156106ef576106ef613641565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f5f83357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613988575f5ffd5b83018035915067ffffffffffffffff8211156139a2575f5ffd5b6020019150368190038213156132f2575f5ffd5b5f81518060208401855e5f93019283525090919050565b828482375f8382015f81526139e281856139b6565b9695505050505050565b606081525f6139fe60608301876131c1565b8281036020840152613a11818688613681565b90508281036040840152613a2581856131c1565b979650505050505050565b838152604060208201525f612742604083018486613681565b5f6115eb82846139b6565b5f60208284031215613a64575f5ffd5b5051919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffdfea2646970667358221220b7e5c8f9420b08d55db7dda8c9d5fee88d48d70e540731a5bcc902d4bbc3955b64736f6c634300081c003360a0604052306080525f600c55348015610017575f5ffd5b5060015f55610024610029565b6100db565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156100795760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146100d85780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b6080516159676101015f395f8181613a0a01528181613a330152613c7001526159675ff3fe608060405260043610610345575f3560e01c806391d14854116101b2578063b2a7cac5116100f2578063cb63179711610092578063dac83d291161006d578063dac83d2914610c09578063dc311dd314610c28578063f8fa0d6614610c57578063fb1a002a14610c76575f5ffd5b8063cb63179714610bac578063cd802c9114610bcb578063d547741f14610bea575f5ffd5b8063c3f909d4116100cd578063c3f909d414610aaa578063c58343ef14610b42578063c8db658214610b6e578063ca15c87314610b8d575f5ffd5b8063b2a7cac514610a4d578063bd18636b14610a6c578063bec4c08c14610a8b575f5ffd5b8063a3246ad31161015d578063aa433aff11610138578063aa433aff146109a5578063ad3cb1cc146109c4578063aefb212f14610a0c578063affed0e014610a38575f5ffd5b8063a3246ad314610947578063a3907d7114610973578063a608a1e114610987575f5ffd5b80639d40a6fd1161018d5780639d40a6fd146108e7578063a217fddf14610920578063a21a23e414610933575f5ffd5b806391d148541461084057806395b55cfc146108b0578063995cb36e146108c3575f5ffd5b8063485cc9551161028857806364d51a2a116102285780637d468106116102035780637d46810614610775578063811ee32a146107c65780638a1f165a146107d95780639010d07c14610821575f5ffd5b806364d51a2a146106fc57806375b238fc14610723578063775b839c14610756575f5ffd5b806352d1902d1161026357806352d1902d1461066257806354236fb31461067657806354fd4d501461069557806357a8070a146106e3575f5ffd5b8063485cc955146106115780634b160935146106305780634f1ef2861461064f575f5ffd5b80632f2770db116102f357806336568abe116102ce57806336568abe146105805780633bc32c751461059f57806341af6c87146105d357806345fa4354146105f2575f5ffd5b80632f2770db1461052e5780632f2ff15d146105425780633255c45614610561575f5ffd5b806318e3dd271161032357806318e3dd271461047f5780631da53c9f146104c0578063248a9ca3146104e1575f5ffd5b806301ffc9a714610349578063088070f51461037d5780630ae095401461045e575b5f5ffd5b348015610354575f5ffd5b50610368610363366004614cc2565b610c97565b60405190151581526020015b60405180910390f35b348015610388575f5ffd5b50600a546104179063ffffffff8082169164010000000081048216916801000000000000000082048116916c010000000000000000000000008104821691700100000000000000000000000000000000820481169160ff740100000000000000000000000000000000000000008204169175010000000000000000000000000000000000000000009091041687565b6040805163ffffffff988916815296881660208801529487169486019490945291851660608501528416608084015260ff1660a083015290911660c082015260e001610374565b348015610469575f5ffd5b5061047d610478366004614d22565b610cf2565b005b34801561048a575f5ffd5b506008546104a3906bffffffffffffffffffffffff1681565b6040516bffffffffffffffffffffffff9091168152602001610374565b6104d36104ce366004614d68565b610d5c565b604051908152602001610374565b3480156104ec575f5ffd5b506104d36104fb366004614d90565b5f9081527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052604090206001015490565b348015610539575f5ffd5b5061047d6112c0565b34801561054d575f5ffd5b5061047d61055c366004614d22565b61133f565b34801561056c575f5ffd5b506104d361057b366004614d68565b611388565b34801561058b575f5ffd5b5061047d61059a366004614d22565b6113a0565b3480156105aa575f5ffd5b506008546104a3906c0100000000000000000000000090046bffffffffffffffffffffffff1681565b3480156105de575f5ffd5b506103686105ed366004614d90565b6113f9565b3480156105fd575f5ffd5b5061047d61060c366004614da7565b6114a2565b34801561061c575f5ffd5b5061047d61062b366004614e2f565b61175d565b34801561063b575f5ffd5b506104d361064a366004614e5b565b611ac2565b61047d61065d366004614ef0565b611ad3565b34801561066d575f5ffd5b506104d3611af2565b348015610681575f5ffd5b5061047d610690366004614fb5565b611b21565b3480156106a0575f5ffd5b5060408051808201909152600581527f302e302e3100000000000000000000000000000000000000000000000000000060208201525b604051610374919061501c565b3480156106ee575f5ffd5b50600b546103689060ff1681565b348015610707575f5ffd5b50610710606481565b60405161ffff9091168152602001610374565b34801561072e575f5ffd5b506104d37fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b348015610761575f5ffd5b506106d661077036600461502e565b611bcb565b348015610780575f5ffd5b506001546107a19073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610374565b6104d36107d4366004614e5b565b611c34565b3480156107e4575f5ffd5b506106d66040518060400160405280600581526020017f424e32353400000000000000000000000000000000000000000000000000000081525081565b34801561082c575f5ffd5b506107a161083b366004615084565b611d1e565b34801561084b575f5ffd5b5061036861085a366004614d22565b5f9182527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b61047d6108be366004614d90565b611d5e565b3480156108ce575f5ffd5b506009546104a3906bffffffffffffffffffffffff1681565b3480156108f2575f5ffd5b506005546109079067ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610374565b34801561092b575f5ffd5b506104d35f81565b34801561093e575f5ffd5b506104d3611e94565b348015610952575f5ffd5b50610966610961366004614d90565b6120d8565b60405161037491906150f4565b34801561097e575f5ffd5b5061047d612114565b348015610992575f5ffd5b50600b5461036890610100900460ff1681565b3480156109b0575f5ffd5b5061047d6109bf366004614d90565b61218f565b3480156109cf575f5ffd5b506106d66040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b348015610a17575f5ffd5b50610a2b610a26366004615084565b6121ef565b6040516103749190615106565b348015610a43575f5ffd5b506104d3600c5481565b348015610a58575f5ffd5b5061047d610a67366004614d90565b6122fe565b348015610a77575f5ffd5b5061047d610a86366004614fb5565b61244e565b348015610a96575f5ffd5b5061047d610aa5366004614d22565b61252b565b348015610ab5575f5ffd5b50600a5463ffffffff8082169164010000000081048216916801000000000000000082048116916c010000000000000000000000008104821691700100000000000000000000000000000000820481169160ff7401000000000000000000000000000000000000000082041691750100000000000000000000000000000000000000000090910416610417565b348015610b4d575f5ffd5b50610b61610b5c366004614d90565b6126a6565b6040516103749190615205565b348015610b79575f5ffd5b5061047d610b88366004615217565b61293a565b348015610b98575f5ffd5b506104d3610ba7366004614d90565b6129c6565b348015610bb7575f5ffd5b5061047d610bc6366004614d22565b6129fd565b348015610bd6575f5ffd5b50610368610be5366004614d90565b612cd8565b348015610bf5575f5ffd5b5061047d610c04366004614d22565b612d69565b348015610c14575f5ffd5b5061047d610c23366004614d22565b612dac565b348015610c33575f5ffd5b50610c47610c42366004614d90565b612e7b565b604051610374949392919061528e565b348015610c62575f5ffd5b5061047d610c71366004614fb5565b612f63565b348015610c81575f5ffd5b50610c8a612ffa565b60405161037491906152ea565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f000000000000000000000000000000000000000000000000000000001480610cec5750610cec8261326a565b92915050565b81610cfc81613300565b610d04613394565b610d0d836113f9565b15610d44576040517fb42f66e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d4e83836133d5565b610d5760015f55565b505050565b600b545f9060ff16610dcf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f436f6e7472616374206973206e6f7420636f6e6669677572656400000000000060448201526064015b60405180910390fd5b600b54610100900460ff1615610e41576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f436f6e74726163742069732064697361626c65640000000000000000000000006044820152606401610dc6565b81151580610e4e57505f34115b610eda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f4469726563742066756e64696e6720726571756972656420666f72207265717560448201527f6573742066756c66696c6c6d656e742063616c6c6261636b00000000000000006064820152608401610dc6565b610ee4838361345c565b6001600c5f828254610ef69190615398565b909155505060408051610120810182528381523460208083019190915263ffffffff8616828401525f606083018190528351808301855281815260808401528351808301855281815260a08401528351808301855281815260c0840152600c5460e084018190523361010085018190528551808701909652908552918401919091529091610f8390611bcb565b60408051602080820183525f82528251808401909352600583527f424e32353400000000000000000000000000000000000000000000000000000090830152919250610fd0908383613758565b606084018181526080850184815260a086018490525f838152600d602090815260409182902088518155908801516001820155908701516002820180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff9092169190911790559151600383015551919550849160048201906110599082615447565b5060a0820151600582019061106e9082615447565b5060c082015160068201906110839082615447565b5060e0820151600782015561010090910151600890910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055600e80546001810182555f9190915283517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd600990920291820190815560208501517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fe83015560408501517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3ff830180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff90921691909117905560608501517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c400830155608085015185927fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c40101906111f99082615447565b5060a0820151600582019061120e9082615447565b5060c082015160068201906112239082615447565b5060e0820151600782015561010090910151600890910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055600c5460405142815233919086907feee7195b6cee0fa7044c3af0b86fe2febb1d2703d71191f44052ba0d60ffda649060200160405180910390a450505092915050565b6112e97fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756137f2565b600b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790556040517f75884cdadc4a89e8b545db800057f06ec7f5338a08183c7ba515f2bfdd9fe1e1905f90a1565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526040902060010154611378816137f2565b61138283836137fc565b50505050565b5f6113998363ffffffff1683613851565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff811633146113ef576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d57828261399c565b5f8181526003602052604081206002018054825b81811015611498575f60025f85848154811061142b5761142b61555e565b5f91825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352828101939093526040918201812089825290925290205467ffffffffffffffff690100000000000000000090910416111561149057506001949350505050565b60010161140d565b505f949350505050565b6114cb7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756137f2565b60ff8216609b11611538576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f496e76616c6964205072656d69756d2050657263656e746167650000000000006044820152606401610dc6565b6040805160e0808201835263ffffffff8a81168084528a821660208086018290528b84168688018190528b851660608089018290528c87166080808b0182905260ff8e1660a0808d01829052998e1660c09c8d01819052600a80547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000168b176401000000008b02177fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff166801000000000000000089027fffffffffffffffffffffffffffffffff00000000ffffffffffffffffffffffff16176c010000000000000000000000008802177fffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffffff1670010000000000000000000000000000000086027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1617740100000000000000000000000000000000000000008402177fffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffffff1675010000000000000000000000000000000000000000008302179055600b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558d51998a52968901979097529a8701939093528501529683019690965291810191909152918201929092527f55a28fde295f482c9f32d670c116103bca15724bcef4f18b35542e0553c35ad591015b60405180910390a150505050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff165f811580156117a75750825b90505f8267ffffffffffffffff1660011480156117c35750303b155b9050811580156117d1575080155b15611808576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000016600117855583156118695784547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff16680100000000000000001785555b6118716139e8565b6118796139e8565b6118a37fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775876137fc565b611909576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4772616e7420726f6c65206661696c65640000000000000000000000000000006044820152606401610dc6565b6119135f876137fc565b611979576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4772616e7420726f6c65206661696c65640000000000000000000000000000006044820152606401610dc6565b73ffffffffffffffffffffffffffffffffffffffff8716611a1c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f43616e6e6f7420736574207a65726f2061646472657373206173207369676e6160448201527f747572652073656e6465720000000000000000000000000000000000000000006064820152608401610dc6565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff89161790558315611ab95784547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200161174c565b50505050505050565b5f610cec8263ffffffff163a613851565b611adb6139f2565b611ae482613af6565b611aee8282613b1f565b5050565b5f611afb613c58565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5b90565b611b29613394565b611b527fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756137f2565b6008546c0100000000000000000000000090046bffffffffffffffffffffffff16611b7e811515613cc7565b600880547fffffffffffffffff000000000000000000000000ffffffffffffffffffffffff169055611bbe826bffffffffffffffffffffffff8316613cfe565b50611bc860015f55565b50565b8051604051606091611be39160200190815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152828252805160209182012090830152016040516020818303038152906040529050919050565b600b545f9060ff16611ca2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f436f6e7472616374206973206e6f7420636f6e666967757265640000000000006044820152606401610dc6565b600b54610100900460ff1615611d14576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f436f6e74726163742069732064697361626c65640000000000000000000000006044820152606401610dc6565b610cec825f610d5c565b5f8281527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e82371705932000602081905260408220611d569084613d94565b949350505050565b611d66613394565b5f81815260036020526040902054611d939073ffffffffffffffffffffffffffffffffffffffff16613d9f565b5f81815260046020526040812080546bffffffffffffffffffffffff1691349190611dbe838561558b565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055503460085f8282829054906101000a90046bffffffffffffffffffffffff16611e14919061558b565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550817f7603b205d03651ee812f803fccde89f1012e545a9c99f0abfea9cedd0fd8e902823484611e719190615398565b604080519283526020830191909152015b60405180910390a250611bc860015f55565b5f611e9d613394565b60055467ffffffffffffffff1633611eb66001436155af565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606093841b81166020830152914060348201523090921b1660548201527fffffffffffffffff00000000000000000000000000000000000000000000000060c083901b166068820152607001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209150611f698160016155c2565b600580547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff928316179055604080515f808252606080830184526020808401838152848601848152898552600483528685209151825491516bffffffffffffffffffffffff9091167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316176c01000000000000000000000000919099160297909717905584519182018552338252818101838152828601858152898552600383529590932082518154881673ffffffffffffffffffffffffffffffffffffffff918216178255935160018201805490981694169390931790955592518051929491926120879260028501920190614c0f565b5061209791506006905084613dec565b5060405133815283907f1d3015d7ba850fa198dc7b1a3f5d42779313a681035f77c8c03764c61005518d9060200160405180910390a25050611b1e60015f55565b5f8181527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e82371705932000602081905260409091206060919061139990613df7565b61213d7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756137f2565b600b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690556040517fc0f961051f97b04c496472d11cb6170d844e4b2c9dfd3b602a4fa0139712d484905f90a1565b6121b87fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756137f2565b5f8181526003602052604090205473ffffffffffffffffffffffffffffffffffffffff166121e581613d9f565b611aee82826133d5565b60605f6121fc6006613e03565b9050808410612237576040517f1390f2a100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6122428486615398565b905081811180612250575083155b61225a578061225c565b815b90505f61226986836155af565b90508067ffffffffffffffff81111561228457612284614e74565b6040519080825280602002602001820160405280156122ad578160200160208202803683370190505b5093505f5b818110156122f4576122cf6122c78883615398565b600690613d94565b8582815181106122e1576122e161555e565b60209081029190910101526001016122b2565b5050505092915050565b612306613394565b5f8181526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1661233381613d9f565b5f8281526003602052604090206001015473ffffffffffffffffffffffffffffffffffffffff1633146123bd575f82815260036020526040908190206001015490517fd084e97500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401610dc6565b5f828152600360209081526040918290208054337fffffffffffffffffffffffff000000000000000000000000000000000000000091821681178355600190920180549091169055825173ffffffffffffffffffffffffffffffffffffffff851681529182015283917fd4114ab6e9af9f597c52041f32d62dc57c5c4e4c0d4427006069635e216c93869101611e82565b612456613394565b61247f7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756137f2565b6009546bffffffffffffffffffffffff1661249b811515613cc7565b600980547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169055600880548291905f906124e59084906bffffffffffffffffffffffff166155e2565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550611bbe82826bffffffffffffffffffffffff16613cfe565b8161253581613300565b61253d613394565b73ffffffffffffffffffffffffffffffffffffffff82165f9081526002602090815260408083208684529091529020805460ff161561257c5750610d4e565b5f84815260036020526040902060020180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c016125e6576040517f05a48e0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b815460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090911681178355815490810182555f82815260209081902090910180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff871690811790915560405190815286917f1e980d04aa7648e205713e5e8ea3808672ac163d10936d36f91b2c88ac1575e191015b60405180910390a25050610d5760015f55565b61270b6040518061012001604052805f81526020015f81526020015f63ffffffff1681526020015f81526020016060815260200160608152602001606081526020015f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681525090565b5f828152600d602090815260409182902082516101208101845281548152600182015492810192909252600281015463ffffffff169282019290925260038201546060820152600482018054919291608084019190612769906153ab565b80601f0160208091040260200160405190810160405280929190818152602001828054612795906153ab565b80156127e05780601f106127b7576101008083540402835291602001916127e0565b820191905f5260205f20905b8154815290600101906020018083116127c357829003601f168201915b505050505081526020016005820180546127f9906153ab565b80601f0160208091040260200160405190810160405280929190818152602001828054612825906153ab565b80156128705780601f1061284757610100808354040283529160200191612870565b820191905f5260205f20905b81548152906001019060200180831161285357829003601f168201915b50505050508152602001600682018054612889906153ab565b80601f01602080910402602001604051908101604052809291908181526020018280546128b5906153ab565b80156129005780601f106128d757610100808354040283529160200191612900565b820191905f5260205f20905b8154815290600101906020018083116128e357829003601f168201915b50505091835250506007820154602082015260089091015473ffffffffffffffffffffffffffffffffffffffff1660409091015292915050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146129bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f6e6c79207369676e617475726553656e6465722063616e2063616c6c0000006044820152606401610dc6565b610d57838383613e0c565b5f8181527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e8237170593200060208190526040822061139990613e03565b81612a0781613300565b612a0f613394565b612a18836113f9565b15612a4f576040517fb42f66e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82165f90815260026020908152604080832086845290915290205460ff16612ad7576040517f79bfd4010000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff83166024820152604401610dc6565b5f838152600360205260408120600201805490915b81811015612c52578473ffffffffffffffffffffffffffffffffffffffff16838281548110612b1d57612b1d61555e565b5f9182526020909120015473ffffffffffffffffffffffffffffffffffffffff1603612c4a5782612b4f6001846155af565b81548110612b5f57612b5f61555e565b905f5260205f20015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16838281548110612b9957612b9961555e565b905f5260205f20015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082805480612bee57612bee615606565b5f8281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055612c52565b600101612aec565b5073ffffffffffffffffffffffffffffffffffffffff84165f81815260026020908152604080832089845282529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055905191825286917f32158c6058347c1601b2d12bc696ac6901d8a9a9aa3ba10c27ab0a983e8425a79101612693565b6001546040517fcd802c91000000000000000000000000000000000000000000000000000000008152600481018390525f9173ffffffffffffffffffffffffffffffffffffffff169063cd802c9190602401602060405180830381865afa158015612d45573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cec9190615633565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526040902060010154612da2816137f2565b611382838361399c565b81612db681613300565b612dbe613394565b5f838152600360205260409020600181015473ffffffffffffffffffffffffffffffffffffffff848116911614612e71576001810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff851690811790915560408051338152602081019290925285917f21a4dad170a6bf476c31bbcf4a16628295b0e450672eec25d7c93308e05344a1910160405180910390a25b50610d5760015f55565b5f81815260036020526040812054819073ffffffffffffffffffffffffffffffffffffffff166060612eac82613d9f565b5f85815260046020908152604080832054600383529281902060020180548251818502810185019093528083526bffffffffffffffffffffffff8516946c01000000000000000000000000900467ffffffffffffffff16938793918391830182828015612f4d57602002820191905f5260205f20905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311612f22575b5050505050905093509350935093509193509193565b612f8c7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756137f2565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f229f6c3b095d683755a99ab458956747a8b7066c3dd42927d850631c34c238f1905f90a250565b6060600e805480602002602001604051908101604052809291908181526020015f905b82821015613261575f84815260209081902060408051610120810182526009860290920180548352600181015493830193909352600283015463ffffffff169082015260038201546060820152600482018054919291608084019190613082906153ab565b80601f01602080910402602001604051908101604052809291908181526020018280546130ae906153ab565b80156130f95780601f106130d0576101008083540402835291602001916130f9565b820191905f5260205f20905b8154815290600101906020018083116130dc57829003601f168201915b50505050508152602001600582018054613112906153ab565b80601f016020809104026020016040519081016040528092919081815260200182805461313e906153ab565b80156131895780601f1061316057610100808354040283529160200191613189565b820191905f5260205f20905b81548152906001019060200180831161316c57829003601f168201915b505050505081526020016006820180546131a2906153ab565b80601f01602080910402602001604051908101604052809291908181526020018280546131ce906153ab565b80156132195780601f106131f057610100808354040283529160200191613219565b820191905f5260205f20905b8154815290600101906020018083116131fc57829003601f168201915b5050509183525050600782015460208083019190915260089092015473ffffffffffffffffffffffffffffffffffffffff16604090910152908252600192909201910161301d565b50505050905090565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b000000000000000000000000000000000000000000000000000000001480610cec57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610cec565b5f8181526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1661332d81613d9f565b3373ffffffffffffffffffffffffffffffffffffffff821614611aee576040517fd8a3fb5200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610dc6565b60025f54036133cf576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025f55565b5f6133df83614004565b90506133f982826bffffffffffffffffffffffff16613cfe565b6040805173ffffffffffffffffffffffffffffffffffffffff841681526bffffffffffffffffffffffff8316602082015284917f3784f77e8e883de95b5d47cd713ced01229fa74d118c0a462224bcb0516d43f1910160405180910390a2505050565b600a5463ffffffff90811690831611156134d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f43616c6c6261636b206761734c696d697420746f6f20686967680000000000006044820152606401610dc6565b80156136db575f8181526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1661350581613d9f565b335f908152600260209081526040808320858452808352928190208151606081018352905460ff8116151580835267ffffffffffffffff6101008304811695840195909552690100000000000000000090910490931691810191909152906135ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4e6f2061637469766520737562736372697074696f6e20666f722063616c6c6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152608401610dc6565b8060200180516135fe90615652565b67ffffffffffffffff16905260408101805161361990615652565b67ffffffffffffffff9081169091525f85815260209384526040908190208351815495850151929094015183166901000000000000000000027fffffffffffffffffffffffffffffff0000000000000000ffffffffffffffffff92909316610100027fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000ff941515949094167fffffffffffffffffffffffffffffffffffffffffffffff000000000000000000909516949094179290921791909116179055505050565b5f6136ec8363ffffffff163a613851565b905080341015610d57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f46656520746f6f206c6f770000000000000000000000000000000000000000006044820152606401610dc6565b6001546040517f95b8d0730000000000000000000000000000000000000000000000000000000081525f9173ffffffffffffffffffffffffffffffffffffffff16906395b8d073906137b29087908790879060040161567e565b6020604051808303815f875af11580156137ce573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d5691906156b6565b611bc881336141ba565b5f7fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e82371705932000816138298585614260565b90508015611d56575f858152602083905260409020613848908561437e565b50949350505050565b6040805160e081018252600a5463ffffffff80821683526401000000008204811660208401526801000000000000000082048116938301939093526c0100000000000000000000000081048316606083015270010000000000000000000000000000000081048316608083015260ff7401000000000000000000000000000000000000000082041660a08301527501000000000000000000000000000000000000000000900490911660c08201525f90818361391757816060015163ffffffff16613919565b835b90505f6139258661439f565b63ffffffff16836080015163ffffffff1687856020015163ffffffff16010101820290505f6139515f90565b90505f8460a0015160640160ff1690505f856040015163ffffffff1664e8d4a510000290505f81606484878701028161398c5761398c6156cd565b04019a9950505050505050505050565b5f7fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e82371705932000816139c985856143b6565b90508015611d56575f8581526020839052604090206138489085614492565b6139f06144b3565b565b3073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480613abf57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16613aa67f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614155b156139f0576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611bc87fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756137f2565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015613ba4575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252613ba1918101906156b6565b60015b613bf2576040517f4c9c8ce300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602401610dc6565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114613c4e576040517faa1d49a400000000000000000000000000000000000000000000000000000000815260048101829052602401610dc6565b610d57838361451a565b3073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146139f0576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80611bc8576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8273ffffffffffffffffffffffffffffffffffffffff16826040515f6040518083038185875af1925050503d805f8114613d54576040519150601f19603f3d011682016040523d82523d5f602084013e613d59565b606091505b5050905080610d57576040517f950b247900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f611399838361457c565b73ffffffffffffffffffffffffffffffffffffffff8116611bc8576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f61139983836145a2565b60605f611399836145ee565b5f610cec825490565b5f5a5f858152600d60205260409020600781015491925090613e8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4e6f207265717565737420666f722072657175657374206964000000000000006044820152606401610dc6565b5f8484604051613e9b9291906156fa565b604080519182900382206024830189905260448084018290528251808503909101815260649093019091526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f431ac6570000000000000000000000000000000000000000000000000000000017905260088401546002850154600a549294505f92613f6b92859273ffffffffffffffffffffffffffffffffffffffff9091169163ffffffff91821691750100000000000000000000000000000000000000000090910481169061464716565b5090508015613fc55760068401613f83878983615709565b50877fb74b3204a538cd8021662d42e794681ddc339924ef675b8fd11e9eaf6aa19eb5848989604051613fb89392919061581f565b60405180910390a2613ff0565b60405188907f8f67472dde2126ccd0315b75dc482a5a73acb228a395553f8ae6edde5a0ca4fa905f90a25b613ffa888661467e565b5050505050505050565b5f8181526003602090815260408083206004909252822054600290910180546bffffffffffffffffffffffff909216929091905b818110156140be5760025f8483815481106140555761405561555e565b5f91825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1683528281019390935260409182018120888252909252902080547fffffffffffffffffffffffffffffff0000000000000000000000000000000000169055600101614038565b505f84815260036020526040812080547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116825560018201805490911690559061410d6002830182614c97565b50505f84815260046020526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016905561414d60068561478d565b506bffffffffffffffffffffffff8316156141b357600880548491905f906141849084906bffffffffffffffffffffffff166155e2565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055505b5050919050565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16611aee576040517fe2517d3f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8216600482015260248101839052604401610dc6565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020818152604080842073ffffffffffffffffffffffffffffffffffffffff8616855290915282205460ff16614375575f8481526020828152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556143113390565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001915050610cec565b5f915050610cec565b5f6113998373ffffffffffffffffffffffffffffffffffffffff84166145a2565b5f6143ab603f83615872565b610cec9060016158be565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020818152604080842073ffffffffffffffffffffffffffffffffffffffff8616855290915282205460ff1615614375575f8481526020828152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a46001915050610cec565b5f6113998373ffffffffffffffffffffffffffffffffffffffff8416614794565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff166139f0576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6145238261486e565b60405173ffffffffffffffffffffffffffffffffffffffff8316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a280511561457457610d57828261493c565b611aee6149bb565b5f825f0182815481106145915761459161555e565b905f5260205f200154905092915050565b5f8181526001830160205260408120546145e757508154600181810184555f848152602080822090930184905584548482528286019093526040902091909155610cec565b505f610cec565b6060815f0180548060200260200160405190810160405280929190818152602001828054801561463b57602002820191905f5260205f20905b815481526020019060010190808311614627575b50505050509050919050565b5f5f5a83811061467457839003604081048103851015614674575f5f885160208a015f8a8af19250600191505b5094509492505050565b5f614688836126a6565b80519091501561477c5780515f9081526004602052604090208054600c906146c9906c01000000000000000000000000900467ffffffffffffffff16615652565b825467ffffffffffffffff91821661010093840a908102908302199091161790925582015173ffffffffffffffffffffffffffffffffffffffff165f9081526002602090815260408083208551845290915290208054909160099161473c916901000000000000000000909104166158da565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505f61476d833a6149f3565b905061138281835f0151614a61565b610d578160200151825f0151614a61565b5f61139983835b5f8181526001830160205260408120548015614375575f6147b66001836155af565b85549091505f906147c9906001906155af565b9050808214614828575f865f0182815481106147e7576147e761555e565b905f5260205f200154905080875f0184815481106148075761480761555e565b5f918252602080832090910192909255918252600188019052604090208390555b855486908061483957614839615606565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f905560019350505050610cec565b8073ffffffffffffffffffffffffffffffffffffffff163b5f036148d6576040517f4c9c8ce300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610dc6565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60605f5f8473ffffffffffffffffffffffffffffffffffffffff1684604051614965919061591b565b5f60405180830381855af49150503d805f811461499d576040519150601f19603f3d011682016040523d82523d5f602084013e6149a2565b606091505b50915091506149b2858383614b3e565b95945050505050565b34156139f0576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5f5a600a54640100000000900463ffffffff1685010390508281025f600a5460649190920160ff740100000000000000000000000000000000000000008404168201020464e8d4a5100063ffffffff68010000000000000000909304929092169190910201949350505050565b8015614ae9575f81815260046020526040902080546bffffffffffffffffffffffff90811690614a95908516821015613cc7565b81546bffffffffffffffffffffffff9185900382167fffffffffffffffffffffffffffffffffffffffff00000000000000000000000091821617909255600980548083168601909216919092161790555050565b600880546bffffffffffffffffffffffff6c0100000000000000000000000080830482168601909116027fffffffffffffffff000000000000000000000000ffffffffffffffffffffffff9091161790555050565b606082614b5357614b4e82614bcd565b611399565b8151158015614b77575073ffffffffffffffffffffffffffffffffffffffff84163b155b15614bc6576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610dc6565b5080611399565b805115614bdd5780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828054828255905f5260205f20908101928215614c87579160200282015b82811115614c8757825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190614c2d565b50614c93929150614cae565b5090565b5080545f8255905f5260205f2090810190611bc891905b5b80821115614c93575f8155600101614caf565b5f60208284031215614cd2575f5ffd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611399575f5ffd5b73ffffffffffffffffffffffffffffffffffffffff81168114611bc8575f5ffd5b5f5f60408385031215614d33575f5ffd5b823591506020830135614d4581614d01565b809150509250929050565b803563ffffffff81168114614d63575f5ffd5b919050565b5f5f60408385031215614d79575f5ffd5b614d8283614d50565b946020939093013593505050565b5f60208284031215614da0575f5ffd5b5035919050565b5f5f5f5f5f5f5f60e0888a031215614dbd575f5ffd5b614dc688614d50565b9650614dd460208901614d50565b9550614de260408901614d50565b9450614df060608901614d50565b9350614dfe60808901614d50565b925060a088013560ff81168114614e13575f5ffd5b9150614e2160c08901614d50565b905092959891949750929550565b5f5f60408385031215614e40575f5ffd5b8235614e4b81614d01565b91506020830135614d4581614d01565b5f60208284031215614e6b575f5ffd5b61139982614d50565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715614ee857614ee8614e74565b604052919050565b5f5f60408385031215614f01575f5ffd5b8235614f0c81614d01565b9150602083013567ffffffffffffffff811115614f27575f5ffd5b8301601f81018513614f37575f5ffd5b803567ffffffffffffffff811115614f5157614f51614e74565b614f8260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601614ea1565b818152866020838501011115614f96575f5ffd5b816020840160208301375f602083830101528093505050509250929050565b5f60208284031215614fc5575f5ffd5b813561139981614d01565b5f81518084528060208401602086015e5f6020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b602081525f6113996020830184614fd0565b5f604082840312801561503f575f5ffd5b506040805190810167ffffffffffffffff8111828210171561506357615063614e74565b60405282358152602083013561507881614d01565b60208201529392505050565b5f5f60408385031215615095575f5ffd5b50508035926020909101359150565b5f8151808452602084019350602083015f5b828110156150ea57815173ffffffffffffffffffffffffffffffffffffffff168652602095860195909101906001016150b6565b5093949350505050565b602081525f61139960208301846150a4565b602080825282518282018190525f918401906040840190835b8181101561513d57835183526020938401939092019160010161511f565b509095945050505050565b80518252602081015160208301525f604082015161516e604085018263ffffffff169052565b506060820151606084015260808201516101206080850152615194610120850182614fd0565b905060a083015184820360a08601526151ad8282614fd0565b91505060c083015184820360c08601526151c78282614fd0565b91505060e083015160e08501526101008301516151fd61010086018273ffffffffffffffffffffffffffffffffffffffff169052565b509392505050565b602081525f6113996020830184615148565b5f5f5f60408486031215615229575f5ffd5b83359250602084013567ffffffffffffffff811115615246575f5ffd5b8401601f81018613615256575f5ffd5b803567ffffffffffffffff81111561526c575f5ffd5b86602082840101111561527d575f5ffd5b939660209190910195509293505050565b6bffffffffffffffffffffffff8516815267ffffffffffffffff8416602082015273ffffffffffffffffffffffffffffffffffffffff83166040820152608060608201525f6152e060808301846150a4565b9695505050505050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b8281101561535f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc087860301845261534a858351615148565b94506020938401939190910190600101615310565b50929695505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b80820180821115610cec57610cec61536b565b600181811c908216806153bf57607f821691505b6020821081036153f6577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b601f821115610d5757805f5260205f20601f840160051c810160208510156154215750805b601f840160051c820191505b81811015615440575f815560010161542d565b5050505050565b815167ffffffffffffffff81111561546157615461614e74565b6154758161546f84546153ab565b846153fc565b6020601f8211600181146154c6575f83156154905750848201515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600385901b1c1916600184901b178455615440565b5f848152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08516915b8281101561551357878501518255602094850194600190920191016154f3565b508482101561554f57868401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b60f8161c191681555b50505050600190811b01905550565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b6bffffffffffffffffffffffff8181168382160190811115610cec57610cec61536b565b81810381811115610cec57610cec61536b565b67ffffffffffffffff8181168382160190811115610cec57610cec61536b565b6bffffffffffffffffffffffff8281168282160390811115610cec57610cec61536b565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b5f60208284031215615643575f5ffd5b81518015158114611399575f5ffd5b5f67ffffffffffffffff821667ffffffffffffffff81036156755761567561536b565b60010192915050565b606081525f6156906060830186614fd0565b82810360208401526156a28186614fd0565b905082810360408401526152e08185614fd0565b5f602082840312156156c6575f5ffd5b5051919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b818382375f9101908152919050565b67ffffffffffffffff83111561572157615721614e74565b6157358361572f83546153ab565b836153fc565b5f601f841160018114615785575f851561574f5750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b178355615440565b5f838152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08716915b828110156157d257868501358255602094850194600190920191016157b2565b508682101561580d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b83815260406020820152816040820152818360608301375f818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b5f63ffffffff8316806158ac577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b8063ffffffff84160491505092915050565b63ffffffff8181168382160190811115610cec57610cec61536b565b5f67ffffffffffffffff8216806158f3576158f361536b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b5f82518060208501845e5f92019182525091905056fea26469706673582212200f4b10858582ff865ecdf9cf11f77cc923fb2ac799cf583fc61cd848236a376764736f6c634300081c0033608060405234801561000f575f5ffd5b5060405161044638038061044683398101604081905261002e9161024c565b818161003a8282610043565b50505050610331565b61004c826100a1565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a280511561009557610090828261011c565b505050565b61009d61018f565b5050565b806001600160a01b03163b5f036100db57604051634c9c8ce360e01b81526001600160a01b03821660048201526024015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b60605f5f846001600160a01b031684604051610138919061031b565b5f60405180830381855af49150503d805f8114610170576040519150601f19603f3d011682016040523d82523d5f602084013e610175565b606091505b5090925090506101868583836101b0565b95945050505050565b34156101ae5760405163b398979f60e01b815260040160405180910390fd5b565b6060826101c5576101c08261020f565b610208565b81511580156101dc57506001600160a01b0384163b155b1561020557604051639996b31560e01b81526001600160a01b03851660048201526024016100d2565b50805b9392505050565b80511561021f5780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b634e487b7160e01b5f52604160045260245ffd5b5f5f6040838503121561025d575f5ffd5b82516001600160a01b0381168114610273575f5ffd5b60208401519092506001600160401b0381111561028e575f5ffd5b8301601f8101851361029e575f5ffd5b80516001600160401b038111156102b7576102b7610238565b604051601f8201601f19908116603f011681016001600160401b03811182821017156102e5576102e5610238565b6040528181528282016020018710156102fc575f5ffd5b8160208401602083015e5f602083830101528093505050509250929050565b5f82518060208501845e5f920191825250919050565b6101088061033e5f395ff3fe608060405260043610601b575f3560e01c8063aaf10f42146023575b6021605d565b005b348015602d575f5ffd5b506034606b565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b606960656077565b60b5565b565b5f60726077565b905090565b5f60727f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b365f5f375f5f365f845af43d5f5f3e80801560ce573d5ff35b3d5ffdfea2646970667358221220a2794c0267cf527d31047d962f7ac722795c9e78659f2050eab808c7bd3b060064736f6c634300081c003352616e646f6d6e6573732061727261792073686f756c6420626520706f70756c617465642061667465722066756c66696c6c6d656e7452616e646f6d6e6573732053656e6465722070726f787920636f6e7472616374206465706c6f7965642061743a20537562736372697074696f6e206e61746976652062616c616e636520697320696e636f72726563747265717565737449642073686f756c64206265207a65726f20706f7374206465706c6f796d656e744e6f206469726563742066756e64696e67206665652073686f756c6420626520636f6c6c656374656420666f7220737562736372697074696f6e72616e646f6d6e65737320617272617920666f72207265717565737449642073686f756c6420626520656d707479206265666f726520726571756573742069732066756c66696c6c6564537562736372697074696f6e206665652073686f756c64206265206e6f6e2d7a65726f20616e64206e6f7420657863656564207265717565737420707269636552616e646f6d6e6573732076616c75652073686f756c64206e6f74206265207a65726f537562736372697074696f6e206f776e657220696e2052616e646f6d6e65737353656e6465722073686f756c64206265207772617070657220636f6e74726163747265717565737449642073686f756c64206265207570646174656420616674657220726571756573745369676e61747572652053656e6465722070726f787920636f6e7472616374206465706c6f7965642061743a2054686572652073686f756c64206265203220636f6e73756d6572732c207772617070657220636f6e747261637420616e6420616464656420636f6e73756d6572a2646970667358221220928ebb913ce9e8ca7421e60a9eecca1599ed5ba2090b81069d856b6729b8409964736f6c634300081c00330d1a2ccd46cb80f94b40809dbd638b44c78e456a4e06b886e8c8f300fa4073950b438ea53140bb1bc93a1c632ab4df0a07d702f34e48ecb7d31da7762a320ad5204a5468e6d01b87c07655eebbb1d43913e197f53281a7d56e2b1a0beac194aa00899f6a3998ecb2f832d35025bf38bef7429005e6b591d9e0ffb10078409f220a6758eec538bb8a511eed78c922a213e4cc06743aeb10ed77f63416fe964c3505d04df1d2daeefa07790b41a9e0ab762e264798bc36340dc3a0cc5654cefa4b";
var isSuperArgs2 = (xs) => xs.length > 1;
var ChainlinkVRFV2_5Integration_SubscriptionTest__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs2(args)) {
      super(...args);
    } else {
      super(_abi3, _bytecode2, args[0]);
    }
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  connect(runner) {
    return super.connect(
      runner
    );
  }
  static createInterface() {
    return new Interface(
      _abi3
    );
  }
  static connect(address, runner) {
    return new Contract(
      address,
      _abi3,
      runner
    );
  }
};
ChainlinkVRFV2_5Integration_SubscriptionTest__factory.bytecode = _bytecode2;
ChainlinkVRFV2_5Integration_SubscriptionTest__factory.abi = _abi3;

// src/generated/factories/Deployment.t.sol/Deployment__factory.ts
var _abi4 = [
  {
    type: "function",
    name: "IS_TEST",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeArtifacts",
    inputs: [],
    outputs: [
      {
        name: "excludedArtifacts_",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeContracts",
    inputs: [],
    outputs: [
      {
        name: "excludedContracts_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeSelectors",
    inputs: [],
    outputs: [
      {
        name: "excludedSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeSenders",
    inputs: [],
    outputs: [
      {
        name: "excludedSenders_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "failed",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "setUp",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "targetArtifactSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifactSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzArtifactSelector[]",
        components: [
          {
            name: "artifact",
            type: "string",
            internalType: "string"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetArtifacts",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifacts_",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetContracts",
    inputs: [],
    outputs: [
      {
        name: "targetedContracts_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetInterfaces",
    inputs: [],
    outputs: [
      {
        name: "targetedInterfaces_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzInterface[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "artifacts",
            type: "string[]",
            internalType: "string[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetSenders",
    inputs: [],
    outputs: [
      {
        name: "targetedSenders_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "event",
    name: "log",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_address",
    inputs: [
      {
        name: "",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_bytes",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_bytes32",
    inputs: [
      {
        name: "",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_int",
    inputs: [
      {
        name: "",
        type: "int256",
        indexed: false,
        internalType: "int256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_address",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_bytes",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_bytes32",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_decimal_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_decimal_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_string",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_string",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_uint",
    inputs: [
      {
        name: "",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "logs",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  }
];
var Deployment__factory = class {
  static createInterface() {
    return new Interface(_abi4);
  }
  static connect(address, runner) {
    return new Contract(address, _abi4, runner);
  }
};
Deployment__factory.abi = _abi4;

// src/generated/factories/DirectFunding.t.sol/DirectFundingTest__factory.ts
var _abi5 = [
  {
    type: "function",
    name: "IS_TEST",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeArtifacts",
    inputs: [],
    outputs: [
      {
        name: "excludedArtifacts_",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeContracts",
    inputs: [],
    outputs: [
      {
        name: "excludedContracts_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeSelectors",
    inputs: [],
    outputs: [
      {
        name: "excludedSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeSenders",
    inputs: [],
    outputs: [
      {
        name: "excludedSenders_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "failed",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "setUp",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "targetArtifactSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifactSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzArtifactSelector[]",
        components: [
          {
            name: "artifact",
            type: "string",
            internalType: "string"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetArtifacts",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifacts_",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetContracts",
    inputs: [],
    outputs: [
      {
        name: "targetedContracts_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetInterfaces",
    inputs: [],
    outputs: [
      {
        name: "targetedInterfaces_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzInterface[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "artifacts",
            type: "string[]",
            internalType: "string[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetSenders",
    inputs: [],
    outputs: [
      {
        name: "targetedSenders_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "test_CallbackShouldNotRevert_IfInterfaceIsNotImplemented",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "test_Deployment_Configurations",
    inputs: [],
    outputs: [],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "test_FulfillDecryptionRequest_WithLowCallbackGasLimit",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "test_FulfillDecryptionRequest_WithRevertingReceiver",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "test_FulfillDecryptionRequest_WithZeroCallbackGasLimit",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "test_FulfillSignatureRequest_WithDirectFunding_Successfully",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "test_Randomness_SignatureVerification",
    inputs: [],
    outputs: [],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "test_SelectArrayIndices_One_returnsAll",
    inputs: [],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "test_SelectArrayIndices_Zero_returnsEmpty",
    inputs: [],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "test_Update_SignatureScheme",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "test_selectArrayIndices_ReturnsCorrectCount",
    inputs: [],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "event",
    name: "RandomnessCallbackFailed",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "RandomnessRequested",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "nonce",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "requester",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "requestedAt",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_address",
    inputs: [
      {
        name: "",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_bytes",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_bytes32",
    inputs: [
      {
        name: "",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_int",
    inputs: [
      {
        name: "",
        type: "int256",
        indexed: false,
        internalType: "int256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_address",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_bytes",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_bytes32",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_decimal_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_decimal_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_string",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_string",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_uint",
    inputs: [
      {
        name: "",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "logs",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  }
];
var _bytecode3 = "0x600c8054600160ff199182168117909255601f80549091169091179055610120604052608080805280620161ef60a03960229061003c908261012a565b50604051806060016040528060408152602001620161af60409139602390610064908261012a565b5060408051602081019091525f8152602490610080908261012a565b5034801561008c575f5ffd5b506101e4565b634e487b7160e01b5f52604160045260245ffd5b600181811c908216806100ba57607f821691505b6020821081036100d857634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561012557805f5260205f20601f840160051c810160208510156101035750805b601f840160051c820191505b81811015610122575f815560010161010f565b50505b505050565b81516001600160401b0381111561014357610143610092565b6101578161015184546100a6565b846100de565b6020601f821160018114610189575f83156101725750848201515b5f19600385901b1c1916600184901b178455610122565b5f84815260208120601f198516915b828110156101b85787850151825560209485019460019092019101610198565b50848210156101d557868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b62015fbc80620001f35f395ff3fe608060405234801561000f575f5ffd5b506004361061018f575f3560e01c806385226c81116100dd578063d8c0b89d11610088578063e20c9f7111610063578063e20c9f7114610297578063edf06c381461029f578063fa7626d4146102a7575f5ffd5b8063d8c0b89d1461027f578063da6f544614610287578063dca042511461028f575f5ffd5b8063b5508aa9116100b8578063b5508aa914610257578063ba414fa61461025f578063c426f8dd14610277575f5ffd5b806385226c8114610225578063916a17c61461023a578063b0464fdc1461024f575f5ffd5b80633e5e3c231161013d578063658e172611610118578063658e17261461020057806366d9a9a0146102085780637b4074911461021d575f5ffd5b80633e5e3c23146101e85780633f7286f4146101f05780635c7c9813146101f8575f5ffd5b80631ed7831c1161016d5780631ed7831c146101ad5780632ade3880146101cb5780633cb41e7e146101e0575f5ffd5b80630a9254e4146101935780631245431f1461019d578063179c209b146101a5575b5f5ffd5b61019b6102b4565b005b61019b610372565b61019b610485565b6101b5610595565b6040516101c29190615189565b60405180910390f35b6101d36105f5565b6040516101c29190615202565b61019b610731565b6101b5610cf2565b6101b5610d50565b61019b610dae565b61019b611f4e565b6102106122b4565b6040516101c29190615363565b61019b61242d565b61022d6129ce565b6040516101c291906153ff565b610242612a99565b6040516101c29190615474565b610242612b8f565b61022d612c85565b610267612d50565b60405190151581526020016101c2565b61019b612e20565b61019b612f53565b61019b61347e565b61019b61357c565b6101b56136b9565b61019b613717565b601f546102679060ff1681565b6102bc613fe9565b6102c4613ff1565b602780547fffffffffffffffffffffffff00000000000000000000000000000000000000009081166001600160a01b039384161790915560288054821693831693841790556026805482169483169490941790935560258054909316938116939093179091556020546103389216906145a3565b602980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b604080515f808252602082019092526040517f298f239c0000000000000000000000000000000000000000000000000000000081525f60048201819052600160248301527fdeadbeef00000000000000000000000000000000000000000000000000000000604483015291925073__$485e63c703b57fb39db2d057ed0b990874$__9063298f239c906064015f60405180830381865af4158015610418573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261043f91908101906155d7565b905061048182826040518060400160405280601381526020017f617272617920776173206e6f7420656d7074790000000000000000000000000081525061466c565b5050565b6040517f298f239c000000000000000000000000000000000000000000000000000000008152606460048201819052600a602483018190527fdeadbeef000000000000000000000000000000000000000000000000000000006044840152915f9073__$485e63c703b57fb39db2d057ed0b990874$__9063298f239c9084015f60405180830381865af415801561051e573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261054591908101906155d7565b905061056c81518460405180606001604052806028815260200162015c65602891396146f1565b5f5b815181101561058f578281111561058757610587615683565b60010161056e565b50505050565b606060168054806020026020016040519081016040528092919081815260200182805480156105eb57602002820191905f5260205f20905b81546001600160a01b031681526001909101906020018083116105cd575b5050505050905090565b6060601e805480602002602001604051908101604052809291908181526020015f905b82821015610728575f84815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b82821015610711578382905f5260205f20018054610686906156b0565b80601f01602080910402602001604051908101604052809291908181526020018280546106b2906156b0565b80156106fd5780601f106106d4576101008083540402835291602001916106fd565b820191905f5260205f20905b8154815290600101906020018083116106e057829003601f168201915b505050505081526020019060010190610669565b505050508152505081526020019060010190610618565b50505050905090565b602854601f546040515f926001600160a01b03908116926101009004169061075890615127565b6001600160a01b03928316815291166020820152604001604051809103905ff080158015610788573d5f5f3e3d5ffd5b506028546040517f4b16093500000000000000000000000000000000000000000000000000000000815262030d4060048201819052929350600192915f916001600160a01b0390911690634b16093590602401602060405180830381865afa1580156107f6573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061081a9190615701565b6040517f4e6d441200000000000000000000000000000000000000000000000000000000815263ffffffff841660048201529091506001600160a01b03851690634e6d4412908390602401604080518083038185885af1158015610880573d5f5f3e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906108a59190615718565b50506028546040517fc58343ef000000000000000000000000000000000000000000000000000000008152600481018590525f916001600160a01b03169063c58343ef906024015f60405180830381865afa158015610906573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261092d91908101906157e3565b9050610949816040015163ffffffff168463ffffffff16614745565b61095781602001515f6147c1565b601f546040517fca669fa70000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b03166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b1580156109ca575f5ffd5b505af11580156109dc573d5f5f3e3d5ffd5b50506028546040517f86b9620d0000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d92506386b9620d91506024015f604051808303815f87803b158015610a4f575f5ffd5b505af1158015610a61573d5f5f3e3d5ffd5b50506040518692507f8f67472dde2126ccd0315b75dc482a5a73acb228a395553f8ae6edde5a0ca4fa91505f90a26027546040517fda8281160000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063da82811690610adb90879060239060040161598f565b5f604051808303815f87803b158015610af2575f5ffd5b505af1158015610b04573d5f5f3e3d5ffd5b50506028546040517fc58343ef000000000000000000000000000000000000000000000000000000008152600481018890526001600160a01b03909116925063c58343ef91506024015f60405180830381865afa158015610b67573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610b8e91908101906157e3565b90505f856001600160a01b0316626d6cae6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bcc573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bf09190615701565b6027546040517fcd802c9100000000000000000000000000000000000000000000000000000000815260048101839052919250610c81916001600160a01b039091169063cd802c91906024015b602060405180830381865afa158015610c58573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c7c91906159be565b614819565b610cea866001600160a01b031663360131896040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cc0573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ce49190615701565b5f61488f565b505050505050565b606060188054806020026020016040519081016040528092919081815260200182805480156105eb57602002820191905f5260205f209081546001600160a01b031681526001909101906020018083116105cd575050505050905090565b606060178054806020026020016040519081016040528092919081815260200182805480156105eb57602002820191905f5260205f209081546001600160a01b031681526001909101906020018083116105cd575050505050905090565b601f54602854610dcf916001600160a01b03610100909104811691166145a3565b602980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169182179055604080517f360131890000000000000000000000000000000000000000000000000000000081529051610e5c929163360131899160048083019260209291908290030181865afa158015610cc0573d5f5f3e3d5ffd5b60408051808201825260018082526029546001600160a01b039081166020840190815260285494517f775b839c0000000000000000000000000000000000000000000000000000000081528451600482015290518216602482015291938493925f92919091169063775b839c906044015f60405180830381865afa158015610ee6573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610f0d91908101906159de565b9050610f18816148e7565b6028546040517f4b1609350000000000000000000000000000000000000000000000000000000081526207a12060048201819052915f916001600160a01b0390911690634b16093590602401602060405180830381865afa158015610f7f573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fa39190615701565b9050610fe65f82116040518060400160405280601581526020017f496e76616c69642072657175657374207072696365000000000000000000000081525061495b565b6110256040518060400160405280601781526020017f457374696d617465642072657175657374207072696365000000000000000000815250826149ad565b6040517f491cc7c2000000000000000000000000000000000000000000000000000000008152600160048201819052602482018190525f60448301526064820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063491cc7c2906084015f604051808303815f87803b15801561109c575f5ffd5b505af11580156110ae573d5f5f3e3d5ffd5b50506029546040514281526001600160a01b03909116925088915087907feee7195b6cee0fa7044c3af0b86fe2febb1d2703d71191f44052ba0d60ffda649060200160405180910390a46029546040517f4e6d441200000000000000000000000000000000000000000000000000000000815263ffffffff841660048201526001600160a01b0390911690634e6d4412908390602401604080518083038185885af115801561115f573d5f5f3e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906111849190615718565b5050602954604080517e6d6cae00000000000000000000000000000000000000000000000000000000815290515f926001600160a01b031691626d6cae9160048083019260209291908290030181865afa1580156111e4573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112089190615701565b6027546040517fc58343ef000000000000000000000000000000000000000000000000000000008152600481018990529192505f916001600160a01b039091169063c58343ef906024015f60405180830381865afa15801561126c573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526112939190810190615a10565b6028546040517fc58343ef000000000000000000000000000000000000000000000000000000008152600481018a90529192505f916001600160a01b039091169063c58343ef906024015f60405180830381865afa1580156112f7573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261131e91908101906157e3565b90506113558563ffffffff16826040015163ffffffff161460405180608001604052806048815260200162015d9b6048913961495b565b61137d815f01515f1460405180606001604052806028815260200162015e886028913961495b565b6113b55f82602001511180156113965750848260200151145b6040518060600160405280602f815260200162015c08602f913961495b565b6113de8882606001511460405180606001604052806040815260200162015de36040913961495b565b6040517f48f50c0f000000000000000000000000000000000000000000000000000000008152620186a06004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906348f50c0f906024015f604051808303815f87803b158015611443575f5ffd5b505af1158015611455573d5f5f3e3d5ffd5b505050505f5a601f546040517fca669fa70000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b03166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b1580156114d1575f5ffd5b505af11580156114e3573d5f5f3e3d5ffd5b50506027546040517fda8281160000000000000000000000000000000000000000000000000000000081526001600160a01b03909116925063da828116915061153390879060239060040161598f565b5f604051808303815f87803b15801561154a575f5ffd5b505af115801561155c573d5f5f3e3d5ffd5b505050505f5a90505f61156f8284615b77565b90506115ba6040518060400160405280601981526020017f526571756573742043616c6c6261636b4761734c696d69743a00000000000000815250856040015163ffffffff166149ad565b6115fd6040518060400160405280601981526020017f526571756573742043616c6c6261636b47617350726963653a0000000000000081525085602001516149ad565b61163c6040518060400160405280600c81526020017f54782047617320757365643a0000000000000000000000000000000000000000815250826149ad565b61167b6040518060400160405280601381526020017f5478204761732070726963652028776569293a000000000000000000000000008152503a6149ad565b60408051808201909152601481527f547820546f74616c20636f73742028776569293a00000000000000000000000060208201526116c2906116bd3a84615b90565b6149ad565b6027546040517fcd802c910000000000000000000000000000000000000000000000000000000081526004810188905261170e916001600160a01b03169063cd802c9190602401610c3d565b602954604080517f3601318900000000000000000000000000000000000000000000000000000000815290516117b0926001600160a01b03169163360131899160048083019260209291908290030181865afa158015611770573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117949190615701565b60236040516117a39190615ba7565b604051809103902061488f565b6027546040517fcd802c91000000000000000000000000000000000000000000000000000000008152600481018d90526001600160a01b039091169063cd802c9190602401602060405180830381865afa158015611810573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061183491906159be565b1561184157611841615683565b60275f9054906101000a90046001600160a01b03166001600160a01b031663e63b5d586040518163ffffffff1660e01b8152600401602060405180830381865afa158015611891573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118b59190615701565b156118c2576118c2615683565b60275f9054906101000a90046001600160a01b03166001600160a01b0316636f421ea96040518163ffffffff1660e01b81526004015f60405180830381865afa158015611911573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261193891908101906155d7565b511561194657611946615683565b60275f9054906101000a90046001600160a01b03166001600160a01b031663571d70876040518163ffffffff1660e01b81526004015f60405180830381865afa158015611995573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526119bc91908101906155d7565b516001146119cc576119cc615683565b6027546040517fb0947289000000000000000000000000000000000000000000000000000000008152600481018d9052611a72916001600160a01b03169063b094728990602401602060405180830381865afa158015611a2e573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a5291906159be565b1560405180608001604052806043815260200162015d586043913961495b565b6027546040517fc58343ef000000000000000000000000000000000000000000000000000000008152600481018d90526001600160a01b039091169063c58343ef906024015f60405180830381865afa158015611ad1573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611af89190810190615a10565b9450611b218560c001516040518060600160405280603d815260200162015cc2603d913961495b565b6028546040517fc58343ef000000000000000000000000000000000000000000000000000000008152600481018d90526001600160a01b039091169063c58343ef906024015f60405180830381865afa158015611b80573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611ba791908101906157e3565b9350611bec6040518060400160405280601781526020017f4469726563742066756e64696e6720666565207061696400000000000000000081525085602001516149ad565b611c2260405180606001604052806025815260200162015f6260259139611c133a84615b90565b86602001516116bd9190615b77565b602854604080517f18e3dd270000000000000000000000000000000000000000000000000000000081529051611cd7926001600160a01b0316916318e3dd279160048083019260209291908290030181865afa158015611c84573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ca89190615c36565b6bffffffffffffffffffffffff165f1460405180606001604052806036815260200162015cff6036913961495b565b602080850151602854604080517f3bc32c750000000000000000000000000000000000000000000000000000000081529051611d8f946001600160a01b0390931692633bc32c7592600480820193918290030181865afa158015611d3d573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d619190615c36565b6bffffffffffffffffffffffff161460405180606001604052806040815260200162015e486040913961495b565b602854604080517f995cb36e0000000000000000000000000000000000000000000000000000000081529051611df1926001600160a01b03169163995cb36e9160048083019260209291908290030181865afa158015611c84573d5f5f3e3d5ffd5b601f546040517fca669fa70000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b03166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b158015611e64575f5ffd5b505af1158015611e76573d5f5f3e3d5ffd5b5050601f546028546040517f54236fb30000000000000000000000000000000000000000000000000000000081526101009092046001600160a01b03908116600484018190523194501691506354236fb3906024015f604051808303815f87803b158015611ee2575f5ffd5b505af1158015611ef4573d5f5f3e3d5ffd5b5050506020860151601f54611f3f92508391611f1f916001600160a01b036101009091041631615c61565b1160405180606001604052806035815260200162015c8d6035913961495b565b50505050505050505050505050565b602854601f546040517f91d148540000000000000000000000000000000000000000000000000000000081527fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177560048201526101009091046001600160a01b03908116602483015261200a9216906391d14854906044015b602060405180830381865afa158015611fe1573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061200591906159be565b614a20565b602754601f546040517f91d148540000000000000000000000000000000000000000000000000000000081527fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177560048201526101009091046001600160a01b0390811660248301526120869216906391d1485490604401611fc6565b6025546001600160a01b031661209e5761209e615683565b6026546001600160a01b03166120b6576120b6615683565b6027546001600160a01b03166120ce576120ce615683565b6028546001600160a01b03166120e6576120e6615683565b6029546001600160a01b03166120fe576120fe615683565b602754604080517fe6b3ca7100000000000000000000000000000000000000000000000000000000815290515f926001600160a01b03169163e6b3ca719160048083019260209291908290030181865afa15801561215e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121829190615c74565b6001600160a01b03160361219857612198615683565b602654604080517f5f7c75220000000000000000000000000000000000000000000000000000000081529051612225926001600160a01b031691635f7c7522916004808301925f9291908290030181865afa1580156121f9573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261222091908101906159de565b6148e7565b602654604080517f5f7c752200000000000000000000000000000000000000000000000000000000815290516122b2926001600160a01b031691635f7c7522916004808301925f9291908290030181865afa158015612286573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526122ad91908101906159de565b614a72565b565b6060601b805480602002602001604051908101604052809291908181526020015f905b82821015610728578382905f5260205f2090600202016040518060400160405290815f82018054612307906156b0565b80601f0160208091040260200160405190810160405280929190818152602001828054612333906156b0565b801561237e5780601f106123555761010080835404028352916020019161237e565b820191905f5260205f20905b81548152906001019060200180831161236157829003601f168201915b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561241557602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116123c25790505b505050505081525050815260200190600101906122d7565b602854604080517f57a8070a00000000000000000000000000000000000000000000000000000000815290516124ee926001600160a01b0316916357a8070a9160048083019260209291908290030181865afa15801561248f573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124b391906159be565b6040518060400160405280601e81526020017f426c6f636b6c6f636b53656e646572206e6f7420636f6e66696775726564000081525061495b565b602854604080517fa608a1e100000000000000000000000000000000000000000000000000000000815290516125af926001600160a01b03169163a608a1e19160048083019260209291908290030181865afa158015612550573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061257491906159be565b6040518060400160405280601981526020017f426c6f636b6c6f636b53656e6465722069732070617573656400000000000000815250614ae3565b6028546040517f4b1609350000000000000000000000000000000000000000000000000000000081526207a12060048201819052915f916001600160a01b0390911690634b16093590602401602060405180830381865afa158015612616573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061263a9190615701565b6020546040517fca669fa70000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b1580156126ac575f5ffd5b505af11580156126be573d5f5f3e3d5ffd5b50506028546040517f811ee32a00000000000000000000000000000000000000000000000000000000815263ffffffff861660048201528593505f92506001600160a01b039091169063811ee32a90859060240160206040518083038185885af115801561272e573d5f5f3e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906127539190615701565b6040517f48f50c0f000000000000000000000000000000000000000000000000000000008152620186a06004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d906348f50c0f906024015f604051808303815f87803b1580156127bb575f5ffd5b505af11580156127cd573d5f5f3e3d5ffd5b5050601f546040517fca669fa70000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b03166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063ca669fa791506024015f604051808303815f87803b158015612844575f5ffd5b505af1158015612856573d5f5f3e3d5ffd5b50506027546040517fda8281160000000000000000000000000000000000000000000000000000000081526001600160a01b03909116925063da82811691506128a690849060239060040161598f565b5f604051808303815f87803b1580156128bd575f5ffd5b505af11580156128cf573d5f5f3e3d5ffd5b50506027546040517fcd802c910000000000000000000000000000000000000000000000000000000081526004810185905261292193506001600160a01b03909116915063cd802c9190602401610c3d565b6028546040517fc58343ef000000000000000000000000000000000000000000000000000000008152600481018390525f916001600160a01b03169063c58343ef906024015f60405180830381865afa158015612980573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526129a791908101906157e3565b90506129c78160c001518051906020012060236040516117a39190615ba7565b5050505050565b6060601a805480602002602001604051908101604052809291908181526020015f905b82821015610728578382905f5260205f20018054612a0e906156b0565b80601f0160208091040260200160405190810160405280929190818152602001828054612a3a906156b0565b8015612a855780601f10612a5c57610100808354040283529160200191612a85565b820191905f5260205f20905b815481529060010190602001808311612a6857829003601f168201915b5050505050815260200190600101906129f1565b6060601d805480602002602001604051908101604052809291908181526020015f905b82821015610728575f8481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015612b7757602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019060040190602082600301049283019260010382029150808411612b245790505b50505050508152505081526020019060010190612abc565b6060601c805480602002602001604051908101604052809291908181526020015f905b82821015610728575f8481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015612c6d57602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019060040190602082600301049283019260010382029150808411612c1a5790505b50505050508152505081526020019060010190612bb2565b60606019805480602002602001604051908101604052809291908181526020015f905b82821015610728578382905f5260205f20018054612cc5906156b0565b80601f0160208091040260200160405190810160405280929190818152602001828054612cf1906156b0565b8015612d3c5780601f10612d1357610100808354040283529160200191612d3c565b820191905f5260205f20905b815481529060010190602001808311612d1f57829003601f168201915b505050505081526020019060010190612ca8565b6008545f9060ff1615612d67575060085460ff1690565b6040517f667f9d70000000000000000000000000000000000000000000000000000000008152737109709ecfa91a80626ff3989d68f67f5b1dd12d600482018190527f6661696c6564000000000000000000000000000000000000000000000000000060248301525f9163667f9d7090604401602060405180830381865afa158015612df5573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612e199190615701565b1415905090565b602854602754604080518082018252600581527f424e323534000000000000000000000000000000000000000000000000000000602082015290517f317e6e73000000000000000000000000000000000000000000000000000000008152600a936001935f9373__$485e63c703b57fb39db2d057ed0b990874$__9363317e6e7393612ec5936001600160a01b039182169391169160239189918b9190600401615c8f565b602060405180830381865af4158015612ee0573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612f0491906159be565b9050612f45816040518060400160405280601d81526020017f5369676e617475726520766572696669636174696f6e206661696c656400000081525061495b565b612f4e81614b35565b505050565b601f54602854612f74916001600160a01b03610100909104811691166145a3565b602980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169182179055604080517f360131890000000000000000000000000000000000000000000000000000000081529051613001929163360131899160048083019260209291908290030181865afa158015610cc0573d5f5f3e3d5ffd5b6028546040517f4b1609350000000000000000000000000000000000000000000000000000000081526103e86004820181905260019290915f916001600160a01b031690634b160935906024015b602060405180830381865afa15801561306a573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061308e9190615701565b6029546040517f4e6d441200000000000000000000000000000000000000000000000000000000815263ffffffff851660048201529192506001600160a01b031690634e6d4412908390602401604080518083038185885af11580156130f6573d5f5f3e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061311b9190615718565b50506028546040517fc58343ef000000000000000000000000000000000000000000000000000000008152600481018590525f916001600160a01b03169063c58343ef906024015f60405180830381865afa15801561317c573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526131a391908101906157e3565b90506131bf816040015163ffffffff168463ffffffff16614745565b6131cd81602001515f6147c1565b601f546040517fca669fa70000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b03166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b158015613240575f5ffd5b505af1158015613252573d5f5f3e3d5ffd5b50506027546040517fda8281160000000000000000000000000000000000000000000000000000000081526001600160a01b03909116925063da82811691506132a290879060239060040161598f565b5f604051808303815f87803b1580156132b9575f5ffd5b505af11580156132cb573d5f5f3e3d5ffd5b50506028546040517fc58343ef000000000000000000000000000000000000000000000000000000008152600481018890526001600160a01b03909116925063c58343ef91506024015f60405180830381865afa15801561332e573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261335591908101906157e3565b90505f60295f9054906101000a90046001600160a01b03166001600160a01b0316626d6cae6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156133a7573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906133cb9190615701565b6027546040517fcd802c910000000000000000000000000000000000000000000000000000000081526004810183905291925061341c916001600160a01b039091169063cd802c9190602401610c3d565b602954604080517f3601318900000000000000000000000000000000000000000000000000000000815290516129c7926001600160a01b03169163360131899160048083019260209291908290030181865afa158015610cc0573d5f5f3e3d5ffd5b601f5460285461349f916001600160a01b03610100909104811691166145a3565b602980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169182179055604080517f36013189000000000000000000000000000000000000000000000000000000008152905161352c929163360131899160048083019260209291908290030181865afa158015610cc0573d5f5f3e3d5ffd5b6028546040517f4b1609350000000000000000000000000000000000000000000000000000000081525f60048201819052600192909182916001600160a01b031690634b1609359060240161304f565b6040805160018082528183019092525f91602080830190803683370190505090505f815f815181106135b0576135b0615cf3565b60209081029190910101526040517f298f239c00000000000000000000000000000000000000000000000000000000815260016004820181905260248201527fdeadbeef0000000000000000000000000000000000000000000000000000000060448201525f9073__$485e63c703b57fb39db2d057ed0b990874$";
var isSuperArgs3 = (xs) => {
  return typeof xs[0] === "string" || Array.isArray(xs[0]) || "_isInterface" in xs[0];
};
var _DirectFundingTest__factory = class _DirectFundingTest__factory extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs3(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi5,
        _DirectFundingTest__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }
  static linkBytecode(linkLibraryAddresses) {
    let linkedBytecode = _bytecode3;
    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$485e63c703b57fb39db2d057ed0b990874\\$__", "g"),
      linkLibraryAddresses["src/randomness/Randomness.sol:Randomness"].replace(/^0x/, "").toLowerCase()
    );
    return linkedBytecode;
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi5);
  }
  static connect(address, runner) {
    return new Contract(address, _abi5, runner);
  }
};
_DirectFundingTest__factory.bytecode = _bytecode3;
_DirectFundingTest__factory.abi = _abi5;
var DirectFundingTest__factory = _DirectFundingTest__factory;

// src/generated/factories/Randomness.t.sol/RandomnessTest__factory.ts
var _abi6 = [
  {
    type: "function",
    name: "IS_TEST",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeArtifacts",
    inputs: [],
    outputs: [
      {
        name: "excludedArtifacts_",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeContracts",
    inputs: [],
    outputs: [
      {
        name: "excludedContracts_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeSelectors",
    inputs: [],
    outputs: [
      {
        name: "excludedSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeSenders",
    inputs: [],
    outputs: [
      {
        name: "excludedSenders_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "failed",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "setUp",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "targetArtifactSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifactSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzArtifactSelector[]",
        components: [
          {
            name: "artifact",
            type: "string",
            internalType: "string"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetArtifacts",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifacts_",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetContracts",
    inputs: [],
    outputs: [
      {
        name: "targetedContracts_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetInterfaces",
    inputs: [],
    outputs: [
      {
        name: "targetedInterfaces_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzInterface[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "artifacts",
            type: "string[]",
            internalType: "string[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetSenders",
    inputs: [],
    outputs: [
      {
        name: "targetedSenders_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "test_Deployment_Configurations",
    inputs: [],
    outputs: [],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "test_Randomness_SignatureVerification",
    inputs: [],
    outputs: [],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "test_SelectArrayIndices_One_returnsAll",
    inputs: [],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "test_SelectArrayIndices_Zero_returnsEmpty",
    inputs: [],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "test_Update_SignatureScheme",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "test_selectArrayIndices_ReturnsCorrectCount",
    inputs: [],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "event",
    name: "log",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_address",
    inputs: [
      {
        name: "",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_bytes",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_bytes32",
    inputs: [
      {
        name: "",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_int",
    inputs: [
      {
        name: "",
        type: "int256",
        indexed: false,
        internalType: "int256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_address",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_bytes",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_bytes32",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_decimal_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_decimal_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_string",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_string",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_uint",
    inputs: [
      {
        name: "",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "logs",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  }
];
var _bytecode4 = "0x600c8054600160ff199182168117909255601f805490911690911790556101206040526080808052806201254260a03960229061003c908261012a565b506040518060600160405280604081526020016201250260409139602390610064908261012a565b5060408051602081019091525f8152602490610080908261012a565b5034801561008c575f5ffd5b506101e4565b634e487b7160e01b5f52604160045260245ffd5b600181811c908216806100ba57607f821691505b6020821081036100d857634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561012557805f5260205f20601f840160051c810160208510156101035750805b601f840160051c820191505b81811015610122575f815560010161010f565b50505b505050565b81516001600160401b0381111561014357610143610092565b6101578161015184546100a6565b846100de565b6020601f821160018114610189575f83156101725750848201515b5f19600385901b1c1916600184901b178455610122565b5f84815260208120601f198516915b828110156101b85787850151825560209485019460019092019101610198565b50848210156101d557868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b6201230f80620001f35f395ff3fe608060405234801561000f575f5ffd5b5060043610610149575f3560e01c806385226c81116100c7578063c426f8dd1161007d578063e20c9f7111610063578063e20c9f7114610229578063edf06c3814610231578063fa7626d414610239575f5ffd5b8063c426f8dd14610219578063dca0425114610221575f5ffd5b8063b0464fdc116100ad578063b0464fdc146101f1578063b5508aa9146101f9578063ba414fa614610201575f5ffd5b806385226c81146101c7578063916a17c6146101dc575f5ffd5b80632ade38801161011c5780633f7286f4116101025780633f7286f4146101a2578063658e1726146101aa57806366d9a9a0146101b2575f5ffd5b80632ade3880146101855780633e5e3c231461019a575f5ffd5b80630a9254e41461014d5780631245431f14610157578063179c209b1461015f5780631ed7831c14610167575b5f5ffd5b610155610246565b005b61015561031e565b610155610431565b61016f610541565b60405161017c9190612ead565b60405180910390f35b61018d6105ae565b60405161017c9190612f33565b61016f6106f7565b61016f610762565b6101556107cd565b6101ba610bc2565b60405161017c91906130a1565b6101cf610d3b565b60405161017c919061313d565b6101e4610e06565b60405161017c91906131b2565b6101e4610f09565b6101cf61100c565b6102096110d7565b604051901515815260200161017c565b6101556111a7565b6101556112e7565b61016f611424565b61015561148f565b601f546102099060ff1681565b61024e611e46565b610256611e4e565b602780547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff9384161790915560288054821693831693841790556026805482169483169490941790935560258054909316938116939093179091556020546102d7921690612468565b602980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b604080515f808252602082019092526040517f298f239c0000000000000000000000000000000000000000000000000000000081525f60048201819052600160248301527fdeadbeef00000000000000000000000000000000000000000000000000000000604483015291925073__$485e63c703b57fb39db2d057ed0b990874$__9063298f239c906064015f60405180830381865af41580156103c4573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526103eb91908101906132db565b905061042d82826040518060400160405280601381526020017f617272617920776173206e6f7420656d7074790000000000000000000000000081525061254b565b5050565b6040517f298f239c000000000000000000000000000000000000000000000000000000008152606460048201819052600a602483018190527fdeadbeef000000000000000000000000000000000000000000000000000000006044840152915f9073__$485e63c703b57fb39db2d057ed0b990874$__9063298f239c9084015f60405180830381865af41580156104ca573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526104f191908101906132db565b9050610518815184604051806060016040528060288152602001620121b8602891396125d0565b5f5b815181101561053b578281111561053357610533613387565b60010161051a565b50505050565b606060168054806020026020016040519081016040528092919081815260200182805480156105a457602002820191905f5260205f20905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610579575b5050505050905090565b6060601e805480602002602001604051908101604052809291908181526020015f905b828210156106ee575f848152602080822060408051808201825260028702909201805473ffffffffffffffffffffffffffffffffffffffff168352600181018054835181870281018701909452808452939591948681019491929084015b828210156106d7578382905f5260205f2001805461064c906133b4565b80601f0160208091040260200160405190810160405280929190818152602001828054610678906133b4565b80156106c35780601f1061069a576101008083540402835291602001916106c3565b820191905f5260205f20905b8154815290600101906020018083116106a657829003601f168201915b50505050508152602001906001019061062f565b5050505081525050815260200190600101906105d1565b50505050905090565b606060188054806020026020016040519081016040528092919081815260200182805480156105a457602002820191905f5260205f2090815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610579575050505050905090565b606060178054806020026020016040519081016040528092919081815260200182805480156105a457602002820191905f5260205f2090815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610579575050505050905090565b602854601f546040517f91d148540000000000000000000000000000000000000000000000000000000081527fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775600482015261010090910473ffffffffffffffffffffffffffffffffffffffff90811660248301526108969216906391d14854906044015b602060405180830381865afa15801561086d573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108919190613405565b612624565b602754601f546040517f91d148540000000000000000000000000000000000000000000000000000000081527fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775600482015261010090910473ffffffffffffffffffffffffffffffffffffffff908116602483015261091f9216906391d1485490604401610852565b60255473ffffffffffffffffffffffffffffffffffffffff1661094457610944613387565b60265473ffffffffffffffffffffffffffffffffffffffff1661096957610969613387565b60275473ffffffffffffffffffffffffffffffffffffffff1661098e5761098e613387565b60285473ffffffffffffffffffffffffffffffffffffffff166109b3576109b3613387565b60295473ffffffffffffffffffffffffffffffffffffffff166109d8576109d8613387565b602754604080517fe6b3ca7100000000000000000000000000000000000000000000000000000000815290515f9273ffffffffffffffffffffffffffffffffffffffff169163e6b3ca719160048083019260209291908290030181865afa158015610a45573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a69919061344c565b73ffffffffffffffffffffffffffffffffffffffff1603610a8c57610a8c613387565b602654604080517f5f7c75220000000000000000000000000000000000000000000000000000000081529051610b269273ffffffffffffffffffffffffffffffffffffffff1691635f7c7522916004808301925f9291908290030181865afa158015610afa573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610b219190810190613467565b6126a0565b602654604080517f5f7c75220000000000000000000000000000000000000000000000000000000081529051610bc09273ffffffffffffffffffffffffffffffffffffffff1691635f7c7522916004808301925f9291908290030181865afa158015610b94573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610bbb9190810190613467565b612714565b565b6060601b805480602002602001604051908101604052809291908181526020015f905b828210156106ee578382905f5260205f2090600202016040518060400160405290815f82018054610c15906133b4565b80601f0160208091040260200160405190810160405280929190818152602001828054610c41906133b4565b8015610c8c5780601f10610c6357610100808354040283529160200191610c8c565b820191905f5260205f20905b815481529060010190602001808311610c6f57829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610d2357602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019060040190602082600301049283019260010382029150808411610cd05790505b50505050508152505081526020019060010190610be5565b6060601a805480602002602001604051908101604052809291908181526020015f905b828210156106ee578382905f5260205f20018054610d7b906133b4565b80601f0160208091040260200160405190810160405280929190818152602001828054610da7906133b4565b8015610df25780601f10610dc957610100808354040283529160200191610df2565b820191905f5260205f20905b815481529060010190602001808311610dd557829003601f168201915b505050505081526020019060010190610d5e565b6060601d805480602002602001604051908101604052809291908181526020015f905b828210156106ee575f84815260209081902060408051808201825260028602909201805473ffffffffffffffffffffffffffffffffffffffff168352600181018054835181870281018701909452808452939491938583019392830182828015610ef157602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019060040190602082600301049283019260010382029150808411610e9e5790505b50505050508152505081526020019060010190610e29565b6060601c805480602002602001604051908101604052809291908181526020015f905b828210156106ee575f84815260209081902060408051808201825260028602909201805473ffffffffffffffffffffffffffffffffffffffff168352600181018054835181870281018701909452808452939491938583019392830182828015610ff457602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019060040190602082600301049283019260010382029150808411610fa15790505b50505050508152505081526020019060010190610f2c565b60606019805480602002602001604051908101604052809291908181526020015f905b828210156106ee578382905f5260205f2001805461104c906133b4565b80601f0160208091040260200160405190810160405280929190818152602001828054611078906133b4565b80156110c35780601f1061109a576101008083540402835291602001916110c3565b820191905f5260205f20905b8154815290600101906020018083116110a657829003601f168201915b50505050508152602001906001019061102f565b6008545f9060ff16156110ee575060085460ff1690565b6040517f667f9d70000000000000000000000000000000000000000000000000000000008152737109709ecfa91a80626ff3989d68f67f5b1dd12d600482018190527f6661696c6564000000000000000000000000000000000000000000000000000060248301525f9163667f9d7090604401602060405180830381865afa15801561117c573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111a091906134fb565b1415905090565b602854602754604080518082018252600581527f424e323534000000000000000000000000000000000000000000000000000000602082015290517f317e6e73000000000000000000000000000000000000000000000000000000008152600a936001935f9373__$485e63c703b57fb39db2d057ed0b990874$__9363317e6e73936112599373ffffffffffffffffffffffffffffffffffffffff9182169391169160239189918b9190600401613512565b602060405180830381865af4158015611274573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112989190613405565b90506112d9816040518060400160405280601d81526020017f5369676e617475726520766572696669636174696f6e206661696c6564000000815250612785565b6112e2816127ff565b505050565b6040805160018082528183019092525f91602080830190803683370190505090505f815f8151811061131b5761131b61366b565b60209081029190910101526040517f298f239c00000000000000000000000000000000000000000000000000000000815260016004820181905260248201527fdeadbeef0000000000000000000000000000000000000000000000000000000060448201525f9073__$485e63c703b57fb39db2d057ed0b990874$";
var isSuperArgs4 = (xs) => {
  return typeof xs[0] === "string" || Array.isArray(xs[0]) || "_isInterface" in xs[0];
};
var _RandomnessTest__factory = class _RandomnessTest__factory extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs4(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi6,
        _RandomnessTest__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }
  static linkBytecode(linkLibraryAddresses) {
    let linkedBytecode = _bytecode4;
    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$485e63c703b57fb39db2d057ed0b990874\\$__", "g"),
      linkLibraryAddresses["src/randomness/Randomness.sol:Randomness"].replace(/^0x/, "").toLowerCase()
    );
    return linkedBytecode;
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi6);
  }
  static connect(address, runner) {
    return new Contract(address, _abi6, runner);
  }
};
_RandomnessTest__factory.bytecode = _bytecode4;
_RandomnessTest__factory.abi = _abi6;
var RandomnessTest__factory = _RandomnessTest__factory;

// src/generated/factories/StdError.sol/StdError__factory.ts
var _abi7 = [
  {
    type: "function",
    name: "arithmeticError",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "assertionError",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "divisionError",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "encodeStorageError",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "enumConversionError",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "indexOOBError",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "memOverflowError",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "popError",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "zeroVarError",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  }
];
var _bytecode5 = "0x6102ac610034600b8282823980515f1a607314602857634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100aa575f3560e01c8063986c5f681161007d578063b67689da11610063578063b67689da146100f4578063d160e4de146100fc578063fa784a4414610104575f5ffd5b8063986c5f68146100e4578063b22dc54d146100ec575f5ffd5b806305ee8612146100ae57806310332977146100cc5780631de45560146100d45780638995290f146100dc575b5f5ffd5b6100b661010c565b6040516100c39190610223565b60405180910390f35b6100b6610193565b6100b66101a5565b6100b66101b7565b6100b66101c9565b6100b66101db565b6100b66101ed565b6100b66101ff565b6100b6610211565b604051603260248201526044015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f4e487b710000000000000000000000000000000000000000000000000000000017905281565b6040516001602482015260440161011a565b6040516021602482015260440161011a565b6040516011602482015260440161011a565b6040516041602482015260440161011a565b6040516031602482015260440161011a565b6040516051602482015260440161011a565b6040516022602482015260440161011a565b6040516012602482015260440161011a565b602081525f82518060208401528060208501604085015e5f6040828501015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168401019150509291505056fea2646970667358221220c6885851e88b96ab82ead2af13c28ee25d6ef15f76e4816fb0f541561b0dee9964736f6c634300081c0033";
var isSuperArgs5 = (xs) => xs.length > 1;
var StdError__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs5(args)) {
      super(...args);
    } else {
      super(_abi7, _bytecode5, args[0]);
    }
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi7);
  }
  static connect(address, runner) {
    return new Contract(address, _abi7, runner);
  }
};
StdError__factory.bytecode = _bytecode5;
StdError__factory.abi = _abi7;

// src/generated/factories/StdStorage.sol/StdStorageSafe__factory.ts
var _abi8 = [
  {
    type: "event",
    name: "SlotFound",
    inputs: [
      {
        name: "who",
        type: "address",
        indexed: false,
        internalType: "address"
      },
      {
        name: "fsig",
        type: "bytes4",
        indexed: false,
        internalType: "bytes4"
      },
      {
        name: "keysHash",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32"
      },
      {
        name: "slot",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "WARNING_UninitedSlot",
    inputs: [
      {
        name: "who",
        type: "address",
        indexed: false,
        internalType: "address"
      },
      {
        name: "slot",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  }
];
var _bytecode6 = "0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea2646970667358221220582391eb6bfc80987e544aeaa0ff177d313377eeed33c6deddd4de41030d71fa64736f6c634300081c0033";
var isSuperArgs6 = (xs) => xs.length > 1;
var StdStorageSafe__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs6(args)) {
      super(...args);
    } else {
      super(_abi8, _bytecode6, args[0]);
    }
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi8);
  }
  static connect(address, runner) {
    return new Contract(address, _abi8, runner);
  }
};
StdStorageSafe__factory.bytecode = _bytecode6;
StdStorageSafe__factory.abi = _abi8;

// src/generated/factories/SubscriptionFunding.t.sol/SubscriptionFundingTest__factory.ts
var _abi9 = [
  {
    type: "function",
    name: "IS_TEST",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "consumersToAddToSubscription",
    inputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeArtifacts",
    inputs: [],
    outputs: [
      {
        name: "excludedArtifacts_",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeContracts",
    inputs: [],
    outputs: [
      {
        name: "excludedContracts_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeSelectors",
    inputs: [],
    outputs: [
      {
        name: "excludedSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeSenders",
    inputs: [],
    outputs: [
      {
        name: "excludedSenders_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "failed",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "setUp",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "targetArtifactSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifactSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzArtifactSelector[]",
        components: [
          {
            name: "artifact",
            type: "string",
            internalType: "string"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetArtifacts",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifacts_",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetContracts",
    inputs: [],
    outputs: [
      {
        name: "targetedContracts_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetInterfaces",
    inputs: [],
    outputs: [
      {
        name: "targetedInterfaces_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzInterface[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "artifacts",
            type: "string[]",
            internalType: "string[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetSenders",
    inputs: [],
    outputs: [
      {
        name: "targetedSenders_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "test_CancelSubscription",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "test_CancelSubscription_WithPendingRequest_ShouldRevert",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "test_Deployment_Configurations",
    inputs: [],
    outputs: [],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "test_FulfillSignatureRequest_ForSubscriptionWithZeroBalance_ShouldRevert",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "test_FulfillSignatureRequest_ForSubscription_WithOnlyRequestPriceBalance",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "test_FulfillSignatureRequest_WithSubscription_AndLowCallbackGasLimit",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "test_FulfillSignatureRequest_WithSubscription_Successfully",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "test_FulfillSignatureRequest_WithZeroCallbackGasLimit",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "test_NoChargeAtRequestTime_ForSubscriptionRequest",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "test_Randomness_SignatureVerification",
    inputs: [],
    outputs: [],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "test_SelectArrayIndices_One_returnsAll",
    inputs: [],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "test_SelectArrayIndices_Zero_returnsEmpty",
    inputs: [],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "test_Update_SignatureScheme",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "test_selectArrayIndices_ReturnsCorrectCount",
    inputs: [],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "event",
    name: "log",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_address",
    inputs: [
      {
        name: "",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_bytes",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_bytes32",
    inputs: [
      {
        name: "",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_int",
    inputs: [
      {
        name: "",
        type: "int256",
        indexed: false,
        internalType: "int256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_address",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_bytes",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_bytes32",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_decimal_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_decimal_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_string",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_string",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_uint",
    inputs: [
      {
        name: "",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "logs",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  }
];
var _bytecode7 = "0x600c8054600160ff199182168117909255601f805490911690911790556101206040526080808052806201878b60a03960229061003c908261012a565b506040518060600160405280604081526020016201874b60409139602390610064908261012a565b5060408051602081019091525f8152602490610080908261012a565b5034801561008c575f5ffd5b506101e4565b634e487b7160e01b5f52604160045260245ffd5b600181811c908216806100ba57607f821691505b6020821081036100d857634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561012557805f5260205f20601f840160051c810160208510156101035750805b601f840160051c820191505b81811015610122575f815560010161010f565b50505b505050565b81516001600160401b0381111561014357610143610092565b6101578161015184546100a6565b846100de565b6020601f821160018114610189575f83156101725750848201515b5f19600385901b1c1916600184901b178455610122565b5f84815260208120601f198516915b828110156101b85787850151825560209485019460019092019101610198565b50848210156101d557868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b6201855880620001f35f395ff3fe608060405234801561000f575f5ffd5b50600436106101bb575f3560e01c806366d9a9a0116100f3578063ba414fa611610093578063dca042511161006e578063dca04251146102fe578063e20c9f7114610306578063edf06c381461030e578063fa7626d414610316575f5ffd5b8063ba414fa6146102d6578063c426f8dd146102ee578063c58570bd146102f6575f5ffd5b80638b588d4d116100ce5780638b588d4d146102a9578063916a17c6146102b1578063b0464fdc146102c6578063b5508aa9146102ce575f5ffd5b806366d9a9a0146102775780637b68cb151461028c57806385226c8114610294575f5ffd5b80633e5e3c231161015e5780634aa646b0116101395780634aa646b01461023457806358ec323a1461025f57806360cfc92314610267578063658e17261461026f575f5ffd5b80633e5e3c231461021c5780633f7286f41461022457806344eb37991461022c575f5ffd5b80631ed7831c116101995780631ed7831c146101d957806325d7c3cf146101f75780632ade3880146101ff57806331bb7c4914610214575f5ffd5b80630a9254e4146101bf5780631245431f146101c9578063179c209b146101d1575b5f5ffd5b6101c7610323565b005b6101c76103e1565b6101c76104f4565b6101e1610604565b6040516101ee91906186cd565b60405180910390f35b6101c7610664565b610207611a64565b6040516101ee9190618746565b6101c7611ba0565b6101e1612a3e565b6101e1612a9c565b6101c7612afa565b61024761024236600461884b565b612dd4565b6040516001600160a01b0390911681526020016101ee565b6101c7612dfc565b6101c7612f83565b6101c7613593565b61027f6138f9565b6040516101ee91906188be565b6101c7613a72565b61029c61417e565b6040516101ee919061895a565b6101c7614249565b6102b9615199565b6040516101ee91906189cf565b6102b961528f565b61029c615385565b6102de615450565b60405190151581526020016101ee565b6101c7615520565b6101c7615653565b6101c7616905565b6101e1616a42565b6101c7616aa0565b601f546102de9060ff1681565b61032b617372565b61033361737a565b602780547fffffffffffffffffffffffff00000000000000000000000000000000000000009081166001600160a01b039384161790915560288054821693831693841790556026805482169483169490941790935560258054909316938116939093179091556020546103a792169061792c565b602980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b604080515f808252602082019092526040517f298f239c0000000000000000000000000000000000000000000000000000000081525f60048201819052600160248301527fdeadbeef00000000000000000000000000000000000000000000000000000000604483015291925073__$485e63c703b57fb39db2d057ed0b990874$__9063298f239c906064015f60405180830381865af4158015610487573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526104ae9190810190618b55565b90506104f082826040518060400160405280601381526020017f617272617920776173206e6f7420656d707479000000000000000000000000008152506179f5565b5050565b6040517f298f239c000000000000000000000000000000000000000000000000000000008152606460048201819052600a602483018190527fdeadbeef000000000000000000000000000000000000000000000000000000006044840152915f9073__$485e63c703b57fb39db2d057ed0b990874$__9063298f239c9084015f60405180830381865af415801561058d573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526105b49190810190618b55565b90506105db81518460405180606001604052806028815260200162017ea060289139617a7a565b5f5b81518110156105fe57828111156105f6576105f6618beb565b6001016105dd565b50505050565b6060601680548060200260200160405190810160405280929190818152602001828054801561065a57602002820191905f5260205f20905b81546001600160a01b0316815260019091019060200180831161063c575b5050505050905090565b60295f9054906101000a90046001600160a01b03166001600160a01b03166309c1ba2e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b4573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106d89190618c18565b156106e5576106e5618beb565b6020546028546729a2241af62c00009161070c916001600160a01b03918216911683617ace565b602980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169182179055604080517f09c1ba2e00000000000000000000000000000000000000000000000000000000815290515f92916309c1ba2e9160048083019260209291908290030181865afa158015610797573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107bb9190618c18565b9050805f036107cc576107cc618beb565b61080b6040518060400160405280601281526020017f537562736372697074696f6e206964203d20000000000000000000000000000081525082617c6b565b6028546040517fdc311dd3000000000000000000000000000000000000000000000000000000008152600481018390525f918291829182916001600160a01b039091169063dc311dd3906024015f60405180830381865afa158015610872573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526108999190810190618c6e565b93509350935093506108b9846bffffffffffffffffffffffff1687617cde565b6108cd8367ffffffffffffffff165f617cde565b6029546108e49083906001600160a01b0316617d5a565b6108f081516001617cde565b6028546040517f4b160935000000000000000000000000000000000000000000000000000000008152620186a060048201819052915f916001600160a01b0390911690634b16093590602401602060405180830381865afa158015610957573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061097b9190618c18565b90506109be5f82116040518060400160405280601581526020017f496e76616c696420726571756573742070726963650000000000000000000000815250617dbb565b6020546040517fca669fa70000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b158015610a2d575f5ffd5b505af1158015610a3f573d5f5f3e3d5ffd5b50506029546040517f7e6e12b300000000000000000000000000000000000000000000000000000000815263ffffffff861660048201525f93506001600160a01b039091169150637e6e12b3906024016020604051808303815f875af1158015610aab573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610acf9190618c18565b6028546040517fc58343ef000000000000000000000000000000000000000000000000000000008152600481018390529192505f916001600160a01b039091169063c58343ef906024015f60405180830381865afa158015610b33573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610b5a9190810190618dd0565b9050610b85815f01515f14156040518060600160405280603281526020016201809a60329139617dbb565b610bae81602001515f14604051806080016040528060488152602001620184db60489139617dbb565b6040517f48f50c0f000000000000000000000000000000000000000000000000000000008152620186a06004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906348f50c0f906024015f604051808303815f87803b158015610c13575f5ffd5b505af1158015610c25573d5f5f3e3d5ffd5b505050505f5a601f546040517fca669fa70000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b03166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b158015610ca1575f5ffd5b505af1158015610cb3573d5f5f3e3d5ffd5b50506027546040517fda8281160000000000000000000000000000000000000000000000000000000081526001600160a01b03909116925063da8281169150610d03908690602390600401618fcd565b5f604051808303815f87803b158015610d1a575f5ffd5b505af1158015610d2c573d5f5f3e3d5ffd5b505050505f5a90505f610d3f828461901a565b9050610d8a6040518060400160405280601981526020017f526571756573742043616c6c6261636b4761734c696d69743a00000000000000815250856040015163ffffffff16617c6b565b610dcd6040518060400160405280601981526020017f526571756573742043616c6c6261636b47617350726963653a000000000000008152508560200151617c6b565b610e0c6040518060400160405280600c81526020017f54782047617320757365643a000000000000000000000000000000000000000081525082617c6b565b610e4b6040518060400160405280601381526020017f5478204761732070726963652028776569293a000000000000000000000000008152503a617c6b565b60408051808201909152601481527f547820546f74616c20636f73742028776569293a0000000000000000000000006020820152610e9290610e8d3a84619033565b617c6b565b6027546040517fcd802c9100000000000000000000000000000000000000000000000000000000815260048101879052610f1e916001600160a01b03169063cd802c91906024015b602060405180830381865afa158015610ef5573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f199190619059565b617e0d565b602954604080517f360131890000000000000000000000000000000000000000000000000000000081529051610fc0926001600160a01b03169163360131899160048083019260209291908290030181865afa158015610f80573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fa49190618c18565b6023604051610fb39190619079565b6040518091039020617e8a565b6027546040517fcd802c91000000000000000000000000000000000000000000000000000000008152600481018790526001600160a01b039091169063cd802c9190602401602060405180830381865afa158015611020573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110449190619059565b1561105157611051618beb565b60275f9054906101000a90046001600160a01b03166001600160a01b031663e63b5d586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110a1573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110c59190618c18565b156110d2576110d2618beb565b60275f9054906101000a90046001600160a01b03166001600160a01b0316636f421ea96040518163ffffffff1660e01b81526004015f60405180830381865afa158015611121573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526111489190810190618b55565b511561115657611156618beb565b60275f9054906101000a90046001600160a01b03166001600160a01b031663571d70876040518163ffffffff1660e01b81526004015f60405180830381865afa1580156111a5573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526111cc9190810190618b55565b516001146111dc576111dc618beb565b6027546040517fb094728900000000000000000000000000000000000000000000000000000000815260048101879052611283916001600160a01b03169063b0947289906024015b602060405180830381865afa15801561123f573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112639190619059565b1560405180608001604052806043815260200162017fe360439139617dbb565b6027546040517fc58343ef000000000000000000000000000000000000000000000000000000008152600481018790525f916001600160a01b03169063c58343ef906024015f60405180830381865afa1580156112e2573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526113099190810190619108565b90506113328160c001516040518060600160405280603d815260200162017f49603d9139617dbb565b6028546040517fdc311dd3000000000000000000000000000000000000000000000000000000008152600481018f90526001600160a01b039091169063dc311dd3906024015f60405180830381865afa158015611391573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526113b89190810190618c6e565b50919d509b508e90505f6113da6bffffffffffffffffffffffff8f168361901a565b905061140d6040518060600160405280602c81526020016201806e602c91398f6bffffffffffffffffffffffff16617c6b565b611430604051806060016040528060278152602001620181046027913982617c6b565b611449828f6bffffffffffffffffffffffff1683617ee2565b61146f818a1015604051806080016040528060438152602001620182e460439139617dbb565b6114ad8e6bffffffffffffffffffffffff168261148c9190619242565b83146040518060600160405280602581526020016201825260259139617dbb565b6114db816114bb3a87619033565b1060405180606001604052806024815260200162017ef060249139617dbb565b61150b8d67ffffffffffffffff16600114604051806060016040528060298152602001620183ac60299139617dbb565b6027546040517fc58343ef000000000000000000000000000000000000000000000000000000008152600481018a90526001600160a01b039091169063c58343ef906024015f60405180830381865afa15801561156a573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526115919190810190619108565b92506115ba8360c001516040518060600160405280603d815260200162017f49603d9139617dbb565b61166860236040516115cc9190619079565b604051809103902060295f9054906101000a90046001600160a01b03166001600160a01b031663360131896040518163ffffffff1660e01b8152600401602060405180830381865afa158015611624573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116489190618c18565b14604051806060016040528060288152602001620182bc60289139617dbb565b602954604080517e6d6cae000000000000000000000000000000000000000000000000000000008152905161170e926001600160a01b031691626d6cae9160048083019260209291908290030181865afa1580156116c8573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116ec9190618c18565b6001146040518060600160405280602c8152602001620184af602c9139617dbb565b602854604080517f3bc32c7500000000000000000000000000000000000000000000000000000000815290516117c3926001600160a01b031691633bc32c759160048083019260209291908290030181865afa158015611770573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117949190619255565b6bffffffffffffffffffffffff165f146040518060800160405280604a815260200162018208604a9139617dbb565b6118698160285f9054906101000a90046001600160a01b03166001600160a01b031663995cb36e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611817573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061183b9190619255565b6bffffffffffffffffffffffff16146040518060600160405280604081526020016201819060409139617dbb565b601f546040517fca669fa70000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b03166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b1580156118dc575f5ffd5b505af11580156118ee573d5f5f3e3d5ffd5b5050601f546028546040517fbd18636b0000000000000000000000000000000000000000000000000000000081526101009092046001600160a01b039081166004840181905231945016915063bd18636b906024015f604051808303815f87803b15801561195a575f5ffd5b505af115801561196c573d5f5f3e3d5ffd5b5050601f546119b3925083915061199390859061010090046001600160a01b031631619242565b1160405180606001604052806035815260200162017f1460359139617dbb565b8e6bffffffffffffffffffffffff1660285f9054906101000a90046001600160a01b03166001600160a01b03166318e3dd276040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a12573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a369190619255565b6bffffffffffffffffffffffff1614611a5157611a51618beb565b5050505050505050505050505050505050565b6060601e805480602002602001604051908101604052809291908181526020015f905b82821015611b97575f84815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b82821015611b80578382905f5260205f20018054611af590618edf565b80601f0160208091040260200160405190810160405280929190818152602001828054611b2190618edf565b8015611b6c5780601f10611b4357610100808354040283529160200191611b6c565b820191905f5260205f20905b815481529060010190602001808311611b4f57829003601f168201915b505050505081526020019060010190611ad8565b505050508152505081526020019060010190611a87565b50505050905090565b60295f9054906101000a90046001600160a01b03166001600160a01b03166309c1ba2e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bf0573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c149190618c18565b15611c2157611c21618beb565b6020546028546729a2241af62c000091611c48916001600160a01b03918216911683617ace565b602980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169182179055604080517f09c1ba2e00000000000000000000000000000000000000000000000000000000815290515f92916309c1ba2e9160048083019260209291908290030181865afa158015611cd3573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611cf79190618c18565b9050805f03611d0857611d08618beb565b611d476040518060400160405280601281526020017f537562736372697074696f6e206964203d20000000000000000000000000000081525082617c6b565b6028546040517fdc311dd3000000000000000000000000000000000000000000000000000000008152600481018390525f918291829182916001600160a01b039091169063dc311dd3906024015f60405180830381865afa158015611dae573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611dd59190810190618c6e565b9350935093509350611df5846bffffffffffffffffffffffff1687617cde565b611e098367ffffffffffffffff165f617cde565b602954611e209083906001600160a01b0316617d5a565b611e2c81516001617cde565b6028546040517f4b1609350000000000000000000000000000000000000000000000000000000081526103e860048201819052915f916001600160a01b0390911690634b160935906024015b602060405180830381865afa158015611e93573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611eb79190618c18565b9050611efa5f82116040518060400160405280601581526020017f496e76616c696420726571756573742070726963650000000000000000000000815250617dbb565b6020546040517fca669fa70000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b158015611f69575f5ffd5b505af1158015611f7b573d5f5f3e3d5ffd5b50506029546040517f7e6e12b300000000000000000000000000000000000000000000000000000000815263ffffffff861660048201525f93506001600160a01b039091169150637e6e12b3906024016020604051808303815f875af1158015611fe7573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061200b9190618c18565b6028546040517fc58343ef000000000000000000000000000000000000000000000000000000008152600481018390529192505f916001600160a01b039091169063c58343ef906024015f60405180830381865afa15801561206f573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526120969190810190618dd0565b90506120c1815f01515f14156040518060600160405280603281526020016201809a60329139617dbb565b6120ea81602001515f14604051806080016040528060488152602001620184db60489139617dbb565b6040517f48f50c0f000000000000000000000000000000000000000000000000000000008152620186a06004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906348f50c0f906024015f604051808303815f87803b15801561214f575f5ffd5b505af1158015612161573d5f5f3e3d5ffd5b505050505f5a601f546040517fca669fa70000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b03166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b1580156121dd575f5ffd5b505af11580156121ef573d5f5f3e3d5ffd5b50506027546040517fda8281160000000000000000000000000000000000000000000000000000000081526001600160a01b03909116925063da828116915061223f908690602390600401618fcd565b5f604051808303815f87803b158015612256575f5ffd5b505af1158015612268573d5f5f3e3d5ffd5b505050505f5a90505f61227b828461901a565b90506122c66040518060400160405280601981526020017f526571756573742043616c6c6261636b4761734c696d69743a00000000000000815250856040015163ffffffff16617c6b565b6123096040518060400160405280601981526020017f526571756573742043616c6c6261636b47617350726963653a000000000000008152508560200151617c6b565b6123486040518060400160405280600c81526020017f54782047617320757365643a000000000000000000000000000000000000000081525082617c6b565b6123876040518060400160405280601381526020017f5478204761732070726963652028776569293a000000000000000000000000008152503a617c6b565b60408051808201909152601481527f547820546f74616c20636f73742028776569293a00000000000000000000000060208201526123c990610e8d3a84619033565b6027546040517fcd802c9100000000000000000000000000000000000000000000000000000000815260048101879052612415916001600160a01b03169063cd802c9190602401610eda565b6027546040517fcd802c91000000000000000000000000000000000000000000000000000000008152600481018790526001600160a01b039091169063cd802c9190602401602060405180830381865afa158015612475573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124999190619059565b156124a6576124a6618beb565b60275f9054906101000a90046001600160a01b03166001600160a01b031663e63b5d586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124f6573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061251a9190618c18565b1561252757612527618beb565b60275f9054906101000a90046001600160a01b03166001600160a01b0316636f421ea96040518163ffffffff1660e01b81526004015f60405180830381865afa158015612576573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261259d9190810190618b55565b51156125ab576125ab618beb565b60275f9054906101000a90046001600160a01b03166001600160a01b031663571d70876040518163ffffffff1660e01b81526004015f60405180830381865afa1580156125fa573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526126219190810190618b55565b5160011461263157612631618beb565b6027546040517fb09472890000000000000000000000000000000000000000000000000000000081526004810187905261267d916001600160a01b03169063b094728990602401611224565b6027546040517fc58343ef000000000000000000000000000000000000000000000000000000008152600481018790525f916001600160a01b03169063c58343ef906024015f60405180830381865afa1580156126dc573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526127039190810190619108565b905061272c8160c001516040518060600160405280603d815260200162017f49603d9139617dbb565b6028546040517fdc311dd3000000000000000000000000000000000000000000000000000000008152600481018f90526001600160a01b039091169063dc311dd3906024015f60405180830381865afa15801561278b573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526127b29190810190618c6e565b50919d509b508e90505f6127d46bffffffffffffffffffffffff8f168361901a565b90506128076040518060600160405280602c81526020016201806e602c91398f6bffffffffffffffffffffffff16617c6b565b61282a604051806060016040528060278152602001620181046027913982617c6b565b612843828f6bffffffffffffffffffffffff1683617ee2565b612869818a1015604051806080016040528060438152602001620182e460439139617dbb565b6128868e6bffffffffffffffffffffffff168261148c9190619242565b612894816114bb3a87619033565b6128c48d67ffffffffffffffff16600114604051806060016040528060298152602001620183ac60299139617dbb565b6027546040517fc58343ef000000000000000000000000000000000000000000000000000000008152600481018a90526001600160a01b039091169063c58343ef906024015f60405180830381865afa158015612923573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261294a9190810190619108565b92506129738360c001516040518060600160405280603d815260200162017f49603d9139617dbb565b61166860236040516129859190619079565b604051809103902060295f9054906101000a90046001600160a01b03166001600160a01b031663360131896040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129dd573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612a019190618c18565b14156040518060400160405280601481526020017f43616c6c6261636b2073686f756c64206661696c000000000000000000000000815250617dbb565b6060601880548060200260200160405190810160405280929190818152602001828054801561065a57602002820191905f5260205f209081546001600160a01b0316815260019091019060200180831161063c575050505050905090565b6060601780548060200260200160405190810160405280929190818152602001828054801561065a57602002820191905f5260205f209081546001600160a01b0316815260019091019060200180831161063c575050505050905090565b60295f9054906101000a90046001600160a01b03166001600160a01b03166309c1ba2e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b4a573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612b6e9190618c18565b15612b7b57612b7b618beb565b6020546028546729a2241af62c000091612ba2916001600160a01b03918216911683617ace565b602980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169182179055604080517f09c1ba2e00000000000000000000000000000000000000000000000000000000815290515f92916309c1ba2e9160048083019260209291908290030181865afa158015612c2d573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612c519190618c18565b9050805f03612c6257612c62618beb565b612ca16040518060400160405280601281526020017f537562736372697074696f6e206964203d20000000000000000000000000000081525082617c6b565b6028546040517fdc311dd3000000000000000000000000000000000000000000000000000000008152600481018390525f918291829182916001600160a01b039091169063dc311dd3906024015f60405180830381865afa158015612d08573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052612d2f9190810190618c6e565b9350935093509350612d4f846bffffffffffffffffffffffff1687617cde565b612d638367ffffffffffffffff165f617cde565b602954612d7a9083906001600160a01b0316617d5a565b612d8681516001617cde565b6028546040517f4b1609350000000000000000000000000000000000000000000000000000000081525f600482018190529182916001600160a01b0390911690634b16093590602401611e78565b602a8181548110612de3575f80fd5b5f918252602090912001546001600160a01b0316905081565b602054602854612e21916001600160a01b039081169116674563918244f40000617ace565b602980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039283161790556020546040517fca669fa70000000000000000000000000000000000000000000000000000000081529116600482018190523190737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b158015612ebf575f5ffd5b505af1158015612ed1573d5f5f3e3d5ffd5b50506029546020546040517f93d81d580000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152911692506393d81d5891506024015f604051808303815f87803b158015612f34575f5ffd5b505af1158015612f46573d5f5f3e3d5ffd5b505060208054604080516060810190915260388082526001600160a01b039092163194506104f0935085851192909190620181d090830139617dbb565b60295f9054906101000a90046001600160a01b03166001600160a01b03166309c1ba2e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612fd3573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612ff79190618c18565b1561300457613004618beb565b6020546028546729a2241af62c00009161302b916001600160a01b03918216911683617ace565b602980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169182179055604080517f09c1ba2e00000000000000000000000000000000000000000000000000000000815290515f92916309c1ba2e9160048083019260209291908290030181865afa1580156130b6573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906130da9190618c18565b9050805f036130eb576130eb618beb565b61312a6040518060400160405280601281526020017f537562736372697074696f6e206964203d20000000000000000000000000000081525082617c6b565b6028546040517fdc311dd3000000000000000000000000000000000000000000000000000000008152600481018390525f918291829182916001600160a01b039091169063dc311dd3906024015f60405180830381865afa158015613191573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526131b89190810190618c6e565b93509350935093506131d8846bffffffffffffffffffffffff1687617cde565b6131ec8367ffffffffffffffff165f617cde565b6029546132039083906001600160a01b0316617d5a565b61320f81516001617cde565b6028546040517f4b160935000000000000000000000000000000000000000000000000000000008152620186a060048201819052915f916001600160a01b0390911690634b16093590602401602060405180830381865afa158015613276573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061329a9190618c18565b90506132dd5f82116040518060400160405280601581526020017f496e76616c696420726571756573742070726963650000000000000000000000815250617dbb565b6020546040517fca669fa70000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b15801561334c575f5ffd5b505af115801561335e573d5f5f3e3d5ffd5b50506029546040517f7e6e12b300000000000000000000000000000000000000000000000000000000815263ffffffff861660048201525f93506001600160a01b039091169150637e6e12b3906024016020604051808303815f875af11580156133ca573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906133ee9190618c18565b6028546040517fc58343ef000000000000000000000000000000000000000000000000000000008152600481018390529192505f916001600160a01b039091169063c58343ef906024015f60405180830381865afa158015613452573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526134799190810190618dd0565b90506134a4815f01515f14156040518060600160405280603281526020016201809a60329139617dbb565b6134cd81602001515f14604051806080016040528060488152602001620184db60489139617dbb565b6028546040517fdc311dd3000000000000000000000000000000000000000000000000000000008152600481018b90526001600160a01b039091169063dc311dd3906024015f60405180830381865afa15801561352c573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526135539190810190618c6e565b50919950975061357390506bffffffffffffffffffffffff89168b617cde565b6135878767ffffffffffffffff165f617cde565b50505050505050505050565b602854601f546040517f91d148540000000000000000000000000000000000000000000000000000000081527fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177560048201526101009091046001600160a01b03908116602483015261364f9216906391d14854906044015b602060405180830381865afa158015613626573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061364a9190619059565b617f5e565b602754601f546040517f91d148540000000000000000000000000000000000000000000000000000000081527fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177560048201526101009091046001600160a01b0390811660248301526136cb9216906391d148549060440161360b565b6025546001600160a01b03166136e3576136e3618beb565b6026546001600160a01b03166136fb576136fb618beb565b6027546001600160a01b031661371357613713618beb565b6028546001600160a01b031661372b5761372b618beb565b6029546001600160a01b031661374357613743618beb565b602754604080517fe6b3ca7100000000000000000000000000000000000000000000000000000000815290515f926001600160a01b03169163e6b3ca719160048083019260209291908290030181865afa1580156137a3573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906137c7919061926e565b6001600160a01b0316036137dd576137dd618beb565b602654604080517f5f7c7522000000000000000000000000000000000000000000000000000000008152905161386a926001600160a01b031691635f7c7522916004808301925f9291908290030181865afa15801561383e573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526138659190810190619289565b617fb0565b602654604080517f5f7c752200000000000000000000000000000000000000000000000000000000815290516138f7926001600160a01b031691635f7c7522916004808301925f9291908290030181865afa1580156138cb573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526138f29190810190619289565b618024565b565b6060601b805480602002602001604051908101604052809291908181526020015f905b82821015611b97578382905f5260205f2090600202016040518060400160405290815f8201805461394c90618edf565b80601f016020809104026020016040519081016040528092919081815260200182805461397890618edf565b80156139c35780601f1061399a576101008083540402835291602001916139c3565b820191905f5260205f20905b8154815290600101906020018083116139a657829003601f168201915b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015613a5a57602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019060040190602082600301049283019260010382029150808411613a075790505b5050505050815250508152602001906001019061391c565b60295f9054906101000a90046001600160a01b03166001600160a01b03166309c1ba2e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613ac2573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613ae69190618c18565b15613af357613af3618beb565b6020546040517fca669fa70000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b158015613b62575f5ffd5b505af1158015613b74573d5f5f3e3d5ffd5b5050505060295f9054906101000a90046001600160a01b03166001600160a01b031663b96dbba7674563918244f400006040518263ffffffff1660e01b81526004015f604051808303818588803b158015613bcd575f5ffd5b505af1158015613bdf573d5f5f3e3d5ffd5b50506028546040517f4b1609350000000000000000000000000000000000000000000000000000000081525f60048201819052674563918244f40000955093508392506001600160a01b0390911690634b16093590602401602060405180830381865afa158015613c52573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613c769190618c18565b9050613c9b6040518060600160405280603281526020016201840d6032913982617c6b565b6020546040517fca669fa70000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b158015613d0a575f5ffd5b505af1158015613d1c573d5f5f3e3d5ffd5b50506029546040517f7e6e12b300000000000000000000000000000000000000000000000000000000815263ffffffff861660048201528593505f92506001600160a01b0390911690637e6e12b3906024016020604051808303815f875af1158015613d8a573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613dae9190618c18565b6028546040517fc58343ef000000000000000000000000000000000000000000000000000000008152600481018390529192505f916001600160a01b039091169063c58343ef906024015f60405180830381865afa158015613e12573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052613e399190810190618dd0565b9050613e708363ffffffff16826040015163ffffffff16146040518060800160405280604881526020016201802660489139617dbb565b613e99815f01515f14156040518060600160405280603281526020016201809a60329139617dbb565b613ec281602001515f14604051806080016040528060488152602001620184db60489139617dbb565b613eeb828260600151146040518060600160405280604081526020016201812b60409139617dbb565b6020546040517fca669fa70000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b158015613f5a575f5ffd5b505af1158015613f6c573d5f5f3e3d5ffd5b50506040805160048082526024820183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb42f66e80000000000000000000000000000000000000000000000000000000017905291517ff28dceb3000000000000000000000000000000000000000000000000000000008152737109709ecfa91a80626ff3989d68f67f5b1dd12d945063f28dceb3935061401292016192bb565b5f604051808303815f87803b158015614029575f5ffd5b505af115801561403b573d5f5f3e3d5ffd5b50506029546020546040517f93d81d580000000000000000000000000000000000000000000000000000000081526001600160a01b039182166004820152911692506393d81d5891506024015f604051808303815f87803b15801561409e575f5ffd5b505af11580156140b0573d5f5f3e3d5ffd5b505050506141768660285f9054906101000a90046001600160a01b03166001600160a01b03166318e3dd276040518163ffffffff1660e01b8152600401602060405180830381865afa158015614108573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061412c9190619255565b6bffffffffffffffffffffffff16146040518060400160405280601081526020017f55736572206e6f74206368617267656400000000000000000000000000000000815250617dbb565b505050505050565b6060601a805480602002602001604051908101604052809291908181526020015f905b82821015611b97578382905f5260205f200180546141be90618edf565b80601f01602080910402602001604051908101604052809291908181526020018280546141ea90618edf565b80156142355780601f1061420c57610100808354040283529160200191614235565b820191905f5260205f20905b81548152906001019060200180831161421857829003601f168201915b5050505050815260200190600101906141a1565b60295f9054906101000a90046001600160a01b03166001600160a01b03166309c1ba2e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614299573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906142bd9190618c18565b156142ca576142ca618beb565b6028546040517f4b160935000000000000000000000000000000000000000000000000000000008152620186a060048201819052915f916001600160a01b0390911690634b16093590602401602060405180830381865afa158015614331573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906143559190618c18565b90506143985f82116040518060400160405280601581526020017f496e76616c696420726571756573742070726963650000000000000000000000815250617dbb565b6020546028546143b5916001600160a01b03908116911683617ace565b602980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039283161790556020546040517fca669fa700000000000000000000000000000000000000000000000000000000815291166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b15801561444f575f5ffd5b505af1158015614461573d5f5f3e3d5ffd5b50506029546040517f7e6e12b300000000000000000000000000000000000000000000000000000000815263ffffffff861660048201525f93506001600160a01b039091169150637e6e12b3906024016020604051808303815f875af11580156144cd573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906144f19190618c18565b6028546040517fc58343ef000000000000000000000000000000000000000000000000000000008152600481018390529192505f916001600160a01b039091169063c58343ef906024015f60405180830381865afa158015614555573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261457c9190810190618dd0565b90506145a7815f01515f14156040518060600160405280603281526020016201809a60329139617dbb565b6145d081602001515f14604051806080016040528060488152602001620184db60489139617dbb565b6040517f48f50c0f000000000000000000000000000000000000000000000000000000008152620186a06004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906348f50c0f906024015f604051808303815f87803b158015614635575f5ffd5b505af1158015614647573d5f5f3e3d5ffd5b505050505f5a601f546040517fca669fa70000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b03166004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b1580156146c3575f5ffd5b505af11580156146d5573d5f5f3e3d5ffd5b50506027546040517fda8281160000000000000000000000000000000000000000000000000000000081526001600160a01b03909116925063da8281169150614725908690602390600401618fcd565b5f604051808303815f87803b15801561473c575f5ffd5b505af115801561474e573d5f5f3e3d5ffd5b505050505f5a90505f614761828461901a565b90506147ac6040518060400160405280601981526020017f526571756573742043616c6c6261636b4761734c696d69743a00000000000000815250856040015163ffffffff16617c6b565b6147ef6040518060400160405280601981526020017f526571756573742043616c6c6261636b47617350726963653a000000000000008152508560200151617c6b565b61482e6040518060400160405280600c81526020017f54782047617320757365643a000000000000000000000000000000000000000081525082617c6b565b61486d6040518060400160405280601381526020017f5478204761732070726963652028776569293a000000000000000000000000008152503a617c6b565b60408051808201909152601481527f547820546f74616c20636f73742028776569293a00000000000000000000000060208201526148af90610e8d3a84619033565b6027546040517fcd802c91000000000000000000000000000000000000000000000000000000008152600481018790526148fb916001600160a01b03169063cd802c9190602401610eda565b602954604080517f36013189000000000000000000000000000000000000000000000000000000008152905161495d926001600160a01b03169163360131899160048083019260209291908290030181865afa158015610f80573d5f5f3e3d5ffd5b6027546040517fcd802c91000000000000000000000000000000000000000000000000000000008152600481018790526001600160a01b039091169063cd802c9190602401602060405180830381865afa1580156149bd573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906149e19190619059565b156149ee576149ee618beb565b60275f9054906101000a90046001600160a01b03166001600160a01b031663e63b5d586040518163ffffffff1660e01b8152600401602060405180830381865afa158015614a3e573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190614a629190618c18565b15614a6f57614a6f618beb565b60275f9054906101000a90046001600160a01b03166001600160a01b0316636f421ea96040518163ffffffff1660e01b81526004015f60405180830381865afa158015614abe573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052614ae59190810190618b55565b5115614af357614af3618beb565b60275f9054906101000a90046001600160a01b03166001600160a01b031663571d70876040518163ffffffff1660e01b81526004015f60405180830381865afa158015614b42573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052614b699190810190618b55565b51600114614b7957614b79618beb565b6027546040517fb094728900000000000000000000000000000000000000000000000000000000815260048101879052614bc5916001600160a01b03169063b094728990602401611224565b6027546040517fc58343ef000000000000000000000000000000000000000000000000000000008152600481018790525f916001600160a01b03169063c58343ef906024015f60405180830381865afa158015614c24573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052614c4b9190810190619108565b9050614c748160c001516040518060600160405280603d815260200162017f49603d9139617dbb565b60285485516040517fdc311dd300000000000000000000000000000000000000000000000000000000815260048101919091525f916001600160a01b03169063dc311dd3906024015f60405180830381865afa158015614cd6573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052614cfd9190810190618c6e565b509192508991505f9050614d1f6bffffffffffffffffffffffff84168361901a565b9050614d526040518060600160405280602c81526020016201806e602c9139846bffffffffffffffffffffffff16617c6b565b614d75604051806060016040528060278152602001620181046027913982617c6b565b614d8e82846bffffffffffffffffffffffff1683617ee2565b614db4818b1015604051806080016040528060438152602001620182e460439139617dbb565b614dcf61148c6bffffffffffffffffffffffff851683619242565b614ddd816114bb3a88619033565b6027546040517fc58343ef000000000000000000000000000000000000000000000000000000008152600481018b90526001600160a01b039091169063c58343ef906024015f60405180830381865afa158015614e3c573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052614e639190810190619108565b9350614e8c8460c001516040518060600160405280603d815260200162017f49603d9139617dbb565b614e9e60236040516115cc9190619079565b602954604080517e6d6cae0000000000000000000000000000000000000000000000000000000081529051614efe926001600160a01b031691626d6cae9160048083019260209291908290030181865afa1580156116c8573d5f5f3e3d5ffd5b602854604080517f3bc32c750000000000000000000000000000000000000000000000000000000081529051614f60926001600160a01b031691633bc32c759160048083019260209291908290030181865afa158015611770573d5f5f3e3d5ffd5b614fb48160285f9054906101000a90046001600160a01b03166001600160a01b031663995cb36e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611817573d5f5f3e3d5ffd5b601f546040517fca669fa70000000000000000000000000000000000000000000000000000000081526101009091046001600160a01b03166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa7906024015f604051808303815f87803b158015615027575f5ffd5b505af1158015615039573d5f5f3e3d5ffd5b5050601f546028546040517fbd18636b0000000000000000000000000000000000000000000000000000000081526101009092046001600160a01b039081166004840181905231945016915063bd18636b906024015f604051808303815f87803b1580156150a5575f5ffd5b505af11580156150b7573d5f5f3e3d5ffd5b5050601f546150de925083915061199390859061010090046001600160a01b031631619242565b602854604080517f18e3dd2700000000000000000000000000000000000000000000000000000000815290516bffffffffffffffffffffffff8716926001600160a01b0316916318e3dd279160048083019260209291908290030181865afa15801561514c573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906151709190619255565b6bffffffffffffffffffffffff161461518b5761518b618beb565b505050505050505050505050565b6060601d805480602002602001604051908101604052809291908181526020015f905b82821015611b97575f8481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561527757602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116152245790505b505050505081525050815260200190600101906151bc565b6060601c805480602002602001604051908101604052809291908181526020015f905b82821015611b97575f8481526020908190206040805180820182526002860290920180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801561536d57602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161531a5790505b505050505081525050815260200190600101906152b2565b60606019805480602002602001604051908101604052809291908181526020015f905b82821015611b97578382905f5260205f200180546153c590618edf565b80601f01602080910402602001604051908101604052809291908181526020018280546153f190618edf565b801561543c5780601f106154135761010080835404028352916020019161543c565b820191905f5260205f20905b81548152906001019060200180831161541f57829003601f168201915b5050505050815260200190600101906153a8565b6008545f9060ff1615615467575060085460ff1690565b6040517f667f9d70000000000000000000000000000000000000000000000000000000008152737109709ecfa91a80626ff3989d68f67f5b1dd12d600482018190527f6661696c6564000000000000000000000000000000000000000000000000000060248301525f9163667f9d7090604401602060405180830381865afa1580156154f5573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906155199190618c18565b1415905090565b602854602754604080518082018252600581527f424e323534000000000000000000000000000000000000000000000000000000602082015290517f317e6e73000000000000000000000000000000000000000000000000000000008152600a936001935f9373__$485e63c703b57fb39db2d057ed0b990874$$485e63c703b57fb39db2d057ed0b990874$";
var isSuperArgs7 = (xs) => {
  return typeof xs[0] === "string" || Array.isArray(xs[0]) || "_isInterface" in xs[0];
};
var _SubscriptionFundingTest__factory = class _SubscriptionFundingTest__factory extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs7(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi9,
        _SubscriptionFundingTest__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }
  static linkBytecode(linkLibraryAddresses) {
    let linkedBytecode = _bytecode7;
    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$485e63c703b57fb39db2d057ed0b990874\\$__", "g"),
      linkLibraryAddresses["src/randomness/Randomness.sol:Randomness"].replace(/^0x/, "").toLowerCase()
    );
    return linkedBytecode;
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi9);
  }
  static connect(address, runner) {
    return new Contract(
      address,
      _abi9,
      runner
    );
  }
};
_SubscriptionFundingTest__factory.bytecode = _bytecode7;
_SubscriptionFundingTest__factory.abi = _abi9;
var SubscriptionFundingTest__factory = _SubscriptionFundingTest__factory;

// src/generated/factories/Vm.sol/Vm__factory.ts
var _abi10 = [
  {
    type: "function",
    name: "accesses",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "readSlots",
        type: "bytes32[]",
        internalType: "bytes32[]"
      },
      {
        name: "writeSlots",
        type: "bytes32[]",
        internalType: "bytes32[]"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "activeFork",
    inputs: [],
    outputs: [
      {
        name: "forkId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "addr",
    inputs: [
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "keyAddr",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "allowCheatcodes",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "assertApproxEqAbs",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "maxDelta",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqAbs",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "maxDelta",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqAbs",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "maxDelta",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqAbs",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "maxDelta",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqAbsDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "maxDelta",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqAbsDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "maxDelta",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqAbsDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "maxDelta",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqAbsDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "maxDelta",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqRel",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "maxPercentDelta",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqRel",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "maxPercentDelta",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqRel",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "maxPercentDelta",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqRel",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "maxPercentDelta",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqRelDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "maxPercentDelta",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqRelDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "maxPercentDelta",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqRelDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "maxPercentDelta",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqRelDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "maxPercentDelta",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "bytes32[]",
        internalType: "bytes32[]"
      },
      {
        name: "right",
        type: "bytes32[]",
        internalType: "bytes32[]"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "int256[]",
        internalType: "int256[]"
      },
      {
        name: "right",
        type: "int256[]",
        internalType: "int256[]"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "address",
        internalType: "address"
      },
      {
        name: "right",
        type: "address",
        internalType: "address"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "string",
        internalType: "string"
      },
      {
        name: "right",
        type: "string",
        internalType: "string"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "address[]",
        internalType: "address[]"
      },
      {
        name: "right",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "address[]",
        internalType: "address[]"
      },
      {
        name: "right",
        type: "address[]",
        internalType: "address[]"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "right",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "address",
        internalType: "address"
      },
      {
        name: "right",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "uint256[]",
        internalType: "uint256[]"
      },
      {
        name: "right",
        type: "uint256[]",
        internalType: "uint256[]"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "bool[]",
        internalType: "bool[]"
      },
      {
        name: "right",
        type: "bool[]",
        internalType: "bool[]"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "int256[]",
        internalType: "int256[]"
      },
      {
        name: "right",
        type: "int256[]",
        internalType: "int256[]"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "right",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "uint256[]",
        internalType: "uint256[]"
      },
      {
        name: "right",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "right",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "right",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "string[]",
        internalType: "string[]"
      },
      {
        name: "right",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "bytes32[]",
        internalType: "bytes32[]"
      },
      {
        name: "right",
        type: "bytes32[]",
        internalType: "bytes32[]"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "right",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "bool[]",
        internalType: "bool[]"
      },
      {
        name: "right",
        type: "bool[]",
        internalType: "bool[]"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "bytes[]",
        internalType: "bytes[]"
      },
      {
        name: "right",
        type: "bytes[]",
        internalType: "bytes[]"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "string[]",
        internalType: "string[]"
      },
      {
        name: "right",
        type: "string[]",
        internalType: "string[]"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "string",
        internalType: "string"
      },
      {
        name: "right",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "bytes[]",
        internalType: "bytes[]"
      },
      {
        name: "right",
        type: "bytes[]",
        internalType: "bytes[]"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "right",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEqDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEqDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEqDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEqDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertFalse",
    inputs: [
      {
        name: "condition",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertFalse",
    inputs: [
      {
        name: "condition",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGe",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGe",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGe",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGe",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGeDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGeDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGeDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGeDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGt",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGt",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGt",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGt",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGtDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGtDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGtDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGtDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLe",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLe",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLe",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLe",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLeDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLeDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLeDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLeDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLt",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLt",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLt",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLt",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLtDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLtDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLtDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLtDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "bytes32[]",
        internalType: "bytes32[]"
      },
      {
        name: "right",
        type: "bytes32[]",
        internalType: "bytes32[]"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "int256[]",
        internalType: "int256[]"
      },
      {
        name: "right",
        type: "int256[]",
        internalType: "int256[]"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "right",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "bytes[]",
        internalType: "bytes[]"
      },
      {
        name: "right",
        type: "bytes[]",
        internalType: "bytes[]"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "right",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "bool[]",
        internalType: "bool[]"
      },
      {
        name: "right",
        type: "bool[]",
        internalType: "bool[]"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "right",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "address[]",
        internalType: "address[]"
      },
      {
        name: "right",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "uint256[]",
        internalType: "uint256[]"
      },
      {
        name: "right",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "bool[]",
        internalType: "bool[]"
      },
      {
        name: "right",
        type: "bool[]",
        internalType: "bool[]"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "string",
        internalType: "string"
      },
      {
        name: "right",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "address[]",
        internalType: "address[]"
      },
      {
        name: "right",
        type: "address[]",
        internalType: "address[]"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "string",
        internalType: "string"
      },
      {
        name: "right",
        type: "string",
        internalType: "string"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "address",
        internalType: "address"
      },
      {
        name: "right",
        type: "address",
        internalType: "address"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "right",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "right",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "uint256[]",
        internalType: "uint256[]"
      },
      {
        name: "right",
        type: "uint256[]",
        internalType: "uint256[]"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "address",
        internalType: "address"
      },
      {
        name: "right",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "right",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "string[]",
        internalType: "string[]"
      },
      {
        name: "right",
        type: "string[]",
        internalType: "string[]"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "bytes32[]",
        internalType: "bytes32[]"
      },
      {
        name: "right",
        type: "bytes32[]",
        internalType: "bytes32[]"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "string[]",
        internalType: "string[]"
      },
      {
        name: "right",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "int256[]",
        internalType: "int256[]"
      },
      {
        name: "right",
        type: "int256[]",
        internalType: "int256[]"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "bytes[]",
        internalType: "bytes[]"
      },
      {
        name: "right",
        type: "bytes[]",
        internalType: "bytes[]"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEqDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEqDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEqDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEqDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertTrue",
    inputs: [
      {
        name: "condition",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertTrue",
    inputs: [
      {
        name: "condition",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assume",
    inputs: [
      {
        name: "condition",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assumeNoRevert",
    inputs: [],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assumeNoRevert",
    inputs: [
      {
        name: "potentialReverts",
        type: "tuple[]",
        internalType: "struct VmSafe.PotentialRevert[]",
        components: [
          {
            name: "reverter",
            type: "address",
            internalType: "address"
          },
          {
            name: "partialMatch",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "revertData",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assumeNoRevert",
    inputs: [
      {
        name: "potentialRevert",
        type: "tuple",
        internalType: "struct VmSafe.PotentialRevert",
        components: [
          {
            name: "reverter",
            type: "address",
            internalType: "address"
          },
          {
            name: "partialMatch",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "revertData",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "attachDelegation",
    inputs: [
      {
        name: "signedDelegation",
        type: "tuple",
        internalType: "struct VmSafe.SignedDelegation",
        components: [
          {
            name: "v",
            type: "uint8",
            internalType: "uint8"
          },
          {
            name: "r",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "s",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "nonce",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "implementation",
            type: "address",
            internalType: "address"
          }
        ]
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "blobBaseFee",
    inputs: [
      {
        name: "newBlobBaseFee",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "blobhashes",
    inputs: [
      {
        name: "hashes",
        type: "bytes32[]",
        internalType: "bytes32[]"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "breakpoint",
    inputs: [
      {
        name: "char",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "breakpoint",
    inputs: [
      {
        name: "char",
        type: "string",
        internalType: "string"
      },
      {
        name: "value",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "broadcast",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "broadcast",
    inputs: [
      {
        name: "signer",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "broadcast",
    inputs: [
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "broadcastRawTransaction",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "chainId",
    inputs: [
      {
        name: "newChainId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "clearMockedCalls",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "cloneAccount",
    inputs: [
      {
        name: "source",
        type: "address",
        internalType: "address"
      },
      {
        name: "target",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "closeFile",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "coinbase",
    inputs: [
      {
        name: "newCoinbase",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "computeCreate2Address",
    inputs: [
      {
        name: "salt",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "initCodeHash",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "computeCreate2Address",
    inputs: [
      {
        name: "salt",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "initCodeHash",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "deployer",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "computeCreateAddress",
    inputs: [
      {
        name: "deployer",
        type: "address",
        internalType: "address"
      },
      {
        name: "nonce",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "contains",
    inputs: [
      {
        name: "subject",
        type: "string",
        internalType: "string"
      },
      {
        name: "search",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "result",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "copyFile",
    inputs: [
      {
        name: "from",
        type: "string",
        internalType: "string"
      },
      {
        name: "to",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "copied",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "copyStorage",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "createDir",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      },
      {
        name: "recursive",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "createFork",
    inputs: [
      {
        name: "urlOrAlias",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "forkId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "createFork",
    inputs: [
      {
        name: "urlOrAlias",
        type: "string",
        internalType: "string"
      },
      {
        name: "blockNumber",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "forkId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "createFork",
    inputs: [
      {
        name: "urlOrAlias",
        type: "string",
        internalType: "string"
      },
      {
        name: "txHash",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "forkId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "createSelectFork",
    inputs: [
      {
        name: "urlOrAlias",
        type: "string",
        internalType: "string"
      },
      {
        name: "blockNumber",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "forkId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "createSelectFork",
    inputs: [
      {
        name: "urlOrAlias",
        type: "string",
        internalType: "string"
      },
      {
        name: "txHash",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "forkId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "createSelectFork",
    inputs: [
      {
        name: "urlOrAlias",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "forkId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "createWallet",
    inputs: [
      {
        name: "walletLabel",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "wallet",
        type: "tuple",
        internalType: "struct VmSafe.Wallet",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "publicKeyX",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "publicKeyY",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "privateKey",
            type: "uint256",
            internalType: "uint256"
          }
        ]
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "createWallet",
    inputs: [
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "wallet",
        type: "tuple",
        internalType: "struct VmSafe.Wallet",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "publicKeyX",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "publicKeyY",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "privateKey",
            type: "uint256",
            internalType: "uint256"
          }
        ]
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "createWallet",
    inputs: [
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "walletLabel",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "wallet",
        type: "tuple",
        internalType: "struct VmSafe.Wallet",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "publicKeyX",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "publicKeyY",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "privateKey",
            type: "uint256",
            internalType: "uint256"
          }
        ]
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "deal",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      },
      {
        name: "newBalance",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "deleteSnapshot",
    inputs: [
      {
        name: "snapshotId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "success",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "deleteSnapshots",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "deleteStateSnapshot",
    inputs: [
      {
        name: "snapshotId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "success",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "deleteStateSnapshots",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "deployCode",
    inputs: [
      {
        name: "artifactPath",
        type: "string",
        internalType: "string"
      },
      {
        name: "constructorArgs",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "deployedAddress",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "deployCode",
    inputs: [
      {
        name: "artifactPath",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "deployedAddress",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "deriveKey",
    inputs: [
      {
        name: "mnemonic",
        type: "string",
        internalType: "string"
      },
      {
        name: "derivationPath",
        type: "string",
        internalType: "string"
      },
      {
        name: "index",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "language",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "deriveKey",
    inputs: [
      {
        name: "mnemonic",
        type: "string",
        internalType: "string"
      },
      {
        name: "index",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "language",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "deriveKey",
    inputs: [
      {
        name: "mnemonic",
        type: "string",
        internalType: "string"
      },
      {
        name: "index",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    outputs: [
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "deriveKey",
    inputs: [
      {
        name: "mnemonic",
        type: "string",
        internalType: "string"
      },
      {
        name: "derivationPath",
        type: "string",
        internalType: "string"
      },
      {
        name: "index",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    outputs: [
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "difficulty",
    inputs: [
      {
        name: "newDifficulty",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "dumpState",
    inputs: [
      {
        name: "pathToStateJson",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "ensNamehash",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "envAddress",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envAddress",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "delim",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envBool",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envBool",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "delim",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "bool[]",
        internalType: "bool[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envBytes",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envBytes",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "delim",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "bytes[]",
        internalType: "bytes[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envBytes32",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "delim",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "bytes32[]",
        internalType: "bytes32[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envBytes32",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envExists",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "result",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envInt",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "delim",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "int256[]",
        internalType: "int256[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envInt",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "int256",
        internalType: "int256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envOr",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "delim",
        type: "string",
        internalType: "string"
      },
      {
        name: "defaultValue",
        type: "bytes32[]",
        internalType: "bytes32[]"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "bytes32[]",
        internalType: "bytes32[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envOr",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "delim",
        type: "string",
        internalType: "string"
      },
      {
        name: "defaultValue",
        type: "int256[]",
        internalType: "int256[]"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "int256[]",
        internalType: "int256[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envOr",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "defaultValue",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envOr",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "defaultValue",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envOr",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "defaultValue",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envOr",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "delim",
        type: "string",
        internalType: "string"
      },
      {
        name: "defaultValue",
        type: "bytes[]",
        internalType: "bytes[]"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "bytes[]",
        internalType: "bytes[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envOr",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "delim",
        type: "string",
        internalType: "string"
      },
      {
        name: "defaultValue",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envOr",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "delim",
        type: "string",
        internalType: "string"
      },
      {
        name: "defaultValue",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envOr",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "defaultValue",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envOr",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "defaultValue",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envOr",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "defaultValue",
        type: "int256",
        internalType: "int256"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "int256",
        internalType: "int256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envOr",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "delim",
        type: "string",
        internalType: "string"
      },
      {
        name: "defaultValue",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envOr",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "defaultValue",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envOr",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "delim",
        type: "string",
        internalType: "string"
      },
      {
        name: "defaultValue",
        type: "bool[]",
        internalType: "bool[]"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "bool[]",
        internalType: "bool[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envString",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "delim",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envString",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envUint",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envUint",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "delim",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "etch",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address"
      },
      {
        name: "newRuntimeBytecode",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "eth_getLogs",
    inputs: [
      {
        name: "fromBlock",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "toBlock",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "target",
        type: "address",
        internalType: "address"
      },
      {
        name: "topics",
        type: "bytes32[]",
        internalType: "bytes32[]"
      }
    ],
    outputs: [
      {
        name: "logs",
        type: "tuple[]",
        internalType: "struct VmSafe.EthGetLogs[]",
        components: [
          {
            name: "emitter",
            type: "address",
            internalType: "address"
          },
          {
            name: "topics",
            type: "bytes32[]",
            internalType: "bytes32[]"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "blockHash",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "blockNumber",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "transactionHash",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "transactionIndex",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "logIndex",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "removed",
            type: "bool",
            internalType: "bool"
          }
        ]
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "exists",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "result",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "expectCall",
    inputs: [
      {
        name: "callee",
        type: "address",
        internalType: "address"
      },
      {
        name: "msgValue",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "gas",
        type: "uint64",
        internalType: "uint64"
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectCall",
    inputs: [
      {
        name: "callee",
        type: "address",
        internalType: "address"
      },
      {
        name: "msgValue",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "gas",
        type: "uint64",
        internalType: "uint64"
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "count",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectCall",
    inputs: [
      {
        name: "callee",
        type: "address",
        internalType: "address"
      },
      {
        name: "msgValue",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "count",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectCall",
    inputs: [
      {
        name: "callee",
        type: "address",
        internalType: "address"
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectCall",
    inputs: [
      {
        name: "callee",
        type: "address",
        internalType: "address"
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "count",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectCall",
    inputs: [
      {
        name: "callee",
        type: "address",
        internalType: "address"
      },
      {
        name: "msgValue",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectCallMinGas",
    inputs: [
      {
        name: "callee",
        type: "address",
        internalType: "address"
      },
      {
        name: "msgValue",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "minGas",
        type: "uint64",
        internalType: "uint64"
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectCallMinGas",
    inputs: [
      {
        name: "callee",
        type: "address",
        internalType: "address"
      },
      {
        name: "msgValue",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "minGas",
        type: "uint64",
        internalType: "uint64"
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "count",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectEmit",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectEmit",
    inputs: [
      {
        name: "checkTopic1",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "checkTopic2",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "checkTopic3",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "checkData",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectEmit",
    inputs: [
      {
        name: "count",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectEmit",
    inputs: [
      {
        name: "checkTopic1",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "checkTopic2",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "checkTopic3",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "checkData",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "count",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectEmit",
    inputs: [
      {
        name: "checkTopic1",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "checkTopic2",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "checkTopic3",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "checkData",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "emitter",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectEmit",
    inputs: [
      {
        name: "emitter",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectEmit",
    inputs: [
      {
        name: "emitter",
        type: "address",
        internalType: "address"
      },
      {
        name: "count",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectEmit",
    inputs: [
      {
        name: "checkTopic1",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "checkTopic2",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "checkTopic3",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "checkData",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "emitter",
        type: "address",
        internalType: "address"
      },
      {
        name: "count",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectEmitAnonymous",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectEmitAnonymous",
    inputs: [
      {
        name: "emitter",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectEmitAnonymous",
    inputs: [
      {
        name: "checkTopic0",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "checkTopic1",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "checkTopic2",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "checkTopic3",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "checkData",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "emitter",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectEmitAnonymous",
    inputs: [
      {
        name: "checkTopic0",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "checkTopic1",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "checkTopic2",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "checkTopic3",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "checkData",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectPartialRevert",
    inputs: [
      {
        name: "revertData",
        type: "bytes4",
        internalType: "bytes4"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectPartialRevert",
    inputs: [
      {
        name: "revertData",
        type: "bytes4",
        internalType: "bytes4"
      },
      {
        name: "reverter",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectRevert",
    inputs: [
      {
        name: "reverter",
        type: "address",
        internalType: "address"
      },
      {
        name: "count",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectRevert",
    inputs: [
      {
        name: "revertData",
        type: "bytes4",
        internalType: "bytes4"
      },
      {
        name: "reverter",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectRevert",
    inputs: [
      {
        name: "revertData",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "count",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectRevert",
    inputs: [
      {
        name: "count",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectRevert",
    inputs: [
      {
        name: "revertData",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "reverter",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectRevert",
    inputs: [
      {
        name: "revertData",
        type: "bytes4",
        internalType: "bytes4"
      },
      {
        name: "reverter",
        type: "address",
        internalType: "address"
      },
      {
        name: "count",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectRevert",
    inputs: [
      {
        name: "revertData",
        type: "bytes4",
        internalType: "bytes4"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectRevert",
    inputs: [
      {
        name: "revertData",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "reverter",
        type: "address",
        internalType: "address"
      },
      {
        name: "count",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectRevert",
    inputs: [
      {
        name: "reverter",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectRevert",
    inputs: [
      {
        name: "revertData",
        type: "bytes4",
        internalType: "bytes4"
      },
      {
        name: "count",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectRevert",
    inputs: [
      {
        name: "revertData",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectRevert",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectSafeMemory",
    inputs: [
      {
        name: "min",
        type: "uint64",
        internalType: "uint64"
      },
      {
        name: "max",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "expectSafeMemoryCall",
    inputs: [
      {
        name: "min",
        type: "uint64",
        internalType: "uint64"
      },
      {
        name: "max",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "fee",
    inputs: [
      {
        name: "newBasefee",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "ffi",
    inputs: [
      {
        name: "commandInput",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    outputs: [
      {
        name: "result",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "fsMetadata",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "metadata",
        type: "tuple",
        internalType: "struct VmSafe.FsMetadata",
        components: [
          {
            name: "isDir",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "isSymlink",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "length",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "readOnly",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "modified",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "accessed",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "created",
            type: "uint256",
            internalType: "uint256"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getArtifactPathByCode",
    inputs: [
      {
        name: "code",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getArtifactPathByDeployedCode",
    inputs: [
      {
        name: "deployedCode",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getBlobBaseFee",
    inputs: [],
    outputs: [
      {
        name: "blobBaseFee",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getBlobhashes",
    inputs: [],
    outputs: [
      {
        name: "hashes",
        type: "bytes32[]",
        internalType: "bytes32[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getBlockNumber",
    inputs: [],
    outputs: [
      {
        name: "height",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getBlockTimestamp",
    inputs: [],
    outputs: [
      {
        name: "timestamp",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getBroadcast",
    inputs: [
      {
        name: "contractName",
        type: "string",
        internalType: "string"
      },
      {
        name: "chainId",
        type: "uint64",
        internalType: "uint64"
      },
      {
        name: "txType",
        type: "uint8",
        internalType: "enum VmSafe.BroadcastTxType"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct VmSafe.BroadcastTxSummary",
        components: [
          {
            name: "txHash",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "txType",
            type: "uint8",
            internalType: "enum VmSafe.BroadcastTxType"
          },
          {
            name: "contractAddress",
            type: "address",
            internalType: "address"
          },
          {
            name: "blockNumber",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "success",
            type: "bool",
            internalType: "bool"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getBroadcasts",
    inputs: [
      {
        name: "contractName",
        type: "string",
        internalType: "string"
      },
      {
        name: "chainId",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple[]",
        internalType: "struct VmSafe.BroadcastTxSummary[]",
        components: [
          {
            name: "txHash",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "txType",
            type: "uint8",
            internalType: "enum VmSafe.BroadcastTxType"
          },
          {
            name: "contractAddress",
            type: "address",
            internalType: "address"
          },
          {
            name: "blockNumber",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "success",
            type: "bool",
            internalType: "bool"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getBroadcasts",
    inputs: [
      {
        name: "contractName",
        type: "string",
        internalType: "string"
      },
      {
        name: "chainId",
        type: "uint64",
        internalType: "uint64"
      },
      {
        name: "txType",
        type: "uint8",
        internalType: "enum VmSafe.BroadcastTxType"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple[]",
        internalType: "struct VmSafe.BroadcastTxSummary[]",
        components: [
          {
            name: "txHash",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "txType",
            type: "uint8",
            internalType: "enum VmSafe.BroadcastTxType"
          },
          {
            name: "contractAddress",
            type: "address",
            internalType: "address"
          },
          {
            name: "blockNumber",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "success",
            type: "bool",
            internalType: "bool"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getCode",
    inputs: [
      {
        name: "artifactPath",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "creationBytecode",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getDeployedCode",
    inputs: [
      {
        name: "artifactPath",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "runtimeBytecode",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getDeployment",
    inputs: [
      {
        name: "contractName",
        type: "string",
        internalType: "string"
      },
      {
        name: "chainId",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [
      {
        name: "deployedAddress",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getDeployment",
    inputs: [
      {
        name: "contractName",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "deployedAddress",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getDeployments",
    inputs: [
      {
        name: "contractName",
        type: "string",
        internalType: "string"
      },
      {
        name: "chainId",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [
      {
        name: "deployedAddresses",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getFoundryVersion",
    inputs: [],
    outputs: [
      {
        name: "version",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getLabel",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "currentLabel",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getMappingKeyAndParentOf",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address"
      },
      {
        name: "elementSlot",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "found",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "key",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "parent",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "getMappingLength",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address"
      },
      {
        name: "mappingSlot",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "length",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "getMappingSlotAt",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address"
      },
      {
        name: "mappingSlot",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "idx",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "getNonce",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "nonce",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getNonce",
    inputs: [
      {
        name: "wallet",
        type: "tuple",
        internalType: "struct VmSafe.Wallet",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "publicKeyX",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "publicKeyY",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "privateKey",
            type: "uint256",
            internalType: "uint256"
          }
        ]
      }
    ],
    outputs: [
      {
        name: "nonce",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "getRecordedLogs",
    inputs: [],
    outputs: [
      {
        name: "logs",
        type: "tuple[]",
        internalType: "struct VmSafe.Log[]",
        components: [
          {
            name: "topics",
            type: "bytes32[]",
            internalType: "bytes32[]"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "emitter",
            type: "address",
            internalType: "address"
          }
        ]
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "getStateDiff",
    inputs: [],
    outputs: [
      {
        name: "diff",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getStateDiffJson",
    inputs: [],
    outputs: [
      {
        name: "diff",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getWallets",
    inputs: [],
    outputs: [
      {
        name: "wallets",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "indexOf",
    inputs: [
      {
        name: "input",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "isContext",
    inputs: [
      {
        name: "context",
        type: "uint8",
        internalType: "enum VmSafe.ForgeContext"
      }
    ],
    outputs: [
      {
        name: "result",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "isDir",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "result",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "isFile",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "result",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "isPersistent",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "persistent",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "keyExists",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "keyExistsJson",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "keyExistsToml",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "label",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      },
      {
        name: "newLabel",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "lastCallGas",
    inputs: [],
    outputs: [
      {
        name: "gas",
        type: "tuple",
        internalType: "struct VmSafe.Gas",
        components: [
          {
            name: "gasLimit",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "gasTotalUsed",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "gasMemoryUsed",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "gasRefunded",
            type: "int64",
            internalType: "int64"
          },
          {
            name: "gasRemaining",
            type: "uint64",
            internalType: "uint64"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "load",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address"
      },
      {
        name: "slot",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "data",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "loadAllocs",
    inputs: [
      {
        name: "pathToAllocsJson",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "makePersistent",
    inputs: [
      {
        name: "accounts",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "makePersistent",
    inputs: [
      {
        name: "account0",
        type: "address",
        internalType: "address"
      },
      {
        name: "account1",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "makePersistent",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "makePersistent",
    inputs: [
      {
        name: "account0",
        type: "address",
        internalType: "address"
      },
      {
        name: "account1",
        type: "address",
        internalType: "address"
      },
      {
        name: "account2",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "mockCall",
    inputs: [
      {
        name: "callee",
        type: "address",
        internalType: "address"
      },
      {
        name: "data",
        type: "bytes4",
        internalType: "bytes4"
      },
      {
        name: "returnData",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "mockCall",
    inputs: [
      {
        name: "callee",
        type: "address",
        internalType: "address"
      },
      {
        name: "msgValue",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "returnData",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "mockCall",
    inputs: [
      {
        name: "callee",
        type: "address",
        internalType: "address"
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "returnData",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "mockCall",
    inputs: [
      {
        name: "callee",
        type: "address",
        internalType: "address"
      },
      {
        name: "msgValue",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "data",
        type: "bytes4",
        internalType: "bytes4"
      },
      {
        name: "returnData",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "mockCallRevert",
    inputs: [
      {
        name: "callee",
        type: "address",
        internalType: "address"
      },
      {
        name: "data",
        type: "bytes4",
        internalType: "bytes4"
      },
      {
        name: "revertData",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "mockCallRevert",
    inputs: [
      {
        name: "callee",
        type: "address",
        internalType: "address"
      },
      {
        name: "msgValue",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "data",
        type: "bytes4",
        internalType: "bytes4"
      },
      {
        name: "revertData",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "mockCallRevert",
    inputs: [
      {
        name: "callee",
        type: "address",
        internalType: "address"
      },
      {
        name: "msgValue",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "revertData",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "mockCallRevert",
    inputs: [
      {
        name: "callee",
        type: "address",
        internalType: "address"
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "revertData",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "mockCalls",
    inputs: [
      {
        name: "callee",
        type: "address",
        internalType: "address"
      },
      {
        name: "msgValue",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "returnData",
        type: "bytes[]",
        internalType: "bytes[]"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "mockCalls",
    inputs: [
      {
        name: "callee",
        type: "address",
        internalType: "address"
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "returnData",
        type: "bytes[]",
        internalType: "bytes[]"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "mockFunction",
    inputs: [
      {
        name: "callee",
        type: "address",
        internalType: "address"
      },
      {
        name: "target",
        type: "address",
        internalType: "address"
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "parseAddress",
    inputs: [
      {
        name: "stringifiedValue",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "parsedValue",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseBool",
    inputs: [
      {
        name: "stringifiedValue",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "parsedValue",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseBytes",
    inputs: [
      {
        name: "stringifiedValue",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "parsedValue",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseBytes32",
    inputs: [
      {
        name: "stringifiedValue",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "parsedValue",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseInt",
    inputs: [
      {
        name: "stringifiedValue",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "parsedValue",
        type: "int256",
        internalType: "int256"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJson",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "abiEncodedData",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJson",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "abiEncodedData",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonAddress",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonAddressArray",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonBool",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonBoolArray",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool[]",
        internalType: "bool[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonBytes",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonBytes32",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonBytes32Array",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes32[]",
        internalType: "bytes32[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonBytesArray",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes[]",
        internalType: "bytes[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonInt",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "int256",
        internalType: "int256"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonIntArray",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "int256[]",
        internalType: "int256[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonKeys",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "keys",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonString",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonStringArray",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonType",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "typeDescription",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonType",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      },
      {
        name: "typeDescription",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonTypeArray",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      },
      {
        name: "typeDescription",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonUint",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonUintArray",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseToml",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "abiEncodedData",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseToml",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "abiEncodedData",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlAddress",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlAddressArray",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlBool",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlBoolArray",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool[]",
        internalType: "bool[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlBytes",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlBytes32",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlBytes32Array",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes32[]",
        internalType: "bytes32[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlBytesArray",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes[]",
        internalType: "bytes[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlInt",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "int256",
        internalType: "int256"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlIntArray",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "int256[]",
        internalType: "int256[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlKeys",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "keys",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlString",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlStringArray",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlType",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "typeDescription",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlType",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      },
      {
        name: "typeDescription",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlTypeArray",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      },
      {
        name: "typeDescription",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlUint",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlUintArray",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseUint",
    inputs: [
      {
        name: "stringifiedValue",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "parsedValue",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "pauseGasMetering",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "pauseTracing",
    inputs: [],
    outputs: [],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "prank",
    inputs: [
      {
        name: "msgSender",
        type: "address",
        internalType: "address"
      },
      {
        name: "txOrigin",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "prank",
    inputs: [
      {
        name: "msgSender",
        type: "address",
        internalType: "address"
      },
      {
        name: "txOrigin",
        type: "address",
        internalType: "address"
      },
      {
        name: "delegateCall",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "prank",
    inputs: [
      {
        name: "msgSender",
        type: "address",
        internalType: "address"
      },
      {
        name: "delegateCall",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "prank",
    inputs: [
      {
        name: "msgSender",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "prevrandao",
    inputs: [
      {
        name: "newPrevrandao",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "prevrandao",
    inputs: [
      {
        name: "newPrevrandao",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "projectRoot",
    inputs: [],
    outputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "prompt",
    inputs: [
      {
        name: "promptText",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "input",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "promptAddress",
    inputs: [
      {
        name: "promptText",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "promptSecret",
    inputs: [
      {
        name: "promptText",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "input",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "promptSecretUint",
    inputs: [
      {
        name: "promptText",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "promptUint",
    inputs: [
      {
        name: "promptText",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "publicKeyP256",
    inputs: [
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "publicKeyX",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "publicKeyY",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "randomAddress",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "randomBool",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "randomBytes",
    inputs: [
      {
        name: "len",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "randomBytes4",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "randomBytes8",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes8",
        internalType: "bytes8"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "randomInt",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "int256",
        internalType: "int256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "randomInt",
    inputs: [
      {
        name: "bits",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "int256",
        internalType: "int256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "randomUint",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "randomUint",
    inputs: [
      {
        name: "bits",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "randomUint",
    inputs: [
      {
        name: "min",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "max",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "readCallers",
    inputs: [],
    outputs: [
      {
        name: "callerMode",
        type: "uint8",
        internalType: "enum VmSafe.CallerMode"
      },
      {
        name: "msgSender",
        type: "address",
        internalType: "address"
      },
      {
        name: "txOrigin",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "readDir",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      },
      {
        name: "maxDepth",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [
      {
        name: "entries",
        type: "tuple[]",
        internalType: "struct VmSafe.DirEntry[]",
        components: [
          {
            name: "errorMessage",
            type: "string",
            internalType: "string"
          },
          {
            name: "path",
            type: "string",
            internalType: "string"
          },
          {
            name: "depth",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "isDir",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "isSymlink",
            type: "bool",
            internalType: "bool"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "readDir",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      },
      {
        name: "maxDepth",
        type: "uint64",
        internalType: "uint64"
      },
      {
        name: "followLinks",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [
      {
        name: "entries",
        type: "tuple[]",
        internalType: "struct VmSafe.DirEntry[]",
        components: [
          {
            name: "errorMessage",
            type: "string",
            internalType: "string"
          },
          {
            name: "path",
            type: "string",
            internalType: "string"
          },
          {
            name: "depth",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "isDir",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "isSymlink",
            type: "bool",
            internalType: "bool"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "readDir",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "entries",
        type: "tuple[]",
        internalType: "struct VmSafe.DirEntry[]",
        components: [
          {
            name: "errorMessage",
            type: "string",
            internalType: "string"
          },
          {
            name: "path",
            type: "string",
            internalType: "string"
          },
          {
            name: "depth",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "isDir",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "isSymlink",
            type: "bool",
            internalType: "bool"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "readFile",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "data",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "readFileBinary",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "readLine",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "line",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "readLink",
    inputs: [
      {
        name: "linkPath",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "targetPath",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "record",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "recordLogs",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "rememberKey",
    inputs: [
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "keyAddr",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "rememberKeys",
    inputs: [
      {
        name: "mnemonic",
        type: "string",
        internalType: "string"
      },
      {
        name: "derivationPath",
        type: "string",
        internalType: "string"
      },
      {
        name: "count",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    outputs: [
      {
        name: "keyAddrs",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "rememberKeys",
    inputs: [
      {
        name: "mnemonic",
        type: "string",
        internalType: "string"
      },
      {
        name: "derivationPath",
        type: "string",
        internalType: "string"
      },
      {
        name: "language",
        type: "string",
        internalType: "string"
      },
      {
        name: "count",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    outputs: [
      {
        name: "keyAddrs",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "removeDir",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      },
      {
        name: "recursive",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "removeFile",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "replace",
    inputs: [
      {
        name: "input",
        type: "string",
        internalType: "string"
      },
      {
        name: "from",
        type: "string",
        internalType: "string"
      },
      {
        name: "to",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "output",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "resetGasMetering",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "resetNonce",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "resumeGasMetering",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "resumeTracing",
    inputs: [],
    outputs: [],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "revertTo",
    inputs: [
      {
        name: "snapshotId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "success",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "revertToAndDelete",
    inputs: [
      {
        name: "snapshotId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "success",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "revertToState",
    inputs: [
      {
        name: "snapshotId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "success",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "revertToStateAndDelete",
    inputs: [
      {
        name: "snapshotId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "success",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "revokePersistent",
    inputs: [
      {
        name: "accounts",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "revokePersistent",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "roll",
    inputs: [
      {
        name: "newHeight",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "rollFork",
    inputs: [
      {
        name: "txHash",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "rollFork",
    inputs: [
      {
        name: "forkId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "blockNumber",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "rollFork",
    inputs: [
      {
        name: "blockNumber",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "rollFork",
    inputs: [
      {
        name: "forkId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "txHash",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "rpc",
    inputs: [
      {
        name: "urlOrAlias",
        type: "string",
        internalType: "string"
      },
      {
        name: "method",
        type: "string",
        internalType: "string"
      },
      {
        name: "params",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "rpc",
    inputs: [
      {
        name: "method",
        type: "string",
        internalType: "string"
      },
      {
        name: "params",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "rpcUrl",
    inputs: [
      {
        name: "rpcAlias",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "rpcUrlStructs",
    inputs: [],
    outputs: [
      {
        name: "urls",
        type: "tuple[]",
        internalType: "struct VmSafe.Rpc[]",
        components: [
          {
            name: "key",
            type: "string",
            internalType: "string"
          },
          {
            name: "url",
            type: "string",
            internalType: "string"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "rpcUrls",
    inputs: [],
    outputs: [
      {
        name: "urls",
        type: "string[2][]",
        internalType: "string[2][]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "selectFork",
    inputs: [
      {
        name: "forkId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeAddress",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "values",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeAddress",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "value",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeBool",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "values",
        type: "bool[]",
        internalType: "bool[]"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeBool",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "value",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeBytes",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "values",
        type: "bytes[]",
        internalType: "bytes[]"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeBytes",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "value",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeBytes32",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "values",
        type: "bytes32[]",
        internalType: "bytes32[]"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeBytes32",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "value",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeInt",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "value",
        type: "int256",
        internalType: "int256"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeInt",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "values",
        type: "int256[]",
        internalType: "int256[]"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeJson",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "value",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeJsonType",
    inputs: [
      {
        name: "typeDescription",
        type: "string",
        internalType: "string"
      },
      {
        name: "value",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "serializeJsonType",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "typeDescription",
        type: "string",
        internalType: "string"
      },
      {
        name: "value",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeString",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "values",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeString",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "value",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeUint",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeUint",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "values",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeUintToHex",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "setArbitraryStorage",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "setBlockhash",
    inputs: [
      {
        name: "blockNumber",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "blockHash",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "setEnv",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "value",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "setNonce",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      },
      {
        name: "newNonce",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "setNonceUnsafe",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      },
      {
        name: "newNonce",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "sign",
    inputs: [
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "v",
        type: "uint8",
        internalType: "uint8"
      },
      {
        name: "r",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "s",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "sign",
    inputs: [
      {
        name: "signer",
        type: "address",
        internalType: "address"
      },
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "v",
        type: "uint8",
        internalType: "uint8"
      },
      {
        name: "r",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "s",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "sign",
    inputs: [
      {
        name: "wallet",
        type: "tuple",
        internalType: "struct VmSafe.Wallet",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "publicKeyX",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "publicKeyY",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "privateKey",
            type: "uint256",
            internalType: "uint256"
          }
        ]
      },
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "v",
        type: "uint8",
        internalType: "uint8"
      },
      {
        name: "r",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "s",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "sign",
    inputs: [
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "v",
        type: "uint8",
        internalType: "uint8"
      },
      {
        name: "r",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "s",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "signAndAttachDelegation",
    inputs: [
      {
        name: "implementation",
        type: "address",
        internalType: "address"
      },
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "signedDelegation",
        type: "tuple",
        internalType: "struct VmSafe.SignedDelegation",
        components: [
          {
            name: "v",
            type: "uint8",
            internalType: "uint8"
          },
          {
            name: "r",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "s",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "nonce",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "implementation",
            type: "address",
            internalType: "address"
          }
        ]
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "signCompact",
    inputs: [
      {
        name: "wallet",
        type: "tuple",
        internalType: "struct VmSafe.Wallet",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "publicKeyX",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "publicKeyY",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "privateKey",
            type: "uint256",
            internalType: "uint256"
          }
        ]
      },
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "r",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "vs",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "signCompact",
    inputs: [
      {
        name: "signer",
        type: "address",
        internalType: "address"
      },
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "r",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "vs",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "signCompact",
    inputs: [
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "r",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "vs",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "signCompact",
    inputs: [
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "r",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "vs",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "signDelegation",
    inputs: [
      {
        name: "implementation",
        type: "address",
        internalType: "address"
      },
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "signedDelegation",
        type: "tuple",
        internalType: "struct VmSafe.SignedDelegation",
        components: [
          {
            name: "v",
            type: "uint8",
            internalType: "uint8"
          },
          {
            name: "r",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "s",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "nonce",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "implementation",
            type: "address",
            internalType: "address"
          }
        ]
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "signP256",
    inputs: [
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "r",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "s",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "skip",
    inputs: [
      {
        name: "skipTest",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "reason",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "skip",
    inputs: [
      {
        name: "skipTest",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "sleep",
    inputs: [
      {
        name: "duration",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "snapshot",
    inputs: [],
    outputs: [
      {
        name: "snapshotId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "snapshotGasLastCall",
    inputs: [
      {
        name: "group",
        type: "string",
        internalType: "string"
      },
      {
        name: "name",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "gasUsed",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "snapshotGasLastCall",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "gasUsed",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "snapshotState",
    inputs: [],
    outputs: [
      {
        name: "snapshotId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "snapshotValue",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "snapshotValue",
    inputs: [
      {
        name: "group",
        type: "string",
        internalType: "string"
      },
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "split",
    inputs: [
      {
        name: "input",
        type: "string",
        internalType: "string"
      },
      {
        name: "delimiter",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "outputs",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "startBroadcast",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "startBroadcast",
    inputs: [
      {
        name: "signer",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "startBroadcast",
    inputs: [
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "startDebugTraceRecording",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "startMappingRecording",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "startPrank",
    inputs: [
      {
        name: "msgSender",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "startPrank",
    inputs: [
      {
        name: "msgSender",
        type: "address",
        internalType: "address"
      },
      {
        name: "delegateCall",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "startPrank",
    inputs: [
      {
        name: "msgSender",
        type: "address",
        internalType: "address"
      },
      {
        name: "txOrigin",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "startPrank",
    inputs: [
      {
        name: "msgSender",
        type: "address",
        internalType: "address"
      },
      {
        name: "txOrigin",
        type: "address",
        internalType: "address"
      },
      {
        name: "delegateCall",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "startSnapshotGas",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "startSnapshotGas",
    inputs: [
      {
        name: "group",
        type: "string",
        internalType: "string"
      },
      {
        name: "name",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "startStateDiffRecording",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "stopAndReturnDebugTraceRecording",
    inputs: [],
    outputs: [
      {
        name: "step",
        type: "tuple[]",
        internalType: "struct VmSafe.DebugStep[]",
        components: [
          {
            name: "stack",
            type: "uint256[]",
            internalType: "uint256[]"
          },
          {
            name: "memoryInput",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "opcode",
            type: "uint8",
            internalType: "uint8"
          },
          {
            name: "depth",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "isOutOfGas",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "contractAddr",
            type: "address",
            internalType: "address"
          }
        ]
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "stopAndReturnStateDiff",
    inputs: [],
    outputs: [
      {
        name: "accountAccesses",
        type: "tuple[]",
        internalType: "struct VmSafe.AccountAccess[]",
        components: [
          {
            name: "chainInfo",
            type: "tuple",
            internalType: "struct VmSafe.ChainInfo",
            components: [
              {
                name: "forkId",
                type: "uint256",
                internalType: "uint256"
              },
              {
                name: "chainId",
                type: "uint256",
                internalType: "uint256"
              }
            ]
          },
          {
            name: "kind",
            type: "uint8",
            internalType: "enum VmSafe.AccountAccessKind"
          },
          {
            name: "account",
            type: "address",
            internalType: "address"
          },
          {
            name: "accessor",
            type: "address",
            internalType: "address"
          },
          {
            name: "initialized",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "oldBalance",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "newBalance",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "deployedCode",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "value",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "reverted",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "storageAccesses",
            type: "tuple[]",
            internalType: "struct VmSafe.StorageAccess[]",
            components: [
              {
                name: "account",
                type: "address",
                internalType: "address"
              },
              {
                name: "slot",
                type: "bytes32",
                internalType: "bytes32"
              },
              {
                name: "isWrite",
                type: "bool",
                internalType: "bool"
              },
              {
                name: "previousValue",
                type: "bytes32",
                internalType: "bytes32"
              },
              {
                name: "newValue",
                type: "bytes32",
                internalType: "bytes32"
              },
              {
                name: "reverted",
                type: "bool",
                internalType: "bool"
              }
            ]
          },
          {
            name: "depth",
            type: "uint64",
            internalType: "uint64"
          }
        ]
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "stopBroadcast",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "stopExpectSafeMemory",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "stopMappingRecording",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "stopPrank",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "stopSnapshotGas",
    inputs: [
      {
        name: "group",
        type: "string",
        internalType: "string"
      },
      {
        name: "name",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "gasUsed",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "stopSnapshotGas",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "gasUsed",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "stopSnapshotGas",
    inputs: [],
    outputs: [
      {
        name: "gasUsed",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "store",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address"
      },
      {
        name: "slot",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "value",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "toBase64",
    inputs: [
      {
        name: "data",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "toBase64",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "toBase64URL",
    inputs: [
      {
        name: "data",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "toBase64URL",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "toLowercase",
    inputs: [
      {
        name: "input",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "output",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "toString",
    inputs: [
      {
        name: "value",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "stringifiedValue",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "toString",
    inputs: [
      {
        name: "value",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "stringifiedValue",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "toString",
    inputs: [
      {
        name: "value",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "stringifiedValue",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "toString",
    inputs: [
      {
        name: "value",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [
      {
        name: "stringifiedValue",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "toString",
    inputs: [
      {
        name: "value",
        type: "int256",
        internalType: "int256"
      }
    ],
    outputs: [
      {
        name: "stringifiedValue",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "toString",
    inputs: [
      {
        name: "value",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "stringifiedValue",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "toUppercase",
    inputs: [
      {
        name: "input",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "output",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "transact",
    inputs: [
      {
        name: "forkId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "txHash",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "transact",
    inputs: [
      {
        name: "txHash",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "trim",
    inputs: [
      {
        name: "input",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "output",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "tryFfi",
    inputs: [
      {
        name: "commandInput",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    outputs: [
      {
        name: "result",
        type: "tuple",
        internalType: "struct VmSafe.FfiResult",
        components: [
          {
            name: "exitCode",
            type: "int32",
            internalType: "int32"
          },
          {
            name: "stdout",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "stderr",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "txGasPrice",
    inputs: [
      {
        name: "newGasPrice",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "unixTime",
    inputs: [],
    outputs: [
      {
        name: "milliseconds",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "warp",
    inputs: [
      {
        name: "newTimestamp",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "writeFile",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      },
      {
        name: "data",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "writeFileBinary",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "writeJson",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "path",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "writeJson",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "writeLine",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      },
      {
        name: "data",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "writeToml",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "path",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "writeToml",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  }
];
var Vm__factory = class {
  static createInterface() {
    return new Interface(_abi10);
  }
  static connect(address, runner) {
    return new Contract(address, _abi10, runner);
  }
};
Vm__factory.abi = _abi10;

// src/generated/factories/Vm.sol/VmSafe__factory.ts
var _abi11 = [
  {
    type: "function",
    name: "accesses",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "readSlots",
        type: "bytes32[]",
        internalType: "bytes32[]"
      },
      {
        name: "writeSlots",
        type: "bytes32[]",
        internalType: "bytes32[]"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "addr",
    inputs: [
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "keyAddr",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqAbs",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "maxDelta",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqAbs",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "maxDelta",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqAbs",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "maxDelta",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqAbs",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "maxDelta",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqAbsDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "maxDelta",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqAbsDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "maxDelta",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqAbsDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "maxDelta",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqAbsDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "maxDelta",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqRel",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "maxPercentDelta",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqRel",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "maxPercentDelta",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqRel",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "maxPercentDelta",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqRel",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "maxPercentDelta",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqRelDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "maxPercentDelta",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqRelDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "maxPercentDelta",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqRelDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "maxPercentDelta",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertApproxEqRelDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "maxPercentDelta",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "bytes32[]",
        internalType: "bytes32[]"
      },
      {
        name: "right",
        type: "bytes32[]",
        internalType: "bytes32[]"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "int256[]",
        internalType: "int256[]"
      },
      {
        name: "right",
        type: "int256[]",
        internalType: "int256[]"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "address",
        internalType: "address"
      },
      {
        name: "right",
        type: "address",
        internalType: "address"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "string",
        internalType: "string"
      },
      {
        name: "right",
        type: "string",
        internalType: "string"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "address[]",
        internalType: "address[]"
      },
      {
        name: "right",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "address[]",
        internalType: "address[]"
      },
      {
        name: "right",
        type: "address[]",
        internalType: "address[]"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "right",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "address",
        internalType: "address"
      },
      {
        name: "right",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "uint256[]",
        internalType: "uint256[]"
      },
      {
        name: "right",
        type: "uint256[]",
        internalType: "uint256[]"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "bool[]",
        internalType: "bool[]"
      },
      {
        name: "right",
        type: "bool[]",
        internalType: "bool[]"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "int256[]",
        internalType: "int256[]"
      },
      {
        name: "right",
        type: "int256[]",
        internalType: "int256[]"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "right",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "uint256[]",
        internalType: "uint256[]"
      },
      {
        name: "right",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "right",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "right",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "string[]",
        internalType: "string[]"
      },
      {
        name: "right",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "bytes32[]",
        internalType: "bytes32[]"
      },
      {
        name: "right",
        type: "bytes32[]",
        internalType: "bytes32[]"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "right",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "bool[]",
        internalType: "bool[]"
      },
      {
        name: "right",
        type: "bool[]",
        internalType: "bool[]"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "bytes[]",
        internalType: "bytes[]"
      },
      {
        name: "right",
        type: "bytes[]",
        internalType: "bytes[]"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "string[]",
        internalType: "string[]"
      },
      {
        name: "right",
        type: "string[]",
        internalType: "string[]"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "string",
        internalType: "string"
      },
      {
        name: "right",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "bytes[]",
        internalType: "bytes[]"
      },
      {
        name: "right",
        type: "bytes[]",
        internalType: "bytes[]"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "right",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEq",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEqDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEqDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEqDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertEqDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertFalse",
    inputs: [
      {
        name: "condition",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertFalse",
    inputs: [
      {
        name: "condition",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGe",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGe",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGe",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGe",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGeDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGeDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGeDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGeDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGt",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGt",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGt",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGt",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGtDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGtDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGtDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertGtDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLe",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLe",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLe",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLe",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLeDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLeDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLeDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLeDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLt",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLt",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLt",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLt",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLtDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLtDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLtDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertLtDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "bytes32[]",
        internalType: "bytes32[]"
      },
      {
        name: "right",
        type: "bytes32[]",
        internalType: "bytes32[]"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "int256[]",
        internalType: "int256[]"
      },
      {
        name: "right",
        type: "int256[]",
        internalType: "int256[]"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "right",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "bytes[]",
        internalType: "bytes[]"
      },
      {
        name: "right",
        type: "bytes[]",
        internalType: "bytes[]"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "right",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "bool[]",
        internalType: "bool[]"
      },
      {
        name: "right",
        type: "bool[]",
        internalType: "bool[]"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "right",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "address[]",
        internalType: "address[]"
      },
      {
        name: "right",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "uint256[]",
        internalType: "uint256[]"
      },
      {
        name: "right",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "bool[]",
        internalType: "bool[]"
      },
      {
        name: "right",
        type: "bool[]",
        internalType: "bool[]"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "string",
        internalType: "string"
      },
      {
        name: "right",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "address[]",
        internalType: "address[]"
      },
      {
        name: "right",
        type: "address[]",
        internalType: "address[]"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "string",
        internalType: "string"
      },
      {
        name: "right",
        type: "string",
        internalType: "string"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "address",
        internalType: "address"
      },
      {
        name: "right",
        type: "address",
        internalType: "address"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "right",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "right",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "uint256[]",
        internalType: "uint256[]"
      },
      {
        name: "right",
        type: "uint256[]",
        internalType: "uint256[]"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "address",
        internalType: "address"
      },
      {
        name: "right",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "right",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "string[]",
        internalType: "string[]"
      },
      {
        name: "right",
        type: "string[]",
        internalType: "string[]"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "bytes32[]",
        internalType: "bytes32[]"
      },
      {
        name: "right",
        type: "bytes32[]",
        internalType: "bytes32[]"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "string[]",
        internalType: "string[]"
      },
      {
        name: "right",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "int256[]",
        internalType: "int256[]"
      },
      {
        name: "right",
        type: "int256[]",
        internalType: "int256[]"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "bytes[]",
        internalType: "bytes[]"
      },
      {
        name: "right",
        type: "bytes[]",
        internalType: "bytes[]"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEq",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEqDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEqDecimal",
    inputs: [
      {
        name: "left",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "right",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEqDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertNotEqDecimal",
    inputs: [
      {
        name: "left",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "right",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertTrue",
    inputs: [
      {
        name: "condition",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assertTrue",
    inputs: [
      {
        name: "condition",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "error",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assume",
    inputs: [
      {
        name: "condition",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assumeNoRevert",
    inputs: [],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assumeNoRevert",
    inputs: [
      {
        name: "potentialReverts",
        type: "tuple[]",
        internalType: "struct VmSafe.PotentialRevert[]",
        components: [
          {
            name: "reverter",
            type: "address",
            internalType: "address"
          },
          {
            name: "partialMatch",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "revertData",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "assumeNoRevert",
    inputs: [
      {
        name: "potentialRevert",
        type: "tuple",
        internalType: "struct VmSafe.PotentialRevert",
        components: [
          {
            name: "reverter",
            type: "address",
            internalType: "address"
          },
          {
            name: "partialMatch",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "revertData",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "attachDelegation",
    inputs: [
      {
        name: "signedDelegation",
        type: "tuple",
        internalType: "struct VmSafe.SignedDelegation",
        components: [
          {
            name: "v",
            type: "uint8",
            internalType: "uint8"
          },
          {
            name: "r",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "s",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "nonce",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "implementation",
            type: "address",
            internalType: "address"
          }
        ]
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "breakpoint",
    inputs: [
      {
        name: "char",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "breakpoint",
    inputs: [
      {
        name: "char",
        type: "string",
        internalType: "string"
      },
      {
        name: "value",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "broadcast",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "broadcast",
    inputs: [
      {
        name: "signer",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "broadcast",
    inputs: [
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "broadcastRawTransaction",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "closeFile",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "computeCreate2Address",
    inputs: [
      {
        name: "salt",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "initCodeHash",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "computeCreate2Address",
    inputs: [
      {
        name: "salt",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "initCodeHash",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "deployer",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "computeCreateAddress",
    inputs: [
      {
        name: "deployer",
        type: "address",
        internalType: "address"
      },
      {
        name: "nonce",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "contains",
    inputs: [
      {
        name: "subject",
        type: "string",
        internalType: "string"
      },
      {
        name: "search",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "result",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "copyFile",
    inputs: [
      {
        name: "from",
        type: "string",
        internalType: "string"
      },
      {
        name: "to",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "copied",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "copyStorage",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "createDir",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      },
      {
        name: "recursive",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "createWallet",
    inputs: [
      {
        name: "walletLabel",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "wallet",
        type: "tuple",
        internalType: "struct VmSafe.Wallet",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "publicKeyX",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "publicKeyY",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "privateKey",
            type: "uint256",
            internalType: "uint256"
          }
        ]
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "createWallet",
    inputs: [
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "wallet",
        type: "tuple",
        internalType: "struct VmSafe.Wallet",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "publicKeyX",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "publicKeyY",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "privateKey",
            type: "uint256",
            internalType: "uint256"
          }
        ]
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "createWallet",
    inputs: [
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "walletLabel",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "wallet",
        type: "tuple",
        internalType: "struct VmSafe.Wallet",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "publicKeyX",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "publicKeyY",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "privateKey",
            type: "uint256",
            internalType: "uint256"
          }
        ]
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "deployCode",
    inputs: [
      {
        name: "artifactPath",
        type: "string",
        internalType: "string"
      },
      {
        name: "constructorArgs",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "deployedAddress",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "deployCode",
    inputs: [
      {
        name: "artifactPath",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "deployedAddress",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "deriveKey",
    inputs: [
      {
        name: "mnemonic",
        type: "string",
        internalType: "string"
      },
      {
        name: "derivationPath",
        type: "string",
        internalType: "string"
      },
      {
        name: "index",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "language",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "deriveKey",
    inputs: [
      {
        name: "mnemonic",
        type: "string",
        internalType: "string"
      },
      {
        name: "index",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "language",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "deriveKey",
    inputs: [
      {
        name: "mnemonic",
        type: "string",
        internalType: "string"
      },
      {
        name: "index",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    outputs: [
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "deriveKey",
    inputs: [
      {
        name: "mnemonic",
        type: "string",
        internalType: "string"
      },
      {
        name: "derivationPath",
        type: "string",
        internalType: "string"
      },
      {
        name: "index",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    outputs: [
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "ensNamehash",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "envAddress",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envAddress",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "delim",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envBool",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envBool",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "delim",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "bool[]",
        internalType: "bool[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envBytes",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envBytes",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "delim",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "bytes[]",
        internalType: "bytes[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envBytes32",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "delim",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "bytes32[]",
        internalType: "bytes32[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envBytes32",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envExists",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "result",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envInt",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "delim",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "int256[]",
        internalType: "int256[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envInt",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "int256",
        internalType: "int256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envOr",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "delim",
        type: "string",
        internalType: "string"
      },
      {
        name: "defaultValue",
        type: "bytes32[]",
        internalType: "bytes32[]"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "bytes32[]",
        internalType: "bytes32[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envOr",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "delim",
        type: "string",
        internalType: "string"
      },
      {
        name: "defaultValue",
        type: "int256[]",
        internalType: "int256[]"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "int256[]",
        internalType: "int256[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envOr",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "defaultValue",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envOr",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "defaultValue",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envOr",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "defaultValue",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envOr",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "delim",
        type: "string",
        internalType: "string"
      },
      {
        name: "defaultValue",
        type: "bytes[]",
        internalType: "bytes[]"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "bytes[]",
        internalType: "bytes[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envOr",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "delim",
        type: "string",
        internalType: "string"
      },
      {
        name: "defaultValue",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envOr",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "delim",
        type: "string",
        internalType: "string"
      },
      {
        name: "defaultValue",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envOr",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "defaultValue",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envOr",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "defaultValue",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envOr",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "defaultValue",
        type: "int256",
        internalType: "int256"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "int256",
        internalType: "int256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envOr",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "delim",
        type: "string",
        internalType: "string"
      },
      {
        name: "defaultValue",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envOr",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "defaultValue",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envOr",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "delim",
        type: "string",
        internalType: "string"
      },
      {
        name: "defaultValue",
        type: "bool[]",
        internalType: "bool[]"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "bool[]",
        internalType: "bool[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envString",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "delim",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envString",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envUint",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "envUint",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "delim",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "eth_getLogs",
    inputs: [
      {
        name: "fromBlock",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "toBlock",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "target",
        type: "address",
        internalType: "address"
      },
      {
        name: "topics",
        type: "bytes32[]",
        internalType: "bytes32[]"
      }
    ],
    outputs: [
      {
        name: "logs",
        type: "tuple[]",
        internalType: "struct VmSafe.EthGetLogs[]",
        components: [
          {
            name: "emitter",
            type: "address",
            internalType: "address"
          },
          {
            name: "topics",
            type: "bytes32[]",
            internalType: "bytes32[]"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "blockHash",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "blockNumber",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "transactionHash",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "transactionIndex",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "logIndex",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "removed",
            type: "bool",
            internalType: "bool"
          }
        ]
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "exists",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "result",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "ffi",
    inputs: [
      {
        name: "commandInput",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    outputs: [
      {
        name: "result",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "fsMetadata",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "metadata",
        type: "tuple",
        internalType: "struct VmSafe.FsMetadata",
        components: [
          {
            name: "isDir",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "isSymlink",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "length",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "readOnly",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "modified",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "accessed",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "created",
            type: "uint256",
            internalType: "uint256"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getArtifactPathByCode",
    inputs: [
      {
        name: "code",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getArtifactPathByDeployedCode",
    inputs: [
      {
        name: "deployedCode",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getBlobBaseFee",
    inputs: [],
    outputs: [
      {
        name: "blobBaseFee",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getBlockNumber",
    inputs: [],
    outputs: [
      {
        name: "height",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getBlockTimestamp",
    inputs: [],
    outputs: [
      {
        name: "timestamp",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getBroadcast",
    inputs: [
      {
        name: "contractName",
        type: "string",
        internalType: "string"
      },
      {
        name: "chainId",
        type: "uint64",
        internalType: "uint64"
      },
      {
        name: "txType",
        type: "uint8",
        internalType: "enum VmSafe.BroadcastTxType"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct VmSafe.BroadcastTxSummary",
        components: [
          {
            name: "txHash",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "txType",
            type: "uint8",
            internalType: "enum VmSafe.BroadcastTxType"
          },
          {
            name: "contractAddress",
            type: "address",
            internalType: "address"
          },
          {
            name: "blockNumber",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "success",
            type: "bool",
            internalType: "bool"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getBroadcasts",
    inputs: [
      {
        name: "contractName",
        type: "string",
        internalType: "string"
      },
      {
        name: "chainId",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple[]",
        internalType: "struct VmSafe.BroadcastTxSummary[]",
        components: [
          {
            name: "txHash",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "txType",
            type: "uint8",
            internalType: "enum VmSafe.BroadcastTxType"
          },
          {
            name: "contractAddress",
            type: "address",
            internalType: "address"
          },
          {
            name: "blockNumber",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "success",
            type: "bool",
            internalType: "bool"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getBroadcasts",
    inputs: [
      {
        name: "contractName",
        type: "string",
        internalType: "string"
      },
      {
        name: "chainId",
        type: "uint64",
        internalType: "uint64"
      },
      {
        name: "txType",
        type: "uint8",
        internalType: "enum VmSafe.BroadcastTxType"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple[]",
        internalType: "struct VmSafe.BroadcastTxSummary[]",
        components: [
          {
            name: "txHash",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "txType",
            type: "uint8",
            internalType: "enum VmSafe.BroadcastTxType"
          },
          {
            name: "contractAddress",
            type: "address",
            internalType: "address"
          },
          {
            name: "blockNumber",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "success",
            type: "bool",
            internalType: "bool"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getCode",
    inputs: [
      {
        name: "artifactPath",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "creationBytecode",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getDeployedCode",
    inputs: [
      {
        name: "artifactPath",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "runtimeBytecode",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getDeployment",
    inputs: [
      {
        name: "contractName",
        type: "string",
        internalType: "string"
      },
      {
        name: "chainId",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [
      {
        name: "deployedAddress",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getDeployment",
    inputs: [
      {
        name: "contractName",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "deployedAddress",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getDeployments",
    inputs: [
      {
        name: "contractName",
        type: "string",
        internalType: "string"
      },
      {
        name: "chainId",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [
      {
        name: "deployedAddresses",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getFoundryVersion",
    inputs: [],
    outputs: [
      {
        name: "version",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getLabel",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "currentLabel",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getMappingKeyAndParentOf",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address"
      },
      {
        name: "elementSlot",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "found",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "key",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "parent",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "getMappingLength",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address"
      },
      {
        name: "mappingSlot",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "length",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "getMappingSlotAt",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address"
      },
      {
        name: "mappingSlot",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "idx",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "value",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "getNonce",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "nonce",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getNonce",
    inputs: [
      {
        name: "wallet",
        type: "tuple",
        internalType: "struct VmSafe.Wallet",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "publicKeyX",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "publicKeyY",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "privateKey",
            type: "uint256",
            internalType: "uint256"
          }
        ]
      }
    ],
    outputs: [
      {
        name: "nonce",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "getRecordedLogs",
    inputs: [],
    outputs: [
      {
        name: "logs",
        type: "tuple[]",
        internalType: "struct VmSafe.Log[]",
        components: [
          {
            name: "topics",
            type: "bytes32[]",
            internalType: "bytes32[]"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "emitter",
            type: "address",
            internalType: "address"
          }
        ]
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "getStateDiff",
    inputs: [],
    outputs: [
      {
        name: "diff",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getStateDiffJson",
    inputs: [],
    outputs: [
      {
        name: "diff",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getWallets",
    inputs: [],
    outputs: [
      {
        name: "wallets",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "indexOf",
    inputs: [
      {
        name: "input",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "isContext",
    inputs: [
      {
        name: "context",
        type: "uint8",
        internalType: "enum VmSafe.ForgeContext"
      }
    ],
    outputs: [
      {
        name: "result",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "isDir",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "result",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "isFile",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "result",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "keyExists",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "keyExistsJson",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "keyExistsToml",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "label",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      },
      {
        name: "newLabel",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "lastCallGas",
    inputs: [],
    outputs: [
      {
        name: "gas",
        type: "tuple",
        internalType: "struct VmSafe.Gas",
        components: [
          {
            name: "gasLimit",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "gasTotalUsed",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "gasMemoryUsed",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "gasRefunded",
            type: "int64",
            internalType: "int64"
          },
          {
            name: "gasRemaining",
            type: "uint64",
            internalType: "uint64"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "load",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address"
      },
      {
        name: "slot",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "data",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "parseAddress",
    inputs: [
      {
        name: "stringifiedValue",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "parsedValue",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseBool",
    inputs: [
      {
        name: "stringifiedValue",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "parsedValue",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseBytes",
    inputs: [
      {
        name: "stringifiedValue",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "parsedValue",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseBytes32",
    inputs: [
      {
        name: "stringifiedValue",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "parsedValue",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseInt",
    inputs: [
      {
        name: "stringifiedValue",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "parsedValue",
        type: "int256",
        internalType: "int256"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJson",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "abiEncodedData",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJson",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "abiEncodedData",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonAddress",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonAddressArray",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonBool",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonBoolArray",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool[]",
        internalType: "bool[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonBytes",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonBytes32",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonBytes32Array",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes32[]",
        internalType: "bytes32[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonBytesArray",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes[]",
        internalType: "bytes[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonInt",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "int256",
        internalType: "int256"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonIntArray",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "int256[]",
        internalType: "int256[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonKeys",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "keys",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonString",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonStringArray",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonType",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "typeDescription",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonType",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      },
      {
        name: "typeDescription",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonTypeArray",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      },
      {
        name: "typeDescription",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonUint",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseJsonUintArray",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseToml",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "abiEncodedData",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseToml",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "abiEncodedData",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlAddress",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlAddressArray",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlBool",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlBoolArray",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool[]",
        internalType: "bool[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlBytes",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlBytes32",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlBytes32Array",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes32[]",
        internalType: "bytes32[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlBytesArray",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes[]",
        internalType: "bytes[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlInt",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "int256",
        internalType: "int256"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlIntArray",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "int256[]",
        internalType: "int256[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlKeys",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "keys",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlString",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlStringArray",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlType",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "typeDescription",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlType",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      },
      {
        name: "typeDescription",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlTypeArray",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      },
      {
        name: "typeDescription",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlUint",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseTomlUintArray",
    inputs: [
      {
        name: "toml",
        type: "string",
        internalType: "string"
      },
      {
        name: "key",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "parseUint",
    inputs: [
      {
        name: "stringifiedValue",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "parsedValue",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "pauseGasMetering",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "pauseTracing",
    inputs: [],
    outputs: [],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "projectRoot",
    inputs: [],
    outputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "prompt",
    inputs: [
      {
        name: "promptText",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "input",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "promptAddress",
    inputs: [
      {
        name: "promptText",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "promptSecret",
    inputs: [
      {
        name: "promptText",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "input",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "promptSecretUint",
    inputs: [
      {
        name: "promptText",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "promptUint",
    inputs: [
      {
        name: "promptText",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "publicKeyP256",
    inputs: [
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "publicKeyX",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "publicKeyY",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "randomAddress",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "randomBool",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "randomBytes",
    inputs: [
      {
        name: "len",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "randomBytes4",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "randomBytes8",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes8",
        internalType: "bytes8"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "randomInt",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "int256",
        internalType: "int256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "randomInt",
    inputs: [
      {
        name: "bits",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "int256",
        internalType: "int256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "randomUint",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "randomUint",
    inputs: [
      {
        name: "bits",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "randomUint",
    inputs: [
      {
        name: "min",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "max",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "readDir",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      },
      {
        name: "maxDepth",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [
      {
        name: "entries",
        type: "tuple[]",
        internalType: "struct VmSafe.DirEntry[]",
        components: [
          {
            name: "errorMessage",
            type: "string",
            internalType: "string"
          },
          {
            name: "path",
            type: "string",
            internalType: "string"
          },
          {
            name: "depth",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "isDir",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "isSymlink",
            type: "bool",
            internalType: "bool"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "readDir",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      },
      {
        name: "maxDepth",
        type: "uint64",
        internalType: "uint64"
      },
      {
        name: "followLinks",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [
      {
        name: "entries",
        type: "tuple[]",
        internalType: "struct VmSafe.DirEntry[]",
        components: [
          {
            name: "errorMessage",
            type: "string",
            internalType: "string"
          },
          {
            name: "path",
            type: "string",
            internalType: "string"
          },
          {
            name: "depth",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "isDir",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "isSymlink",
            type: "bool",
            internalType: "bool"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "readDir",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "entries",
        type: "tuple[]",
        internalType: "struct VmSafe.DirEntry[]",
        components: [
          {
            name: "errorMessage",
            type: "string",
            internalType: "string"
          },
          {
            name: "path",
            type: "string",
            internalType: "string"
          },
          {
            name: "depth",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "isDir",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "isSymlink",
            type: "bool",
            internalType: "bool"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "readFile",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "data",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "readFileBinary",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "readLine",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "line",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "readLink",
    inputs: [
      {
        name: "linkPath",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "targetPath",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "record",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "recordLogs",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "rememberKey",
    inputs: [
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "keyAddr",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "rememberKeys",
    inputs: [
      {
        name: "mnemonic",
        type: "string",
        internalType: "string"
      },
      {
        name: "derivationPath",
        type: "string",
        internalType: "string"
      },
      {
        name: "count",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    outputs: [
      {
        name: "keyAddrs",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "rememberKeys",
    inputs: [
      {
        name: "mnemonic",
        type: "string",
        internalType: "string"
      },
      {
        name: "derivationPath",
        type: "string",
        internalType: "string"
      },
      {
        name: "language",
        type: "string",
        internalType: "string"
      },
      {
        name: "count",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    outputs: [
      {
        name: "keyAddrs",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "removeDir",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      },
      {
        name: "recursive",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "removeFile",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "replace",
    inputs: [
      {
        name: "input",
        type: "string",
        internalType: "string"
      },
      {
        name: "from",
        type: "string",
        internalType: "string"
      },
      {
        name: "to",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "output",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "resetGasMetering",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "resumeGasMetering",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "resumeTracing",
    inputs: [],
    outputs: [],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "rpc",
    inputs: [
      {
        name: "urlOrAlias",
        type: "string",
        internalType: "string"
      },
      {
        name: "method",
        type: "string",
        internalType: "string"
      },
      {
        name: "params",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "rpc",
    inputs: [
      {
        name: "method",
        type: "string",
        internalType: "string"
      },
      {
        name: "params",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "rpcUrl",
    inputs: [
      {
        name: "rpcAlias",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "rpcUrlStructs",
    inputs: [],
    outputs: [
      {
        name: "urls",
        type: "tuple[]",
        internalType: "struct VmSafe.Rpc[]",
        components: [
          {
            name: "key",
            type: "string",
            internalType: "string"
          },
          {
            name: "url",
            type: "string",
            internalType: "string"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "rpcUrls",
    inputs: [],
    outputs: [
      {
        name: "urls",
        type: "string[2][]",
        internalType: "string[2][]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "serializeAddress",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "values",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeAddress",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "value",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeBool",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "values",
        type: "bool[]",
        internalType: "bool[]"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeBool",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "value",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeBytes",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "values",
        type: "bytes[]",
        internalType: "bytes[]"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeBytes",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "value",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeBytes32",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "values",
        type: "bytes32[]",
        internalType: "bytes32[]"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeBytes32",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "value",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeInt",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "value",
        type: "int256",
        internalType: "int256"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeInt",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "values",
        type: "int256[]",
        internalType: "int256[]"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeJson",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "value",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeJsonType",
    inputs: [
      {
        name: "typeDescription",
        type: "string",
        internalType: "string"
      },
      {
        name: "value",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "serializeJsonType",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "typeDescription",
        type: "string",
        internalType: "string"
      },
      {
        name: "value",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeString",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "values",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeString",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "value",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeUint",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeUint",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "values",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "serializeUintToHex",
    inputs: [
      {
        name: "objectKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "setArbitraryStorage",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "setEnv",
    inputs: [
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "value",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "sign",
    inputs: [
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "v",
        type: "uint8",
        internalType: "uint8"
      },
      {
        name: "r",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "s",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "sign",
    inputs: [
      {
        name: "signer",
        type: "address",
        internalType: "address"
      },
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "v",
        type: "uint8",
        internalType: "uint8"
      },
      {
        name: "r",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "s",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "sign",
    inputs: [
      {
        name: "wallet",
        type: "tuple",
        internalType: "struct VmSafe.Wallet",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "publicKeyX",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "publicKeyY",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "privateKey",
            type: "uint256",
            internalType: "uint256"
          }
        ]
      },
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "v",
        type: "uint8",
        internalType: "uint8"
      },
      {
        name: "r",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "s",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "sign",
    inputs: [
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "v",
        type: "uint8",
        internalType: "uint8"
      },
      {
        name: "r",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "s",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "signAndAttachDelegation",
    inputs: [
      {
        name: "implementation",
        type: "address",
        internalType: "address"
      },
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "signedDelegation",
        type: "tuple",
        internalType: "struct VmSafe.SignedDelegation",
        components: [
          {
            name: "v",
            type: "uint8",
            internalType: "uint8"
          },
          {
            name: "r",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "s",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "nonce",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "implementation",
            type: "address",
            internalType: "address"
          }
        ]
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "signCompact",
    inputs: [
      {
        name: "wallet",
        type: "tuple",
        internalType: "struct VmSafe.Wallet",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "publicKeyX",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "publicKeyY",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "privateKey",
            type: "uint256",
            internalType: "uint256"
          }
        ]
      },
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "r",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "vs",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "signCompact",
    inputs: [
      {
        name: "signer",
        type: "address",
        internalType: "address"
      },
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "r",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "vs",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "signCompact",
    inputs: [
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "r",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "vs",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "signCompact",
    inputs: [
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "r",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "vs",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "signDelegation",
    inputs: [
      {
        name: "implementation",
        type: "address",
        internalType: "address"
      },
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "signedDelegation",
        type: "tuple",
        internalType: "struct VmSafe.SignedDelegation",
        components: [
          {
            name: "v",
            type: "uint8",
            internalType: "uint8"
          },
          {
            name: "r",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "s",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "nonce",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "implementation",
            type: "address",
            internalType: "address"
          }
        ]
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "signP256",
    inputs: [
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "digest",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "r",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "s",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "sleep",
    inputs: [
      {
        name: "duration",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "split",
    inputs: [
      {
        name: "input",
        type: "string",
        internalType: "string"
      },
      {
        name: "delimiter",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "outputs",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "startBroadcast",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "startBroadcast",
    inputs: [
      {
        name: "signer",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "startBroadcast",
    inputs: [
      {
        name: "privateKey",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "startDebugTraceRecording",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "startMappingRecording",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "startStateDiffRecording",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "stopAndReturnDebugTraceRecording",
    inputs: [],
    outputs: [
      {
        name: "step",
        type: "tuple[]",
        internalType: "struct VmSafe.DebugStep[]",
        components: [
          {
            name: "stack",
            type: "uint256[]",
            internalType: "uint256[]"
          },
          {
            name: "memoryInput",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "opcode",
            type: "uint8",
            internalType: "uint8"
          },
          {
            name: "depth",
            type: "uint64",
            internalType: "uint64"
          },
          {
            name: "isOutOfGas",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "contractAddr",
            type: "address",
            internalType: "address"
          }
        ]
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "stopAndReturnStateDiff",
    inputs: [],
    outputs: [
      {
        name: "accountAccesses",
        type: "tuple[]",
        internalType: "struct VmSafe.AccountAccess[]",
        components: [
          {
            name: "chainInfo",
            type: "tuple",
            internalType: "struct VmSafe.ChainInfo",
            components: [
              {
                name: "forkId",
                type: "uint256",
                internalType: "uint256"
              },
              {
                name: "chainId",
                type: "uint256",
                internalType: "uint256"
              }
            ]
          },
          {
            name: "kind",
            type: "uint8",
            internalType: "enum VmSafe.AccountAccessKind"
          },
          {
            name: "account",
            type: "address",
            internalType: "address"
          },
          {
            name: "accessor",
            type: "address",
            internalType: "address"
          },
          {
            name: "initialized",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "oldBalance",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "newBalance",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "deployedCode",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "value",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "reverted",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "storageAccesses",
            type: "tuple[]",
            internalType: "struct VmSafe.StorageAccess[]",
            components: [
              {
                name: "account",
                type: "address",
                internalType: "address"
              },
              {
                name: "slot",
                type: "bytes32",
                internalType: "bytes32"
              },
              {
                name: "isWrite",
                type: "bool",
                internalType: "bool"
              },
              {
                name: "previousValue",
                type: "bytes32",
                internalType: "bytes32"
              },
              {
                name: "newValue",
                type: "bytes32",
                internalType: "bytes32"
              },
              {
                name: "reverted",
                type: "bool",
                internalType: "bool"
              }
            ]
          },
          {
            name: "depth",
            type: "uint64",
            internalType: "uint64"
          }
        ]
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "stopBroadcast",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "stopMappingRecording",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "toBase64",
    inputs: [
      {
        name: "data",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "toBase64",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "toBase64URL",
    inputs: [
      {
        name: "data",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "toBase64URL",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "toLowercase",
    inputs: [
      {
        name: "input",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "output",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "toString",
    inputs: [
      {
        name: "value",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "stringifiedValue",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "toString",
    inputs: [
      {
        name: "value",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "stringifiedValue",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "toString",
    inputs: [
      {
        name: "value",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "stringifiedValue",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "toString",
    inputs: [
      {
        name: "value",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [
      {
        name: "stringifiedValue",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "toString",
    inputs: [
      {
        name: "value",
        type: "int256",
        internalType: "int256"
      }
    ],
    outputs: [
      {
        name: "stringifiedValue",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "toString",
    inputs: [
      {
        name: "value",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "stringifiedValue",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "toUppercase",
    inputs: [
      {
        name: "input",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "output",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "trim",
    inputs: [
      {
        name: "input",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "output",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "tryFfi",
    inputs: [
      {
        name: "commandInput",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    outputs: [
      {
        name: "result",
        type: "tuple",
        internalType: "struct VmSafe.FfiResult",
        components: [
          {
            name: "exitCode",
            type: "int32",
            internalType: "int32"
          },
          {
            name: "stdout",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "stderr",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "unixTime",
    inputs: [],
    outputs: [
      {
        name: "milliseconds",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "writeFile",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      },
      {
        name: "data",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "writeFileBinary",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "writeJson",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "path",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "writeJson",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "writeLine",
    inputs: [
      {
        name: "path",
        type: "string",
        internalType: "string"
      },
      {
        name: "data",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "writeToml",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "path",
        type: "string",
        internalType: "string"
      },
      {
        name: "valueKey",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "writeToml",
    inputs: [
      {
        name: "json",
        type: "string",
        internalType: "string"
      },
      {
        name: "path",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  }
];
var VmSafe__factory = class {
  static createInterface() {
    return new Interface(_abi11);
  }
  static connect(address, runner) {
    return new Contract(address, _abi11, runner);
  }
};
VmSafe__factory.abi = _abi11;

// src/generated/factories/draft-IERC1822.sol/IERC1822Proxiable__factory.ts
var _abi12 = [
  {
    type: "function",
    name: "proxiableUUID",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  }
];
var IERC1822Proxiable__factory = class {
  static createInterface() {
    return new Interface(_abi12);
  }
  static connect(address, runner) {
    return new Contract(address, _abi12, runner);
  }
};
IERC1822Proxiable__factory.abi = _abi12;

// src/generated/factories/AccessControl__factory.ts
var _abi13 = [
  {
    type: "function",
    name: "DEFAULT_ADMIN_ROLE",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getRoleAdmin",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "grantRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "hasRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "renounceRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "callerConfirmation",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "revokeRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "supportsInterface",
    inputs: [
      {
        name: "interfaceId",
        type: "bytes4",
        internalType: "bytes4"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "event",
    name: "RoleAdminChanged",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "previousAdminRole",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "newAdminRole",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "RoleGranted",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "sender",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "RoleRevoked",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "sender",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "error",
    name: "AccessControlBadConfirmation",
    inputs: []
  },
  {
    type: "error",
    name: "AccessControlUnauthorizedAccount",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      },
      {
        name: "neededRole",
        type: "bytes32",
        internalType: "bytes32"
      }
    ]
  }
];
var AccessControl__factory = class {
  static createInterface() {
    return new Interface(_abi13);
  }
  static connect(address, runner) {
    return new Contract(address, _abi13, runner);
  }
};
AccessControl__factory.abi = _abi13;

// src/generated/factories/AccessControlEnumerableUpgradeable__factory.ts
var _abi14 = [
  {
    type: "function",
    name: "DEFAULT_ADMIN_ROLE",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getRoleAdmin",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getRoleMember",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "index",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getRoleMemberCount",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getRoleMembers",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "grantRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "hasRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "renounceRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "callerConfirmation",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "revokeRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "supportsInterface",
    inputs: [
      {
        name: "interfaceId",
        type: "bytes4",
        internalType: "bytes4"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint64",
        indexed: false,
        internalType: "uint64"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "RoleAdminChanged",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "previousAdminRole",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "newAdminRole",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "RoleGranted",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "sender",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "RoleRevoked",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "sender",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "error",
    name: "AccessControlBadConfirmation",
    inputs: []
  },
  {
    type: "error",
    name: "AccessControlUnauthorizedAccount",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      },
      {
        name: "neededRole",
        type: "bytes32",
        internalType: "bytes32"
      }
    ]
  },
  {
    type: "error",
    name: "InvalidInitialization",
    inputs: []
  },
  {
    type: "error",
    name: "NotInitializing",
    inputs: []
  }
];
var AccessControlEnumerableUpgradeable__factory = class {
  static createInterface() {
    return new Interface(_abi14);
  }
  static connect(address, runner) {
    return new Contract(
      address,
      _abi14,
      runner
    );
  }
};
AccessControlEnumerableUpgradeable__factory.abi = _abi14;

// src/generated/factories/AccessControlUpgradeable__factory.ts
var _abi15 = [
  {
    type: "function",
    name: "DEFAULT_ADMIN_ROLE",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getRoleAdmin",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "grantRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "hasRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "renounceRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "callerConfirmation",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "revokeRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "supportsInterface",
    inputs: [
      {
        name: "interfaceId",
        type: "bytes4",
        internalType: "bytes4"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint64",
        indexed: false,
        internalType: "uint64"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "RoleAdminChanged",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "previousAdminRole",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "newAdminRole",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "RoleGranted",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "sender",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "RoleRevoked",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "sender",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "error",
    name: "AccessControlBadConfirmation",
    inputs: []
  },
  {
    type: "error",
    name: "AccessControlUnauthorizedAccount",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      },
      {
        name: "neededRole",
        type: "bytes32",
        internalType: "bytes32"
      }
    ]
  },
  {
    type: "error",
    name: "InvalidInitialization",
    inputs: []
  },
  {
    type: "error",
    name: "NotInitializing",
    inputs: []
  }
];
var AccessControlUpgradeable__factory = class {
  static createInterface() {
    return new Interface(_abi15);
  }
  static connect(address, runner) {
    return new Contract(
      address,
      _abi15,
      runner
    );
  }
};
AccessControlUpgradeable__factory.abi = _abi15;

// src/generated/factories/Address__factory.ts
var _abi16 = [
  {
    type: "error",
    name: "AddressEmptyCode",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address"
      }
    ]
  }
];
var _bytecode8 = "0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea26469706673582212200acfbc3995302d663c22220f0ee34979d914832d4a0077a1e63efa197f6529b964736f6c634300081c0033";
var isSuperArgs8 = (xs) => xs.length > 1;
var Address__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs8(args)) {
      super(...args);
    } else {
      super(_abi16, _bytecode8, args[0]);
    }
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi16);
  }
  static connect(address, runner) {
    return new Contract(address, _abi16, runner);
  }
};
Address__factory.bytecode = _bytecode8;
Address__factory.abi = _abi16;

// src/generated/factories/BLS__factory.ts
var _abi17 = [
  {
    type: "error",
    name: "BNAddFailed",
    inputs: [
      {
        name: "input",
        type: "uint256[4]",
        internalType: "uint256[4]"
      }
    ]
  },
  {
    type: "error",
    name: "InvalidDSTLength",
    inputs: [
      {
        name: "dst",
        type: "bytes",
        internalType: "bytes"
      }
    ]
  },
  {
    type: "error",
    name: "InvalidFieldElement",
    inputs: [
      {
        name: "x",
        type: "uint256",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "error",
    name: "MapToPointFailed",
    inputs: [
      {
        name: "noSqrt",
        type: "uint256",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "error",
    name: "ModExpFailed",
    inputs: [
      {
        name: "base",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "exponent",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "modulus",
        type: "uint256",
        internalType: "uint256"
      }
    ]
  }
];
var _bytecode9 = "0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea26469706673582212207d7cea24ef661185d8361167a4dc7a7abb7ea9736817897f8d9fdbf753fc10f164736f6c634300081c0033";
var isSuperArgs9 = (xs) => xs.length > 1;
var BLS__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs9(args)) {
      super(...args);
    } else {
      super(_abi17, _bytecode9, args[0]);
    }
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi17);
  }
  static connect(address, runner) {
    return new Contract(address, _abi17, runner);
  }
};
BLS__factory.bytecode = _bytecode9;
BLS__factory.abi = _abi17;

// src/generated/factories/BLSTest__factory.ts
var _abi18 = [
  {
    type: "function",
    name: "IS_TEST",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeArtifacts",
    inputs: [],
    outputs: [
      {
        name: "excludedArtifacts_",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeContracts",
    inputs: [],
    outputs: [
      {
        name: "excludedContracts_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeSelectors",
    inputs: [],
    outputs: [
      {
        name: "excludedSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeSenders",
    inputs: [],
    outputs: [
      {
        name: "excludedSenders_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "failed",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetArtifactSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifactSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzArtifactSelector[]",
        components: [
          {
            name: "artifact",
            type: "string",
            internalType: "string"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetArtifacts",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifacts_",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetContracts",
    inputs: [],
    outputs: [
      {
        name: "targetedContracts_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetInterfaces",
    inputs: [],
    outputs: [
      {
        name: "targetedInterfaces_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzInterface[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "artifacts",
            type: "string[]",
            internalType: "string[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetSenders",
    inputs: [],
    outputs: [
      {
        name: "targetedSenders_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "test__expandMsgTo96",
    inputs: [
      {
        name: "domain",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "message",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "expanded",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "gas",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "test__hashToField",
    inputs: [
      {
        name: "domain",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "message",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "p",
        type: "uint256[2]",
        internalType: "uint256[2]"
      },
      {
        name: "gas",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "test__hashToPoint",
    inputs: [
      {
        name: "domain",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "message",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "p",
        type: "tuple",
        internalType: "struct BLS.PointG1",
        components: [
          {
            name: "x",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "y",
            type: "uint256",
            internalType: "uint256"
          }
        ]
      },
      {
        name: "gas",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "test__isOnCurveG1",
    inputs: [
      {
        name: "point",
        type: "uint256[2]",
        internalType: "uint256[2]"
      }
    ],
    outputs: [
      {
        name: "_isOnCurve",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "gas",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "test__isOnCurveG2",
    inputs: [
      {
        name: "point",
        type: "uint256[4]",
        internalType: "uint256[4]"
      }
    ],
    outputs: [
      {
        name: "_isOnCurve",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "gas",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "test__isValidPublicKey",
    inputs: [
      {
        name: "publicKey",
        type: "uint256[4]",
        internalType: "uint256[4]"
      }
    ],
    outputs: [
      {
        name: "isValid",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "gas",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "test__isValidSignature",
    inputs: [
      {
        name: "signature",
        type: "uint256[2]",
        internalType: "uint256[2]"
      }
    ],
    outputs: [
      {
        name: "isValid",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "gas",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "test__mapToPoint",
    inputs: [
      {
        name: "value",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "p",
        type: "uint256[2]",
        internalType: "uint256[2]"
      },
      {
        name: "gas",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "test__verifySingle",
    inputs: [
      {
        name: "signature",
        type: "uint256[2]",
        internalType: "uint256[2]"
      },
      {
        name: "pubkey",
        type: "uint256[4]",
        internalType: "uint256[4]"
      },
      {
        name: "message",
        type: "uint256[2]",
        internalType: "uint256[2]"
      }
    ],
    outputs: [
      {
        name: "pairingSuccess",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "callSuccess",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "gas",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "event",
    name: "log",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_address",
    inputs: [
      {
        name: "",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_bytes",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_bytes32",
    inputs: [
      {
        name: "",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_int",
    inputs: [
      {
        name: "",
        type: "int256",
        indexed: false,
        internalType: "int256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_address",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_bytes",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_bytes32",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_decimal_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_decimal_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_string",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_string",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_uint",
    inputs: [
      {
        name: "",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "logs",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  },
  {
    type: "error",
    name: "BNAddFailed",
    inputs: [
      {
        name: "input",
        type: "uint256[4]",
        internalType: "uint256[4]"
      }
    ]
  },
  {
    type: "error",
    name: "InvalidDSTLength",
    inputs: [
      {
        name: "dst",
        type: "bytes",
        internalType: "bytes"
      }
    ]
  },
  {
    type: "error",
    name: "InvalidFieldElement",
    inputs: [
      {
        name: "x",
        type: "uint256",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "error",
    name: "MapToPointFailed",
    inputs: [
      {
        name: "noSqrt",
        type: "uint256",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "error",
    name: "ModExpFailed",
    inputs: [
      {
        name: "base",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "exponent",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "modulus",
        type: "uint256",
        internalType: "uint256"
      }
    ]
  }
];
var _bytecode10 = "0x6080604052600c8054600160ff199182168117909255601f80549091169091179055348015602b575f5ffd5b5061390c806100395f395ff3fe608060405234801561000f575f5ffd5b506004361061016e575f3560e01c806385226c81116100d2578063b0464fdc11610088578063e20c9f7111610063578063e20c9f7114610324578063f5a70d841461032c578063fa7626d41461033f575f5ffd5b8063b0464fdc146102fc578063b5508aa914610304578063ba414fa61461030c575f5ffd5b8063916a17c6116100b8578063916a17c6146102a15780639e3ec031146102b65780639ed07916146102e9575f5ffd5b806385226c81146102795780638b55a9a11461028e575f5ffd5b80634d3980c51161012757806366d9a9a01161010d57806366d9a9a0146102215780636e763f08146102365780637e7f5c1e14610249575f5ffd5b80634d3980c5146101d65780635aff3206146101f7575f5ffd5b80632ade3880116101575780632ade3880146101b15780633e5e3c23146101c65780633f7286f4146101ce575f5ffd5b80630c4e1ab7146101725780631ed7831c1461019c575b5f5ffd5b610185610180366004613079565b61034c565b60405161019392919061312a565b60405180910390f35b6101a4610372565b604051610193919061314b565b6101b96103df565b60405161019391906131a3565b6101a4610528565b6101a4610593565b6101e96101e43660046132b5565b6105fe565b6040516101939291906132cc565b61020a610205366004613355565b610656565b604080519215158352602083019190915201610193565b610229610678565b60405161019391906133d2565b61020a61024436600461349b565b6107f1565b61025c6102573660046134b5565b6107ff565b604080519315158452911515602084015290820152606001610193565b6102816108c1565b60405161019391906134f9565b61020a61029c36600461349b565b61098c565b6102a96109da565b604051610193919061356e565b6102c96102c4366004613079565b610add565b604080518351815260209384015193810193909352820152606001610193565b6101e96102f7366004613079565b610afe565b6102a9610b14565b610281610c17565b610314610ce2565b6040519015158152602001610193565b6101a4610db2565b61020a61033a366004613355565b610e1d565b601f546103149060ff1681565b60605f5a905061035c8484610e6e565b91505a610369908261363d565b90509250929050565b606060168054806020026020016040519081016040528092919081815260200182805480156103d557602002820191905f5260205f20905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116103aa575b5050505050905090565b6060601e805480602002602001604051908101604052809291908181526020015f905b8282101561051f575f848152602080822060408051808201825260028702909201805473ffffffffffffffffffffffffffffffffffffffff168352600181018054835181870281018701909452808452939591948681019491929084015b82821015610508578382905f5260205f2001805461047d90613650565b80601f01602080910402602001604051908101604052809291908181526020018280546104a990613650565b80156104f45780601f106104cb576101008083540402835291602001916104f4565b820191905f5260205f20905b8154815290600101906020018083116104d757829003601f168201915b505050505081526020019060010190610460565b505050508152505081526020019060010190610402565b50505050905090565b606060188054806020026020016040519081016040528092919081815260200182805480156103d557602002820191905f5260205f2090815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116103aa575050505050905090565b606060178054806020026020016040519081016040528092919081815260200182805480156103d557602002820191905f5260205f2090815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116103aa575050505050905090565b610606612f19565b5f5a90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478084106106385750915091565b61064184611062565b92505a61064e908361363d565b915050915091565b5f5f5a90506106648361150a565b91505a610671908261363d565b9050915091565b6060601b805480602002602001604051908101604052809291908181526020015f905b8282101561051f578382905f5260205f2090600202016040518060400160405290815f820180546106cb90613650565b80601f01602080910402602001604051908101604052809291908181526020018280546106f790613650565b80156107425780601f1061071957610100808354040283529160200191610742565b820191905f5260205f20905b81548152906001019060200180831161072557829003601f168201915b50505050508152602001600182018054806020026020016040519081016040528092919081815260200182805480156107d957602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116107865790505b5050505050815250508152602001906001019061069b565b5f5f5a905061066483611608565b5f5f5f5a90506108a66040518060400160405280885f60028110610825576108256136a1565b6020020151815260200188600160028110610842576108426136a1565b602090810291909101519091526040805160808101825289518183019081528a840151606080840191909152908252825180840184528b8401518152908b0151818501528184015281518083019092528851825288830151928201929092526116a7565b90935091505a6108b6908261363d565b905093509350939050565b6060601a805480602002602001604051908101604052809291908181526020015f905b8282101561051f578382905f5260205f2001805461090190613650565b80601f016020809104026020016040519081016040528092919081815260200182805461092d90613650565b80156109785780601f1061094f57610100808354040283529160200191610978565b820191905f5260205f20905b81548152906001019060200180831161095b57829003601f168201915b5050505050815260200190600101906108e4565b5f5f5a90506106646040518060400160405280855f600281106109b1576109b16136a1565b60200201518152602001856001600281106109ce576109ce6136a1565b6020020151905261181a565b6060601d805480602002602001604051908101604052809291908181526020015f905b8282101561051f575f84815260209081902060408051808201825260028602909201805473ffffffffffffffffffffffffffffffffffffffff168352600181018054835181870281018701909452808452939491938583019392830182828015610ac557602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019060040190602082600301049283019260010382029150808411610a725790505b505050505081525050815260200190600101906109fd565b604080518082019091525f80825260208201525f5a905061035c84846118d8565b610b06612f19565b5f5a905061035c84846119b4565b6060601c805480602002602001604051908101604052809291908181526020015f905b8282101561051f575f84815260209081902060408051808201825260028602909201805473ffffffffffffffffffffffffffffffffffffffff168352600181018054835181870281018701909452808452939491938583019392830182828015610bff57602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681526020019060040190602082600301049283019260010382029150808411610bac5790505b50505050508152505081526020019060010190610b37565b60606019805480602002602001604051908101604052809291908181526020015f905b8282101561051f578382905f5260205f20018054610c5790613650565b80601f0160208091040260200160405190810160405280929190818152602001828054610c8390613650565b8015610cce5780601f10610ca557610100808354040283529160200191610cce565b820191905f5260205f20905b815481529060010190602001808311610cb157829003601f168201915b505050505081526020019060010190610c3a565b6008545f9060ff1615610cf9575060085460ff1690565b6040517f667f9d70000000000000000000000000000000000000000000000000000000008152737109709ecfa91a80626ff3989d68f67f5b1dd12d600482018190527f6661696c6564000000000000000000000000000000000000000000000000000060248301525f9163667f9d7090604401602060405180830381865afa158015610d87573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610dab91906136ce565b1415905090565b606060158054806020026020016040519081016040528092919081815260200182805480156103d557602002820191905f5260205f2090815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116103aa575050505050905090565b5f5f5a6040805160808101825285518183019081526020808801516060840152908252825180840184529287015183529293506106649290918183019181018760035b602002015190529052611aff565b815160609060ff811115610eb957836040517f26e4f9ba000000000000000000000000000000000000000000000000000000008152600401610eb091906136e5565b60405180910390fd5b60408051608880825260c082019092525f916020820181803683370190505090505f81855f60605f8a88604051602001610ef9979695949392919061370e565b60405160208183030381529060405290505f818051906020012090505f8160018987604051602001610f2e94939291906137e9565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001815282825280516020820120606080855260808501909352909350915f91602082018180368337019050509050600360015b8181101561102557858418610f9f82600161385b565b8d8b604051602001610fb494939291906137e9565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001815291905260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff830181028501810195909552805194810194909420939450600101610f89565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01602090810282010191909152955050505050505b92915050565b61106a612f19565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4782106110c6576040517fd53e941500000000000000000000000000000000000000000000000000000000815260048101839052602401610eb0565b5f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760047f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478586090990505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478260010890507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47611184837f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4761363d565b60010891505f6111b67f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47838509611ddc565b90505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4778016789af3a83522eb353c98fc6b36d713d5d8d1cc5dffffffa7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47847f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47888b09090990505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4761128a837f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4761363d565b7f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea30890505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47837f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea30890505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4786870990505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4786830990505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478485097f10216f7ba065e00de81ac1e7808072c9dd2b2385cd7b438469602eb24829a9bd0960010890505f5f6113c46113bf88611de6565b611e58565b5f0b60010361142d57868c526113d987611de6565b90506113e481611f08565b60208e0191909152915081611428576040517f396ec77100000000000000000000000000000000000000000000000000000000815260048101829052602401610eb0565b6114a9565b6114396113bf87611de6565b5f0b60010361144e57858c526113d986611de6565b828c5261145a83611de6565b905061146581611f08565b60208e01919091529150816114a9576040517f396ec77100000000000000000000000000000000000000000000000000000000815260048101829052602401610eb0565b60208c01516114b790611f42565b6114c08e611f42565b146114fa5760208c01516114f4907f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4761363d565b60208d01525b5050505050505050505050919050565b80515f907f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47111580611560575060208201517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4711155b806115bd575060408201517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd471115806115bd575060608201517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4711155b156115c957505f919050565b60408051608081018252835181830190815260208086015160608401529082528251808401845292850151835261105c92818301918101866003610e60565b80515f907f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4711158061165e575060208201517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4711155b1561166a57505f919050565b61105c6040518060400160405280845f6002811061168a5761168a6136a1565b60200201518152602001846001600281106109ce576109ce6136a1565b5f5f5f604051806101800160405280875f01518152602001876020015181526020017f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d8152602001855f0151815260200185602001518152602001865f015160016002811061178a5761178a6136a1565b60200201518152602001865f01515f600281106117a9576117a96136a1565b6020020151815260200186602001516001600281106117ca576117ca6136a1565b6020020151815260200186602001515f600281106117ea576117ea6136a1565b6020020151905290506117fb612f37565b6020816101808460086107d05a03fa9051151597909650945050505050565b6040805180820190915281518082526020808401519083018190525f9291907f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478280097f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783820990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476003820890507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478283091495945050505050565b604080518082019091525f80825260208201525f6118f684846119b4565b90505f61190982825b6020020151611062565b90505f6119178360016118ff565b9050611921612f55565b825181526020808401518282015282516040808401919091529083015160608301525f908460808460066107d05a03fa90508061198c57816040517f128e3f08000000000000000000000000000000000000000000000000000000008152600401610eb0919061386e565b6040805180820190915284518152602081018560016020020151905298975050505050505050565b6119bc612f19565b5f6119c78484610e6e565b90505f5f5f5f6018850177ffffffffffffffffffffffffffffffffffffffffffffffff815116935060308601905077ffffffffffffffffffffffffffffffffffffffffffffffff81511694507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47857f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4778010000000000000000000000000000000000000000000000008709086048870151606088015177ffffffffffffffffffffffffffffffffffffffffffffffff908116975016945092507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905084817801000000000000000000000000000000000000000000000000860908604080518082019091529283526020830152509695505050505050565b5f5f6040518060800160405280845f01515f60028110611b2157611b216136a1565b60200201518152602001845f0151600160028110611b4157611b416136a1565b6020020151815260200184602001515f60028110611b6157611b616136a1565b602002015181526020018460200151600160028110611b8257611b826136a1565b60200201518152509050805160208201517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478283097f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4782830981828301017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4782838401087f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4786827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47038601099350507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4784837f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd470383010991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd477f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5840894507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd477e9713b03af0fed4cd2cafadeed8fdf4a74fa084e52d1852e4a2bd0685c315d28308935060408601519250606086015191507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780837f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd470385087f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478486080990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47828460011b099414929093149190911695945050505050565b5f61105c82611f4e565b5f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47847f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47868709090892915050565b5f5f611e63836126a6565b9050611e9060017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4761363d565b8103611ebe57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff92915050565b8015801590611ece575080600114155b1561105c576040517f396ec77100000000000000000000000000000000000000000000000000000000815260048101849052602401610eb0565b5f5f611f13836127d3565b9150827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47838409149050915091565b5f61105c60028361389e565b5f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab6040805160c080825260e082019092525f918291906020820181803683370190505060208082018181526040830182905260608301829052608083018690527f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea360a08401527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760c0808501919091529293505f92839160055afa90505f519250806127cc576040517fc6daf7ab000000000000000000000000000000000000000000000000000000008152600481018590527f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea360248201527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476044820152606401610eb0565b5050919050565b5f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab60405180604001604052806002906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612fe757612fe7612f73565b604052919050565b5f82601f830112612ffe575f5ffd5b813567ffffffffffffffff81111561301857613018612f73565b61304960207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612fa0565b81815284602083860101111561305d575f5ffd5b816020850160208301375f918101602001919091529392505050565b5f5f6040838503121561308a575f5ffd5b823567ffffffffffffffff8111156130a0575f5ffd5b6130ac85828601612fef565b925050602083013567ffffffffffffffff8111156130c8575f5ffd5b6130d485828601612fef565b9150509250929050565b5f81518084528060208401602086015e5f6020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b604081525f61313c60408301856130de565b90508260208301529392505050565b602080825282518282018190525f918401906040840190835b8181101561319857835173ffffffffffffffffffffffffffffffffffffffff16835260209384019390920191600101613164565b509095945050505050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b828110156132a9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08786030184528151805173ffffffffffffffffffffffffffffffffffffffff168652602090810151604082880181905281519088018190529101906060600582901b8801810191908801905f5b8181101561328f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08a85030183526132798486516130de565b602095860195909450929092019160010161323f565b5091975050506020948501949290920191506001016131c9565b50929695505050505050565b5f602082840312156132c5575f5ffd5b5035919050565b6060810181845f5b60028110156132f35781518352602092830192909101906001016132d4565b5050508260408301529392505050565b5f82601f830112613312575f5ffd5b5f61331d6080612fa0565b9050806080840185811115613330575f5ffd5b845b8181101561334a578035835260209283019201613332565b509195945050505050565b5f60808284031215613365575f5ffd5b61336f8383613303565b9392505050565b5f8151808452602084019350602083015f5b828110156133c85781517fffffffff0000000000000000000000000000000000000000000000000000000016865260209586019590910190600101613388565b5093949350505050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b828110156132a9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0878603018452815180516040875261343c60408801826130de565b90506020820151915086810360208801526134578183613376565b9650505060209384019391909101906001016133f8565b5f82601f83011261347d575f5ffd5b5f6134886040612fa0565b9050806040840185811115613330575f5ffd5b5f604082840312156134ab575f5ffd5b61336f838361346e565b5f5f5f61010084860312156134c8575f5ffd5b6134d2858561346e565b92506134e18560408601613303565b91506134f08560c0860161346e565b90509250925092565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b828110156132a9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08786030184526135598583516130de565b9450602093840193919091019060010161351f565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b828110156132a9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0878603018452815173ffffffffffffffffffffffffffffffffffffffff815116865260208101519050604060208701526135fa6040870182613376565b9550506020938401939190910190600101613594565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b8181038181111561105c5761105c613610565b600181811c9082168061366457607f821691505b60208210810361369b577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f602082840312156136de575f5ffd5b5051919050565b602081525f61336f60208301846130de565b5f81518060208401855e5f93019283525090919050565b5f61372261371c838b6136f7565b896136f7565b7fff000000000000000000000000000000000000000000000000000000000000008860f81b1681527fff000000000000000000000000000000000000000000000000000000000000008760f81b1660018201527fff000000000000000000000000000000000000000000000000000000000000008660f81b1660028201526137ad60038201866136f7565b60f89490941b7fff0000000000000000000000000000000000000000000000000000000000000016845250506001909101979650505050505050565b8481527fff000000000000000000000000000000000000000000000000000000000000008460f81b1660208201525f61382560218301856136f7565b60f89390931b7fff0000000000000000000000000000000000000000000000000000000000000016835250506001019392505050565b8082018082111561105c5761105c613610565b6080810181835f5b6004811015613895578151835260209283019290910190600101613876565b50505092915050565b5f826138d1577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b50069056fea26469706673582212205e816675b8a97431033e29725282faa83547c15227655c0e4cd51a871454aedc64736f6c634300081c0033";
var isSuperArgs10 = (xs) => xs.length > 1;
var BLSTest__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs10(args)) {
      super(...args);
    } else {
      super(_abi18, _bytecode10, args[0]);
    }
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi18);
  }
  static connect(address, runner) {
    return new Contract(address, _abi18, runner);
  }
};
BLSTest__factory.bytecode = _bytecode10;
BLSTest__factory.abi = _abi18;

// src/generated/factories/BN254SignatureScheme__factory.ts
var _abi19 = [
  {
    type: "constructor",
    inputs: [
      {
        name: "x",
        type: "uint256[2]",
        internalType: "uint256[2]"
      },
      {
        name: "y",
        type: "uint256[2]",
        internalType: "uint256[2]"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "DST",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "SCHEME_ID",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getChainId",
    inputs: [],
    outputs: [
      {
        name: "chainId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getPublicKey",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256[2]",
        internalType: "uint256[2]"
      },
      {
        name: "",
        type: "uint256[2]",
        internalType: "uint256[2]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getPublicKeyBytes",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "hashToBytes",
    inputs: [
      {
        name: "message",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "hashToPoint",
    inputs: [
      {
        name: "message",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "verifySignature",
    inputs: [
      {
        name: "message",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "signature",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "publicKey",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "isValid",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "error",
    name: "BNAddFailed",
    inputs: [
      {
        name: "input",
        type: "uint256[4]",
        internalType: "uint256[4]"
      }
    ]
  },
  {
    type: "error",
    name: "InvalidDSTLength",
    inputs: [
      {
        name: "dst",
        type: "bytes",
        internalType: "bytes"
      }
    ]
  },
  {
    type: "error",
    name: "InvalidFieldElement",
    inputs: [
      {
        name: "x",
        type: "uint256",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "error",
    name: "MapToPointFailed",
    inputs: [
      {
        name: "noSqrt",
        type: "uint256",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "error",
    name: "ModExpFailed",
    inputs: [
      {
        name: "base",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "exponent",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "modulus",
        type: "uint256",
        internalType: "uint256"
      }
    ]
  }
];
var _bytecode11 = "0x5f60c081815260e0829052608081815261014060405261010083815261012084905260a052919061003390829060026102cd565b50602082015161004990600280840191906102cd565b505050348015610057575f5ffd5b50604051612d52380380612d528339810160408190526100769161039f565b6040805180820190915282815260208101829052829082905f61009b818560026102cd565b5060208201516100b190600280840191906102cd565b5090505050506100cd6100c861010260201b60201c565b610106565b6040516020016100dd91906103d2565b604051602081830303815290604052600490816100fa91906104c4565b5050506105d6565b4690565b604080518082018252601081526f181899199a1a9b1b9c1cb0b131b232b360811b602082015281516042808252608082019093526060925f9190602082018180368337019050509050600360fc1b815f815181106101665761016661057e565b60200101906001600160f81b03191690815f1a905350600f60fb1b816001815181106101945761019461057e565b60200101906001600160f81b03191690815f1a9053505f5b60208110156102c5578260048683602081106101ca576101ca61057e565b1a60f81b6001600160f81b031916901c60f81c60ff16815181106101f0576101f061057e565b01602001516001600160f81b0319168261020b8360026105a6565b6102169060026105c3565b815181106102265761022661057e565b60200101906001600160f81b03191690815f1a9053508285826020811061024f5761024f61057e565b825191901a600f169081106102665761026661057e565b01602001516001600160f81b031916826102818360026105a6565b61028c9060026105c3565b6102979060016105c3565b815181106102a7576102a761057e565b60200101906001600160f81b03191690815f1a9053506001016101ac565b509392505050565b82600281019282156102fb579160200282015b828111156102fb5782518255916020019190600101906102e0565b5061030792915061030b565b5090565b5b80821115610307575f815560010161030c565b634e487b7160e01b5f52604160045260245ffd5b5f82601f830112610342575f5ffd5b604080519081016001600160401b03811182821017156103645761036461031f565b806040525080604084018581111561037a575f5ffd5b845b8181101561039457805183526020928301920161037c565b509195945050505050565b5f5f608083850312156103b0575f5ffd5b6103ba8484610333565b91506103c98460408501610333565b90509250929050565b7f646369706865722d72616e646f6d6e6573732d7630312d424e32353447315f5881527f4d443a4b454343414b2d3235365f535644575f524f5f0000000000000000000060208201525f82518060208501603685015e605f60f81b6036939091019283015250603701919050565b600181811c9082168061045457607f821691505b60208210810361047257634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156104bf57805f5260205f20601f840160051c8101602085101561049d5750805b601f840160051c820191505b818110156104bc575f81556001016104a9565b50505b505050565b81516001600160401b038111156104dd576104dd61031f565b6104f1816104eb8454610440565b84610478565b6020601f821160018114610523575f831561050c5750848201515b5f19600385901b1c1916600184901b1784556104bc565b5f84815260208120601f198516915b828110156105525787850151825560209485019460019092019101610532565b508482101561056f57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b80820281158282048414176105bd576105bd610592565b92915050565b808201808211156105bd576105bd610592565b61276f806105e35f395ff3fe608060405234801561000f575f5ffd5b5060043610610085575f3560e01c80638a1f165a116100585780638a1f165a146100f3578063acae9fee1461012f578063eae1e15b14610137578063f6e548e91461014a575f5ffd5b80632e334452146100895780633033cc51146100a85780633408e470146100d05780635f7c7522146100de575b5f5ffd5b61009161016d565b60405161009f929190612300565b60405180910390f35b6100bb6100b6366004612360565b6101e6565b6040805192835260208301919091520161009f565b60405146815260200161009f565b6100e66102c6565b60405161009f91906123eb565b6100e66040518060400160405280600581526020017f424e32353400000000000000000000000000000000000000000000000000000081525081565b6100e6610352565b6100e6610145366004612360565b6103d1565b61015d6101583660046123fd565b61040b565b604051901515815260200161009f565b610175612259565b61017d612259565b60408051808201918290525f91600291908390839082845b815481526020019060010190808311610195575050604080518082019182905294965085935060029250905082845b8154815260200190600101908083116101c45750505050509050915091509091565b5f5f5f6102b0600480546101f99061249c565b80601f01602080910402602001604051908101604052809291908181526020018280546102259061249c565b80156102705780601f1061024757610100808354040283529160200191610270565b820191905f5260205f20905b81548152906001019060200180831161025357829003601f168201915b505050505086868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506104fa92505050565b80516020909101519093509150505b9250929050565b600480546102d39061249c565b80601f01602080910402602001604051908101604052809291908181526020018280546102ff9061249c565b801561034a5780601f106103215761010080835404028352916020019161034a565b820191905f5260205f20905b81548152906001019060200180831161032d57829003601f168201915b505050505081565b60408051608081018083526060926103cc92915f91839190820190839060029082845b81548152602001906001019080831161037557505050918352505060408051808201918290526020909201919060028481019182845b8154815260200190600101908083116103ab575050505050815250506105df565b905090565b60605f5f6103df85856101e6565b9150915061040060405180604001604052808481526020018381525061063b565b925050505b92915050565b5f5f61044b88888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061067492505050565b90505f61048c87878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061067492505050565b90505f6104cd86868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061071192505050565b90505f5f6104dc8484876107cc565b915091508180156104ea5750805b9c9b505050505050505050505050565b604080518082019091525f80825260208201525f610518848461093f565b90505f61052b82825b6020020151610a8a565b90505f610539836001610521565b9050610543612277565b825181526020808401518282015282516040808401919091529083015160608301525f908460808460066107d05a03fa9050806105b757816040517f128e3f080000000000000000000000000000000000000000000000000000000081526004016105ae919061251a565b60405180910390fd5b6040805180820190915284518152602081018560016020020151905298975050505050505050565b60408051608080825260a082019092526060915f91906020820181803683375050845180516020918201519682015180519083015192850191909152604084019690965260608301959095525060808101939093525090919050565b6040805181815260608181018352915f919060208201818036833750508451602095860151958301525060408101939093525090919050565b604080518082019091525f808252602082015281516040146106f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c6964204731206279746573206c656e67746800000000000000000060448201526064016105ae565b5060208181015160409283015183518085019094529083529082015290565b610719612295565b8151608014610784576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c6964204732206279746573206c656e67746800000000000000000060448201526064016105ae565b50602081810151604080840151606080860151608096870151845197880185528785019586529187019290925292855281518083019092528152808301919091529082015290565b5f5f5f604051806101800160405280875f01518152602001876020015181526020017f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d8152602001855f0151815260200185602001518152602001865f01516001600281106108af576108af6124ed565b60200201518152602001865f01515f600281106108ce576108ce6124ed565b6020020151815260200186602001516001600281106108ef576108ef6124ed565b6020020151815260200186602001515f6002811061090f5761090f6124ed565b6020020151905290506109206122ba565b6020816101808460086107d05a03fa9051151597909650945050505050565b610947612259565b5f6109528484610f32565b90505f5f5f5f6018850177ffffffffffffffffffffffffffffffffffffffffffffffff815116935060308601905077ffffffffffffffffffffffffffffffffffffffffffffffff81511694507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47857f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4778010000000000000000000000000000000000000000000000008709086048870151606088015177ffffffffffffffffffffffffffffffffffffffffffffffff908116975016945092507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905084817801000000000000000000000000000000000000000000000000860908604080518082019091529283526020830152509695505050505050565b610a92612259565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478210610aee576040517fd53e9415000000000000000000000000000000000000000000000000000000008152600481018390526024016105ae565b5f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760047f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478586090990505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478260010890507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610bac837f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612577565b60010891505f610bde7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783850961111c565b90505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4778016789af3a83522eb353c98fc6b36d713d5d8d1cc5dffffffa7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47847f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47888b09090990505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610cb2837f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612577565b7f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea30890505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47837f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea30890505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4786870990505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4786830990505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478485097f10216f7ba065e00de81ac1e7808072c9dd2b2385cd7b438469602eb24829a9bd0960010890505f5f610dec610de788611126565b611198565b5f0b600103610e5557868c52610e0187611126565b9050610e0c81611248565b60208e0191909152915081610e50576040517f396ec771000000000000000000000000000000000000000000000000000000008152600481018290526024016105ae565b610ed1565b610e61610de787611126565b5f0b600103610e7657858c52610e0186611126565b828c52610e8283611126565b9050610e8d81611248565b60208e0191909152915081610ed1576040517f396ec771000000000000000000000000000000000000000000000000000000008152600481018290526024016105ae565b60208c0151610edf90611282565b610ee88e611282565b14610f225760208c0151610f1c907f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612577565b60208d01525b5050505050505050505050919050565b815160609060ff811115610f7457836040517f26e4f9ba0000000000000000000000000000000000000000000000000000000081526004016105ae91906123eb565b60408051608880825260c082019092525f916020820181803683370190505090505f81855f60605f8a88604051602001610fb497969594939291906125a1565b60405160208183030381529060405290505f818051906020012090505f8160018987604051602001610fe9949392919061267c565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001815282825280516020820120606080855260808501909352909350915f91602082018180368337019050509050600360015b818110156110e05785841861105a8260016126ee565b8d8b60405160200161106f949392919061267c565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001815291905260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff830181028501810195909552805194810194909420939450600101611044565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016020908102820101919091529550505050505092915050565b5f6104058261128e565b5f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47847f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47868709090892915050565b5f5f6111a3836119e6565b90506111d060017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612577565b81036111fe57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff92915050565b801580159061120e575080600114155b15610405576040517f396ec771000000000000000000000000000000000000000000000000000000008152600481018490526024016105ae565b5f5f61125383611b13565b9150827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47838409149050915091565b5f610405600283612701565b5f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab6040805160c080825260e082019092525f918291906020820181803683370190505060208082018181526040830182905260608301829052608083018690527f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea360a08401527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760c0808501919091529293505f92839160055afa90505f51925080611b0c576040517fc6daf7ab000000000000000000000000000000000000000000000000000000008152600481018590527f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea360248201527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760448201526064016105ae565b5050919050565b5f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab60405180604001604052806002906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180604001604052806122a8612259565b81526020016122b5612259565b905290565b60405180602001604052806001906020820280368337509192915050565b805f5b60028110156122fa5781518452602093840193909101906001016122db565b50505050565b6080810161230e82856122d8565b61231b60408301846122d8565b9392505050565b5f5f83601f840112612332575f5ffd5b50813567ffffffffffffffff811115612349575f5ffd5b6020830191508360208285010111156102bf575f5ffd5b5f5f60208385031215612371575f5ffd5b823567ffffffffffffffff811115612387575f5ffd5b61239385828601612322565b90969095509350505050565b5f81518084528060208401602086015e5f6020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b602081525f61231b602083018461239f565b5f5f5f5f5f5f60608789031215612412575f5ffd5b863567ffffffffffffffff811115612428575f5ffd5b61243489828a01612322565b909750955050602087013567ffffffffffffffff811115612453575f5ffd5b61245f89828a01612322565b909550935050604087013567ffffffffffffffff81111561247e575f5ffd5b61248a89828a01612322565b979a9699509497509295939492505050565b600181811c908216806124b057607f821691505b6020821081036124e7577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b6080810181835f5b6004811015612541578151835260209283019290910190600101612522565b50505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b818103818111156104055761040561254a565b5f81518060208401855e5f93019283525090919050565b5f6125b56125af838b61258a565b8961258a565b7fff000000000000000000000000000000000000000000000000000000000000008860f81b1681527fff000000000000000000000000000000000000000000000000000000000000008760f81b1660018201527fff000000000000000000000000000000000000000000000000000000000000008660f81b166002820152612640600382018661258a565b60f89490941b7fff0000000000000000000000000000000000000000000000000000000000000016845250506001909101979650505050505050565b8481527fff000000000000000000000000000000000000000000000000000000000000008460f81b1660208201525f6126b8602183018561258a565b60f89390931b7fff0000000000000000000000000000000000000000000000000000000000000016835250506001019392505050565b808201808211156104055761040561254a565b5f82612734577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b50069056fea264697066735822122028d20a5d414f9aeeef1fff1ecfa26af3f5e307f772c317fd3dad1f62e0eaf87164736f6c634300081c0033";
var isSuperArgs11 = (xs) => xs.length > 1;
var BN254SignatureScheme__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs11(args)) {
      super(...args);
    } else {
      super(_abi19, _bytecode11, args[0]);
    }
  }
  getDeployTransaction(x, y, overrides) {
    return super.getDeployTransaction(x, y, overrides || {});
  }
  deploy(x, y, overrides) {
    return super.deploy(x, y, overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi19);
  }
  static connect(address, runner) {
    return new Contract(
      address,
      _abi19,
      runner
    );
  }
};
BN254SignatureScheme__factory.bytecode = _bytecode11;
BN254SignatureScheme__factory.abi = _abi19;

// src/generated/factories/BytesLib__factory.ts
var _abi20 = [
  {
    type: "function",
    name: "decodeBytesToUint",
    inputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "pure"
  }
];
var _bytecode12 = "0x610278610034600b8282823980515f1a607314602857634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610610034575f3560e01c8063f7ba47a314610038575b5f5ffd5b61004b61004636600461013b565b61005d565b60405190815260200160405180910390f35b5f6020825110156100f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f44617461206d757374206265206174206c65617374203332206279746573206c60448201527f6f6e670000000000000000000000000000000000000000000000000000000000606482015260840160405180910390fd5b81806020019051810190610108919061022b565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f6020828403121561014b575f5ffd5b813567ffffffffffffffff811115610161575f5ffd5b8201601f81018413610171575f5ffd5b803567ffffffffffffffff81111561018b5761018b61010e565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160116810181811067ffffffffffffffff821117156101f7576101f761010e565b60405281815282820160200186101561020e575f5ffd5b816020840160208301375f91810160200191909152949350505050565b5f6020828403121561023b575f5ffd5b505191905056fea26469706673582212200baaf63c0430dd67ba27fbe1a49cf5393526c40f24c612be6a9ba4f38d06f10264736f6c634300081c0033";
var isSuperArgs12 = (xs) => xs.length > 1;
var BytesLib__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs12(args)) {
      super(...args);
    } else {
      super(_abi20, _bytecode12, args[0]);
    }
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi20);
  }
  static connect(address, runner) {
    return new Contract(address, _abi20, runner);
  }
};
BytesLib__factory.bytecode = _bytecode12;
BytesLib__factory.abi = _abi20;

// src/generated/factories/ChainlinkVRFCoordinatorV2_5Adapter__factory.ts
var _abi21 = [
  {
    type: "constructor",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address"
      },
      {
        name: "_randomnessSender",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "MAX_NUM_WORDS",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "acceptOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "acceptSubscriptionOwnerTransfer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "addConsumer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "consumer",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "calculateRequestPriceNative",
    inputs: [
      {
        name: "_callbackGasLimit",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "cancelSubscription",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "to",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "createSubscription",
    inputs: [],
    outputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "estimateRequestPriceNative",
    inputs: [
      {
        name: "_callbackGasLimit",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "_requestGasPriceWei",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "fundSubscriptionWithNative",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "getActiveSubscriptionIds",
    inputs: [
      {
        name: "startIndex",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "maxCount",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getSubscription",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "balance",
        type: "uint96",
        internalType: "uint96"
      },
      {
        name: "nativeBalance",
        type: "uint96",
        internalType: "uint96"
      },
      {
        name: "reqCount",
        type: "uint64",
        internalType: "uint64"
      },
      {
        name: "owner",
        type: "address",
        internalType: "address"
      },
      {
        name: "consumers",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "lastRequestId",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "pendingRequestExists",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "randomnessSender",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IRandomnessSender"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "receiveRandomness",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "randomness",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "removeConsumer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "consumer",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "requestRandomWords",
    inputs: [
      {
        name: "req",
        type: "tuple",
        internalType: "struct VRFV2PlusClient.RandomWordsRequest",
        components: [
          {
            name: "keyHash",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "subId",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "requestConfirmations",
            type: "uint16",
            internalType: "uint16"
          },
          {
            name: "callbackGasLimit",
            type: "uint32",
            internalType: "uint32"
          },
          {
            name: "numWords",
            type: "uint32",
            internalType: "uint32"
          },
          {
            name: "extraArgs",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      }
    ],
    outputs: [
      {
        name: "requestId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "requestSubscriptionOwnerTransfer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "newOwner",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "s_callbacks",
    inputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "callbackAddress",
        type: "address",
        internalType: "address"
      },
      {
        name: "callbackGasLimit",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "requestGasPrice",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "setWrapperGasOverhead",
    inputs: [
      {
        name: "_s_wrapperGasOverhead",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "event",
    name: "OwnershipTransferRequested",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "WrapperFulfillmentFailed",
    inputs: [
      {
        name: "requestId",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "consumer",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "WrapperGasOverheadUpdated",
    inputs: [
      {
        name: "newWrapperGasOverhead",
        type: "uint32",
        indexed: false,
        internalType: "uint32"
      }
    ],
    anonymous: false
  },
  {
    type: "error",
    name: "ReentrancyGuardReentrantCall",
    inputs: []
  }
];
var _bytecode13 = "0x60806040526003805463ffffffff60a01b1916610c3560a51b179055348015610026575f5ffd5b50604051612195380380612195833981016040819052610045916101c9565b60015f908155829081906001600160a01b0382166100aa5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600180546001600160a01b0319166001600160a01b03848116919091179091558116156100da576100da81610105565b5050600380546001600160a01b0319166001600160a01b039390931692909217909155506101fa9050565b336001600160a01b0382160361015d5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016100a1565b600280546001600160a01b0319166001600160a01b03838116918217909255600154604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278905f90a350565b80516001600160a01b03811681146101c4575f5ffd5b919050565b5f5f604083850312156101da575f5ffd5b6101e3836101ae565b91506101f1602084016101ae565b90509250929050565b611f8e806102075f395ff3fe60806040526004361061016d575f3560e01c8063aefb212f116100c6578063dac83d291161007c578063e1cab74511610057578063e1cab745146104cc578063f2fde38b146104eb578063fc2a88c31461050a575f5ffd5b8063dac83d2914610451578063dc311dd314610470578063df3fafe8146104a0575f5ffd5b8063bec4c08c116100ac578063bec4c08c146103f4578063c40684f014610413578063cb63179714610432575f5ffd5b8063aefb212f146103a9578063b2a7cac5146103d5575f5ffd5b806348baa1c51161012657806395b55cfc1161010157806395b55cfc146103635780639b1c385e14610376578063a21a23e414610395575f5ffd5b806348baa1c51461023b57806379ba5097146103045780638da5cb5b14610318575f5ffd5b806340d6bb821161015657806340d6bb82146101c457806341af6c87146101ed578063431ac6571461021c575f5ffd5b80630ae095401461017157806313c34b7f14610192575b5f5ffd5b34801561017c575f5ffd5b5061019061018b366004611a0c565b61051f565b005b34801561019d575f5ffd5b506101b16101ac366004611a4d565b61063f565b6040519081526020015b60405180910390f35b3480156101cf575f5ffd5b506101d8600181565b60405163ffffffff90911681526020016101bb565b3480156101f8575f5ffd5b5061020c610207366004611a7e565b61070f565b60405190151581526020016101bb565b348015610227575f5ffd5b50610190610236366004611a95565b6107a0565b348015610246575f5ffd5b506102c3610255366004611a7e565b60066020525f908152604090205473ffffffffffffffffffffffffffffffffffffffff81169074010000000000000000000000000000000000000000810463ffffffff16907801000000000000000000000000000000000000000000000000900467ffffffffffffffff1683565b6040805173ffffffffffffffffffffffffffffffffffffffff909416845263ffffffff909216602084015267ffffffffffffffff16908201526060016101bb565b34801561030f575f5ffd5b50610190610839565b348015610323575f5ffd5b5060015473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101bb565b610190610371366004611a7e565b610939565b348015610381575f5ffd5b506101b1610390366004611ab5565b6109be565b3480156103a0575f5ffd5b506101b1610d50565b3480156103b4575f5ffd5b506103c86103c3366004611a95565b610ea1565b6040516101bb9190611b2d565b3480156103e0575f5ffd5b506101906103ef366004611a7e565b610f5a565b3480156103ff575f5ffd5b5061019061040e366004611a0c565b611052565b34801561041e575f5ffd5b5061019061042d366004611b3f565b61113f565b34801561043d575f5ffd5b5061019061044c366004611a0c565b6111cd565b34801561045c575f5ffd5b5061019061046b366004611a0c565b6112ba565b34801561047b575f5ffd5b5061048f61048a366004611a7e565b611319565b6040516101bb959493929190611b58565b3480156104ab575f5ffd5b5060035461033e9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156104d7575f5ffd5b506101b16104e6366004611c0c565b6113f0565b3480156104f6575f5ffd5b50610190610505366004611c46565b6114c6565b348015610515575f5ffd5b506101b160045481565b5f82815260056020526040902054829073ffffffffffffffffffffffffffffffffffffffff1633146105b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f43616c6c6572206973206e6f7420737562736372697074696f6e206f776e657260448201526064015b60405180910390fd5b6003546040517f0ae095400000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff848116602483015290911690630ae09540906044015b5f604051808303815f87803b158015610624575f5ffd5b505af1158015610636573d5f5f3e3d5ffd5b50505050505050565b6003545f9073ffffffffffffffffffffffffffffffffffffffff811690634b1609359061068a9074010000000000000000000000000000000000000000900463ffffffff1686611c61565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815263ffffffff919091166004820152602401602060405180830381865afa1580156106e2573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107069190611ca2565b90505b92915050565b6003546040517f41af6c87000000000000000000000000000000000000000000000000000000008152600481018390525f9173ffffffffffffffffffffffffffffffffffffffff16906341af6c8790602401602060405180830381865afa15801561077c573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107099190611cb9565b60035473ffffffffffffffffffffffffffffffffffffffff163314610821576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4f6e6c792072616e646f6d6e65737353656e6465722063616e2063616c6c000060448201526064016105a9565b610835826108308360016114da565b611585565b5050565b60025473ffffffffffffffffffffffffffffffffffffffff1633146108ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064016105a9565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000008082163390811790935560028054909116905560405173ffffffffffffffffffffffffffffffffffffffff909116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a350565b6003546040517f95b55cfc0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff909116906395b55cfc9034906024015f604051808303818588803b1580156109a4575f5ffd5b505af11580156109b6573d5f5f3e3d5ffd5b505050505050565b5f6109c76117bf565b6003546040517fdc311dd3000000000000000000000000000000000000000000000000000000008152602084013560048201819052915f9173ffffffffffffffffffffffffffffffffffffffff9091169063dc311dd3906024015f60405180830381865afa158015610a3b573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a809190810190611d77565b5f8681526005602052604090205490945073ffffffffffffffffffffffffffffffffffffffff1633149250829150610abf90505750610abf3382611800565b610b4b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f43616c6c6572206973206e6f7420737562736372697074696f6e206f776e657260448201527f206f7220617070726f76656420636f6e73756d6572000000000000000000000060648201526084016105a9565b60035473ffffffffffffffffffffffffffffffffffffffff811690631da53c9f9074010000000000000000000000000000000000000000900463ffffffff16610b9a6080880160608901611b3f565b610ba49190611c61565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815263ffffffff919091166004820152602087013560248201526044016020604051808303815f875af1158015610c07573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c2b9190611ca2565b925060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff168152602001856060016020810190610c679190611b3f565b63ffffffff908116825267ffffffffffffffff3a81166020938401525f878152600684526040908190208551815495870151969092015190921678010000000000000000000000000000000000000000000000000277ffffffffffffffffffffffffffffffffffffffffffffffff9590931674010000000000000000000000000000000000000000027fffffffffffffffff00000000000000000000000000000000000000000000000090941673ffffffffffffffffffffffffffffffffffffffff90911617929092179290921691909117905560048390555050610d4b60015f55565b919050565b600354604080517fa21a23e400000000000000000000000000000000000000000000000000000000815290515f9273ffffffffffffffffffffffffffffffffffffffff169163a21a23e4916004808301926020929190829003018187875af1158015610dbe573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610de29190611ca2565b5f818152600560205260409081902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000163317905560035490517fbec4c08c0000000000000000000000000000000000000000000000000000000081526004810183905230602482015291925073ffffffffffffffffffffffffffffffffffffffff169063bec4c08c906044015f604051808303815f87803b158015610e88575f5ffd5b505af1158015610e9a573d5f5f3e3d5ffd5b5050505090565b6003546040517faefb212f000000000000000000000000000000000000000000000000000000008152600481018490526024810183905260609173ffffffffffffffffffffffffffffffffffffffff169063aefb212f906044015f60405180830381865afa158015610f15573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526107069190810190611e6c565b5f81815260056020526040902054819073ffffffffffffffffffffffffffffffffffffffff163314610fe8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f43616c6c6572206973206e6f7420737562736372697074696f6e206f776e657260448201526064016105a9565b6003546040517fb2a7cac50000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff9091169063b2a7cac5906024015b5f604051808303815f87803b1580156109a4575f5ffd5b5f82815260056020526040902054829073ffffffffffffffffffffffffffffffffffffffff1633146110e0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f43616c6c6572206973206e6f7420737562736372697074696f6e206f776e657260448201526064016105a9565b6003546040517fbec4c08c0000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff84811660248301529091169063bec4c08c9060440161060d565b611147611873565b600380547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000063ffffffff8481168202929092179283905560405192041681527f06072508f4be461bb306c2111807a859ab85e8ae617fbb868cb18a078665072d9060200160405180910390a150565b5f82815260056020526040902054829073ffffffffffffffffffffffffffffffffffffffff16331461125b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f43616c6c6572206973206e6f7420737562736372697074696f6e206f776e657260448201526064016105a9565b6003546040517fcb6317970000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff84811660248301529091169063cb6317979060440161060d565b6003546040517fdac83d290000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff83811660248301529091169063dac83d299060440161103b565b6003546040517fdc311dd3000000000000000000000000000000000000000000000000000000008152600481018390525f91829182918291606091839182918291829173ffffffffffffffffffffffffffffffffffffffff169063dc311dd3906024015f60405180830381865afa158015611396573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526113db9190810190611d77565b5f9e939d50919b509950975095505050505050565b6003545f9073ffffffffffffffffffffffffffffffffffffffff811690633255c4569061143b9074010000000000000000000000000000000000000000900463ffffffff1687611c61565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815263ffffffff91909116600482015260248101859052604401602060405180830381865afa15801561149a573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114be9190611ca2565b949350505050565b6114ce611873565b6114d7816118f6565b50565b60605f8267ffffffffffffffff8111156114f6576114f6611cd8565b60405190808252806020026020018201604052801561151f578160200160208202803683370190505b5090505f5b8381101561157d576040805160208101879052908101829052606001604051602081830303815290604052805190602001205f1c82828151811061156a5761156a611efd565b6020908102919091010152600101611524565b509392505050565b5f8281526006602081815260408084208151606081018352815473ffffffffffffffffffffffffffffffffffffffff808216835274010000000000000000000000000000000000000000820463ffffffff1683870152780100000000000000000000000000000000000000000000000090910467ffffffffffffffff16938201939093528786529390925292905580519091811661167f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f72657175657374206e6f7420666f756e6400000000000000000000000000000060448201526064016105a9565b5f5f631fe543e360e01b868660405160240161169c929190611f2a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090505f8373ffffffffffffffffffffffffffffffffffffffff16856020015163ffffffff168360405161172c9190611f42565b5f604051808303815f8787f1925050503d805f8114611766576040519150601f19603f3d011682016040523d82523d5f602084013e61176b565b606091505b50509050806106365760405173ffffffffffffffffffffffffffffffffffffffff85169088907fc551b83c151f2d1c7eeb938ac59008e0409f1c1dc1e2f112449d4d79b4589022905f90a350505050505050565b60025f54036117fa576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025f55565b5f805b825181101561186a578373ffffffffffffffffffffffffffffffffffffffff1683828151811061183557611835611efd565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603611862576001915050610709565b600101611803565b505f9392505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146118f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016105a9565b565b3373ffffffffffffffffffffffffffffffffffffffff821603611975576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016105a9565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff838116918217909255600154604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278905f90a350565b73ffffffffffffffffffffffffffffffffffffffff811681146114d7575f5ffd5b5f5f60408385031215611a1d575f5ffd5b823591506020830135611a2f816119eb565b809150509250929050565b803563ffffffff81168114610d4b575f5ffd5b5f5f60408385031215611a5e575f5ffd5b611a6783611a3a565b9150611a7560208401611a3a565b90509250929050565b5f60208284031215611a8e575f5ffd5b5035919050565b5f5f60408385031215611aa6575f5ffd5b50508035926020909101359150565b5f60208284031215611ac5575f5ffd5b813567ffffffffffffffff811115611adb575f5ffd5b820160c08185031215611aec575f5ffd5b9392505050565b5f8151808452602084019350602083015f5b82811015611b23578151865260209586019590910190600101611b05565b5093949350505050565b602081525f6107066020830184611af3565b5f60208284031215611b4f575f5ffd5b61070682611a3a565b5f60a082016bffffffffffffffffffffffff881683526bffffffffffffffffffffffff8716602084015267ffffffffffffffff8616604084015273ffffffffffffffffffffffffffffffffffffffff8516606084015260a0608084015280845180835260c0850191506020860192505f5b81811015611bfd57835173ffffffffffffffffffffffffffffffffffffffff16835260209384019390920191600101611bc9565b50909998505050505050505050565b5f5f5f60608486031215611c1e575f5ffd5b611c2784611a3a565b9250611c3560208501611a3a565b929592945050506040919091013590565b5f60208284031215611c56575f5ffd5b8135611aec816119eb565b63ffffffff8181168382160190811115610709577f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f60208284031215611cb2575f5ffd5b5051919050565b5f60208284031215611cc9575f5ffd5b81518015158114611aec575f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611d4c57611d4c611cd8565b604052919050565b5f67ffffffffffffffff821115611d6d57611d6d611cd8565b5060051b60200190565b5f5f5f5f60808587031215611d8a575f5ffd5b84516bffffffffffffffffffffffff81168114611da5575f5ffd5b602086015190945067ffffffffffffffff81168114611dc2575f5ffd5b6040860151909350611dd3816119eb565b606086015190925067ffffffffffffffff811115611def575f5ffd5b8501601f81018713611dff575f5ffd5b8051611e12611e0d82611d54565b611d05565b8082825260208201915060208360051b850101925089831115611e33575f5ffd5b6020840193505b82841015611e5e578351611e4d816119eb565b825260209384019390910190611e3a565b969995985093965050505050565b5f60208284031215611e7c575f5ffd5b815167ffffffffffffffff811115611e92575f5ffd5b8201601f81018413611ea2575f5ffd5b8051611eb0611e0d82611d54565b8082825260208201915060208360051b850101925086831115611ed1575f5ffd5b6020840193505b82841015611ef3578351825260209384019390910190611ed8565b9695505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b828152604060208201525f6114be6040830184611af3565b5f82518060208501845e5f92019182525091905056fea2646970667358221220a8ac9a21208416d556424d3fd9cb5fe0fa2bc028c32368330767c267a1913a1064736f6c634300081c0033";
var isSuperArgs13 = (xs) => xs.length > 1;
var ChainlinkVRFCoordinatorV2_5Adapter__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs13(args)) {
      super(...args);
    } else {
      super(_abi21, _bytecode13, args[0]);
    }
  }
  getDeployTransaction(owner, _randomnessSender, overrides) {
    return super.getDeployTransaction(
      owner,
      _randomnessSender,
      overrides || {}
    );
  }
  deploy(owner, _randomnessSender, overrides) {
    return super.deploy(owner, _randomnessSender, overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi21);
  }
  static connect(address, runner) {
    return new Contract(
      address,
      _abi21,
      runner
    );
  }
};
ChainlinkVRFCoordinatorV2_5Adapter__factory.bytecode = _bytecode13;
ChainlinkVRFCoordinatorV2_5Adapter__factory.abi = _abi21;

// src/generated/factories/ChainlinkVRFDirectFundingConsumer__factory.ts
var _abi22 = [
  {
    type: "constructor",
    inputs: [
      {
        name: "wrapperAddress",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "receive",
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "acceptOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "fundContractNative",
    inputs: [],
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "getBalance",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getRandomWords",
    inputs: [
      {
        name: "_requestId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "i_vrfV2PlusWrapper",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IVRFV2PlusWrapper"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "randomWordsOf",
    inputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "rawFulfillRandomWords",
    inputs: [
      {
        name: "_requestId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "_randomWords",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "requestId",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "requestRandomWords",
    inputs: [
      {
        name: "callbackGasLimit",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "withdrawNative",
    inputs: [
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "recipient",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "event",
    name: "Funded",
    inputs: [
      {
        name: "sender",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "OwnershipTransferRequested",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "Received",
    inputs: [
      {
        name: "",
        type: "address",
        indexed: false,
        internalType: "address"
      },
      {
        name: "",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "Withdrawn",
    inputs: [
      {
        name: "recipient",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "error",
    name: "OnlyVRFWrapperCanFulfill",
    inputs: [
      {
        name: "have",
        type: "address",
        internalType: "address"
      },
      {
        name: "want",
        type: "address",
        internalType: "address"
      }
    ]
  }
];
var _bytecode14 = "";
var isSuperArgs14 = (xs) => xs.length > 1;
var ChainlinkVRFDirectFundingConsumer__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs14(args)) {
      super(...args);
    } else {
      super(_abi22, _bytecode14, args[0]);
    }
  }
  getDeployTransaction(wrapperAddress, overrides) {
    return super.getDeployTransaction(wrapperAddress, overrides || {});
  }
  deploy(wrapperAddress, overrides) {
    return super.deploy(wrapperAddress, overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi22);
  }
  static connect(address, runner) {
    return new Contract(
      address,
      _abi22,
      runner
    );
  }
};
ChainlinkVRFDirectFundingConsumer__factory.bytecode = _bytecode14;
ChainlinkVRFDirectFundingConsumer__factory.abi = _abi22;

// src/generated/factories/ChainlinkVRFSubscriptionConsumer__factory.ts
var _abi23 = [
  {
    type: "constructor",
    inputs: [
      {
        name: "subscriptionId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "_vrfCoordinator",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "acceptOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "addConsumer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "consumer",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "createSubscription",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "fundSubscriptionWithNative",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "getRandomWords",
    inputs: [
      {
        name: "_requestId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "randomWordsOf",
    inputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "rawFulfillRandomWords",
    inputs: [
      {
        name: "requestId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "randomWords",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "requestId",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "requestRandomWords",
    inputs: [
      {
        name: "callbackGasLimit",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    outputs: [
      {
        name: "_requestId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "s_vrfCoordinator",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IVRFCoordinatorV2Plus"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "setCoordinator",
    inputs: [
      {
        name: "_vrfCoordinator",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "setSubscription",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "event",
    name: "CoordinatorSet",
    inputs: [
      {
        name: "vrfCoordinator",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "OwnershipTransferRequested",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "error",
    name: "OnlyCoordinatorCanFulfill",
    inputs: [
      {
        name: "have",
        type: "address",
        internalType: "address"
      },
      {
        name: "want",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "OnlyOwnerOrCoordinator",
    inputs: [
      {
        name: "have",
        type: "address",
        internalType: "address"
      },
      {
        name: "owner",
        type: "address",
        internalType: "address"
      },
      {
        name: "coordinator",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "ZeroAddress",
    inputs: []
  }
];
var _bytecode15 = "";
var isSuperArgs15 = (xs) => xs.length > 1;
var ChainlinkVRFSubscriptionConsumer__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs15(args)) {
      super(...args);
    } else {
      super(_abi23, _bytecode15, args[0]);
    }
  }
  getDeployTransaction(subscriptionId, _vrfCoordinator, overrides) {
    return super.getDeployTransaction(
      subscriptionId,
      _vrfCoordinator,
      overrides || {}
    );
  }
  deploy(subscriptionId, _vrfCoordinator, overrides) {
    return super.deploy(
      subscriptionId,
      _vrfCoordinator,
      overrides || {}
    );
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi23);
  }
  static connect(address, runner) {
    return new Contract(
      address,
      _abi23,
      runner
    );
  }
};
ChainlinkVRFSubscriptionConsumer__factory.bytecode = _bytecode15;
ChainlinkVRFSubscriptionConsumer__factory.abi = _abi23;

// src/generated/factories/ChainlinkVRFV2PlusWrapperAdapter__factory.ts
var _abi24 = [
  {
    type: "constructor",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address"
      },
      {
        name: "_randomnessSender",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "acceptOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "calculateRequestPriceNative",
    inputs: [
      {
        name: "_callbackGasLimit",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "estimateRequestPriceNative",
    inputs: [
      {
        name: "_callbackGasLimit",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "_requestGasPriceWei",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getConfig",
    inputs: [],
    outputs: [
      {
        name: "fallbackWeiPerUnitLink",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "stalenessSeconds",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "fulfillmentFlatFeeNativePPM",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "fulfillmentFlatFeeLinkDiscountPPM",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "wrapperGasOverhead",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "coordinatorGasOverheadNative",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "coordinatorGasOverheadLink",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "coordinatorGasOverheadPerWord",
        type: "uint16",
        internalType: "uint16"
      },
      {
        name: "wrapperNativePremiumPercentage",
        type: "uint8",
        internalType: "uint8"
      },
      {
        name: "wrapperLinkPremiumPercentage",
        type: "uint8",
        internalType: "uint8"
      },
      {
        name: "keyHash",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "maxNumWords",
        type: "uint8",
        internalType: "uint8"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "lastRequestId",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "randomnessSender",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IRandomnessSender"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "receiveRandomness",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "randomness",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "requestRandomWordsInNative",
    inputs: [
      {
        name: "_callbackGasLimit",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "",
        type: "uint16",
        internalType: "uint16"
      },
      {
        name: "",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "requestId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "s_callbacks",
    inputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "callbackAddress",
        type: "address",
        internalType: "address"
      },
      {
        name: "callbackGasLimit",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "requestGasPrice",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "setWrapperGasOverhead",
    inputs: [
      {
        name: "_s_wrapperGasOverhead",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "typeAndVersion",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "event",
    name: "OwnershipTransferRequested",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "WrapperFulfillmentFailed",
    inputs: [
      {
        name: "requestId",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "consumer",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "WrapperGasOverheadUpdated",
    inputs: [
      {
        name: "newWrapperGasOverhead",
        type: "uint32",
        indexed: false,
        internalType: "uint32"
      }
    ],
    anonymous: false
  },
  {
    type: "error",
    name: "ReentrancyGuardReentrantCall",
    inputs: []
  }
];
var _bytecode16 = "0x60806040526003805463ffffffff60a01b1916610c3560a51b179055348015610026575f5ffd5b5060405161151d38038061151d833981016040819052610045916101c9565b60015f908155829081906001600160a01b0382166100aa5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600180546001600160a01b0319166001600160a01b03848116919091179091558116156100da576100da81610105565b5050600380546001600160a01b0319166001600160a01b039390931692909217909155506101fa9050565b336001600160a01b0382160361015d5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016100a1565b600280546001600160a01b0319166001600160a01b03838116918217909255600154604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278905f90a350565b80516001600160a01b03811681146101c4575f5ffd5b919050565b5f5f604083850312156101da575f5ffd5b6101e3836101ae565b91506101f1602084016101ae565b90509250929050565b611316806102075f395ff3fe6080604052600436106100ce575f3560e01c80639cfc058e1161007c578063df3fafe811610057578063df3fafe8146102f6578063e1cab74514610322578063f2fde38b14610341578063fc2a88c314610360575f5ffd5b80639cfc058e14610298578063c3f909d4146102ab578063c40684f0146102d7575f5ffd5b806348baa1c5116100ac57806348baa1c51461017057806379ba5097146102395780638da5cb5b1461024d575f5ffd5b806313c34b7f146100d2578063181f5a7714610104578063431ac6571461014f575b5f5ffd5b3480156100dd575f5ffd5b506100f16100ec366004610eb1565b610375565b6040519081526020015b60405180910390f35b34801561010f575f5ffd5b50604080518082018252601681527f5652465632506c75735772617070657220312e302e3000000000000000000000602082015290516100fb9190610ee8565b34801561015a575f5ffd5b5061016e610169366004610f3b565b610445565b005b34801561017b575f5ffd5b506101f861018a366004610f5b565b60056020525f908152604090205473ffffffffffffffffffffffffffffffffffffffff81169074010000000000000000000000000000000000000000810463ffffffff16907801000000000000000000000000000000000000000000000000900467ffffffffffffffff1683565b6040805173ffffffffffffffffffffffffffffffffffffffff909416845263ffffffff909216602084015267ffffffffffffffff16908201526060016100fb565b348015610244575f5ffd5b5061016e6104e3565b348015610258575f5ffd5b5060015473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100fb565b6100f16102a6366004610f72565b6105e3565b3480156102b6575f5ffd5b506102bf6107ad565b6040516100fb9c9b9a9998979695949392919061101a565b3480156102e2575f5ffd5b5061016e6102f136600461109c565b610889565b348015610301575f5ffd5b506003546102739073ffffffffffffffffffffffffffffffffffffffff1681565b34801561032d575f5ffd5b506100f161033c3660046110be565b610917565b34801561034c575f5ffd5b5061016e61035b3660046110fc565b6109ed565b34801561036b575f5ffd5b506100f160045481565b6003545f9073ffffffffffffffffffffffffffffffffffffffff811690634b160935906103c09074010000000000000000000000000000000000000000900463ffffffff168661112f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815263ffffffff919091166004820152602401602060405180830381865afa158015610418573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061043c9190611170565b90505b92915050565b60035473ffffffffffffffffffffffffffffffffffffffff1633146104cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4f6e6c792072616e646f6d6e65737353656e6465722063616e2063616c6c000060448201526064015b60405180910390fd5b6104df826104da836001610a01565b610aac565b5050565b60025473ffffffffffffffffffffffffffffffffffffffff163314610564576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064016104c2565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000008082163390811790935560028054909116905560405173ffffffffffffffffffffffffffffffffffffffff909116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a350565b5f6105ec610ce7565b60035473ffffffffffffffffffffffffffffffffffffffff81169063811ee32a9034906106379074010000000000000000000000000000000000000000900463ffffffff168a61112f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815263ffffffff91909116600482015260240160206040518083038185885af1158015610690573d5f5f3e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906106b59190611170565b6040805160608101825233815263ffffffff808a16602080840191825267ffffffffffffffff3a81168587019081525f888152600590935295909120935184549251955190911678010000000000000000000000000000000000000000000000000277ffffffffffffffffffffffffffffffffffffffffffffffff9590931674010000000000000000000000000000000000000000027fffffffffffffffff00000000000000000000000000000000000000000000000090921673ffffffffffffffffffffffffffffffffffffffff91909116171792909216919091179055600481905590506107a460015f55565b95945050505050565b5f5f5f5f5f5f5f5f5f5f5f5f5f5f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c3f909d46040518163ffffffff1660e01b815260040160e060405180830381865afa158015610825573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108499190611187565b5095505050935050505f5f835f5f5f5f5f885f5f5f1b60019d509d509d509d509d509d509d509d509d509d509d509d505050909192939495969798999a9b565b610891610d28565b600380547fffffffffffffffff00000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000063ffffffff8481168202929092179283905560405192041681527f06072508f4be461bb306c2111807a859ab85e8ae617fbb868cb18a078665072d9060200160405180910390a150565b6003545f9073ffffffffffffffffffffffffffffffffffffffff811690633255c456906109629074010000000000000000000000000000000000000000900463ffffffff168761112f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815263ffffffff91909116600482015260248101859052604401602060405180830381865afa1580156109c1573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109e59190611170565b949350505050565b6109f5610d28565b6109fe81610dab565b50565b60605f8267ffffffffffffffff811115610a1d57610a1d611223565b604051908082528060200260200182016040528015610a46578160200160208202803683370190505b5090505f5b83811015610aa4576040805160208101879052908101829052606001604051602081830303815290604052805190602001205f1c828281518110610a9157610a91611250565b6020908102919091010152600101610a4b565b509392505050565b5f8281526005602081815260408084208151606081018352815473ffffffffffffffffffffffffffffffffffffffff808216835274010000000000000000000000000000000000000000820463ffffffff1683870152780100000000000000000000000000000000000000000000000090910467ffffffffffffffff169382019390935287865293909252929055805190918116610ba6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f72657175657374206e6f7420666f756e6400000000000000000000000000000060448201526064016104c2565b5f5f631fe543e360e01b8686604051602401610bc392919061127d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090505f8373ffffffffffffffffffffffffffffffffffffffff16856020015163ffffffff1683604051610c5391906112ca565b5f604051808303815f8787f1925050503d805f8114610c8d576040519150601f19603f3d011682016040523d82523d5f602084013e610c92565b606091505b5050905080610cde5760405173ffffffffffffffffffffffffffffffffffffffff85169088907fc551b83c151f2d1c7eeb938ac59008e0409f1c1dc1e2f112449d4d79b4589022905f90a35b50505050505050565b60025f5403610d22576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025f55565b60015473ffffffffffffffffffffffffffffffffffffffff163314610da9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016104c2565b565b3373ffffffffffffffffffffffffffffffffffffffff821603610e2a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016104c2565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff838116918217909255600154604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278905f90a350565b63ffffffff811681146109fe575f5ffd5b5f5f60408385031215610ec2575f5ffd5b8235610ecd81610ea0565b91506020830135610edd81610ea0565b809150509250929050565b602081525f82518060208401528060208501604085015e5f6040828501015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011684010191505092915050565b5f5f60408385031215610f4c575f5ffd5b50508035926020909101359150565b5f60208284031215610f6b575f5ffd5b5035919050565b5f5f5f5f5f60808688031215610f86575f5ffd5b8535610f9181610ea0565b9450602086013561ffff81168114610fa7575f5ffd5b93506040860135610fb781610ea0565b9250606086013567ffffffffffffffff811115610fd2575f5ffd5b8601601f81018813610fe2575f5ffd5b803567ffffffffffffffff811115610ff8575f5ffd5b886020828401011115611009575f5ffd5b959894975092955050506020019190565b8c815263ffffffff8c811660208301528b811660408301528a81166060830152898116608083015288811660a0830152871660c0820152610180810161ffff871660e083015260ff861661010083015260ff85166101208301528361014083015261108b61016083018460ff169052565b9d9c50505050505050505050505050565b5f602082840312156110ac575f5ffd5b81356110b781610ea0565b9392505050565b5f5f5f606084860312156110d0575f5ffd5b83356110db81610ea0565b925060208401356110eb81610ea0565b929592945050506040919091013590565b5f6020828403121561110c575f5ffd5b813573ffffffffffffffffffffffffffffffffffffffff811681146110b7575f5ffd5b63ffffffff818116838216019081111561043f577f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f60208284031215611180575f5ffd5b5051919050565b5f5f5f5f5f5f5f60e0888a03121561119d575f5ffd5b87516111a881610ea0565b60208901519097506111b981610ea0565b60408901519096506111ca81610ea0565b60608901519095506111db81610ea0565b60808901519094506111ec81610ea0565b60a089015190935060ff81168114611202575f5ffd5b60c089015190925061121381610ea0565b8091505092959891949750929550565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f60408201848352604060208401528084518083526060850191506020860192505f5b818110156112be5783518352602093840193909201916001016112a0565b50909695505050505050565b5f82518060208501845e5f92019182525091905056fea26469706673582212204127ae98e3d8dd57e04ce64ae1602221b569f291e606368e3f955b18e54b23a864736f6c634300081c0033";
var isSuperArgs16 = (xs) => xs.length > 1;
var ChainlinkVRFV2PlusWrapperAdapter__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs16(args)) {
      super(...args);
    } else {
      super(_abi24, _bytecode16, args[0]);
    }
  }
  getDeployTransaction(owner, _randomnessSender, overrides) {
    return super.getDeployTransaction(
      owner,
      _randomnessSender,
      overrides || {}
    );
  }
  deploy(owner, _randomnessSender, overrides) {
    return super.deploy(owner, _randomnessSender, overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi24);
  }
  static connect(address, runner) {
    return new Contract(
      address,
      _abi24,
      runner
    );
  }
};
ChainlinkVRFV2PlusWrapperAdapter__factory.bytecode = _bytecode16;
ChainlinkVRFV2PlusWrapperAdapter__factory.abi = _abi24;

// src/generated/factories/ChainlinkVRFV2PlusWrapperConsumerBaseStub__factory.ts
var _abi25 = [
  {
    type: "function",
    name: "getBalance",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "i_vrfV2PlusWrapper",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IVRFV2PlusWrapper"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "rawFulfillRandomWords",
    inputs: [
      {
        name: "_requestId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "_randomWords",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "error",
    name: "OnlyVRFWrapperCanFulfill",
    inputs: [
      {
        name: "have",
        type: "address",
        internalType: "address"
      },
      {
        name: "want",
        type: "address",
        internalType: "address"
      }
    ]
  }
];
var ChainlinkVRFV2PlusWrapperConsumerBaseStub__factory = class {
  static createInterface() {
    return new Interface(
      _abi25
    );
  }
  static connect(address, runner) {
    return new Contract(
      address,
      _abi25,
      runner
    );
  }
};
ChainlinkVRFV2PlusWrapperConsumerBaseStub__factory.abi = _abi25;

// src/generated/factories/ConfirmedOwner__factory.ts
var _abi26 = [
  {
    type: "constructor",
    inputs: [
      {
        name: "newOwner",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "acceptOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "event",
    name: "OwnershipTransferRequested",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  }
];
var _bytecode17 = "0x608060405234801561000f575f5ffd5b5060405161052a38038061052a83398101604081905261002e9161016a565b805f6001600160a01b03821661008b5760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b5f80546001600160a01b0319166001600160a01b03848116919091179091558116156100ba576100ba816100c2565b505050610197565b336001600160a01b0382160361011a5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610082565b600180546001600160a01b0319166001600160a01b038381169182179092555f8054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b5f6020828403121561017a575f5ffd5b81516001600160a01b0381168114610190575f5ffd5b9392505050565b610386806101a45f395ff3fe608060405234801561000f575f5ffd5b506004361061003f575f3560e01c806379ba5097146100435780638da5cb5b1461004d578063f2fde38b14610078575b5f5ffd5b61004b61008b565b005b5f546040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61004b610086366004610316565b61018c565b60015473ffffffffffffffffffffffffffffffffffffffff163314610111576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b5f8054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6101946101a0565b61019d81610222565b50565b5f5473ffffffffffffffffffffffffffffffffffffffff163314610220576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000006044820152606401610108565b565b3373ffffffffffffffffffffffffffffffffffffffff8216036102a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610108565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182179092555f8054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b5f60208284031215610326575f5ffd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610349575f5ffd5b939250505056fea2646970667358221220cfce00f2af26026994ff6c85925444b9649b18fc157f3a1fb030a27d7801057f64736f6c634300081c0033";
var isSuperArgs17 = (xs) => xs.length > 1;
var ConfirmedOwner__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs17(args)) {
      super(...args);
    } else {
      super(_abi26, _bytecode17, args[0]);
    }
  }
  getDeployTransaction(newOwner, overrides) {
    return super.getDeployTransaction(newOwner, overrides || {});
  }
  deploy(newOwner, overrides) {
    return super.deploy(newOwner, overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi26);
  }
  static connect(address, runner) {
    return new Contract(address, _abi26, runner);
  }
};
ConfirmedOwner__factory.bytecode = _bytecode17;
ConfirmedOwner__factory.abi = _abi26;

// src/generated/factories/ConfirmedOwnerWithProposal__factory.ts
var _abi27 = [
  {
    type: "constructor",
    inputs: [
      {
        name: "newOwner",
        type: "address",
        internalType: "address"
      },
      {
        name: "pendingOwner",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "acceptOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "event",
    name: "OwnershipTransferRequested",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  }
];
var _bytecode18 = "0x608060405234801561000f575f5ffd5b5060405161054638038061054683398101604081905261002e91610182565b6001600160a01b0382166100895760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b5f80546001600160a01b0319166001600160a01b03848116919091179091558116156100b8576100b8816100bf565b50506101b3565b336001600160a01b038216036101175760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610080565b600180546001600160a01b0319166001600160a01b038381169182179092555f8054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b80516001600160a01b038116811461017d575f5ffd5b919050565b5f5f60408385031215610193575f5ffd5b61019c83610167565b91506101aa60208401610167565b90509250929050565b610386806101c05f395ff3fe608060405234801561000f575f5ffd5b506004361061003f575f3560e01c806379ba5097146100435780638da5cb5b1461004d578063f2fde38b14610078575b5f5ffd5b61004b61008b565b005b5f546040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61004b610086366004610316565b61018c565b60015473ffffffffffffffffffffffffffffffffffffffff163314610111576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064015b60405180910390fd5b5f8054337fffffffffffffffffffffffff00000000000000000000000000000000000000008083168217845560018054909116905560405173ffffffffffffffffffffffffffffffffffffffff90921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6101946101a0565b61019d81610222565b50565b5f5473ffffffffffffffffffffffffffffffffffffffff163314610220576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000006044820152606401610108565b565b3373ffffffffffffffffffffffffffffffffffffffff8216036102a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610108565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182179092555f8054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b5f60208284031215610326575f5ffd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610349575f5ffd5b939250505056fea26469706673582212201b50ab7b8030206e8c22d6ef9c92e5fa5ce7afbed75c5e3431df44bc5a0e185664736f6c634300081c0033";
var isSuperArgs18 = (xs) => xs.length > 1;
var ConfirmedOwnerWithProposal__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs18(args)) {
      super(...args);
    } else {
      super(_abi27, _bytecode18, args[0]);
    }
  }
  getDeployTransaction(newOwner, pendingOwner, overrides) {
    return super.getDeployTransaction(newOwner, pendingOwner, overrides || {});
  }
  deploy(newOwner, pendingOwner, overrides) {
    return super.deploy(newOwner, pendingOwner, overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi27);
  }
  static connect(address, runner) {
    return new Contract(
      address,
      _abi27,
      runner
    );
  }
};
ConfirmedOwnerWithProposal__factory.bytecode = _bytecode18;
ConfirmedOwnerWithProposal__factory.abi = _abi27;

// src/generated/factories/ContextUpgradeable__factory.ts
var _abi28 = [
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint64",
        indexed: false,
        internalType: "uint64"
      }
    ],
    anonymous: false
  },
  {
    type: "error",
    name: "InvalidInitialization",
    inputs: []
  },
  {
    type: "error",
    name: "NotInitializing",
    inputs: []
  }
];
var ContextUpgradeable__factory = class {
  static createInterface() {
    return new Interface(_abi28);
  }
  static connect(address, runner) {
    return new Contract(address, _abi28, runner);
  }
};
ContextUpgradeable__factory.abi = _abi28;

// src/generated/factories/ERC165__factory.ts
var _abi29 = [
  {
    type: "function",
    name: "supportsInterface",
    inputs: [
      {
        name: "interfaceId",
        type: "bytes4",
        internalType: "bytes4"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  }
];
var ERC165__factory = class {
  static createInterface() {
    return new Interface(_abi29);
  }
  static connect(address, runner) {
    return new Contract(address, _abi29, runner);
  }
};
ERC165__factory.abi = _abi29;

// src/generated/factories/ERC165Upgradeable__factory.ts
var _abi30 = [
  {
    type: "function",
    name: "supportsInterface",
    inputs: [
      {
        name: "interfaceId",
        type: "bytes4",
        internalType: "bytes4"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint64",
        indexed: false,
        internalType: "uint64"
      }
    ],
    anonymous: false
  },
  {
    type: "error",
    name: "InvalidInitialization",
    inputs: []
  },
  {
    type: "error",
    name: "NotInitializing",
    inputs: []
  }
];
var ERC165Upgradeable__factory = class {
  static createInterface() {
    return new Interface(_abi30);
  }
  static connect(address, runner) {
    return new Contract(address, _abi30, runner);
  }
};
ERC165Upgradeable__factory.abi = _abi30;

// src/generated/factories/ERC1967Proxy__factory.ts
var _abi31 = [
  {
    type: "constructor",
    inputs: [
      {
        name: "implementation",
        type: "address",
        internalType: "address"
      },
      {
        name: "_data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "payable"
  },
  {
    type: "fallback",
    stateMutability: "payable"
  },
  {
    type: "event",
    name: "Upgraded",
    inputs: [
      {
        name: "implementation",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "error",
    name: "AddressEmptyCode",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "ERC1967InvalidImplementation",
    inputs: [
      {
        name: "implementation",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "ERC1967NonPayable",
    inputs: []
  },
  {
    type: "error",
    name: "FailedCall",
    inputs: []
  }
];
var _bytecode19 = "0x60806040526040516103dd3803806103dd8339810160408190526100229161023c565b61002c8282610033565b5050610321565b61003c82610091565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a280511561008557610080828261010c565b505050565b61008d61017f565b5050565b806001600160a01b03163b5f036100cb57604051634c9c8ce360e01b81526001600160a01b03821660048201526024015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b60605f5f846001600160a01b031684604051610128919061030b565b5f60405180830381855af49150503d805f8114610160576040519150601f19603f3d011682016040523d82523d5f602084013e610165565b606091505b5090925090506101768583836101a0565b95945050505050565b341561019e5760405163b398979f60e01b815260040160405180910390fd5b565b6060826101b5576101b0826101ff565b6101f8565b81511580156101cc57506001600160a01b0384163b155b156101f557604051639996b31560e01b81526001600160a01b03851660048201526024016100c2565b50805b9392505050565b80511561020f5780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b634e487b7160e01b5f52604160045260245ffd5b5f5f6040838503121561024d575f5ffd5b82516001600160a01b0381168114610263575f5ffd5b60208401519092506001600160401b0381111561027e575f5ffd5b8301601f8101851361028e575f5ffd5b80516001600160401b038111156102a7576102a7610228565b604051601f8201601f19908116603f011681016001600160401b03811182821017156102d5576102d5610228565b6040528181528282016020018710156102ec575f5ffd5b8160208401602083015e5f602083830101528093505050509250929050565b5f82518060208501845e5f920191825250919050565b60b08061032d5f395ff3fe6080604052600a600c565b005b60186014601a565b605d565b565b5f60587f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b365f5f375f5f365f845af43d5f5f3e8080156076573d5ff35b3d5ffdfea26469706673582212206a7531ab1dc67ed911e354ac6aea2c95f795297737465de92a1e31dc3e3bc24b64736f6c634300081c0033";
var isSuperArgs19 = (xs) => xs.length > 1;
var ERC1967Proxy__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs19(args)) {
      super(...args);
    } else {
      super(_abi31, _bytecode19, args[0]);
    }
  }
  getDeployTransaction(implementation, _data5, overrides) {
    return super.getDeployTransaction(implementation, _data5, overrides || {});
  }
  deploy(implementation, _data5, overrides) {
    return super.deploy(implementation, _data5, overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi31);
  }
  static connect(address, runner) {
    return new Contract(address, _abi31, runner);
  }
};
ERC1967Proxy__factory.bytecode = _bytecode19;
ERC1967Proxy__factory.abi = _abi31;

// src/generated/factories/ERC1967Utils__factory.ts
var _abi32 = [
  {
    type: "error",
    name: "ERC1967InvalidAdmin",
    inputs: [
      {
        name: "admin",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "ERC1967InvalidBeacon",
    inputs: [
      {
        name: "beacon",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "ERC1967InvalidImplementation",
    inputs: [
      {
        name: "implementation",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "ERC1967NonPayable",
    inputs: []
  }
];
var _bytecode20 = "0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea2646970667358221220ed8a5b1a962c0ebf1bcee0afc3c8ba0a93373a00303a669e2bb7cac4e216687f64736f6c634300081c0033";
var isSuperArgs20 = (xs) => xs.length > 1;
var ERC1967Utils__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs20(args)) {
      super(...args);
    } else {
      super(_abi32, _bytecode20, args[0]);
    }
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi32);
  }
  static connect(address, runner) {
    return new Contract(address, _abi32, runner);
  }
};
ERC1967Utils__factory.bytecode = _bytecode20;
ERC1967Utils__factory.abi = _abi32;

// src/generated/factories/Errors__factory.ts
var _abi33 = [
  {
    type: "error",
    name: "FailedCall",
    inputs: []
  },
  {
    type: "error",
    name: "FailedDeployment",
    inputs: []
  },
  {
    type: "error",
    name: "InsufficientBalance",
    inputs: [
      {
        name: "balance",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "needed",
        type: "uint256",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "error",
    name: "MissingPrecompile",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ]
  }
];
var _bytecode21 = "0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea264697066735822122097d3e64703dab8d2881cb28a9e52bf3dd2a6faa2fc9241fac9467417627a399064736f6c634300081c0033";
var isSuperArgs21 = (xs) => xs.length > 1;
var Errors__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs21(args)) {
      super(...args);
    } else {
      super(_abi33, _bytecode21, args[0]);
    }
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi33);
  }
  static connect(address, runner) {
    return new Contract(address, _abi33, runner);
  }
};
Errors__factory.bytecode = _bytecode21;
Errors__factory.abi = _abi33;

// src/generated/factories/Factory__factory.ts
var _abi34 = [
  {
    type: "function",
    name: "computeAddress",
    inputs: [
      {
        name: "salt",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "creationCodeHash",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "addr",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "deploy",
    inputs: [
      {
        name: "salt",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "creationCode",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "addr",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "payable"
  },
  {
    type: "event",
    name: "CreatedContract",
    inputs: [
      {
        name: "addr",
        type: "address",
        indexed: false,
        internalType: "address"
      },
      {
        name: "salt",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "error",
    name: "Create2EmptyBytecode",
    inputs: []
  },
  {
    type: "error",
    name: "Create2FailedDeployment",
    inputs: []
  }
];
var _bytecode22 = "0x6080604052348015600e575f5ffd5b506103168061001c5f395ff3fe608060405260043610610028575f3560e01c8063481286e61461002c578063cdcb760a14610074575b5f5ffd5b348015610037575f5ffd5b5061004b610046366004610199565b610087565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61004b6100823660046101e6565b6100b1565b6040805190810182905260208101839052308082525f91600b0160ff815360559020949350505050565b5f81515f036100ec576040517f4ca249dc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8282516020840134f5905073ffffffffffffffffffffffffffffffffffffffff8116610144576040517f741752c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff83168152602081018590527f4108529e399e9cd5343c48ae06aa62a23c8c1b7c93f59d4691a0ea1e6f5b4603910160405180910390a192915050565b5f5f604083850312156101aa575f5ffd5b50508035926020909101359150565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f5f604083850312156101f7575f5ffd5b82359150602083013567ffffffffffffffff811115610214575f5ffd5b8301601f81018513610224575f5ffd5b803567ffffffffffffffff81111561023e5761023e6101b9565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160116810181811067ffffffffffffffff821117156102aa576102aa6101b9565b6040528181528282016020018710156102c1575f5ffd5b816020840160208301375f60208383010152809350505050925092905056fea2646970667358221220c6923f30fd7132141542285bd95af22316639ec09562ad421e00ce18122d309564736f6c634300081c0033";
var isSuperArgs22 = (xs) => xs.length > 1;
var Factory__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs22(args)) {
      super(...args);
    } else {
      super(_abi34, _bytecode22, args[0]);
    }
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi34);
  }
  static connect(address, runner) {
    return new Contract(address, _abi34, runner);
  }
};
Factory__factory.bytecode = _bytecode22;
Factory__factory.abi = _abi34;

// src/generated/factories/FeeCollector__factory.ts
var _abi35 = [
  {
    type: "function",
    name: "MAX_CONSUMERS",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint16",
        internalType: "uint16"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "acceptSubscriptionOwnerTransfer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "addConsumer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "consumer",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "calculateRequestPriceNative",
    inputs: [
      {
        name: "_callbackGasLimit",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "cancelSubscription",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "to",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "createSubscription",
    inputs: [],
    outputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "disable",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "enable",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "estimateRequestPriceNative",
    inputs: [
      {
        name: "_callbackGasLimit",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "_requestGasPriceWei",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "fundSubscriptionWithNative",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "getActiveSubscriptionIds",
    inputs: [
      {
        name: "startIndex",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "maxCount",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "ids",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getSubscription",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "nativeBalance",
        type: "uint96",
        internalType: "uint96"
      },
      {
        name: "reqCount",
        type: "uint64",
        internalType: "uint64"
      },
      {
        name: "subOwner",
        type: "address",
        internalType: "address"
      },
      {
        name: "consumers",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "ownerCancelSubscription",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "pendingRequestExists",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "removeConsumer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "consumer",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "requestSubscriptionOwnerTransfer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "newOwner",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "s_config",
    inputs: [],
    outputs: [
      {
        name: "maxGasLimit",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "gasAfterPaymentCalculation",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "fulfillmentFlatFeeNativePPM",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "weiPerUnitGas",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "blsPairingCheckOverhead",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "nativePremiumPercentage",
        type: "uint8",
        internalType: "uint8"
      },
      {
        name: "gasForCallExactCheck",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "s_configured",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "s_currentSubNonce",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "s_disabled",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "s_totalNativeBalance",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint96",
        internalType: "uint96"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "s_withdrawableDirectFundingFeeNative",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint96",
        internalType: "uint96"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "s_withdrawableSubscriptionFeeNative",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint96",
        internalType: "uint96"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "setConfig",
    inputs: [
      {
        name: "maxGasLimit",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "gasAfterPaymentCalculation",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "fulfillmentFlatFeeNativePPM",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "weiPerUnitGas",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "blsPairingCheckOverhead",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "nativePremiumPercentage",
        type: "uint8",
        internalType: "uint8"
      },
      {
        name: "gasForCallExactCheck",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "withdrawDirectFundingFeesNative",
    inputs: [
      {
        name: "recipient",
        type: "address",
        internalType: "address payable"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "withdrawSubscriptionFeesNative",
    inputs: [
      {
        name: "recipient",
        type: "address",
        internalType: "address payable"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "event",
    name: "ConfigSet",
    inputs: [
      {
        name: "maxGasLimit",
        type: "uint32",
        indexed: false,
        internalType: "uint32"
      },
      {
        name: "gasAfterPaymentCalculation",
        type: "uint32",
        indexed: false,
        internalType: "uint32"
      },
      {
        name: "fulfillmentFlatFeeNativePPM",
        type: "uint32",
        indexed: false,
        internalType: "uint32"
      },
      {
        name: "weiPerUnitGas",
        type: "uint32",
        indexed: false,
        internalType: "uint32"
      },
      {
        name: "blsPairingCheckOverhead",
        type: "uint32",
        indexed: false,
        internalType: "uint32"
      },
      {
        name: "nativePremiumPercentage",
        type: "uint8",
        indexed: false,
        internalType: "uint8"
      },
      {
        name: "gasForCallExactCheck",
        type: "uint32",
        indexed: false,
        internalType: "uint32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "Disabled",
    inputs: [],
    anonymous: false
  },
  {
    type: "event",
    name: "Enabled",
    inputs: [],
    anonymous: false
  },
  {
    type: "event",
    name: "L1GasFee",
    inputs: [
      {
        name: "fee",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "SubscriptionCanceled",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "to",
        type: "address",
        indexed: false,
        internalType: "address"
      },
      {
        name: "amountNative",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "SubscriptionConsumerAdded",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "consumer",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "SubscriptionConsumerRemoved",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "consumer",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "SubscriptionCreated",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "owner",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "SubscriptionFundedWithNative",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "oldNativeBalance",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      },
      {
        name: "newNativeBalance",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "SubscriptionOwnerTransferRequested",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "from",
        type: "address",
        indexed: false,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "SubscriptionOwnerTransferred",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "from",
        type: "address",
        indexed: false,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "error",
    name: "BalanceInvariantViolated",
    inputs: [
      {
        name: "internalBalance",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "externalBalance",
        type: "uint256",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "error",
    name: "FailedToSendNative",
    inputs: []
  },
  {
    type: "error",
    name: "IndexOutOfRange",
    inputs: []
  },
  {
    type: "error",
    name: "InsufficientBalance",
    inputs: []
  },
  {
    type: "error",
    name: "InvalidCalldata",
    inputs: []
  },
  {
    type: "error",
    name: "InvalidConsumer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "consumer",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "InvalidSubscription",
    inputs: []
  },
  {
    type: "error",
    name: "MustBeRequestedOwner",
    inputs: [
      {
        name: "proposedOwner",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "MustBeSubOwner",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "PendingRequestExists",
    inputs: []
  },
  {
    type: "error",
    name: "ReentrancyGuardReentrantCall",
    inputs: []
  },
  {
    type: "error",
    name: "TooManyConsumers",
    inputs: []
  }
];
var FeeCollector__factory = class {
  static createInterface() {
    return new Interface(_abi35);
  }
  static connect(address, runner) {
    return new Contract(address, _abi35, runner);
  }
};
FeeCollector__factory.abi = _abi35;

// src/generated/factories/FeistelShuffleOptimised__factory.ts
var _abi36 = [
  {
    type: "error",
    name: "InvalidInputs",
    inputs: []
  }
];
var _bytecode23 = "0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea26469706673582212200d3d32878ec21758735a96467087a3e297b57211a5046cadc38f0d50afd567af64736f6c634300081c0033";
var isSuperArgs23 = (xs) => xs.length > 1;
var FeistelShuffleOptimised__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs23(args)) {
      super(...args);
    } else {
      super(_abi36, _bytecode23, args[0]);
    }
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi36);
  }
  static connect(address, runner) {
    return new Contract(
      address,
      _abi36,
      runner
    );
  }
};
FeistelShuffleOptimised__factory.bytecode = _bytecode23;
FeistelShuffleOptimised__factory.abi = _abi36;

// src/generated/factories/IAccessControl__factory.ts
var _abi37 = [
  {
    type: "function",
    name: "getRoleAdmin",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "grantRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "hasRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "renounceRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "callerConfirmation",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "revokeRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "event",
    name: "RoleAdminChanged",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "previousAdminRole",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "newAdminRole",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "RoleGranted",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "sender",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "RoleRevoked",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "sender",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "error",
    name: "AccessControlBadConfirmation",
    inputs: []
  },
  {
    type: "error",
    name: "AccessControlUnauthorizedAccount",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      },
      {
        name: "neededRole",
        type: "bytes32",
        internalType: "bytes32"
      }
    ]
  }
];
var IAccessControl__factory = class {
  static createInterface() {
    return new Interface(_abi37);
  }
  static connect(address, runner) {
    return new Contract(address, _abi37, runner);
  }
};
IAccessControl__factory.abi = _abi37;

// src/generated/factories/IAccessControlEnumerable__factory.ts
var _abi38 = [
  {
    type: "function",
    name: "getRoleAdmin",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getRoleMember",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "index",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getRoleMemberCount",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "grantRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "hasRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "renounceRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "callerConfirmation",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "revokeRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "event",
    name: "RoleAdminChanged",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "previousAdminRole",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "newAdminRole",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "RoleGranted",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "sender",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "RoleRevoked",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "sender",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "error",
    name: "AccessControlBadConfirmation",
    inputs: []
  },
  {
    type: "error",
    name: "AccessControlUnauthorizedAccount",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      },
      {
        name: "neededRole",
        type: "bytes32",
        internalType: "bytes32"
      }
    ]
  }
];
var IAccessControlEnumerable__factory = class {
  static createInterface() {
    return new Interface(_abi38);
  }
  static connect(address, runner) {
    return new Contract(
      address,
      _abi38,
      runner
    );
  }
};
IAccessControlEnumerable__factory.abi = _abi38;

// src/generated/factories/IBeacon__factory.ts
var _abi39 = [
  {
    type: "function",
    name: "implementation",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  }
];
var IBeacon__factory = class {
  static createInterface() {
    return new Interface(_abi39);
  }
  static connect(address, runner) {
    return new Contract(address, _abi39, runner);
  }
};
IBeacon__factory.abi = _abi39;

// src/generated/factories/IERC165__factory.ts
var _abi40 = [
  {
    type: "function",
    name: "supportsInterface",
    inputs: [
      {
        name: "interfaceId",
        type: "bytes4",
        internalType: "bytes4"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  }
];
var IERC165__factory = class {
  static createInterface() {
    return new Interface(_abi40);
  }
  static connect(address, runner) {
    return new Contract(address, _abi40, runner);
  }
};
IERC165__factory.abi = _abi40;

// src/generated/factories/IERC1967__factory.ts
var _abi41 = [
  {
    type: "event",
    name: "AdminChanged",
    inputs: [
      {
        name: "previousAdmin",
        type: "address",
        indexed: false,
        internalType: "address"
      },
      {
        name: "newAdmin",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "BeaconUpgraded",
    inputs: [
      {
        name: "beacon",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "Upgraded",
    inputs: [
      {
        name: "implementation",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  }
];
var IERC1967__factory = class {
  static createInterface() {
    return new Interface(_abi41);
  }
  static connect(address, runner) {
    return new Contract(address, _abi41, runner);
  }
};
IERC1967__factory.abi = _abi41;

// src/generated/factories/IMulticall3__factory.ts
var _abi42 = [
  {
    type: "function",
    name: "aggregate",
    inputs: [
      {
        name: "calls",
        type: "tuple[]",
        internalType: "struct IMulticall3.Call[]",
        components: [
          {
            name: "target",
            type: "address",
            internalType: "address"
          },
          {
            name: "callData",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      }
    ],
    outputs: [
      {
        name: "blockNumber",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "returnData",
        type: "bytes[]",
        internalType: "bytes[]"
      }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "aggregate3",
    inputs: [
      {
        name: "calls",
        type: "tuple[]",
        internalType: "struct IMulticall3.Call3[]",
        components: [
          {
            name: "target",
            type: "address",
            internalType: "address"
          },
          {
            name: "allowFailure",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "callData",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      }
    ],
    outputs: [
      {
        name: "returnData",
        type: "tuple[]",
        internalType: "struct IMulticall3.Result[]",
        components: [
          {
            name: "success",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "returnData",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "aggregate3Value",
    inputs: [
      {
        name: "calls",
        type: "tuple[]",
        internalType: "struct IMulticall3.Call3Value[]",
        components: [
          {
            name: "target",
            type: "address",
            internalType: "address"
          },
          {
            name: "allowFailure",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "value",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "callData",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      }
    ],
    outputs: [
      {
        name: "returnData",
        type: "tuple[]",
        internalType: "struct IMulticall3.Result[]",
        components: [
          {
            name: "success",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "returnData",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "blockAndAggregate",
    inputs: [
      {
        name: "calls",
        type: "tuple[]",
        internalType: "struct IMulticall3.Call[]",
        components: [
          {
            name: "target",
            type: "address",
            internalType: "address"
          },
          {
            name: "callData",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      }
    ],
    outputs: [
      {
        name: "blockNumber",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "blockHash",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "returnData",
        type: "tuple[]",
        internalType: "struct IMulticall3.Result[]",
        components: [
          {
            name: "success",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "returnData",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "getBasefee",
    inputs: [],
    outputs: [
      {
        name: "basefee",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getBlockHash",
    inputs: [
      {
        name: "blockNumber",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "blockHash",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getBlockNumber",
    inputs: [],
    outputs: [
      {
        name: "blockNumber",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getChainId",
    inputs: [],
    outputs: [
      {
        name: "chainid",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getCurrentBlockCoinbase",
    inputs: [],
    outputs: [
      {
        name: "coinbase",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getCurrentBlockDifficulty",
    inputs: [],
    outputs: [
      {
        name: "difficulty",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getCurrentBlockGasLimit",
    inputs: [],
    outputs: [
      {
        name: "gaslimit",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getCurrentBlockTimestamp",
    inputs: [],
    outputs: [
      {
        name: "timestamp",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getEthBalance",
    inputs: [
      {
        name: "addr",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "balance",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getLastBlockHash",
    inputs: [],
    outputs: [
      {
        name: "blockHash",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "tryAggregate",
    inputs: [
      {
        name: "requireSuccess",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "calls",
        type: "tuple[]",
        internalType: "struct IMulticall3.Call[]",
        components: [
          {
            name: "target",
            type: "address",
            internalType: "address"
          },
          {
            name: "callData",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      }
    ],
    outputs: [
      {
        name: "returnData",
        type: "tuple[]",
        internalType: "struct IMulticall3.Result[]",
        components: [
          {
            name: "success",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "returnData",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "tryBlockAndAggregate",
    inputs: [
      {
        name: "requireSuccess",
        type: "bool",
        internalType: "bool"
      },
      {
        name: "calls",
        type: "tuple[]",
        internalType: "struct IMulticall3.Call[]",
        components: [
          {
            name: "target",
            type: "address",
            internalType: "address"
          },
          {
            name: "callData",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      }
    ],
    outputs: [
      {
        name: "blockNumber",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "blockHash",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "returnData",
        type: "tuple[]",
        internalType: "struct IMulticall3.Result[]",
        components: [
          {
            name: "success",
            type: "bool",
            internalType: "bool"
          },
          {
            name: "returnData",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      }
    ],
    stateMutability: "payable"
  }
];
var IMulticall3__factory = class {
  static createInterface() {
    return new Interface(_abi42);
  }
  static connect(address, runner) {
    return new Contract(address, _abi42, runner);
  }
};
IMulticall3__factory.abi = _abi42;

// src/generated/factories/IOwnable__factory.ts
var _abi43 = [
  {
    type: "function",
    name: "acceptOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "recipient",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  }
];
var IOwnable__factory = class {
  static createInterface() {
    return new Interface(_abi43);
  }
  static connect(address, runner) {
    return new Contract(address, _abi43, runner);
  }
};
IOwnable__factory.abi = _abi43;

// src/generated/factories/IRandomnessReceiver__factory.ts
var _abi44 = [
  {
    type: "function",
    name: "receiveRandomness",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "randomness",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  }
];
var IRandomnessReceiver__factory = class {
  static createInterface() {
    return new Interface(_abi44);
  }
  static connect(address, runner) {
    return new Contract(
      address,
      _abi44,
      runner
    );
  }
};
IRandomnessReceiver__factory.abi = _abi44;

// src/generated/factories/IRandomnessSender__factory.ts
var _abi45 = [
  {
    type: "function",
    name: "acceptSubscriptionOwnerTransfer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "addConsumer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "consumer",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "calculateRequestPriceNative",
    inputs: [
      {
        name: "_callbackGasLimit",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "cancelSubscription",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "to",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "createSubscription",
    inputs: [],
    outputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "estimateRequestPriceNative",
    inputs: [
      {
        name: "_callbackGasLimit",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "_requestGasPriceWei",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "fundSubscriptionWithNative",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "getActiveSubscriptionIds",
    inputs: [
      {
        name: "startIndex",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "maxCount",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getAllRequests",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple[]",
        internalType: "struct TypesLib.RandomnessRequest[]",
        components: [
          {
            name: "subId",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "directFundingFeePaid",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "callbackGasLimit",
            type: "uint32",
            internalType: "uint32"
          },
          {
            name: "requestId",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "message",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "condition",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "signature",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "nonce",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "callback",
            type: "address",
            internalType: "address"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getConfig",
    inputs: [],
    outputs: [
      {
        name: "maxGasLimit",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "gasAfterPaymentCalculation",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "fulfillmentFlatFeeNativePPM",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "weiPerUnitGas",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "blsPairingCheckOverhead",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "nativePremiumPercentage",
        type: "uint8",
        internalType: "uint8"
      },
      {
        name: "gasForCallExactCheck",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getRequest",
    inputs: [
      {
        name: "requestId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct TypesLib.RandomnessRequest",
        components: [
          {
            name: "subId",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "directFundingFeePaid",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "callbackGasLimit",
            type: "uint32",
            internalType: "uint32"
          },
          {
            name: "requestId",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "message",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "condition",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "signature",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "nonce",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "callback",
            type: "address",
            internalType: "address"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getSubscription",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "nativeBalance",
        type: "uint96",
        internalType: "uint96"
      },
      {
        name: "reqCount",
        type: "uint64",
        internalType: "uint64"
      },
      {
        name: "owner",
        type: "address",
        internalType: "address"
      },
      {
        name: "consumers",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "isInFlight",
    inputs: [
      {
        name: "requestId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "messageFrom",
    inputs: [
      {
        name: "r",
        type: "tuple",
        internalType: "struct TypesLib.RandomnessRequestCreationParams",
        components: [
          {
            name: "nonce",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "callback",
            type: "address",
            internalType: "address"
          }
        ]
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "pendingRequestExists",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "removeConsumer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "consumer",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "requestRandomness",
    inputs: [
      {
        name: "callbackGasLimit",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    outputs: [
      {
        name: "requestID",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "requestRandomnessWithSubscription",
    inputs: [
      {
        name: "callbackGasLimit",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "requestID",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "requestSubscriptionOwnerTransfer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "newOwner",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "setSignatureSender",
    inputs: [
      {
        name: "newSignatureSender",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  }
];
var IRandomnessSender__factory = class {
  static createInterface() {
    return new Interface(_abi45);
  }
  static connect(address, runner) {
    return new Contract(address, _abi45, runner);
  }
};
IRandomnessSender__factory.abi = _abi45;

// src/generated/factories/ISignatureReceiver__factory.ts
var _abi46 = [
  {
    type: "function",
    name: "receiveSignature",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "signature",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  }
];
var ISignatureReceiver__factory = class {
  static createInterface() {
    return new Interface(_abi46);
  }
  static connect(address, runner) {
    return new Contract(address, _abi46, runner);
  }
};
ISignatureReceiver__factory.abi = _abi46;

// src/generated/factories/ISignatureScheme__factory.ts
var _abi47 = [
  {
    type: "function",
    name: "DST",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "SCHEME_ID",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getChainId",
    inputs: [],
    outputs: [
      {
        name: "chainId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getPublicKey",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256[2]",
        internalType: "uint256[2]"
      },
      {
        name: "",
        type: "uint256[2]",
        internalType: "uint256[2]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getPublicKeyBytes",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "hashToBytes",
    inputs: [
      {
        name: "message",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "hashToPoint",
    inputs: [
      {
        name: "message",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "verifySignature",
    inputs: [
      {
        name: "message",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "signature",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "publicKey",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "isValid",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  }
];
var ISignatureScheme__factory = class {
  static createInterface() {
    return new Interface(_abi47);
  }
  static connect(address, runner) {
    return new Contract(address, _abi47, runner);
  }
};
ISignatureScheme__factory.abi = _abi47;

// src/generated/factories/ISignatureSchemeAddressProvider__factory.ts
var _abi48 = [
  {
    type: "function",
    name: "getSignatureSchemeAddress",
    inputs: [
      {
        name: "schemeID",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "isSupportedScheme",
    inputs: [
      {
        name: "schemeID",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "updateSignatureScheme",
    inputs: [
      {
        name: "schemeID",
        type: "string",
        internalType: "string"
      },
      {
        name: "schemeAddress",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  }
];
var ISignatureSchemeAddressProvider__factory = class {
  static createInterface() {
    return new Interface(_abi48);
  }
  static connect(address, runner) {
    return new Contract(
      address,
      _abi48,
      runner
    );
  }
};
ISignatureSchemeAddressProvider__factory.abi = _abi48;

// src/generated/factories/ISignatureSender__factory.ts
var _abi49 = [
  {
    type: "function",
    name: "fulfillSignatureRequest",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "signature",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "getAllErroredRequestIds",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getAllFulfilledRequestIds",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getAllUnfulfilledRequestIds",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getCountOfUnfulfilledRequestIds",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getRequest",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct TypesLib.SignatureRequest",
        components: [
          {
            name: "message",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "messageHash",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "condition",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "schemeID",
            type: "string",
            internalType: "string"
          },
          {
            name: "callback",
            type: "address",
            internalType: "address"
          },
          {
            name: "signature",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "isFulfilled",
            type: "bool",
            internalType: "bool"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "hasErrored",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "isInFlight",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "requestSignature",
    inputs: [
      {
        name: "schemeID",
        type: "string",
        internalType: "string"
      },
      {
        name: "message",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "condition",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "setSignatureSchemeAddressProvider",
    inputs: [
      {
        name: "newSignatureSchemeAddressProvider",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "signatureSchemeAddressProvider",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract ISignatureSchemeAddressProvider"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "version",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  }
];
var ISignatureSender__factory = class {
  static createInterface() {
    return new Interface(_abi49);
  }
  static connect(address, runner) {
    return new Contract(address, _abi49, runner);
  }
};
ISignatureSender__factory.abi = _abi49;

// src/generated/factories/ISubscription__factory.ts
var _abi50 = [
  {
    type: "function",
    name: "acceptSubscriptionOwnerTransfer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "addConsumer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "consumer",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "cancelSubscription",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "to",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "createSubscription",
    inputs: [],
    outputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "fundSubscriptionWithNative",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "getActiveSubscriptionIds",
    inputs: [
      {
        name: "startIndex",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "maxCount",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getSubscription",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "nativeBalance",
        type: "uint96",
        internalType: "uint96"
      },
      {
        name: "reqCount",
        type: "uint64",
        internalType: "uint64"
      },
      {
        name: "owner",
        type: "address",
        internalType: "address"
      },
      {
        name: "consumers",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "pendingRequestExists",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "removeConsumer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "consumer",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "requestSubscriptionOwnerTransfer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "newOwner",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  }
];
var ISubscription__factory = class {
  static createInterface() {
    return new Interface(_abi50);
  }
  static connect(address, runner) {
    return new Contract(address, _abi50, runner);
  }
};
ISubscription__factory.abi = _abi50;

// src/generated/factories/ITypeAndVersion__factory.ts
var _abi51 = [
  {
    type: "function",
    name: "typeAndVersion",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  }
];
var ITypeAndVersion__factory = class {
  static createInterface() {
    return new Interface(_abi51);
  }
  static connect(address, runner) {
    return new Contract(address, _abi51, runner);
  }
};
ITypeAndVersion__factory.abi = _abi51;

// src/generated/factories/IVRFCoordinatorV2Plus__factory.ts
var _abi52 = [
  {
    type: "function",
    name: "acceptSubscriptionOwnerTransfer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "addConsumer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "consumer",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "cancelSubscription",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "to",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "createSubscription",
    inputs: [],
    outputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "fundSubscriptionWithNative",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "getActiveSubscriptionIds",
    inputs: [
      {
        name: "startIndex",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "maxCount",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getSubscription",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "balance",
        type: "uint96",
        internalType: "uint96"
      },
      {
        name: "nativeBalance",
        type: "uint96",
        internalType: "uint96"
      },
      {
        name: "reqCount",
        type: "uint64",
        internalType: "uint64"
      },
      {
        name: "owner",
        type: "address",
        internalType: "address"
      },
      {
        name: "consumers",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "pendingRequestExists",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "removeConsumer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "consumer",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "requestRandomWords",
    inputs: [
      {
        name: "req",
        type: "tuple",
        internalType: "struct VRFV2PlusClient.RandomWordsRequest",
        components: [
          {
            name: "keyHash",
            type: "bytes32",
            internalType: "bytes32"
          },
          {
            name: "subId",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "requestConfirmations",
            type: "uint16",
            internalType: "uint16"
          },
          {
            name: "callbackGasLimit",
            type: "uint32",
            internalType: "uint32"
          },
          {
            name: "numWords",
            type: "uint32",
            internalType: "uint32"
          },
          {
            name: "extraArgs",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      }
    ],
    outputs: [
      {
        name: "requestId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "requestSubscriptionOwnerTransfer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "newOwner",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  }
];
var IVRFCoordinatorV2Plus__factory = class {
  static createInterface() {
    return new Interface(_abi52);
  }
  static connect(address, runner) {
    return new Contract(
      address,
      _abi52,
      runner
    );
  }
};
IVRFCoordinatorV2Plus__factory.abi = _abi52;

// src/generated/factories/IVRFMigratableConsumerV2Plus__factory.ts
var _abi53 = [
  {
    type: "function",
    name: "setCoordinator",
    inputs: [
      {
        name: "vrfCoordinator",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "event",
    name: "CoordinatorSet",
    inputs: [
      {
        name: "vrfCoordinator",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  }
];
var IVRFMigratableConsumerV2Plus__factory = class {
  static createInterface() {
    return new Interface(_abi53);
  }
  static connect(address, runner) {
    return new Contract(
      address,
      _abi53,
      runner
    );
  }
};
IVRFMigratableConsumerV2Plus__factory.abi = _abi53;

// src/generated/factories/IVRFSubscriptionV2Plus__factory.ts
var _abi54 = [
  {
    type: "function",
    name: "acceptSubscriptionOwnerTransfer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "addConsumer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "consumer",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "cancelSubscription",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "to",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "createSubscription",
    inputs: [],
    outputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "fundSubscriptionWithNative",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "getActiveSubscriptionIds",
    inputs: [
      {
        name: "startIndex",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "maxCount",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getSubscription",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "balance",
        type: "uint96",
        internalType: "uint96"
      },
      {
        name: "nativeBalance",
        type: "uint96",
        internalType: "uint96"
      },
      {
        name: "reqCount",
        type: "uint64",
        internalType: "uint64"
      },
      {
        name: "owner",
        type: "address",
        internalType: "address"
      },
      {
        name: "consumers",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "pendingRequestExists",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "removeConsumer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "consumer",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "requestSubscriptionOwnerTransfer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "newOwner",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  }
];
var IVRFSubscriptionV2Plus__factory = class {
  static createInterface() {
    return new Interface(_abi54);
  }
  static connect(address, runner) {
    return new Contract(
      address,
      _abi54,
      runner
    );
  }
};
IVRFSubscriptionV2Plus__factory.abi = _abi54;

// src/generated/factories/IVRFV2PlusWrapper__factory.ts
var _abi55 = [
  {
    type: "function",
    name: "calculateRequestPriceNative",
    inputs: [
      {
        name: "_callbackGasLimit",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "_numWords",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "estimateRequestPriceNative",
    inputs: [
      {
        name: "_callbackGasLimit",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "_numWords",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "_requestGasPriceWei",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "lastRequestId",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "requestRandomWordsInNative",
    inputs: [
      {
        name: "_callbackGasLimit",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "_requestConfirmations",
        type: "uint16",
        internalType: "uint16"
      },
      {
        name: "_numWords",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "extraArgs",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "requestId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "payable"
  }
];
var IVRFV2PlusWrapper__factory = class {
  static createInterface() {
    return new Interface(_abi55);
  }
  static connect(address, runner) {
    return new Contract(address, _abi55, runner);
  }
};
IVRFV2PlusWrapper__factory.abi = _abi55;

// src/generated/factories/Initializable__factory.ts
var _abi56 = [
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint64",
        indexed: false,
        internalType: "uint64"
      }
    ],
    anonymous: false
  },
  {
    type: "error",
    name: "InvalidInitialization",
    inputs: []
  },
  {
    type: "error",
    name: "NotInitializing",
    inputs: []
  }
];
var Initializable__factory = class {
  static createInterface() {
    return new Interface(_abi56);
  }
  static connect(address, runner) {
    return new Contract(address, _abi56, runner);
  }
};
Initializable__factory.abi = _abi56;

// src/generated/factories/LinkTokenInterface__factory.ts
var _abi57 = [
  {
    type: "function",
    name: "allowance",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address"
      },
      {
        name: "spender",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "remaining",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "approve",
    inputs: [
      {
        name: "spender",
        type: "address",
        internalType: "address"
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "success",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "balanceOf",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "balance",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "decimals",
    inputs: [],
    outputs: [
      {
        name: "decimalPlaces",
        type: "uint8",
        internalType: "uint8"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "decreaseApproval",
    inputs: [
      {
        name: "spender",
        type: "address",
        internalType: "address"
      },
      {
        name: "addedValue",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "success",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "increaseApproval",
    inputs: [
      {
        name: "spender",
        type: "address",
        internalType: "address"
      },
      {
        name: "subtractedValue",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "name",
    inputs: [],
    outputs: [
      {
        name: "tokenName",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "symbol",
    inputs: [],
    outputs: [
      {
        name: "tokenSymbol",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "totalSupply",
    inputs: [],
    outputs: [
      {
        name: "totalTokensIssued",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "transfer",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address"
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "success",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "transferAndCall",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address"
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "success",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "transferFrom",
    inputs: [
      {
        name: "from",
        type: "address",
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        internalType: "address"
      },
      {
        name: "value",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "success",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "nonpayable"
  }
];
var LinkTokenInterface__factory = class {
  static createInterface() {
    return new Interface(_abi57);
  }
  static connect(address, runner) {
    return new Contract(address, _abi57, runner);
  }
};
LinkTokenInterface__factory.abi = _abi57;

// src/generated/factories/MockRandomnessReceiver__factory.ts
var _abi58 = [
  {
    type: "constructor",
    inputs: [
      {
        name: "randomnessSender",
        type: "address",
        internalType: "address"
      },
      {
        name: "owner",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "acceptOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "cancelSubscription",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "createSubscriptionAndFundNative",
    inputs: [],
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "getBalance",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "isInFlight",
    inputs: [
      {
        name: "requestId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "pendingRequestExists",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "randomness",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "randomnessSender",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IRandomnessSender"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "receiveRandomness",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "randomness",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "requestId",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "rollDiceWithDirectFunding",
    inputs: [
      {
        name: "callbackGasLimit",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "rollDiceWithSubscription",
    inputs: [
      {
        name: "callbackGasLimit",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "setRandomnessSender",
    inputs: [
      {
        name: "_randomnessSender",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "setSubId",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "subscriptionId",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "topUpSubscriptionNative",
    inputs: [],
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "updateSubscription",
    inputs: [
      {
        name: "consumers",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "event",
    name: "Funded",
    inputs: [
      {
        name: "sender",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "NewSubscriptionId",
    inputs: [
      {
        name: "subscriptionId",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "OwnershipTransferRequested",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "Received",
    inputs: [
      {
        name: "",
        type: "address",
        indexed: false,
        internalType: "address"
      },
      {
        name: "",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "Withdrawn",
    inputs: [
      {
        name: "recipient",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  }
];
var _bytecode24 = "";
var isSuperArgs24 = (xs) => xs.length > 1;
var MockRandomnessReceiver__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs24(args)) {
      super(...args);
    } else {
      super(_abi58, _bytecode24, args[0]);
    }
  }
  getDeployTransaction(randomnessSender, owner, overrides) {
    return super.getDeployTransaction(randomnessSender, owner, overrides || {});
  }
  deploy(randomnessSender, owner, overrides) {
    return super.deploy(randomnessSender, owner, overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi58);
  }
  static connect(address, runner) {
    return new Contract(
      address,
      _abi58,
      runner
    );
  }
};
MockRandomnessReceiver__factory.bytecode = _bytecode24;
MockRandomnessReceiver__factory.abi = _abi58;

// src/generated/factories/MockRevertingRandomnessReceiver__factory.ts
var _abi59 = [
  {
    type: "constructor",
    inputs: [
      {
        name: "randomnessSender",
        type: "address",
        internalType: "address"
      },
      {
        name: "owner",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "acceptOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "cancelSubscription",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "createSubscriptionAndFundNative",
    inputs: [],
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "getBalance",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "isInFlight",
    inputs: [
      {
        name: "requestId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "pendingRequestExists",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "randomness",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "randomnessSender",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IRandomnessSender"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "receiveRandomness",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "randomness",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "requestId",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "rollDiceWithDirectFunding",
    inputs: [
      {
        name: "callbackGasLimit",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "rollDiceWithSubscription",
    inputs: [
      {
        name: "callbackGasLimit",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "setRandomnessSender",
    inputs: [
      {
        name: "_randomnessSender",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "setSubId",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "subscriptionId",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "topUpSubscriptionNative",
    inputs: [],
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "updateSubscription",
    inputs: [
      {
        name: "consumers",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "event",
    name: "Funded",
    inputs: [
      {
        name: "sender",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "NewSubscriptionId",
    inputs: [
      {
        name: "subscriptionId",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "OwnershipTransferRequested",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "Received",
    inputs: [
      {
        name: "",
        type: "address",
        indexed: false,
        internalType: "address"
      },
      {
        name: "",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "Withdrawn",
    inputs: [
      {
        name: "recipient",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  }
];
var _bytecode25 = "";
var isSuperArgs25 = (xs) => xs.length > 1;
var MockRevertingRandomnessReceiver__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs25(args)) {
      super(...args);
    } else {
      super(_abi59, _bytecode25, args[0]);
    }
  }
  getDeployTransaction(randomnessSender, owner, overrides) {
    return super.getDeployTransaction(randomnessSender, owner, overrides || {});
  }
  deploy(randomnessSender, owner, overrides) {
    return super.deploy(randomnessSender, owner, overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi59);
  }
  static connect(address, runner) {
    return new Contract(
      address,
      _abi59,
      runner
    );
  }
};
MockRevertingRandomnessReceiver__factory.bytecode = _bytecode25;
MockRevertingRandomnessReceiver__factory.abi = _abi59;

// src/generated/factories/Multicall__factory.ts
var _abi60 = [
  {
    type: "function",
    name: "multicall",
    inputs: [
      {
        name: "data",
        type: "bytes[]",
        internalType: "bytes[]"
      }
    ],
    outputs: [
      {
        name: "results",
        type: "bytes[]",
        internalType: "bytes[]"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "error",
    name: "AddressEmptyCode",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "FailedCall",
    inputs: []
  }
];
var Multicall__factory = class {
  static createInterface() {
    return new Interface(_abi60);
  }
  static connect(address, runner) {
    return new Contract(address, _abi60, runner);
  }
};
Multicall__factory.abi = _abi60;

// src/generated/factories/Proxy__factory.ts
var _abi61 = [
  {
    type: "fallback",
    stateMutability: "payable"
  }
];
var Proxy__factory = class {
  static createInterface() {
    return new Interface(_abi61);
  }
  static connect(address, runner) {
    return new Contract(address, _abi61, runner);
  }
};
Proxy__factory.abi = _abi61;

// src/generated/factories/Randomness__factory.ts
var _abi62 = [
  {
    type: "function",
    name: "selectArrayIndices",
    inputs: [
      {
        name: "lengthOfArray",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "countToDraw",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "randomBytes",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "verify",
    inputs: [
      {
        name: "randomnessContract",
        type: "address",
        internalType: "address"
      },
      {
        name: "signatureContract",
        type: "address",
        internalType: "address"
      },
      {
        name: "signature",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "requestID",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "requester",
        type: "address",
        internalType: "address"
      },
      {
        name: "schemeID",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "error",
    name: "BNAddFailed",
    inputs: [
      {
        name: "input",
        type: "uint256[4]",
        internalType: "uint256[4]"
      }
    ]
  },
  {
    type: "error",
    name: "InvalidDSTLength",
    inputs: [
      {
        name: "dst",
        type: "bytes",
        internalType: "bytes"
      }
    ]
  },
  {
    type: "error",
    name: "InvalidFieldElement",
    inputs: [
      {
        name: "x",
        type: "uint256",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "error",
    name: "InvalidInputs",
    inputs: []
  },
  {
    type: "error",
    name: "MapToPointFailed",
    inputs: [
      {
        name: "noSqrt",
        type: "uint256",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "error",
    name: "ModExpFailed",
    inputs: [
      {
        name: "base",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "exponent",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "modulus",
        type: "uint256",
        internalType: "uint256"
      }
    ]
  }
];
var _bytecode26 = "0x61282d610034600b8282823980515f1a607314602857634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061003f575f3560e01c8063298f239c14610043578063317e6e731461006c575b5f5ffd5b6100566100513660046121e5565b61008f565b604051610063919061220e565b60405180910390f35b61007f61007a3660046122b9565b610178565b6040519015158152602001610063565b6060835f036100b157604080515f80825260208201909252905b509050610171565b5f8367ffffffffffffffff8111156100cb576100cb612368565b6040519080825280602002602001820160405280156100f4578160200160208202803683370190505b50905083851161012e575f5b848110156100a9578082828151811061011b5761011b612395565b6020908102919091010152600101610100565b825f5b8581101561016b57610146818884600a610559565b83828151811061015857610158612395565b6020908102919091010152600101610131565b50909150505b9392505050565b5f5f8890505f8173ffffffffffffffffffffffffffffffffffffffff1663e6b3ca716040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101c7573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101eb91906123c2565b90505f8173ffffffffffffffffffffffffffffffffffffffff16635bb09cf887876040518363ffffffff1660e01b81526004016102299291906123dd565b602060405180830381865afa158015610244573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061026891906123c2565b90505f6103ea8273ffffffffffffffffffffffffffffffffffffffff16635f7c75226040518163ffffffff1660e01b81526004015f60405180830381865afa1580156102b6573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526102fb9190810190612429565b8e73ffffffffffffffffffffffffffffffffffffffff1663775b839c60405180604001604052808e81526020018d73ffffffffffffffffffffffffffffffffffffffff168152506040518263ffffffff1660e01b815260040161038691908151815260209182015173ffffffffffffffffffffffffffffffffffffffff169181019190915260400190565b5f60405180830381865afa1580156103a0573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526103e59190810190612429565b6106d9565b90505f61042b8c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506107c092505050565b90505f8373ffffffffffffffffffffffffffffffffffffffff1663f6e548e96104538561085d565b61045c8561085d565b8773ffffffffffffffffffffffffffffffffffffffff1663acae9fee6040518163ffffffff1660e01b81526004015f60405180830381865afa1580156104a4573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526104e99190810190612429565b6040518463ffffffff1660e01b815260040161050793929190612565565b602060405180830381865afa158015610522573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061054691906125a7565b9f9e505050505050505050505050505050565b5f8315806105675750838510155b806105755750816001166001145b156105ac576040517ff34cfab600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105fd565b5f60038211600181146105d357600183151916156105ce57600191505b6105f7565b829150600160028404015b828110156105f557915060028284048301046105de565b505b50919050565b610606846105b1565b5f856002830a146001811461064057600183016fffffffffffffffffffffffffffffffff811115610635575f5ffd5b6002900a9150610644565b8691505b5061064e816105b1565b915050604051608081016040528460408201528560608201525b8187068288045f5b868110156106c0578284527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81880301602085015260808420859006918501919091038490069190600101610670565b5083020196508587101561066857509495945050505050565b604080518082019091525f80825260208201525f6106f78484610896565b90505f61070a82825b60200201516109e1565b90505f610718836001610700565b90506107226121a9565b825181526020808401518282015282516040808401919091529083015160608301525f908460808460066107d05a03fa90508061079657816040517f128e3f0800000000000000000000000000000000000000000000000000000000815260040161078d91906125c6565b60405180910390fd5b60408051808201909152845181526020810185600160200201519052955050505050505b92915050565b604080518082019091525f8082526020820152815160401461083e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c6964204731206279746573206c656e677468000000000000000000604482015260640161078d565b5060208181015160409283015183518085019094529083529082015290565b6040805181815260608181018352915f919060208201818036833750508451602095860151958301525060408101939093525090919050565b61089e6121c7565b5f6108a98484610e89565b90505f5f5f5f6018850177ffffffffffffffffffffffffffffffffffffffffffffffff815116935060308601905077ffffffffffffffffffffffffffffffffffffffffffffffff81511694507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47857f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4778010000000000000000000000000000000000000000000000008709086048870151606088015177ffffffffffffffffffffffffffffffffffffffffffffffff908116975016945092507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47905084817801000000000000000000000000000000000000000000000000860908604080518082019091529283526020830152509695505050505050565b6109e96121c7565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478210610a45576040517fd53e94150000000000000000000000000000000000000000000000000000000081526004810183905260240161078d565b5f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760047f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478586090990505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478260010890507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610b03837f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612623565b60010891505f610b357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47838509611073565b90505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4778016789af3a83522eb353c98fc6b36d713d5d8d1cc5dffffffa7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47847f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47888b09090990505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610c09837f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612623565b7f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea30890505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47837f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea30890505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4786870990505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4786830990505f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478485097f10216f7ba065e00de81ac1e7808072c9dd2b2385cd7b438469602eb24829a9bd0960010890505f5f610d43610d3e8861107d565b6110ef565b5f0b600103610dac57868c52610d588761107d565b9050610d638161119f565b60208e0191909152915081610da7576040517f396ec7710000000000000000000000000000000000000000000000000000000081526004810182905260240161078d565b610e28565b610db8610d3e8761107d565b5f0b600103610dcd57858c52610d588661107d565b828c52610dd98361107d565b9050610de48161119f565b60208e0191909152915081610e28576040517f396ec7710000000000000000000000000000000000000000000000000000000081526004810182905260240161078d565b60208c0151610e36906111d9565b610e3f8e6111d9565b14610e795760208c0151610e73907f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612623565b60208d01525b5050505050505050505050919050565b815160609060ff811115610ecb57836040517f26e4f9ba00000000000000000000000000000000000000000000000000000000815260040161078d9190612636565b60408051608880825260c082019092525f916020820181803683370190505090505f81855f60605f8a88604051602001610f0b979695949392919061265f565b60405160208183030381529060405290505f818051906020012090505f8160018987604051602001610f40949392919061273a565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001815282825280516020820120606080855260808501909352909350915f91602082018180368337019050509050600360015b8181101561103757858418610fb18260016127ac565b8d8b604051602001610fc6949392919061273a565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001815291905260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff830181028501810195909552805194810194909420939450600101610f9b565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016020908102820101919091529550505050505092915050565b5f6107ba826111e5565b5f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47847f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47868709090892915050565b5f5f6110fa8361193d565b905061112760017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47612623565b810361115557507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff92915050565b8015801590611165575080600114155b156107ba576040517f396ec7710000000000000000000000000000000000000000000000000000000081526004810184905260240161078d565b5f5f6111aa83611a63565b9150827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47838409149050915091565b5f6107ba6002836127bf565b5f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab6040805160c080825260e082019092525f918291906020820181803683370190505060208082018181526040830182905260608301829052608083018690527f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea360a08401527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760c0808501919091529293505f92839160055afa90505f519250806105f5576040517fc6daf7ab000000000000000000000000000000000000000000000000000000008152600481018590527f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea360248201527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47604482015260640161078d565b5f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab60405180608001604052806004906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b5f5f5f606084860312156121f7575f5ffd5b505081359360208301359350604090920135919050565b602080825282518282018190525f918401906040840190835b81811015612245578351835260209384019390920191600101612227565b509095945050505050565b73ffffffffffffffffffffffffffffffffffffffff81168114612271575f5ffd5b50565b5f5f83601f840112612284575f5ffd5b50813567ffffffffffffffff81111561229b575f5ffd5b6020830191508360208285010111156122b2575f5ffd5b9250929050565b5f5f5f5f5f5f5f5f60c0898b0312156122d0575f5ffd5b88356122db81612250565b975060208901356122eb81612250565b9650604089013567ffffffffffffffff811115612306575f5ffd5b6123128b828c01612274565b90975095505060608901359350608089013561232d81612250565b925060a089013567ffffffffffffffff811115612348575f5ffd5b6123548b828c01612274565b999c989b5096995094979396929594505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f602082840312156123d2575f5ffd5b815161017181612250565b60208152816020820152818360408301375f818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b5f60208284031215612439575f5ffd5b815167ffffffffffffffff81111561244f575f5ffd5b8201601f8101841361245f575f5ffd5b805167ffffffffffffffff81111561247957612479612368565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160116810181811067ffffffffffffffff821117156124e5576124e5612368565b6040528181528282016020018610156124fc575f5ffd5b8160208401602083015e5f91810160200191909152949350505050565b5f81518084528060208401602086015e5f6020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b606081525f6125776060830186612519565b82810360208401526125898186612519565b9050828103604084015261259d8185612519565b9695505050505050565b5f602082840312156125b7575f5ffd5b81518015158114610171575f5ffd5b6080810181835f5b60048110156125ed5781518352602092830192909101906001016125ce565b50505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b818103818111156107ba576107ba6125f6565b602081525f6101716020830184612519565b5f81518060208401855e5f93019283525090919050565b5f61267361266d838b612648565b89612648565b7fff000000000000000000000000000000000000000000000000000000000000008860f81b1681527fff000000000000000000000000000000000000000000000000000000000000008760f81b1660018201527fff000000000000000000000000000000000000000000000000000000000000008660f81b1660028201526126fe6003820186612648565b60f89490941b7fff0000000000000000000000000000000000000000000000000000000000000016845250506001909101979650505050505050565b8481527fff000000000000000000000000000000000000000000000000000000000000008460f81b1660208201525f6127766021830185612648565b60f89390931b7fff0000000000000000000000000000000000000000000000000000000000000016835250506001019392505050565b808201808211156107ba576107ba6125f6565b5f826127f2577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b50069056fea26469706673582212203bc86e0707fa42cd30aa18d730969e1508df15aad5f531da26d0de84e45a47a964736f6c634300081c0033";
var isSuperArgs26 = (xs) => xs.length > 1;
var Randomness__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs26(args)) {
      super(...args);
    } else {
      super(_abi62, _bytecode26, args[0]);
    }
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi62);
  }
  static connect(address, runner) {
    return new Contract(address, _abi62, runner);
  }
};
Randomness__factory.bytecode = _bytecode26;
Randomness__factory.abi = _abi62;

// src/generated/factories/RandomnessReceiverBase__factory.ts
var _abi63 = [
  {
    type: "function",
    name: "acceptOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "createSubscriptionAndFundNative",
    inputs: [],
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "getBalance",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "isInFlight",
    inputs: [
      {
        name: "requestId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "pendingRequestExists",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "randomnessSender",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IRandomnessSender"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "receiveRandomness",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "randomness",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "setRandomnessSender",
    inputs: [
      {
        name: "_randomnessSender",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "setSubId",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "subscriptionId",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "topUpSubscriptionNative",
    inputs: [],
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "updateSubscription",
    inputs: [
      {
        name: "consumers",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "event",
    name: "Funded",
    inputs: [
      {
        name: "sender",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "NewSubscriptionId",
    inputs: [
      {
        name: "subscriptionId",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "OwnershipTransferRequested",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "Received",
    inputs: [
      {
        name: "",
        type: "address",
        indexed: false,
        internalType: "address"
      },
      {
        name: "",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "Withdrawn",
    inputs: [
      {
        name: "recipient",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  }
];
var RandomnessReceiverBase__factory = class {
  static createInterface() {
    return new Interface(_abi63);
  }
  static connect(address, runner) {
    return new Contract(
      address,
      _abi63,
      runner
    );
  }
};
RandomnessReceiverBase__factory.abi = _abi63;

// src/generated/factories/RandomnessSender__factory.ts
var _abi64 = [
  {
    type: "constructor",
    inputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "ADMIN_ROLE",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "DEFAULT_ADMIN_ROLE",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "MAX_CONSUMERS",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint16",
        internalType: "uint16"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "SCHEME_ID",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "UPGRADE_INTERFACE_VERSION",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "acceptSubscriptionOwnerTransfer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "addConsumer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "consumer",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "calculateRequestPriceNative",
    inputs: [
      {
        name: "_callbackGasLimit",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "cancelSubscription",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "to",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "createSubscription",
    inputs: [],
    outputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "disable",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "enable",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "estimateRequestPriceNative",
    inputs: [
      {
        name: "_callbackGasLimit",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "_requestGasPriceWei",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "fundSubscriptionWithNative",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "getActiveSubscriptionIds",
    inputs: [
      {
        name: "startIndex",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "maxCount",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "ids",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getAllRequests",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "tuple[]",
        internalType: "struct TypesLib.RandomnessRequest[]",
        components: [
          {
            name: "subId",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "directFundingFeePaid",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "callbackGasLimit",
            type: "uint32",
            internalType: "uint32"
          },
          {
            name: "requestId",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "message",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "condition",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "signature",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "nonce",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "callback",
            type: "address",
            internalType: "address"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getConfig",
    inputs: [],
    outputs: [
      {
        name: "maxGasLimit",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "gasAfterPaymentCalculation",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "fulfillmentFlatFeeNativePPM",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "weiPerUnitGas",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "blsPairingCheckOverhead",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "nativePremiumPercentage",
        type: "uint8",
        internalType: "uint8"
      },
      {
        name: "gasForCallExactCheck",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getRequest",
    inputs: [
      {
        name: "requestId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct TypesLib.RandomnessRequest",
        components: [
          {
            name: "subId",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "directFundingFeePaid",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "callbackGasLimit",
            type: "uint32",
            internalType: "uint32"
          },
          {
            name: "requestId",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "message",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "condition",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "signature",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "nonce",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "callback",
            type: "address",
            internalType: "address"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getRoleAdmin",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getRoleMember",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "index",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getRoleMemberCount",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getRoleMembers",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getSubscription",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "nativeBalance",
        type: "uint96",
        internalType: "uint96"
      },
      {
        name: "reqCount",
        type: "uint64",
        internalType: "uint64"
      },
      {
        name: "subOwner",
        type: "address",
        internalType: "address"
      },
      {
        name: "consumers",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "grantRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "hasRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "initialize",
    inputs: [
      {
        name: "_signatureSender",
        type: "address",
        internalType: "address"
      },
      {
        name: "owner",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "isInFlight",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "messageFrom",
    inputs: [
      {
        name: "r",
        type: "tuple",
        internalType: "struct TypesLib.RandomnessRequestCreationParams",
        components: [
          {
            name: "nonce",
            type: "uint256",
            internalType: "uint256"
          },
          {
            name: "callback",
            type: "address",
            internalType: "address"
          }
        ]
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "nonce",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "ownerCancelSubscription",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "pendingRequestExists",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "proxiableUUID",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "receiveSignature",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "signature",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "removeConsumer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "consumer",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "renounceRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "callerConfirmation",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "requestRandomness",
    inputs: [
      {
        name: "callbackGasLimit",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    outputs: [
      {
        name: "requestID",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "requestRandomnessWithSubscription",
    inputs: [
      {
        name: "callbackGasLimit",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "requestID",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "requestSubscriptionOwnerTransfer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "newOwner",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "revokeRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "s_config",
    inputs: [],
    outputs: [
      {
        name: "maxGasLimit",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "gasAfterPaymentCalculation",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "fulfillmentFlatFeeNativePPM",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "weiPerUnitGas",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "blsPairingCheckOverhead",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "nativePremiumPercentage",
        type: "uint8",
        internalType: "uint8"
      },
      {
        name: "gasForCallExactCheck",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "s_configured",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "s_currentSubNonce",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "s_disabled",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "s_totalNativeBalance",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint96",
        internalType: "uint96"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "s_withdrawableDirectFundingFeeNative",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint96",
        internalType: "uint96"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "s_withdrawableSubscriptionFeeNative",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint96",
        internalType: "uint96"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "setConfig",
    inputs: [
      {
        name: "maxGasLimit",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "gasAfterPaymentCalculation",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "fulfillmentFlatFeeNativePPM",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "weiPerUnitGas",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "blsPairingCheckOverhead",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "nativePremiumPercentage",
        type: "uint8",
        internalType: "uint8"
      },
      {
        name: "gasForCallExactCheck",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "setSignatureSender",
    inputs: [
      {
        name: "newSignatureSender",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "signatureSender",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract ISignatureSender"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "supportsInterface",
    inputs: [
      {
        name: "interfaceId",
        type: "bytes4",
        internalType: "bytes4"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "upgradeToAndCall",
    inputs: [
      {
        name: "newImplementation",
        type: "address",
        internalType: "address"
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "version",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "withdrawDirectFundingFeesNative",
    inputs: [
      {
        name: "recipient",
        type: "address",
        internalType: "address payable"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "withdrawSubscriptionFeesNative",
    inputs: [
      {
        name: "recipient",
        type: "address",
        internalType: "address payable"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "event",
    name: "ConfigSet",
    inputs: [
      {
        name: "maxGasLimit",
        type: "uint32",
        indexed: false,
        internalType: "uint32"
      },
      {
        name: "gasAfterPaymentCalculation",
        type: "uint32",
        indexed: false,
        internalType: "uint32"
      },
      {
        name: "fulfillmentFlatFeeNativePPM",
        type: "uint32",
        indexed: false,
        internalType: "uint32"
      },
      {
        name: "weiPerUnitGas",
        type: "uint32",
        indexed: false,
        internalType: "uint32"
      },
      {
        name: "blsPairingCheckOverhead",
        type: "uint32",
        indexed: false,
        internalType: "uint32"
      },
      {
        name: "nativePremiumPercentage",
        type: "uint8",
        indexed: false,
        internalType: "uint8"
      },
      {
        name: "gasForCallExactCheck",
        type: "uint32",
        indexed: false,
        internalType: "uint32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "Disabled",
    inputs: [],
    anonymous: false
  },
  {
    type: "event",
    name: "Enabled",
    inputs: [],
    anonymous: false
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint64",
        indexed: false,
        internalType: "uint64"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "L1GasFee",
    inputs: [
      {
        name: "fee",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "RandomnessCallbackFailed",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "RandomnessCallbackSuccess",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "randomness",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32"
      },
      {
        name: "signature",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "RandomnessRequested",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "nonce",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "requester",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "requestedAt",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "RoleAdminChanged",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "previousAdminRole",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "newAdminRole",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "RoleGranted",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "sender",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "RoleRevoked",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "sender",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "SignatureSenderUpdated",
    inputs: [
      {
        name: "signatureSender",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "SubscriptionCanceled",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "to",
        type: "address",
        indexed: false,
        internalType: "address"
      },
      {
        name: "amountNative",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "SubscriptionConsumerAdded",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "consumer",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "SubscriptionConsumerRemoved",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "consumer",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "SubscriptionCreated",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "owner",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "SubscriptionFundedWithNative",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "oldNativeBalance",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      },
      {
        name: "newNativeBalance",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "SubscriptionOwnerTransferRequested",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "from",
        type: "address",
        indexed: false,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "SubscriptionOwnerTransferred",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "from",
        type: "address",
        indexed: false,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "Upgraded",
    inputs: [
      {
        name: "implementation",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "error",
    name: "AccessControlBadConfirmation",
    inputs: []
  },
  {
    type: "error",
    name: "AccessControlUnauthorizedAccount",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      },
      {
        name: "neededRole",
        type: "bytes32",
        internalType: "bytes32"
      }
    ]
  },
  {
    type: "error",
    name: "AddressEmptyCode",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "BalanceInvariantViolated",
    inputs: [
      {
        name: "internalBalance",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "externalBalance",
        type: "uint256",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "error",
    name: "ERC1967InvalidImplementation",
    inputs: [
      {
        name: "implementation",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "ERC1967NonPayable",
    inputs: []
  },
  {
    type: "error",
    name: "FailedCall",
    inputs: []
  },
  {
    type: "error",
    name: "FailedToSendNative",
    inputs: []
  },
  {
    type: "error",
    name: "IndexOutOfRange",
    inputs: []
  },
  {
    type: "error",
    name: "InsufficientBalance",
    inputs: []
  },
  {
    type: "error",
    name: "InvalidCalldata",
    inputs: []
  },
  {
    type: "error",
    name: "InvalidConsumer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "consumer",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "InvalidInitialization",
    inputs: []
  },
  {
    type: "error",
    name: "InvalidSubscription",
    inputs: []
  },
  {
    type: "error",
    name: "MustBeRequestedOwner",
    inputs: [
      {
        name: "proposedOwner",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "MustBeSubOwner",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "NotInitializing",
    inputs: []
  },
  {
    type: "error",
    name: "PendingRequestExists",
    inputs: []
  },
  {
    type: "error",
    name: "ReentrancyGuardReentrantCall",
    inputs: []
  },
  {
    type: "error",
    name: "TooManyConsumers",
    inputs: []
  },
  {
    type: "error",
    name: "UUPSUnauthorizedCallContext",
    inputs: []
  },
  {
    type: "error",
    name: "UUPSUnsupportedProxiableUUID",
    inputs: [
      {
        name: "slot",
        type: "bytes32",
        internalType: "bytes32"
      }
    ]
  }
];
var _bytecode27 = "";
var isSuperArgs27 = (xs) => xs.length > 1;
var RandomnessSender__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs27(args)) {
      super(...args);
    } else {
      super(_abi64, _bytecode27, args[0]);
    }
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi64);
  }
  static connect(address, runner) {
    return new Contract(address, _abi64, runner);
  }
};
RandomnessSender__factory.bytecode = _bytecode27;
RandomnessSender__factory.abi = _abi64;

// src/generated/factories/ReentrancyGuard__factory.ts
var _abi65 = [
  {
    type: "error",
    name: "ReentrancyGuardReentrantCall",
    inputs: []
  }
];
var ReentrancyGuard__factory = class {
  static createInterface() {
    return new Interface(_abi65);
  }
  static connect(address, runner) {
    return new Contract(address, _abi65, runner);
  }
};
ReentrancyGuard__factory.abi = _abi65;

// src/generated/factories/SignatureReceiverBase__factory.ts
var _abi66 = [
  {
    type: "function",
    name: "receiveSignature",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "signature",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "signatureSender",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract ISignatureSender"
      }
    ],
    stateMutability: "view"
  }
];
var SignatureReceiverBase__factory = class {
  static createInterface() {
    return new Interface(_abi66);
  }
  static connect(address, runner) {
    return new Contract(
      address,
      _abi66,
      runner
    );
  }
};
SignatureReceiverBase__factory.abi = _abi66;

// src/generated/factories/SignatureSchemeAddressProvider__factory.ts
var _abi67 = [
  {
    type: "constructor",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "ADMIN_ROLE",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "DEFAULT_ADMIN_ROLE",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getRoleAdmin",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getSignatureSchemeAddress",
    inputs: [
      {
        name: "schemeID",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "grantRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "hasRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "isSupportedScheme",
    inputs: [
      {
        name: "schemeID",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "renounceRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "callerConfirmation",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "revokeRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "supportsInterface",
    inputs: [
      {
        name: "interfaceId",
        type: "bytes4",
        internalType: "bytes4"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "updateSignatureScheme",
    inputs: [
      {
        name: "schemeID",
        type: "string",
        internalType: "string"
      },
      {
        name: "schemeAddress",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "event",
    name: "NewSignatureSchemeAddressAdded",
    inputs: [
      {
        name: "schemeID",
        type: "string",
        indexed: true,
        internalType: "string"
      },
      {
        name: "schemeAddress",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "addedAt",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "RoleAdminChanged",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "previousAdminRole",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "newAdminRole",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "RoleGranted",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "sender",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "RoleRevoked",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "sender",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "error",
    name: "AccessControlBadConfirmation",
    inputs: []
  },
  {
    type: "error",
    name: "AccessControlUnauthorizedAccount",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      },
      {
        name: "neededRole",
        type: "bytes32",
        internalType: "bytes32"
      }
    ]
  }
];
var _bytecode28 = "0x608060405234801561000f575f5ffd5b50604051610cb6380380610cb683398101604081905261002e916101a7565b6001600160a01b03811661003f5750335b6100495f826100fe565b61008e5760405162461bcd60e51b815260206004820152601160248201527011dc985b9d081c9bdb194819985a5b1959607a1b60448201526064015b60405180910390fd5b6100b87fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775826100fe565b6100f85760405162461bcd60e51b815260206004820152601160248201527011dc985b9d081c9bdb194819985a5b1959607a1b6044820152606401610085565b506101d4565b5f828152602081815260408083206001600160a01b038516845290915281205460ff1661019e575f838152602081815260408083206001600160a01b03861684529091529020805460ff191660011790556101563390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016101a1565b505f5b92915050565b5f602082840312156101b7575f5ffd5b81516001600160a01b03811681146101cd575f5ffd5b9392505050565b610ad5806101e15f395ff3fe608060405234801561000f575f5ffd5b50600436106100c4575f3560e01c80635bb09cf81161007d578063a217fddf11610058578063a217fddf146101fd578063bab867da14610204578063d547741f14610217575f5ffd5b80635bb09cf81461015b57806375b238fc1461019357806391d14854146101ba575f5ffd5b80632f2ff15d116100ad5780632f2ff15d146101205780632fc9fa331461013557806336568abe14610148575f5ffd5b806301ffc9a7146100c8578063248a9ca3146100f0575b5f5ffd5b6100db6100d636600461090d565b61022a565b60405190151581526020015b60405180910390f35b6101126100fe366004610953565b5f9081526020819052604090206001015490565b6040519081526020016100e7565b61013361012e366004610992565b6102c2565b005b6100db610143366004610a01565b6102ec565b610133610156366004610992565b610346565b61016e610169366004610a01565b6103a4565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e7565b6101127fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b6100db6101c8366004610992565b5f9182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b6101125f81565b610133610212366004610a40565b6103e5565b610133610225366004610992565b6106a1565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806102bc57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b5f828152602081905260409020600101546102dc816106c5565b6102e683836106d2565b50505050565b5f5f73ffffffffffffffffffffffffffffffffffffffff1660018484604051610316929190610a90565b9081526040519081900360200190205473ffffffffffffffffffffffffffffffffffffffff161415905092915050565b73ffffffffffffffffffffffffffffffffffffffff81163314610395576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61039f82826107cb565b505050565b5f600183836040516103b7929190610a90565b9081526040519081900360200190205473ffffffffffffffffffffffffffffffffffffffff16905092915050565b61040e7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756106c5565b73ffffffffffffffffffffffffffffffffffffffff811615801590610449575073ffffffffffffffffffffffffffffffffffffffff81163b15155b6104da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f496e76616c696420636f6e7472616374206164647265737320666f722073636860448201527f656d65416464726573730000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff1660018484604051610503929190610a90565b9081526040519081900360200190205473ffffffffffffffffffffffffffffffffffffffff16146105b6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f536368656d6520616c726561647920616464656420666f7220736368656d654960448201527f440000000000000000000000000000000000000000000000000000000000000060648201526084016104d1565b80600184846040516105c9929190610a90565b908152604051908190036020018120805473ffffffffffffffffffffffffffffffffffffffff939093167fffffffffffffffffffffffff00000000000000000000000000000000000000009093169290921790915560019061062e9085908590610a90565b9081526040519081900360200181205473ffffffffffffffffffffffffffffffffffffffff16906106629085908590610a90565b604051908190038120428252907f0a1cd6a1e0a7b200d28ead555f3cee96e0d2def049535fbcfdc2926bc4cec5049060200160405180910390a3505050565b5f828152602081905260409020600101546106bb816106c5565b6102e683836107cb565b6106cf8133610884565b50565b5f8281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915281205460ff166107c4575f8381526020818152604080832073ffffffffffffffffffffffffffffffffffffffff86168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556107623390565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016102bc565b505f6102bc565b5f8281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915281205460ff16156107c4575f8381526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8616808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016102bc565b5f8281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610909576040517fe2517d3f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602481018390526044016104d1565b5050565b5f6020828403121561091d575f5ffd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461094c575f5ffd5b9392505050565b5f60208284031215610963575f5ffd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461098d575f5ffd5b919050565b5f5f604083850312156109a3575f5ffd5b823591506109b36020840161096a565b90509250929050565b5f5f83601f8401126109cc575f5ffd5b50813567ffffffffffffffff8111156109e3575f5ffd5b6020830191508360208285010111156109fa575f5ffd5b9250929050565b5f5f60208385031215610a12575f5ffd5b823567ffffffffffffffff811115610a28575f5ffd5b610a34858286016109bc565b90969095509350505050565b5f5f5f60408486031215610a52575f5ffd5b833567ffffffffffffffff811115610a68575f5ffd5b610a74868287016109bc565b9094509250610a8790506020850161096a565b90509250925092565b818382375f910190815291905056fea2646970667358221220494820d46e1f78bcf8e52638cf1f300983bdb28b1178bafc45528216306e873064736f6c634300081c0033";
var isSuperArgs28 = (xs) => xs.length > 1;
var SignatureSchemeAddressProvider__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs28(args)) {
      super(...args);
    } else {
      super(_abi67, _bytecode28, args[0]);
    }
  }
  getDeployTransaction(owner, overrides) {
    return super.getDeployTransaction(owner, overrides || {});
  }
  deploy(owner, overrides) {
    return super.deploy(owner, overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi67);
  }
  static connect(address, runner) {
    return new Contract(
      address,
      _abi67,
      runner
    );
  }
};
SignatureSchemeAddressProvider__factory.bytecode = _bytecode28;
SignatureSchemeAddressProvider__factory.abi = _abi67;

// src/generated/factories/SignatureSchemeBase__factory.ts
var _abi68 = [
  {
    type: "function",
    name: "DST",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "SCHEME_ID",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getChainId",
    inputs: [],
    outputs: [
      {
        name: "chainId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getPublicKey",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256[2]",
        internalType: "uint256[2]"
      },
      {
        name: "",
        type: "uint256[2]",
        internalType: "uint256[2]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getPublicKeyBytes",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "hashToBytes",
    inputs: [
      {
        name: "message",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "hashToPoint",
    inputs: [
      {
        name: "message",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "verifySignature",
    inputs: [
      {
        name: "message",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "signature",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "publicKey",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "isValid",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  }
];
var SignatureSchemeBase__factory = class {
  static createInterface() {
    return new Interface(_abi68);
  }
  static connect(address, runner) {
    return new Contract(
      address,
      _abi68,
      runner
    );
  }
};
SignatureSchemeBase__factory.abi = _abi68;

// src/generated/factories/SignatureSender__factory.ts
var _abi69 = [
  {
    type: "constructor",
    inputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "ADMIN_ROLE",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "DEFAULT_ADMIN_ROLE",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "UPGRADE_INTERFACE_VERSION",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "fulfillSignatureRequest",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "signature",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "getAllErroredRequestIds",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getAllFulfilledRequestIds",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getAllUnfulfilledRequestIds",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getCountOfUnfulfilledRequestIds",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getRequest",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct TypesLib.SignatureRequest",
        components: [
          {
            name: "message",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "messageHash",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "condition",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "schemeID",
            type: "string",
            internalType: "string"
          },
          {
            name: "callback",
            type: "address",
            internalType: "address"
          },
          {
            name: "signature",
            type: "bytes",
            internalType: "bytes"
          },
          {
            name: "isFulfilled",
            type: "bool",
            internalType: "bool"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getRoleAdmin",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getRoleMember",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "index",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getRoleMemberCount",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getRoleMembers",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "grantRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "hasErrored",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "hasRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "initialize",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address"
      },
      {
        name: "_signatureSchemeAddressProvider",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "isInFlight",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "lastRequestID",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "multicall",
    inputs: [
      {
        name: "data",
        type: "bytes[]",
        internalType: "bytes[]"
      }
    ],
    outputs: [
      {
        name: "results",
        type: "bytes[]",
        internalType: "bytes[]"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "proxiableUUID",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "renounceRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "callerConfirmation",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "requestSignature",
    inputs: [
      {
        name: "schemeID",
        type: "string",
        internalType: "string"
      },
      {
        name: "message",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "condition",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "requests",
    inputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "message",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "messageHash",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "condition",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "schemeID",
        type: "string",
        internalType: "string"
      },
      {
        name: "callback",
        type: "address",
        internalType: "address"
      },
      {
        name: "signature",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "isFulfilled",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "revokeRole",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "setSignatureSchemeAddressProvider",
    inputs: [
      {
        name: "newSignatureSchemeAddressProvider",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "signatureSchemeAddressProvider",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract ISignatureSchemeAddressProvider"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "supportsInterface",
    inputs: [
      {
        name: "interfaceId",
        type: "bytes4",
        internalType: "bytes4"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "upgradeToAndCall",
    inputs: [
      {
        name: "newImplementation",
        type: "address",
        internalType: "address"
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "version",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint64",
        indexed: false,
        internalType: "uint64"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "RoleAdminChanged",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "previousAdminRole",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "newAdminRole",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "RoleGranted",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "sender",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "RoleRevoked",
    inputs: [
      {
        name: "role",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32"
      },
      {
        name: "account",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "sender",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "SignatureCallbackFailed",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "SignatureRequestFulfilled",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "signature",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "SignatureRequested",
    inputs: [
      {
        name: "requestID",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "callback",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "schemeID",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "message",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      },
      {
        name: "messageHashToSign",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      },
      {
        name: "condition",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      },
      {
        name: "requestedAt",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "SignatureSchemeAddressProviderUpdated",
    inputs: [
      {
        name: "newSignatureSchemeAddressProvider",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "Upgraded",
    inputs: [
      {
        name: "implementation",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "error",
    name: "AccessControlBadConfirmation",
    inputs: []
  },
  {
    type: "error",
    name: "AccessControlUnauthorizedAccount",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      },
      {
        name: "neededRole",
        type: "bytes32",
        internalType: "bytes32"
      }
    ]
  },
  {
    type: "error",
    name: "AddressEmptyCode",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "ERC1967InvalidImplementation",
    inputs: [
      {
        name: "implementation",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "ERC1967NonPayable",
    inputs: []
  },
  {
    type: "error",
    name: "FailedCall",
    inputs: []
  },
  {
    type: "error",
    name: "InvalidInitialization",
    inputs: []
  },
  {
    type: "error",
    name: "NotInitializing",
    inputs: []
  },
  {
    type: "error",
    name: "UUPSUnauthorizedCallContext",
    inputs: []
  },
  {
    type: "error",
    name: "UUPSUnsupportedProxiableUUID",
    inputs: [
      {
        name: "slot",
        type: "bytes32",
        internalType: "bytes32"
      }
    ]
  }
];
var _bytecode29 = "0x60a0604052306080525f8055348015610016575f5ffd5b5061001f610024565b6100d6565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156100745760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146100d35780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b608051613ace6100fc5f395f81816123f50152818161241e015261263d0152613ace5ff3fe6080604052600436106101c5575f3560e01c80639010d07c116100f2578063b094728911610092578063d547741f11610062578063d547741f1461061c578063da8281161461063b578063e63b5d581461065a578063e6b3ca711461066e575f5ffd5b8063b094728914610593578063c58343ef146105b2578063ca15c873146105de578063cd802c91146105fd575f5ffd5b8063a217fddf116100cd578063a217fddf146104e0578063a3246ad3146104f3578063ac9650d81461051f578063ad3cb1cc1461054b575f5ffd5b80639010d07c1461040d57806391d148541461045157806395b8d073146104c1575f5ffd5b80634b96e16611610168578063571d708711610138578063571d7087146103805780636f421ea91461039457806375b238fc146103a857806381d12c58146103db575f5ffd5b80634b96e166146102ea5780634f1ef2861461030b57806352d1902d1461031e57806354fd4d5014610332575f5ffd5b80632f2ff15d116101a35780632f2ff15d1461027957806336568abe1461029857806347c03186146102b7578063485cc955146102cb575f5ffd5b806301ffc9a7146101c957806316cc9a98146101fd578063248a9ca31461021e575b5f5ffd5b3480156101d4575f5ffd5b506101e86101e3366004612f81565b61069a565b60405190151581526020015b60405180910390f35b348015610208575f5ffd5b5061021c610217366004612fe1565b6106f5565b005b348015610229575f5ffd5b5061026b610238366004612ffc565b5f9081527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052604090206001015490565b6040519081526020016101f4565b348015610284575f5ffd5b5061021c610293366004613013565b61078c565b3480156102a3575f5ffd5b5061021c6102b2366004613013565b6107d5565b3480156102c2575f5ffd5b5061026b5f5481565b3480156102d6575f5ffd5b5061021c6102e5366004613041565b610833565b3480156102f5575f5ffd5b506102fe610afe565b6040516101f4919061306d565b61021c610319366004613134565b610b0f565b348015610329575f5ffd5b5061026b610b2e565b34801561033d575f5ffd5b5060408051808201909152600581527f302e302e3100000000000000000000000000000000000000000000000000000060208201525b6040516101f491906131ef565b34801561038b575f5ffd5b506102fe610b5c565b34801561039f575f5ffd5b506102fe610b68565b3480156103b3575f5ffd5b5061026b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b3480156103e6575f5ffd5b506103fa6103f5366004612ffc565b610b74565b6040516101f49796959493929190613201565b348015610418575f5ffd5b5061042c610427366004613294565b610e6a565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101f4565b34801561045c575f5ffd5b506101e861046b366004613013565b5f9182527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b3480156104cc575f5ffd5b5061026b6104db3660046132f9565b610eaa565b3480156104eb575f5ffd5b5061026b5f81565b3480156104fe575f5ffd5b5061051261050d366004612ffc565b6115af565b6040516101f49190613398565b34801561052a575f5ffd5b5061053e6105393660046133e5565b6115f2565b6040516101f49190613456565b348015610556575f5ffd5b506103736040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b34801561059e575f5ffd5b506101e86105ad366004612ffc565b6116d8565b3480156105bd575f5ffd5b506105d16105cc366004612ffc565b6116e4565b6040516101f491906134d7565b3480156105e9575f5ffd5b5061026b6105f8366004612ffc565b611a5c565b348015610608575f5ffd5b506101e8610617366004612ffc565b611a93565b348015610627575f5ffd5b5061021c610636366004613013565b611ab0565b348015610646575f5ffd5b5061021c6106553660046135a8565b611af3565b348015610665575f5ffd5b5061026b612278565b348015610679575f5ffd5b5060025461042c9073ffffffffffffffffffffffffffffffffffffffff1681565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f0000000000000000000000000000000000000000000000000000000014806106ef57506106ef82612283565b92915050565b61071e7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775612319565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f7724bcb43a09ae6582affdee2f0ace931e26f2ffa8b5c334baf0a39e9dc03426905f90a250565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260409020600101546107c581612319565b6107cf8383612326565b50505050565b73ffffffffffffffffffffffffffffffffffffffff81163314610824576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61082e828261237b565b505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff165f8115801561087d5750825b90505f8267ffffffffffffffff1660011480156108995750303b155b9050811580156108a7575080155b156108de576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000166001178555831561093f5784547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff16680100000000000000001785555b6109476123c7565b61094f6123c7565b6109797fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177588612326565b6109e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4772616e7420726f6c65206661696c656400000000000000000000000000000060448201526064015b60405180910390fd5b6109ee5f88612326565b610a54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4772616e7420726f6c652072657665727473000000000000000000000000000060448201526064016109db565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff88161790558315610af55784547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b6060610b0a60056123d1565b905090565b610b176123dd565b610b20826124e1565b610b2a828261250a565b5050565b5f610b37612625565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b6060610b0a60036123d1565b6060610b0a60076123d1565b60016020525f9081526040902080548190610b8e906135f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610bba906135f0565b8015610c055780601f10610bdc57610100808354040283529160200191610c05565b820191905f5260205f20905b815481529060010190602001808311610be857829003601f168201915b505050505090806001018054610c1a906135f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610c46906135f0565b8015610c915780601f10610c6857610100808354040283529160200191610c91565b820191905f5260205f20905b815481529060010190602001808311610c7457829003601f168201915b505050505090806002018054610ca6906135f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd2906135f0565b8015610d1d5780601f10610cf457610100808354040283529160200191610d1d565b820191905f5260205f20905b815481529060010190602001808311610d0057829003601f168201915b505050505090806003018054610d32906135f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5e906135f0565b8015610da95780601f10610d8057610100808354040283529160200191610da9565b820191905f5260205f20905b815481529060010190602001808311610d8c57829003601f168201915b5050506004840154600585018054949573ffffffffffffffffffffffffffffffffffffffff909216949193509150610de0906135f0565b80601f0160208091040260200160405190810160405280929190818152602001828054610e0c906135f0565b8015610e575780601f10610e2e57610100808354040283529160200191610e57565b820191905f5260205f20905b815481529060010190602001808311610e3a57829003601f168201915b5050506006909301549192505060ff1687565b5f8281527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e82371705932000602081905260408220610ea29084612694565b949350505050565b5f60015f5f828254610ebc919061366e565b90915550506002546040517f2fc9fa3300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690632fc9fa3390610f19908a908a906004016136aa565b602060405180830381865afa158015610f34573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f5891906136bd565b610fbe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5369676e617475726520736368656d65206e6f7420737570706f72746564000060448201526064016109db565b611005600161100087878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525092949392505061269f9050565b611091576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f4d657373616765206661696c6564206c656e67746820626f756e64732063686560448201527f636b00000000000000000000000000000000000000000000000000000000000060648201526084016109db565b6110d75f61100085858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525092949392505061269f9050565b611162576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f436f6e646974696f6e206661696c6564206c656e67746820626f756e6473206360448201527f6865636b0000000000000000000000000000000000000000000000000000000060648201526084016109db565b818015611234576111a784848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061274b92505050565b15611234576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f436f6e646974696f6e2062797465732063616e6e6f7420626520616c6c207a6560448201527f726f73000000000000000000000000000000000000000000000000000000000060648201526084016109db565b6002546040517f5bb09cf80000000000000000000000000000000000000000000000000000000081525f9173ffffffffffffffffffffffffffffffffffffffff1690635bb09cf89061128c908c908c906004016136aa565b602060405180830381865afa1580156112a7573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112cb91906136dc565b6040517feae1e15b00000000000000000000000000000000000000000000000000000000815290915081905f9073ffffffffffffffffffffffffffffffffffffffff83169063eae1e15b90611326908c908c906004016136aa565b5f60405180830381865afa158015611340573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261136791908101906136f7565b604080516101006020601f8d01819004028201810190925260e081018b81529293509182918c908c90819085018382808284375f92019190915250505090825250602080820184905260408051601f8b0183900483028101830182528a8152920191908a908a90819084018382808284375f92019190915250505090825250604080516020601f8f018190048102820181019092528d815291810191908e908e90819084018382808284375f920182905250938552505033602080850191909152604080518083018252848152818601526060909401839052825483526001905250208151819061145890826137b7565b506020820151600182019061146d90826137b7565b506040820151600282019061148290826137b7565b506060820151600382019061149790826137b7565b5060808201516004820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905560a082015160058201906114f790826137b7565b5060c09190910151600690910180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169115159190911790555f5461153f906005906127ae565b503373ffffffffffffffffffffffffffffffffffffffff165f547ff0a5ef4bc87d6534674b1469f4b31d03c6510d0f7ab353f3e53f9d1d87ead02b8d8d8d8d878e8e426040516115969897969594939291906138b0565b60405180910390a350505f549998505050505050505050565b5f8181527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e8237170593200060208190526040909120606091906115eb906123d1565b9392505050565b604080515f8152602081019091526060908267ffffffffffffffff81111561161c5761161c6130af565b60405190808252806020026020018201604052801561164f57816020015b606081526020019060019003908161163a5790505b5091505f5b838110156116d0576116ab3086868481811061167257611672613928565b90506020028101906116849190613955565b85604051602001611697939291906139cd565b6040516020818303038152906040526127b9565b8382815181106116bd576116bd613928565b6020908102919091010152600101611654565b505092915050565b5f6106ef60078361282f565b61173a6040518060e00160405280606081526020016060815260200160608152602001606081526020015f73ffffffffffffffffffffffffffffffffffffffff168152602001606081526020015f151581525090565b5f8281526001602052604090819020815160e08101909252805482908290611761906135f0565b80601f016020809104026020016040519081016040528092919081815260200182805461178d906135f0565b80156117d85780601f106117af576101008083540402835291602001916117d8565b820191905f5260205f20905b8154815290600101906020018083116117bb57829003601f168201915b505050505081526020016001820180546117f1906135f0565b80601f016020809104026020016040519081016040528092919081815260200182805461181d906135f0565b80156118685780601f1061183f57610100808354040283529160200191611868565b820191905f5260205f20905b81548152906001019060200180831161184b57829003601f168201915b50505050508152602001600282018054611881906135f0565b80601f01602080910402602001604051908101604052809291908181526020018280546118ad906135f0565b80156118f85780601f106118cf576101008083540402835291602001916118f8565b820191905f5260205f20905b8154815290600101906020018083116118db57829003601f168201915b50505050508152602001600382018054611911906135f0565b80601f016020809104026020016040519081016040528092919081815260200182805461193d906135f0565b80156119885780601f1061195f57610100808354040283529160200191611988565b820191905f5260205f20905b81548152906001019060200180831161196b57829003601f168201915b5050509183525050600482015473ffffffffffffffffffffffffffffffffffffffff1660208201526005820180546040909201916119c5906135f0565b80601f01602080910402602001604051908101604052809291908181526020018280546119f1906135f0565b8015611a3c5780601f10611a1357610100808354040283529160200191611a3c565b820191905f5260205f20905b815481529060010190602001808311611a1f57829003601f168201915b50505091835250506006919091015460ff16151560209091015292915050565b5f8181527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e823717059320006020819052604082206115eb90612846565b5f611a9f60058361282f565b806106ef57506106ef60078361282f565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526040902060010154611ae981612319565b6107cf838361237b565b611afc83611a93565b611b88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f4e6f20726571756573742077697468207370656369666965642072657175657360448201527f744944000000000000000000000000000000000000000000000000000000000060648201526084016109db565b5f83815260016020526040808220815160e08101909252805482908290611bae906135f0565b80601f0160208091040260200160405190810160405280929190818152602001828054611bda906135f0565b8015611c255780601f10611bfc57610100808354040283529160200191611c25565b820191905f5260205f20905b815481529060010190602001808311611c0857829003601f168201915b50505050508152602001600182018054611c3e906135f0565b80601f0160208091040260200160405190810160405280929190818152602001828054611c6a906135f0565b8015611cb55780601f10611c8c57610100808354040283529160200191611cb5565b820191905f5260205f20905b815481529060010190602001808311611c9857829003601f168201915b50505050508152602001600282018054611cce906135f0565b80601f0160208091040260200160405190810160405280929190818152602001828054611cfa906135f0565b8015611d455780601f10611d1c57610100808354040283529160200191611d45565b820191905f5260205f20905b815481529060010190602001808311611d2857829003601f168201915b50505050508152602001600382018054611d5e906135f0565b80601f0160208091040260200160405190810160405280929190818152602001828054611d8a906135f0565b8015611dd55780601f10611dac57610100808354040283529160200191611dd5565b820191905f5260205f20905b815481529060010190602001808311611db857829003601f168201915b5050509183525050600482015473ffffffffffffffffffffffffffffffffffffffff166020820152600582018054604090920191611e12906135f0565b80601f0160208091040260200160405190810160405280929190818152602001828054611e3e906135f0565b8015611e895780601f10611e6057610100808354040283529160200191611e89565b820191905f5260205f20905b815481529060010190602001808311611e6c57829003601f168201915b50505091835250506006919091015460ff16151560209091015260608101516002546040517f5bb09cf800000000000000000000000000000000000000000000000000000000815292935090915f9173ffffffffffffffffffffffffffffffffffffffff1690635bb09cf890611f039085906004016131ef565b602060405180830381865afa158015611f1e573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f4291906136dc565b90505f8190508073ffffffffffffffffffffffffffffffffffffffff1663f6e548e9856020015188888573ffffffffffffffffffffffffffffffffffffffff1663acae9fee6040518163ffffffff1660e01b81526004015f60405180830381865afa158015611fb3573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052611fda91908101906136f7565b6040518563ffffffff1660e01b8152600401611ff994939291906139ec565b602060405180830381865afa158015612014573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061203891906136bd565b61209e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f5369676e617475726520766572696669636174696f6e206661696c656400000060448201526064016109db565b5f846080015173ffffffffffffffffffffffffffffffffffffffff1663c8db658260e01b8989896040516024016120d793929190613a30565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516121429190613a49565b5f604051808303815f865af19150503d805f811461217b576040519150601f19603f3d011682016040523d82523d5f602084013e612180565b606091505b50505f89815260016020819052604090912060060180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016909117905590506121cb60058961284f565b508061220c576121dc6007896127ae565b5060405188907fb447474448cd6fcec713160a7af96335b628994d6abcc074f215b856ccde3167905f90a261226e565b612215886116d8565b156122275761222560078961284f565b505b6122326003896127ae565b50877f9a03aa0053cbc9522f2f584b8e74ba5478cadd5f83b136eaf2d4338795b3695588886040516122659291906136aa565b60405180910390a25b5050505050505050565b5f610b0a6005612846565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806106ef57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146106ef565b612323813361285a565b50565b5f7fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e82371705932000816123538585612900565b90508015610ea2575f8581526020839052604090206123729085612a1e565b50949350505050565b5f7fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e82371705932000816123a88585612a3f565b90508015610ea2575f8581526020839052604090206123729085612b1b565b6123cf612b3c565b565b60605f6115eb83612ba3565b3073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614806124aa57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166124917f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614155b156123cf576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6123237fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775612319565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612571575060408051601f3d908101601f1916820190925261256e91810190613a54565b60015b6125bf576040517f4c9c8ce300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff831660048201526024016109db565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc811461261b576040517faa1d49a4000000000000000000000000000000000000000000000000000000008152600481018290526024016109db565b61082e8383612bfc565b3073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146123cf576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6115eb8383612c5e565b5f81831115612730576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f496e76616c696420626f756e64733a206d696e4c656e6774682063616e6e6f7460448201527f2062652067726561746572207468616e206d61784c656e67746800000000000060648201526084016109db565b83518381108015906127425750828111155b95945050505050565b5f805b82518110156127a55782818151811061276957612769613928565b01602001517fff00000000000000000000000000000000000000000000000000000000000000161561279d57505f92915050565b60010161274e565b50600192915050565b5f6115eb8383612c84565b60605f5f8473ffffffffffffffffffffffffffffffffffffffff16846040516127e29190613a49565b5f60405180830381855af49150503d805f811461281a576040519150601f19603f3d011682016040523d82523d5f602084013e61281f565b606091505b5091509150612742858383612cd0565b5f81815260018301602052604081205415156115eb565b5f6106ef825490565b5f6115eb8383612d5f565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610b2a576040517fe2517d3f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602481018390526044016109db565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020818152604080842073ffffffffffffffffffffffffffffffffffffffff8616855290915282205460ff16612a15575f8481526020828152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556129b13390565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019150506106ef565b5f9150506106ef565b5f6115eb8373ffffffffffffffffffffffffffffffffffffffff8416612c84565b5f8281527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020818152604080842073ffffffffffffffffffffffffffffffffffffffff8616855290915282205460ff1615612a15575f8481526020828152604080832073ffffffffffffffffffffffffffffffffffffffff8716808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339287917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a460019150506106ef565b5f6115eb8373ffffffffffffffffffffffffffffffffffffffff8416612d5f565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005468010000000000000000900460ff166123cf576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6060815f01805480602002602001604051908101604052809291908181526020018280548015612bf057602002820191905f5260205f20905b815481526020019060010190808311612bdc575b50505050509050919050565b612c0582612e39565b60405173ffffffffffffffffffffffffffffffffffffffff8316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a2805115612c565761082e82826127b9565b610b2a612f07565b5f825f018281548110612c7357612c73613928565b905f5260205f200154905092915050565b5f818152600183016020526040812054612cc957508154600181810184555f8481526020808220909301849055845484825282860190935260409020919091556106ef565b505f6106ef565b606082612ce557612ce082612f3f565b6115eb565b8151158015612d09575073ffffffffffffffffffffffffffffffffffffffff84163b155b15612d58576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851660048201526024016109db565b50806115eb565b5f8181526001830160205260408120548015612a15575f612d81600183613915565b85549091505f90612d9490600190613915565b9050808214612df3575f865f018281548110612db257612db2613928565b905f5260205f200154905080875f018481548110612dd257612dd2613928565b5f918252602080832090910192909255918252600188019052604090208390555b8554869080612e0457612e04613a6b565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f9055600193505050506106ef565b8073ffffffffffffffffffffffffffffffffffffffff163b5f03612ea1576040517f4c9c8ce300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016109db565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b34156123cf576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805115612f4f5780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60208284031215612f91575f5ffd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146115eb575f5ffd5b73ffffffffffffffffffffffffffffffffffffffff81168114612323575f5ffd5b5f60208284031215612ff1575f5ffd5b81356115eb81612fc0565b5f6020828403121561300c575f5ffd5b5035919050565b5f5f60408385031215613024575f5ffd5b82359150602083013561303681612fc0565b809150509250929050565b5f5f60408385031215613052575f5ffd5b823561305d81612fc0565b9150602083013561303681612fc0565b602080825282518282018190525f918401906040840190835b818110156130a4578351835260209384019390920191600101613086565b509095945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613105576131056130af565b604052919050565b5f67ffffffffffffffff821115613126576131266130af565b50601f01601f191660200190565b5f5f60408385031215613145575f5ffd5b823561315081612fc0565b9150602083013567ffffffffffffffff81111561316b575f5ffd5b8301601f8101851361317b575f5ffd5b803561318e6131898261310d565b6130dc565b8181528660208385010111156131a2575f5ffd5b816020840160208301375f602083830101528093505050509250929050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f6115eb60208301846131c1565b60e081525f61321360e083018a6131c1565b8281036020840152613225818a6131c1565b9050828103604084015261323981896131c1565b9050828103606084015261324d81886131c1565b905073ffffffffffffffffffffffffffffffffffffffff8616608084015282810360a084015261327d81866131c1565b91505082151560c083015298975050505050505050565b5f5f604083850312156132a5575f5ffd5b50508035926020909101359150565b5f5f83601f8401126132c4575f5ffd5b50813567ffffffffffffffff8111156132db575f5ffd5b6020830191508360208285010111156132f2575f5ffd5b9250929050565b5f5f5f5f5f5f6060878903121561330e575f5ffd5b863567ffffffffffffffff811115613324575f5ffd5b61333089828a016132b4565b909750955050602087013567ffffffffffffffff81111561334f575f5ffd5b61335b89828a016132b4565b909550935050604087013567ffffffffffffffff81111561337a575f5ffd5b61338689828a016132b4565b979a9699509497509295939492505050565b602080825282518282018190525f918401906040840190835b818110156130a457835173ffffffffffffffffffffffffffffffffffffffff168352602093840193909201916001016133b1565b5f5f602083850312156133f6575f5ffd5b823567ffffffffffffffff81111561340c575f5ffd5b8301601f8101851361341c575f5ffd5b803567ffffffffffffffff811115613432575f5ffd5b8560208260051b8401011115613446575f5ffd5b6020919091019590945092505050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b828110156134cb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08786030184526134b68583516131c1565b9450602093840193919091019060010161347c565b50929695505050505050565b602081525f825160e060208401526134f36101008401826131c1565b90506020840151601f1984830301604085015261351082826131c1565b9150506040840151601f1984830301606085015261352e82826131c1565b9150506060840151601f1984830301608085015261354c82826131c1565b91505073ffffffffffffffffffffffffffffffffffffffff60808501511660a084015260a0840151601f198483030160c085015261358a82826131c1565b91505060c08401516135a060e085018215159052565b509392505050565b5f5f5f604084860312156135ba575f5ffd5b83359250602084013567ffffffffffffffff8111156135d7575f5ffd5b6135e3868287016132b4565b9497909650939450505050565b600181811c9082168061360457607f821691505b60208210810361363b577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b808201808211156106ef576106ef613641565b81835281816020850137505f602082840101525f6020601f19601f840116840101905092915050565b602081525f610ea2602083018486613681565b5f602082840312156136cd575f5ffd5b815180151581146115eb575f5ffd5b5f602082840312156136ec575f5ffd5b81516115eb81612fc0565b5f60208284031215613707575f5ffd5b815167ffffffffffffffff81111561371d575f5ffd5b8201601f8101841361372d575f5ffd5b805161373b6131898261310d565b81815285602083850101111561374f575f5ffd5b8160208401602083015e5f91810160200191909152949350505050565b601f82111561082e57805f5260205f20601f840160051c810160208510156137915750805b601f840160051c820191505b818110156137b0575f815560010161379d565b5050505050565b815167ffffffffffffffff8111156137d1576137d16130af565b6137e5816137df84546135f0565b8461376c565b6020601f821160018114613836575f83156138005750848201515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600385901b1c1916600184901b1784556137b0565b5f84815260208120601f198516915b828110156138655787850151825560209485019460019092019101613845565b50848210156138a157868401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b60f8161c191681555b50505050600190811b01905550565b60a081525f6138c360a083018a8c613681565b82810360208401526138d681898b613681565b905082810360408401526138ea81886131c1565b905082810360608401526138ff818688613681565b9150508260808301529998505050505050505050565b818103818111156106ef576106ef613641565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f5f83357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613988575f5ffd5b83018035915067ffffffffffffffff8211156139a2575f5ffd5b6020019150368190038213156132f2575f5ffd5b5f81518060208401855e5f93019283525090919050565b828482375f8382015f81526139e281856139b6565b9695505050505050565b606081525f6139fe60608301876131c1565b8281036020840152613a11818688613681565b90508281036040840152613a2581856131c1565b979650505050505050565b838152604060208201525f612742604083018486613681565b5f6115eb82846139b6565b5f60208284031215613a64575f5ffd5b5051919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffdfea2646970667358221220b7e5c8f9420b08d55db7dda8c9d5fee88d48d70e540731a5bcc902d4bbc3955b64736f6c634300081c0033";
var isSuperArgs29 = (xs) => xs.length > 1;
var SignatureSender__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs29(args)) {
      super(...args);
    } else {
      super(_abi69, _bytecode29, args[0]);
    }
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi69);
  }
  static connect(address, runner) {
    return new Contract(address, _abi69, runner);
  }
};
SignatureSender__factory.bytecode = _bytecode29;
SignatureSender__factory.abi = _abi69;

// src/generated/factories/StdAssertions__factory.ts
var _abi70 = [
  {
    type: "function",
    name: "failed",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "event",
    name: "log",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_address",
    inputs: [
      {
        name: "",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_bytes",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_bytes32",
    inputs: [
      {
        name: "",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_int",
    inputs: [
      {
        name: "",
        type: "int256",
        indexed: false,
        internalType: "int256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_address",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_bytes",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_bytes32",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_decimal_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_decimal_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_string",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_string",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_uint",
    inputs: [
      {
        name: "",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "logs",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  }
];
var StdAssertions__factory = class {
  static createInterface() {
    return new Interface(_abi70);
  }
  static connect(address, runner) {
    return new Contract(address, _abi70, runner);
  }
};
StdAssertions__factory.abi = _abi70;

// src/generated/factories/StdInvariant__factory.ts
var _abi71 = [
  {
    type: "function",
    name: "excludeArtifacts",
    inputs: [],
    outputs: [
      {
        name: "excludedArtifacts_",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeContracts",
    inputs: [],
    outputs: [
      {
        name: "excludedContracts_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeSelectors",
    inputs: [],
    outputs: [
      {
        name: "excludedSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeSenders",
    inputs: [],
    outputs: [
      {
        name: "excludedSenders_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetArtifactSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifactSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzArtifactSelector[]",
        components: [
          {
            name: "artifact",
            type: "string",
            internalType: "string"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetArtifacts",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifacts_",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetContracts",
    inputs: [],
    outputs: [
      {
        name: "targetedContracts_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetInterfaces",
    inputs: [],
    outputs: [
      {
        name: "targetedInterfaces_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzInterface[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "artifacts",
            type: "string[]",
            internalType: "string[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetSenders",
    inputs: [],
    outputs: [
      {
        name: "targetedSenders_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  }
];
var StdInvariant__factory = class {
  static createInterface() {
    return new Interface(_abi71);
  }
  static connect(address, runner) {
    return new Contract(address, _abi71, runner);
  }
};
StdInvariant__factory.abi = _abi71;

// src/generated/factories/SubscriptionAPI__factory.ts
var _abi72 = [
  {
    type: "function",
    name: "MAX_CONSUMERS",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint16",
        internalType: "uint16"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "acceptSubscriptionOwnerTransfer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "addConsumer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "consumer",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "cancelSubscription",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "to",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "createSubscription",
    inputs: [],
    outputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "fundSubscriptionWithNative",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "getActiveSubscriptionIds",
    inputs: [
      {
        name: "startIndex",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "maxCount",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "ids",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getSubscription",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "nativeBalance",
        type: "uint96",
        internalType: "uint96"
      },
      {
        name: "reqCount",
        type: "uint64",
        internalType: "uint64"
      },
      {
        name: "subOwner",
        type: "address",
        internalType: "address"
      },
      {
        name: "consumers",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "pendingRequestExists",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "removeConsumer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "consumer",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "requestSubscriptionOwnerTransfer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "newOwner",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "s_config",
    inputs: [],
    outputs: [
      {
        name: "maxGasLimit",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "gasAfterPaymentCalculation",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "fulfillmentFlatFeeNativePPM",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "weiPerUnitGas",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "blsPairingCheckOverhead",
        type: "uint32",
        internalType: "uint32"
      },
      {
        name: "nativePremiumPercentage",
        type: "uint8",
        internalType: "uint8"
      },
      {
        name: "gasForCallExactCheck",
        type: "uint32",
        internalType: "uint32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "s_currentSubNonce",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "s_totalNativeBalance",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint96",
        internalType: "uint96"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "s_withdrawableDirectFundingFeeNative",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint96",
        internalType: "uint96"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "s_withdrawableSubscriptionFeeNative",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint96",
        internalType: "uint96"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "event",
    name: "SubscriptionCanceled",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "to",
        type: "address",
        indexed: false,
        internalType: "address"
      },
      {
        name: "amountNative",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "SubscriptionConsumerAdded",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "consumer",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "SubscriptionConsumerRemoved",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "consumer",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "SubscriptionCreated",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "owner",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "SubscriptionFundedWithNative",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "oldNativeBalance",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      },
      {
        name: "newNativeBalance",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "SubscriptionOwnerTransferRequested",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "from",
        type: "address",
        indexed: false,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "SubscriptionOwnerTransferred",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      },
      {
        name: "from",
        type: "address",
        indexed: false,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "error",
    name: "BalanceInvariantViolated",
    inputs: [
      {
        name: "internalBalance",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "externalBalance",
        type: "uint256",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "error",
    name: "FailedToSendNative",
    inputs: []
  },
  {
    type: "error",
    name: "IndexOutOfRange",
    inputs: []
  },
  {
    type: "error",
    name: "InsufficientBalance",
    inputs: []
  },
  {
    type: "error",
    name: "InvalidCalldata",
    inputs: []
  },
  {
    type: "error",
    name: "InvalidConsumer",
    inputs: [
      {
        name: "subId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "consumer",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "InvalidSubscription",
    inputs: []
  },
  {
    type: "error",
    name: "MustBeRequestedOwner",
    inputs: [
      {
        name: "proposedOwner",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "MustBeSubOwner",
    inputs: [
      {
        name: "owner",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "PendingRequestExists",
    inputs: []
  },
  {
    type: "error",
    name: "ReentrancyGuardReentrantCall",
    inputs: []
  },
  {
    type: "error",
    name: "TooManyConsumers",
    inputs: []
  }
];
var SubscriptionAPI__factory = class {
  static createInterface() {
    return new Interface(_abi72);
  }
  static connect(address, runner) {
    return new Contract(address, _abi72, runner);
  }
};
SubscriptionAPI__factory.abi = _abi72;

// src/generated/factories/Test__factory.ts
var _abi73 = [
  {
    type: "function",
    name: "IS_TEST",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeArtifacts",
    inputs: [],
    outputs: [
      {
        name: "excludedArtifacts_",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeContracts",
    inputs: [],
    outputs: [
      {
        name: "excludedContracts_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeSelectors",
    inputs: [],
    outputs: [
      {
        name: "excludedSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "excludeSenders",
    inputs: [],
    outputs: [
      {
        name: "excludedSenders_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "failed",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetArtifactSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifactSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzArtifactSelector[]",
        components: [
          {
            name: "artifact",
            type: "string",
            internalType: "string"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetArtifacts",
    inputs: [],
    outputs: [
      {
        name: "targetedArtifacts_",
        type: "string[]",
        internalType: "string[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetContracts",
    inputs: [],
    outputs: [
      {
        name: "targetedContracts_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetInterfaces",
    inputs: [],
    outputs: [
      {
        name: "targetedInterfaces_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzInterface[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "artifacts",
            type: "string[]",
            internalType: "string[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetSelectors",
    inputs: [],
    outputs: [
      {
        name: "targetedSelectors_",
        type: "tuple[]",
        internalType: "struct StdInvariant.FuzzSelector[]",
        components: [
          {
            name: "addr",
            type: "address",
            internalType: "address"
          },
          {
            name: "selectors",
            type: "bytes4[]",
            internalType: "bytes4[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "targetSenders",
    inputs: [],
    outputs: [
      {
        name: "targetedSenders_",
        type: "address[]",
        internalType: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "event",
    name: "log",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_address",
    inputs: [
      {
        name: "",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_array",
    inputs: [
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_bytes",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_bytes32",
    inputs: [
      {
        name: "",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_int",
    inputs: [
      {
        name: "",
        type: "int256",
        indexed: false,
        internalType: "int256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_address",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256[]",
        indexed: false,
        internalType: "int256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_array",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "address[]",
        indexed: false,
        internalType: "address[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_bytes",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_bytes32",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_decimal_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256"
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_decimal_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      },
      {
        name: "decimals",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_int",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "int256",
        indexed: false,
        internalType: "int256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_string",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_named_uint",
    inputs: [
      {
        name: "key",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "val",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_string",
    inputs: [
      {
        name: "",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "log_uint",
    inputs: [
      {
        name: "",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "logs",
    inputs: [
      {
        name: "",
        type: "bytes",
        indexed: false,
        internalType: "bytes"
      }
    ],
    anonymous: false
  }
];
var Test__factory = class {
  static createInterface() {
    return new Interface(_abi73);
  }
  static connect(address, runner) {
    return new Contract(address, _abi73, runner);
  }
};
Test__factory.abi = _abi73;

// src/generated/factories/UUPSProxy__factory.ts
var _abi74 = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_implementation",
        type: "address",
        internalType: "address"
      },
      {
        name: "_data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "fallback",
    stateMutability: "payable"
  },
  {
    type: "function",
    name: "getImplementation",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "event",
    name: "Upgraded",
    inputs: [
      {
        name: "implementation",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "error",
    name: "AddressEmptyCode",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "ERC1967InvalidImplementation",
    inputs: [
      {
        name: "implementation",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "ERC1967NonPayable",
    inputs: []
  },
  {
    type: "error",
    name: "FailedCall",
    inputs: []
  }
];
var _bytecode30 = "0x608060405234801561000f575f5ffd5b5060405161044638038061044683398101604081905261002e9161024c565b818161003a8282610043565b50505050610331565b61004c826100a1565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a280511561009557610090828261011c565b505050565b61009d61018f565b5050565b806001600160a01b03163b5f036100db57604051634c9c8ce360e01b81526001600160a01b03821660048201526024015b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b60605f5f846001600160a01b031684604051610138919061031b565b5f60405180830381855af49150503d805f8114610170576040519150601f19603f3d011682016040523d82523d5f602084013e610175565b606091505b5090925090506101868583836101b0565b95945050505050565b34156101ae5760405163b398979f60e01b815260040160405180910390fd5b565b6060826101c5576101c08261020f565b610208565b81511580156101dc57506001600160a01b0384163b155b1561020557604051639996b31560e01b81526001600160a01b03851660048201526024016100d2565b50805b9392505050565b80511561021f5780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b634e487b7160e01b5f52604160045260245ffd5b5f5f6040838503121561025d575f5ffd5b82516001600160a01b0381168114610273575f5ffd5b60208401519092506001600160401b0381111561028e575f5ffd5b8301601f8101851361029e575f5ffd5b80516001600160401b038111156102b7576102b7610238565b604051601f8201601f19908116603f011681016001600160401b03811182821017156102e5576102e5610238565b6040528181528282016020018710156102fc575f5ffd5b8160208401602083015e5f602083830101528093505050509250929050565b5f82518060208501845e5f920191825250919050565b6101088061033e5f395ff3fe608060405260043610601b575f3560e01c8063aaf10f42146023575b6021605d565b005b348015602d575f5ffd5b506034606b565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b606960656077565b60b5565b565b5f60726077565b905090565b5f60727f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b365f5f375f5f365f845af43d5f5f3e80801560ce573d5ff35b3d5ffdfea2646970667358221220a2794c0267cf527d31047d962f7ac722795c9e78659f2050eab808c7bd3b060064736f6c634300081c0033";
var isSuperArgs30 = (xs) => xs.length > 1;
var UUPSProxy__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs30(args)) {
      super(...args);
    } else {
      super(_abi74, _bytecode30, args[0]);
    }
  }
  getDeployTransaction(_implementation, _data5, overrides) {
    return super.getDeployTransaction(_implementation, _data5, overrides || {});
  }
  deploy(_implementation, _data5, overrides) {
    return super.deploy(_implementation, _data5, overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi74);
  }
  static connect(address, runner) {
    return new Contract(address, _abi74, runner);
  }
};
UUPSProxy__factory.bytecode = _bytecode30;
UUPSProxy__factory.abi = _abi74;

// src/generated/factories/UUPSUpgradeable__factory.ts
var _abi75 = [
  {
    type: "function",
    name: "UPGRADE_INTERFACE_VERSION",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "proxiableUUID",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "upgradeToAndCall",
    inputs: [
      {
        name: "newImplementation",
        type: "address",
        internalType: "address"
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "event",
    name: "Initialized",
    inputs: [
      {
        name: "version",
        type: "uint64",
        indexed: false,
        internalType: "uint64"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "Upgraded",
    inputs: [
      {
        name: "implementation",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "error",
    name: "AddressEmptyCode",
    inputs: [
      {
        name: "target",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "ERC1967InvalidImplementation",
    inputs: [
      {
        name: "implementation",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "ERC1967NonPayable",
    inputs: []
  },
  {
    type: "error",
    name: "FailedCall",
    inputs: []
  },
  {
    type: "error",
    name: "InvalidInitialization",
    inputs: []
  },
  {
    type: "error",
    name: "NotInitializing",
    inputs: []
  },
  {
    type: "error",
    name: "UUPSUnauthorizedCallContext",
    inputs: []
  },
  {
    type: "error",
    name: "UUPSUnsupportedProxiableUUID",
    inputs: [
      {
        name: "slot",
        type: "bytes32",
        internalType: "bytes32"
      }
    ]
  }
];
var UUPSUpgradeable__factory = class {
  static createInterface() {
    return new Interface(_abi75);
  }
  static connect(address, runner) {
    return new Contract(address, _abi75, runner);
  }
};
UUPSUpgradeable__factory.abi = _abi75;

// src/generated/factories/VRFConsumerBaseV2Plus__factory.ts
var _abi76 = [
  {
    type: "function",
    name: "acceptOwnership",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "owner",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "rawFulfillRandomWords",
    inputs: [
      {
        name: "requestId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "randomWords",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "s_vrfCoordinator",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IVRFCoordinatorV2Plus"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "setCoordinator",
    inputs: [
      {
        name: "_vrfCoordinator",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "transferOwnership",
    inputs: [
      {
        name: "to",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "event",
    name: "CoordinatorSet",
    inputs: [
      {
        name: "vrfCoordinator",
        type: "address",
        indexed: false,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "OwnershipTransferRequested",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "OwnershipTransferred",
    inputs: [
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "error",
    name: "OnlyCoordinatorCanFulfill",
    inputs: [
      {
        name: "have",
        type: "address",
        internalType: "address"
      },
      {
        name: "want",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "OnlyOwnerOrCoordinator",
    inputs: [
      {
        name: "have",
        type: "address",
        internalType: "address"
      },
      {
        name: "owner",
        type: "address",
        internalType: "address"
      },
      {
        name: "coordinator",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "ZeroAddress",
    inputs: []
  }
];
var VRFConsumerBaseV2Plus__factory = class {
  static createInterface() {
    return new Interface(_abi76);
  }
  static connect(address, runner) {
    return new Contract(
      address,
      _abi76,
      runner
    );
  }
};
VRFConsumerBaseV2Plus__factory.abi = _abi76;

// src/generated/factories/VRFV2PlusClient__factory.ts
var _abi77 = [
  {
    type: "function",
    name: "EXTRA_ARGS_V1_TAG",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4"
      }
    ],
    stateMutability: "view"
  }
];
var _bytecode31 = "0x60c76032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106032575f3560e01c8063f7514ab4146036575b5f5ffd5b605c7f92fd13387c7fe7befbc38d303d6468778fb9731bc4583f17d92989c6fcfdeaaa81565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200160405180910390f3fea26469706673582212204085ad05f2580a49039f958b2167e14833249499a087c84973b8501faaf0f24d64736f6c634300081c0033";
var isSuperArgs31 = (xs) => xs.length > 1;
var VRFV2PlusClient__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs31(args)) {
      super(...args);
    } else {
      super(_abi77, _bytecode31, args[0]);
    }
  }
  getDeployTransaction(overrides) {
    return super.getDeployTransaction(overrides || {});
  }
  deploy(overrides) {
    return super.deploy(overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi77);
  }
  static connect(address, runner) {
    return new Contract(address, _abi77, runner);
  }
};
VRFV2PlusClient__factory.bytecode = _bytecode31;
VRFV2PlusClient__factory.abi = _abi77;

// src/generated/factories/VRFV2PlusWrapperConsumerBase__factory.ts
var _abi78 = [
  {
    type: "function",
    name: "getBalance",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getLinkToken",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract LinkTokenInterface"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "i_vrfV2PlusWrapper",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IVRFV2PlusWrapper"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "rawFulfillRandomWords",
    inputs: [
      {
        name: "_requestId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "_randomWords",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "error",
    name: "OnlyVRFWrapperCanFulfill",
    inputs: [
      {
        name: "have",
        type: "address",
        internalType: "address"
      },
      {
        name: "want",
        type: "address",
        internalType: "address"
      }
    ]
  }
];
var VRFV2PlusWrapperConsumerBase__factory = class {
  static createInterface() {
    return new Interface(_abi78);
  }
  static connect(address, runner) {
    return new Contract(
      address,
      _abi78,
      runner
    );
  }
};
VRFV2PlusWrapperConsumerBase__factory.abi = _abi78;

// src/networks.ts
var import_noble_bn254_drand = __toESM(require_src());
var DCIPHER_PUBLIC_KEY = new import_noble_bn254_drand.bn254.G2.ProjectivePoint(
  {
    c0: 19466273993852079063924474392378816199685375459664529508122564849204533666468n,
    c1: 21131687462638968537850845255670528066014536613738342153553860006061609469324n
  },
  {
    c0: 7578617840607454142936008614752231508238355116367494353476740252708767858492n,
    c1: 5343514427465363660208643216752839104127697387077797304816316938005257664244n
  },
  {
    c0: 1n,
    c1: 0n
  }
);
var FILECOIN_CALIBNET = {
  name: "filecoin_calibnet",
  chainId: 314159n,
  contractAddress: "0x94C5774DEa83a921244BF362a98c12A5aAD18c87",
  dst: "dcipher-randomness-v01-BN254G1_XMD:KECCAK-256_SVDW_RO_0x000000000000000000000000000000000000000000000000000000000004cb2f_",
  gasLimit: 5e6,
  maxFeePerGas: ethers_exports.parseUnits("0.2", "gwei"),
  maxPriorityFeePerGas: ethers_exports.parseUnits("0.2", "gwei"),
  gasBufferPercent: 300n,
  callbackGasLimitDefault: 444000000n,
  gasMultiplierDefault: 50n
};
var FILECOIN_MAINNET = {
  name: "filecoin_mainnet",
  chainId: 314n,
  contractAddress: "0xDD6FdE56432Cd3c868FEC7F1430F741967Fb0de8",
  dst: "dcipher-randomness-v01-BN254G1_XMD:KECCAK-256_SVDW_RO_0x000000000000000000000000000000000000000000000000000000000000013a_",
  gasLimit: 5e6,
  maxFeePerGas: ethers_exports.parseUnits("0.2", "gwei"),
  maxPriorityFeePerGas: ethers_exports.parseUnits("0.2", "gwei"),
  gasBufferPercent: 300n,
  callbackGasLimitDefault: 444000000n,
  gasMultiplierDefault: 50n
};
var BASE_SEPOLIA = {
  name: "base_sepolia",
  chainId: 84532n,
  contractAddress: "0xf4e080Db4765C856c0af43e4A8C4e31aA3b48779",
  dst: "dcipher-randomness-v01-BN254G1_XMD:KECCAK-256_SVDW_RO_0x0000000000000000000000000000000000000000000000000000000000014a34_",
  gasLimit: 1e5,
  maxFeePerGas: ethers_exports.parseUnits("0.2", "gwei"),
  maxPriorityFeePerGas: ethers_exports.parseUnits("0.2", "gwei"),
  gasBufferPercent: 100n,
  callbackGasLimitDefault: 1000000n,
  gasMultiplierDefault: 10n
};
var POLYGON_POS = {
  name: "polygon_pos",
  chainId: 137n,
  contractAddress: "0xf4e080Db4765C856c0af43e4A8C4e31aA3b48779",
  dst: "dcipher-randomness-v01-BN254G1_XMD:KECCAK-256_SVDW_RO_0x0000000000000000000000000000000000000000000000000000000000000089_",
  gasLimit: 1e5,
  maxFeePerGas: ethers_exports.parseUnits("0.2", "gwei"),
  maxPriorityFeePerGas: ethers_exports.parseUnits("0.2", "gwei"),
  gasBufferPercent: 100n,
  callbackGasLimitDefault: 1000000n,
  gasMultiplierDefault: 10n
};
var AVALANCHE_C_CHAIN = {
  name: "avalanche_c_chain",
  chainId: 43114n,
  contractAddress: "0xf4e080Db4765C856c0af43e4A8C4e31aA3b48779",
  dst: "dcipher-randomness-v01-BN254G1_XMD:KECCAK-256_SVDW_RO_0x000000000000000000000000000000000000000000000000000000000000a86a_",
  gasLimit: 1e5,
  maxFeePerGas: ethers_exports.parseUnits("0.2", "gwei"),
  maxPriorityFeePerGas: ethers_exports.parseUnits("0.2", "gwei"),
  gasBufferPercent: 100n,
  callbackGasLimitDefault: 1000000n,
  gasMultiplierDefault: 10n
};
var OPTIMISM_SEPOLIA = {
  name: "optimism_sepolia",
  chainId: 11155420n,
  contractAddress: "0xf4e080Db4765C856c0af43e4A8C4e31aA3b48779",
  dst: "dcipher-randomness-v01-BN254G1_XMD:KECCAK-256_SVDW_RO_0x0000000000000000000000000000000000000000000000000000000000aa37dc_",
  gasLimit: 1e5,
  maxFeePerGas: ethers_exports.parseUnits("0.2", "gwei"),
  maxPriorityFeePerGas: ethers_exports.parseUnits("0.2", "gwei"),
  gasBufferPercent: 100n,
  callbackGasLimitDefault: 1000000n,
  gasMultiplierDefault: 10n
};
var ARBITRUM_SEPOLIA = {
  name: "arbitrum_sepolia",
  chainId: 421614n,
  contractAddress: "0xf4e080Db4765C856c0af43e4A8C4e31aA3b48779",
  dst: "dcipher-randomness-v01-BN254G1_XMD:KECCAK-256_SVDW_RO_0x0000000000000000000000000000000000000000000000000000000000066eee_",
  gasLimit: 1e5,
  maxFeePerGas: ethers_exports.parseUnits("0.2", "gwei"),
  maxPriorityFeePerGas: ethers_exports.parseUnits("0.2", "gwei"),
  gasBufferPercent: 100n,
  callbackGasLimitDefault: 1000000n,
  gasMultiplierDefault: 10n
};
var SEI_TESTNET = {
  name: "sei_testnet",
  chainId: 1328n,
  contractAddress: "0xf4e080Db4765C856c0af43e4A8C4e31aA3b48779",
  dst: "dcipher-randomness-v01-BN254G1_XMD:KECCAK-256_SVDW_RO_0x0000000000000000000000000000000000000000000000000000000000000530_",
  gasLimit: 1e5,
  maxFeePerGas: ethers_exports.parseUnits("0.2", "gwei"),
  maxPriorityFeePerGas: ethers_exports.parseUnits("0.2", "gwei"),
  gasBufferPercent: 100n,
  callbackGasLimitDefault: 1000000n,
  gasMultiplierDefault: 10n
};
var SUPPORTED_TESTNETS = [FILECOIN_CALIBNET, BASE_SEPOLIA, AVALANCHE_C_CHAIN, OPTIMISM_SEPOLIA, ARBITRUM_SEPOLIA, SEI_TESTNET];
var SUPPORTED_MAINNETS = [FILECOIN_MAINNET, POLYGON_POS];
function configForChainId(chainId) {
  chainId = BigInt(chainId);
  for (const chain of [...SUPPORTED_MAINNETS, ...SUPPORTED_TESTNETS]) {
    if (chain.chainId === chainId) {
      return chain;
    }
  }
  throw new Error(`no chain config found for chainId: ${chainId}`);
}

// src/index.ts
var iface = RandomnessSender__factory.createInterface();
var NETWORK_IDS = {
  FILECOIN_MAINNET: 314,
  FILECOIN_TESTNET: 314159
};
var isFilecoin = (networkId) => [NETWORK_IDS.FILECOIN_MAINNET, NETWORK_IDS.FILECOIN_TESTNET].includes(networkId);
var Randomness = class _Randomness {
  constructor(rpc, networkConfig, defaultRequestTimeoutMs = 6e4) {
    this.rpc = rpc;
    this.networkConfig = networkConfig;
    console.log(`created randomness-js client with address ${this.networkConfig.contractAddress}`);
    this.contract = RandomnessSender__factory.connect(this.networkConfig.contractAddress, rpc);
    this.defaultRequestParams = {
      callbackGasLimit: networkConfig.callbackGasLimitDefault,
      timeoutMs: defaultRequestTimeoutMs,
      confirmations: 1,
      pollingIntervalMs: 500
    };
  }
  // you can create a client from the chainID or use the static methods per chain at the bottom
  static createFromChainId(rpc, chainId) {
    return new _Randomness(rpc, configForChainId(chainId));
  }
  async requestRandomness(config = this.defaultRequestParams) {
    if (this.rpc.provider == null) {
      throw Error("RPC requires a provider to request randomness");
    }
    const { callbackGasLimit, timeoutMs } = { ...this.defaultRequestParams, ...config };
    const [network, feeData] = await Promise.all([
      this.rpc.provider.getNetwork(),
      this.rpc.provider.getFeeData()
    ]);
    const chainId = network.chainId;
    const maxFeePerGas = feeData.maxFeePerGas;
    const maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
    const txGasPrice = (maxFeePerGas + maxPriorityFeePerGas) * 10n;
    const requestPrice = await this.contract.estimateRequestPriceNative(
      callbackGasLimit,
      txGasPrice
    );
    const bufferPercent = isFilecoin(Number(chainId)) ? 300n : 50n;
    const valueToSend = requestPrice + requestPrice * bufferPercent / 100n;
    const estimatedGas = await this.contract.requestRandomness.estimateGas(
      callbackGasLimit,
      {
        value: valueToSend,
        gasPrice: txGasPrice
      }
    );
    const tx = await this.contract.requestRandomness(
      callbackGasLimit,
      {
        value: valueToSend,
        gasLimit: estimatedGas,
        gasPrice: txGasPrice
      }
    );
    const receipt = await tx.wait();
    if (!receipt) {
      throw new Error("Transaction was not mined");
    }
    const [requestID] = extractSingleLog(iface, receipt, this.networkConfig.contractAddress, iface.getEvent("RandomnessRequested"));
    const start = Date.now();
    while (Date.now() - start < timeoutMs) {
      const [, , , , , , signature, nonce] = await this.contract.getRequest(requestID);
      if (signature !== "0x") {
        return { requestID, randomness: keccak256(signature), nonce, signature };
      }
      await sleep(config.pollingIntervalMs ?? 500);
    }
    throw new Error("timed out waiting for randomness request");
  }
  async verify(parameters, config = { shouldBlowUp: true }) {
    const { randomness, signature, nonce } = parameters;
    const signatureBytes = getBytes(signature);
    if (!equalBytes2(getBytes(keccak256(signatureBytes)), getBytes(randomness))) {
      throw Error("randomness did not match the signature provided");
    }
    let verifies = false;
    let errorDuringVerification = false;
    try {
      const m = getBytes(keccak256(encodeParams(["uint256"], [nonce])));
      verifies = import_noble_bn254_drand2.bn254.verifyShortSignature(signatureBytes, m, DCIPHER_PUBLIC_KEY, { DST: this.networkConfig.dst });
    } catch (_) {
      errorDuringVerification = true;
    }
    if (verifies) {
      return true;
    }
    if (!config.shouldBlowUp) {
      return false;
    }
    if (!errorDuringVerification) {
      throw Error("signature failed to verify");
    }
    throw Error("error during signature verification: was your signature formatted correctly?");
  }
  /**
   * Calculates the request price for a blocklock request given the callbackGasLimit.
   * @param callbackGasLimit The callbackGasLimit to use when fulfilling the request with a decryption key.
   * @returns The estimated request price and the transaction gas price used
   */
  async calculateRequestPriceNative(callbackGasLimit) {
    if (this.rpc.provider == null) {
      throw Error("RPC requires a provider to request randomness");
    }
    const [network, feeData] = await Promise.all([
      this.rpc.provider.getNetwork(),
      this.rpc.provider.getFeeData()
    ]);
    const chainId = network.chainId;
    const maxFeePerGas = feeData.maxFeePerGas;
    const maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
    const txGasPrice = (maxFeePerGas + maxPriorityFeePerGas) * 10n;
    const requestPrice = await this.contract.estimateRequestPriceNative(
      callbackGasLimit,
      txGasPrice
    );
    const bufferPercent = isFilecoin(Number(chainId)) ? 300n : 100n;
    const valueToSend = requestPrice + requestPrice * bufferPercent / 100n;
    return [valueToSend, txGasPrice];
  }
  static createFilecoinMainnet(rpc) {
    return new _Randomness(rpc, FILECOIN_MAINNET, 9e4);
  }
  static createFilecoinCalibnet(rpc) {
    return new _Randomness(rpc, FILECOIN_CALIBNET, 9e4);
  }
  static createBaseSepolia(rpc) {
    return new _Randomness(rpc, BASE_SEPOLIA);
  }
  static createPolygonPos(rpc) {
    return new _Randomness(rpc, POLYGON_POS);
  }
  static createAvalancheCChain(rpc) {
    return new _Randomness(rpc, AVALANCHE_C_CHAIN);
  }
  static createOptimismSepolia(rpc) {
    return new _Randomness(rpc, OPTIMISM_SEPOLIA);
  }
  static createArbitrumSepolia(rpc) {
    return new _Randomness(rpc, ARBITRUM_SEPOLIA);
  }
  static createSeiTestnet(rpc) {
    return new _Randomness(rpc, SEI_TESTNET);
  }
};
async function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}
export {
  Randomness
};
/*! Bundled license information:

@noble/hashes/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/abstract/utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/abstract/modular.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/abstract/curve.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/abstract/weierstrass.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/abstract/bls.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/abstract/tower.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/hashes/esm/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/modular.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/curve.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/weierstrass.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/_shortw_utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/secp256k1.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

aes-js/lib.esm/aes.js:
  (*! MIT License. Copyright 2015-2022 Richard Moore <me@ricmoo.com>. See LICENSE.txt. *)

@noble/curves/esm/abstract/utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=index.mjs.map
